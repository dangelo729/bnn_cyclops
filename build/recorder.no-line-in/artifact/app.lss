
build/recorder.no-line-in/artifact/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000909c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800933c  0800933c  0002006c  2**0
                  CONTENTS
  3 .exidx        00000000  0800933c  0800933c  0002006c  2**0
                  CONTENTS
  4 .ARM.attributes 00000030  0800933c  0800933c  0002006c  2**0
                  CONTENTS, READONLY
  5 .init_array   0000000c  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000006c  20000000  0800934c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010c10  20000400  080093b8  00020400  2**10
                  ALLOC
  9 .dma          00000048  38000000  38000000  00030000  2**2
                  ALLOC
 10 .heap         00000000  20011010  20011010  0002009c  2**0
                  CONTENTS
 11 .reserved_for_stack 00000000  20011010  20011010  0002009c  2**0
                  CONTENTS
 12 .debug_info   00045820  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c9f  00000000  00000000  000658bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014a2a  00000000  00000000  0006c55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  00080f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007700  00000000  00000000  00081a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000529aa  00000000  00000000  0008910d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024496  00000000  00000000  000dbab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001fde40  00000000  00000000  000fff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  002fdd8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e68  00000000  00000000  002fddd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  00300c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000193  00000000  00000000  00300cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
0800933c l    d  .ARM.extab	00000000 .ARM.extab
0800933c l    d  .exidx	00000000 .exidx
0800933c l    d  .ARM.attributes	00000000 .ARM.attributes
0800933c l    d  .init_array	00000000 .init_array
08009348 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
38000000 l    d  .dma	00000000 .dma
20011010 l    d  .heap	00000000 .heap
20011010 l    d  .reserved_for_stack	00000000 .reserved_for_stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32h750xx.c
00000000 l    df *ABS*	00000000 crtstuff.c
080002a0 l     F .text	00000000 __do_global_dtors_aux
20000400 l       .bss	00000001 completed.1
08009348 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080002c4 l     F .text	00000000 frame_dummy
20000404 l       .bss	00000018 object.0
0800933c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 main.cpp
0800297c l     F .text	000000b4 _GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE
20010a70 l     O .bss	00000004 recorder::StateMachine(bool)::synthReleaseCounter
00000000 l    df *ABS*	00000000 adc.cpp
08008c28 l     O .text	00000040 recorder::kADCRegRank
08008c68 l     O .text	00000020 recorder::kPotChannels
00000000 l    df *ABS*	00000000 analog.cpp
00000000 l    df *ABS*	00000000 dac.cpp
00000000 l    df *ABS*	00000000 irq.cpp
20010c00 l     O .bss	00000298 recorder::irq::RAMVectorTable
00000000 l    df *ABS*	00000000 serial.cpp
00000000 l    df *ABS*	00000000 system.cpp
08003f34 l     F .text	00000024 NVIC_SystemReset
08003f74 l     F .text	000000e0 recorder::system::ConfigureClocks()
0800472c l     F .text	00000014 _GLOBAL__sub_I_TickHandler
20010e9c l     O .bss	00000004 recorder::system::wakeup_flags_
20010ea0 l     O .bss	00000004 recorder::system::ticks_
20010ea4 l     O .bss	00000150 recorder::system::serial_
20010ff4 l     O .bss	00000001 _read::prev_was_cr
20010ff5 l     O .bss	00000001 _write::prev
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
20010ff8 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
0800514c l     F .text	000000f4 RCCEx_PLL2_Config
08005240 l     F .text	000000f4 RCCEx_PLL3_Config
00000000 l    df *ABS*	00000000 stm32h7xx_ll_adc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dac.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dma.c
08008dfc l     O .text	00000008 LL_DMA_STR_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_usart.c
08008e14 l     O .text	00000018 USART_PRESCALER_TAB
00000000 l    df *ABS*	00000000 cosf.c
00000000 l    df *ABS*	00000000 math_errf.c
08006afc l     F .text	00000018 with_errnof
08006b14 l     F .text	0000001e xflowf
00000000 l    df *ABS*	00000000 sf_exp.c
00000000 l    df *ABS*	00000000 sinf.c
00000000 l    df *ABS*	00000000 wf_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 ef_fmod.c
080090b8 l     O .text	00000008 Zero
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 sf_log.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 clearerr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 feof.c
00000000 l    df *ABS*	00000000 ferror.c
00000000 l    df *ABS*	00000000 findfp.c
0800737c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
080076c8 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080077f0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 refill.c
0800868c l     F .text	00000012 lflush
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 gettod.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
2001100c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 sf_exp2_data.c
00000000 l    df *ABS*	00000000 sincosf_data.c
00000000 l    df *ABS*	00000000 sf_log_data.c
00000000 l    df *ABS*	00000000 impure.c
2000000c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 reent.c
08004740  w    F .text	00000002 RTC_Alarm_IRQHandler
08004740  w    F .text	00000002 HASH_RNG_IRQHandler
08004740  w    F .text	00000002 EXTI2_IRQHandler
08008e04 g     O .text	00000010 LL_RCC_PrescTable
080045c8 g     F .text	00000006 recorder::system::Reset()
08004740  w    F .text	00000002 TIM8_CC_IRQHandler
08008860 g     F .text	00000020 _isatty_r
08003e90 g     F .text	00000098 recorder::Serial::InterruptService()
2000041c g     O .bss	00000004 recorder::play_button_
080088a0 g     F .text	00000010 _getpid
08007dfc g     F .text	000000dc _puts_r
08004740  w    F .text	00000002 HRTIM1_Master_IRQHandler
08006e8c g     F .text	00000048 fmodf
080084b8 g     F .text	00000024 _lseek_r
08004740  w    F .text	00000002 DebugMon_Handler
08004740  w    F .text	00000002 UART8_IRQHandler
08004740  w    F .text	00000002 SPI4_IRQHandler
08008494 g     F .text	00000024 _gettimeofday_r
080090c0 g     O .text	00000120 .hidden __logf_data
08003a94 g     F .text	000000b8 recorder::Dac::Init()
080006ac g     F .text	0000005a .hidden __floatdidf
08008814 g     F .text	00000024 _kill_r
08007dcc g     F .text	00000030 printf
08004740  w    F .text	00000002 TIM1_CC_IRQHandler
08004740  w    F .text	00000002 BDMA_Channel6_IRQHandler
08008092 g     F .text	00000024 __sseek
0800742c g     F .text	00000070 __sinit
08004740  w    F .text	00000002 DMA2_Stream5_IRQHandler
08008118 g     F .text	000000a4 __swbuf_r
08004058 g     F .text	00000010 recorder::system::ReloadWatchdog()
08004740  w    F .text	00000002 HardFault_Handler
08004740  w    F .text	00000002 HRTIM1_FLT_IRQHandler
08004740  w    F .text	00000002 JPEG_IRQHandler
20010a7c  w    O .bss	00000004 recorder::Analog::instance_
080073d0 g     F .text	0000002c __sfmoreglue
08004740  w    F .text	00000002 DMA1_Stream5_IRQHandler
080085c4 g     F .text	0000000c __malloc_unlock
08004740  w    F .text	00000002 SysTick_Handler
08004740  w    F .text	00000002 BDMA_Channel1_IRQHandler
08004740  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
08000bf8  w    F .text	000006c8 recorder::SynthEngine::RenderOneSample()
08004740  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800934c g       *ABS*	00000000 _sidata
08004740  w    F .text	00000002 PendSV_Handler
08004740  w    F .text	00000002 NMI_Handler
20010720 g     O .bss	00000164 recorder::analog_
08004740  w    F .text	00000002 EXTI3_IRQHandler
08004dd8 g     F .text	00000140 HAL_RCC_GetSysClockFreq
08004740  w    F .text	00000002 LPTIM4_IRQHandler
08007298 g     F .text	0000000c __errno
08006b40 g     F .text	0000000c .hidden __math_may_uflowf
20010884 g     O .bss	0000012c recorder::monitor_
08004740  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08004740  w    F .text	00000002 LPTIM2_IRQHandler
08004740  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
08004460 g     F .text	0000002c recorder::system::Delay_ms(unsigned long)
08007114 g     F .text	000000c8 logf
0800883c g     F .text	00000024 _fstat_r
08004068 g     F .text	000003f8 recorder::system::Init()
20011008 g     O .bss	00000004 errno
0800933c g       .text	00000000 _etext
08004740  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20000400 g       .bss	00000000 _sbss
080033c8 g     F .text	000000b4 recorder::Adc::Stop()
08004818 g     F .text	0000000c HAL_GetREVID
08004740  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08004740  w    F .text	00000002 I2C3_ER_IRQHandler
08004740  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
080045d0 g     F .text	0000008c fgets
08006534 g     F .text	000001e8 LL_RCC_GetUSARTClockFreq
08002dc8 g     F .text	000000d8 recorder::Adc::InitAudioSequence()
08004740  w    F .text	00000002 MDMA_IRQHandler
08008e30 g     O .text	00000148 .hidden __exp2f_data
08004740  w    F .text	00000002 LPTIM3_IRQHandler
080075c4 g     F .text	00000088 getc
200106f4 g     O .bss	00000028 recorder::io_
0800769a g     F .text	0000001c memcpy
080073c4 g     F .text	0000000c _cleanup_r
08004740  w    F .text	00000002 HSEM1_IRQHandler
08000634 g     F .text	00000022 .hidden __floatsidf
08001ea4 g     F .text	000003cc recorder::StateMachine(bool)
08004740  w    F .text	00000002 EXTI0_IRQHandler
08004740  w    F .text	00000002 I2C2_EV_IRQHandler
08007ed8 g     F .text	00000010 puts
08004740  w    F .text	00000002 DMA1_Stream2_IRQHandler
08004740  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
080072a4 g     F .text	0000006c feof
08004740  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08004740  w    F .text	00000002 FDCAN1_IT1_IRQHandler
080085a8 g     F .text	00000010 malloc
080087b4 g     F .text	00000050 _raise_r
08008890 g     F .text	00000010 _fstat
080071e8 g     F .text	0000003c __assert_func
08004740  w    F .text	00000002 UsageFault_Handler
08002fb0 g     F .text	000003ac recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
080039e8 g     F .text	000000ac recorder::Dac::InitDMA()
08004740  w    F .text	00000002 LTDC_ER_IRQHandler
08004740  w    F .text	00000002 DMA2_Stream2_IRQHandler
08008838 g     F .text	00000004 _getpid_r
20000400 g       .bss	00000000 __bss_start__
08004740  w    F .text	00000002 HRTIM1_TIME_IRQHandler
2001071c g     O .bss	00000001 recorder::state_
08000614 g     F .text	0000001e .hidden __aeabi_ui2d
08005e48 g     F .text	00000072 LL_DAC_Init
20000000 g       .data	00000000 _sdata
08004740  w    F .text	00000002 SPI1_IRQHandler
08003b4c g     F .text	00000058 recorder::irq::Init()
08000390 g     F .text	00000000 .hidden __aeabi_drsub
08008018 g     F .text	00000020 _sbrk_r
08006b7c g     F .text	0000001e .hidden __math_invalidf
08004740  w    F .text	00000002 TIM6_DAC_IRQHandler
08008668 g     F .text	00000024 _read_r
08004740  w    F .text	00000002 DCMI_IRQHandler
08003dd8 g     F .text	00000022 recorder::Serial::GetByteBlocking()
08008470 g     F .text	00000024 fflush
08004740  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
20000004 g     O .data	00000004 SystemD2Clock
08000658 g     F .text	00000042 .hidden __extendsfdf2
08004498 g     F .text	00000120 recorder::system::Standby()
20010a78  w    O .bss	00000004 recorder::Analog::callback_
0800039c g     F .text	00000276 .hidden __adddf3
08003dfc g     F .text	00000058 recorder::Serial::Write(unsigned char, bool)
08004740  w    F .text	00000002 DMA2_Stream3_IRQHandler
08006824 g     F .text	00000118 LL_USART_Init
080088c0 g     F .text	00000010 _isatty
20010ffe g     O .bss	00000001 __lock___sinit_recursive_mutex
0800927c g     O .text	00000004 _global_impure_ptr
08008dec g     O .text	00000010 D1CorePrescTable
0800764c g     F .text	00000048 __libc_init_array
08004740  w    F .text	00000002 SAI2_IRQHandler
080082bc g     F .text	0000000e abort
08000614 g     F .text	0000001e .hidden __floatunsidf
08002ea0 g     F .text	00000110 recorder::Adc::InitPotSequence()
080088f0 g     F .text	0000001c _sbrk
08004740  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08004740  w    F .text	00000002 USART6_IRQHandler
08009324 g     F .text	00000000 _init
08008fd8 g     O .text	000000e0 .hidden __sincosf_table
08006940 g     F .text	000001bc cosf
08007054 g     F .text	000000c0 __ieee754_log10f
08004740  w    F .text	00000002 TIM17_IRQHandler
08004740  w    F .text	00000002 USART3_IRQHandler
08004740  w    F .text	00000002 CRYP_IRQHandler
08004740  w    F .text	00000002 BDMA_Channel7_IRQHandler
20011010 g       .bss	00000000 _ebss
08004744 g     F .text	00000044 Reset_Handler
08004740  w    F .text	00000002 LPTIM5_IRQHandler
08004740  w    F .text	00000002 UART5_IRQHandler
20010ffc g     O .bss	00000001 __lock___malloc_recursive_mutex
08004740  w    F .text	00000002 ADC3_IRQHandler
08004740  w    F .text	00000002 DMA2_Stream0_IRQHandler
08002a30 g     F .text	0000038c recorder::Adc::DMAService()
0800671c g     F .text	00000108 LL_TIM_Init
0800347c  w    F .text	00000328 recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
08007528 g     F .text	00000024 fprintf
08004740  w    F .text	00000002 TIM4_IRQHandler
0800039c g     F .text	00000276 .hidden __aeabi_dadd
08003c1c g     F .text	00000060 recorder::irq::SetPriority(IRQn_Type, unsigned long)
08004740  w    F .text	00000002 BDMA_Channel2_IRQHandler
08004824 g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
0800069c g     F .text	0000006a .hidden __aeabi_ul2d
08008a34 g     O .text	000000f0 recorder::FormantFilter::vowelData
0800921c g     O .text	00000020 __sf_fake_stderr
08004740  w    F .text	00000002 QUADSPI_IRQHandler
08004834 g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
20011010 g       .bss	00000000 end
08004740  w    F .text	00000002 I2C1_EV_IRQHandler
08003c7c g     F .text	00000150 recorder::Serial::Init(unsigned long)
08007698 g     F .text	00000002 __retarget_lock_release_recursive
08004740  w    F .text	00000002 DMA1_Stream6_IRQHandler
0800606c g     F .text	00000016 LL_GPIO_StructInit
08006ed4 g     F .text	00000060 log10f
20010e98  w    O .bss	00000004 recorder::Serial::instance_
08006b34 g     F .text	0000000c .hidden __math_uflowf
08006084 g     F .text	00000188 LL_RCC_GetPLL1ClockFreq
08004740  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08004740  w    F .text	00000002 DMA1_Stream1_IRQHandler
08004740  w    F .text	00000002 TIM16_IRQHandler
0800781e g     F .text	00000024 __sfputs_r
08004740  w    F .text	00000002 UART4_IRQHandler
080073fc g     F .text	0000000c __sfp_lock_acquire
080002f0 g     F .text	00000000 memchr
20011010 g       .bss	00000000 __bss_end__
08004740  w    F .text	00000002 BDMA_Channel5_IRQHandler
080085d0 g     F .text	00000098 _free_r
08004740  w    F .text	00000002 TIM3_IRQHandler
08004740  w    F .text	00000002 RCC_IRQHandler
08004740  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08004740  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
08007fc0 g     F .text	00000058 __srget_r
08000398 g     F .text	0000027a .hidden __aeabi_dsub
08004740 g     F .text	00000002 Default_Handler
08004740  w    F .text	00000002 ECC_IRQHandler
08007310 g     F .text	0000006c ferror
0800069c g     F .text	0000006a .hidden __floatundidf
08007f44 g     F .text	0000007c rand
080088e0 g     F .text	00000010 _lseek
08004740  w    F .text	00000002 CEC_IRQHandler
08004740  w    F .text	00000002 EXTI15_10_IRQHandler
08003dcc g     F .text	0000000c recorder::Serial::BytesAvailable()
08004740  w    F .text	00000002 BDMA_Channel0_IRQHandler
080089f4  w    O .text	00000020 recorder::SynthEngine::kDiatonicMinorRatios
08004740  w    F .text	00000002 ADC_IRQHandler
08003be8 g     F .text	00000034 recorder::irq::Enable(IRQn_Type)
08004f18 g     F .text	00000234 HAL_RCC_ClockConfig
080080be g     F .text	00000026 strncpy
08004740  w    F .text	00000002 DMA1_Stream7_IRQHandler
08004740  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
080038e8 g     F .text	00000014 recorder::Analog::StartTimer()
0800620c g     F .text	00000188 LL_RCC_GetPLL2ClockFreq
08004740  w    F .text	00000002 SPI5_IRQHandler
08003ba4 g     F .text	00000044 recorder::irq::RegisterHandler(IRQn_Type, void (*)())
08004740  w    F .text	00000002 TIM7_IRQHandler
08004740  w    F .text	00000002 SDMMC1_IRQHandler
080082cc g     F .text	00000020 _close_r
08000634 g     F .text	00000022 .hidden __aeabi_i2d
38000030  w    O .dma	00000018 recorder::Dac::dma_buffer_
08004740  w    F .text	00000002 TIM5_IRQHandler
08004740  w    F .text	00000002 DMA2_Stream7_IRQHandler
08004740  w    F .text	00000002 TIM15_IRQHandler
08004740  w    F .text	00000002 PVD_AVD_IRQHandler
08004740  w    F .text	00000002 I2C3_EV_IRQHandler
080081e0 g     F .text	000000dc __swsetup_r
08004740  w    F .text	00000002 EXTI9_5_IRQHandler
0800749c g     F .text	0000008c __sfp
08004740  w    F .text	00000002 RTC_WKUP_IRQHandler
08000708  w    F .text	000004ee recorder::SynthEngine::Init()
08007420 g     F .text	0000000c __sinit_lock_release
08004740  w    F .text	00000002 LTDC_IRQHandler
20000424 g     O .bss	00000004 recorder::idle_timeout_
08008038 g     F .text	00000022 __sread
08004740  w    F .text	00000002 SAI3_IRQHandler
08004740  w    F .text	00000002 ETH_WKUP_IRQHandler
0800480c  w    F .text	0000000c HAL_GetTick
08004740  w    F .text	00000002 SPDIF_RX_IRQHandler
080085b8 g     F .text	0000000c __malloc_lock
08006f34 g     F .text	00000120 __ieee754_fmodf
08006394 g     F .text	000001a0 LL_RCC_GetPLL3ClockFreq
080083f8 g     F .text	00000078 _fflush_r
08004740  w    F .text	00000002 SPI2_IRQHandler
0800923c g     O .text	00000020 __sf_fake_stdin
08007696 g     F .text	00000002 __retarget_lock_acquire_recursive
08004740  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
080076b6 g     F .text	00000010 memset
08004740  w    F .text	00000002 MemManage_Handler
08002270 g     F .text	0000070c main
20000420 g     O .bss	00000004 recorder::tune_button_
08004740  w    F .text	00000002 DMA1_Stream0_IRQHandler
08007694 g     F .text	00000002 __retarget_lock_init_recursive
08007ee8 g     F .text	0000005c srand
08007224 g     F .text	00000074 clearerr
08004740  w    F .text	00000002 SVC_Handler
080080b6 g     F .text	00000008 __sclose
08004740  w    F .text	00000002 CRS_IRQHandler
08009348 g       .init_array	00000000 __init_array_end
08007708 g     F .text	000000e8 _malloc_r
080080e4 g     F .text	00000034 time
080006ac g     F .text	0000005a .hidden __aeabi_l2d
0800754c g     F .text	0000003a _fwalk
08004740  w    F .text	00000002 EXTI4_IRQHandler
08003e54 g     F .text	0000003c recorder::Serial::FlushTx(bool)
08004788 g     F .text	00000084 SystemInit
08004740  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
08009330 g     F .text	00000000 _fini
08007dcc g     F .text	00000030 iprintf
08003988 g     F .text	00000060 recorder::Dac::Stop()
08003910 g     F .text	00000078 recorder::Dac::Start()
08004740  w    F .text	00000002 FDCAN2_IT1_IRQHandler
080081bc g     F .text	00000024 _write_r
08004854 g     F .text	0000001c HAL_PWR_EnterSLEEPMode
08004054 g     F .text	00000004 HAL_InitTick
08004740  w    F .text	00000002 ETH_IRQHandler
080071dc g     F .text	0000000c nanf
08007aa4 g     F .text	000000da _printf_common
20000008 g     O .data	00000004 _impure_ptr
08004740  w    F .text	00000002 TIM1_UP_IRQHandler
08002dbc g     F .text	0000000c recorder::Adc::DMAHandler()
080082ec g     F .text	0000010c __sflush_r
08004740  w    F .text	00000002 BDMA_Channel4_IRQHandler
08004740  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
20010a74  w    O .bss	00000004 recorder::Adc::instance_
0800933c g       .ARM.attributes	00000000 __preinit_array_end
080086a0 g     F .text	00000114 __srefill_r
08004740  w    F .text	00000002 WWDG_IRQHandler
08004740  w    F .text	00000002 SPI6_IRQHandler
200109b0 g     O .bss	000000c0 recorder::switches_
08004740  w    F .text	00000002 I2C4_EV_IRQHandler
08004740  w    F .text	00000002 MDIOS_IRQHandler
08004740  w    F .text	00000002 FDCAN2_IT0_IRQHandler
08005db0 g     F .text	00000038 LL_ADC_Init
08004740  w    F .text	00000002 LPUART1_IRQHandler
08004740  w    F .text	00000002 FDCAN1_IT0_IRQHandler
08004740  w    F .text	00000002 TIM2_IRQHandler
08006c80 g     F .text	0000020c sinf
0800335c g     F .text	0000006c recorder::Adc::Start()
08004740  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08004740  w    F .text	00000002 OTG_HS_IRQHandler
08004740  w    F .text	00000002 DMA2D_IRQHandler
08004740  w    F .text	00000002 TIM1_BRK_IRQHandler
080084dc g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
08004740  w    F .text	00000002 EXTI1_IRQHandler
08004740  w    F .text	00000002 SDMMC2_IRQHandler
08005f60 g     F .text	0000010a LL_GPIO_Init
080046c4 g     F .text	00000068 _write
2000006c g       .data	00000000 _edata
08004740  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
080012c0  w    F .text	00000b54 recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)
08008a14  w    O .text	00000020 recorder::SynthEngine::kDiatonicMajorRatios
08001e14 g     F .text	00000090 recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
20000428 g     O .bss	000102cc recorder::synth_engine_
08004740  w    F .text	00000002 BDMA_Channel3_IRQHandler
080037a4 g     F .text	00000144 recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
08008b24  w    O .text	00000104 recorder::Adc::PotFilter::kPotCorrection
08006b58 g     F .text	00000024 .hidden __math_divzerof
08004740  w    F .text	00000002 UART7_IRQHandler
08005ebc g     F .text	000000a4 LL_DMA_Init
08004740  w    F .text	00000002 MDIOS_WKUP_IRQHandler
08004740  w    F .text	00000002 USART2_IRQHandler
0800805a g     F .text	00000038 __swrite
080048bc  w    F .text	0000051c HAL_RCC_OscConfig
08004740  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08004740  w    F .text	00000002 SAI4_IRQHandler
08007528 g     F .text	00000024 fiprintf
08007844 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000298 g_pfnVectors
08007586 g     F .text	0000003e _fwalk_reent
08005334 g     F .text	00000a7c HAL_RCCEx_PeriphCLKConfig
080088d0 g     F .text	00000010 _kill
08003f28 g     F .text	0000000c recorder::Serial::InterruptHandler()
08004740  w    F .text	00000002 I2C2_ER_IRQHandler
08007408 g     F .text	0000000c __sfp_lock_release
0800925c g     O .text	00000020 __sf_fake_stdout
080088b0 g     F .text	00000010 _gettimeofday
08004740  w    F .text	00000002 DMA2_Stream1_IRQHandler
08003f58 g     F .text	0000001c TickHandler
38000000  w    O .dma	00000030 recorder::Adc::dma_buffer_
0800465c g     F .text	00000068 _read
0800933c g       .init_array	00000000 __init_array_start
08004740  w    F .text	00000002 FLASH_IRQHandler
0800890c g     F .text	00000002 _exit
08006b9c g     F .text	000000e4 expf
0800448c g     F .text	0000000c recorder::system::SerialFlushTx(bool)
08004740  w    F .text	00000002 DMA2_Stream4_IRQHandler
08004740  w    F .text	00000002 BusFault_Handler
08004740  w    F .text	00000002 USART1_IRQHandler
08008528 g     F .text	00000080 __smakebuf_r
080002a0 g       .text	00000000 _stext
08006b4c g     F .text	0000000c .hidden __math_oflowf
080002e0 g     F .text	00000010 strlen
08004740  w    F .text	00000002 OTG_FS_IRQHandler
08007b80 g     F .text	0000024c _printf_i
08004740  w    F .text	00000002 SPI3_IRQHandler
08004740  w    F .text	00000002 WAKEUP_PIN_IRQHandler
08004740  w    F .text	00000002 DMA1_Stream4_IRQHandler
20011004 g     O .bss	00000004 __malloc_sbrk_start
08004740  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
08004740  w    F .text	00000002 I2C1_ER_IRQHandler
08004844 g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
08004740  w    F .text	00000002 FMC_IRQHandler
08000658 g     F .text	00000042 .hidden __aeabi_f2d
08008f78 g     O .text	00000060 .hidden __inv_pio4
08004740  w    F .text	00000002 FDCAN_CAL_IRQHandler
20011000 g     O .bss	00000004 __malloc_free_list
08004740  w    F .text	00000002 SWPMI1_IRQHandler
08004740  w    F .text	00000002 COMP1_IRQHandler
08004740  w    F .text	00000002 LPTIM1_IRQHandler
080045b8 g     F .text	00000010 recorder::system::WakeupWasPlayButton()
08000398 g     F .text	0000027a .hidden __subdf3
08007844 g     F .text	00000260 _vfprintf_r
0800933c g       .ARM.attributes	00000000 __preinit_array_start
08004740  w    F .text	00000002 I2C4_ER_IRQHandler
08004870 g     F .text	0000004c HAL_PWREx_ConfigSupply
08004740  w    F .text	00000002 DMA2_Stream6_IRQHandler
080038fc g     F .text	00000014 recorder::Dac::DMAHandler()
08005de8 g     F .text	00000060 LL_ADC_REG_Init
08004740  w    F .text	00000002 SAI1_IRQHandler
08004740  w    F .text	00000002 DMA1_Stream3_IRQHandler
20010ffd g     O .bss	00000001 __lock___sfp_recursive_mutex
08008880 g     F .text	00000010 _close
08008804 g     F .text	00000010 raise
08007414 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000400 	.word	0x20000400
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800933c 	.word	0x0800933c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000404 	.word	0x20000404
 80002dc:	0800933c 	.word	0x0800933c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <recorder::SynthEngine::Init()>:
              freq_wobbliness_(0.0f),
              previous_formant_pot_val_(0.0f) // track the last pot value
        {
        }

        void Init()
 8000708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800070c:	4604      	mov	r4, r0
        {
            // Seed random generator once at initialization
            std::srand(static_cast<unsigned>(std::time(nullptr)));
 800070e:	2000      	movs	r0, #0

            // Initial parameters
            is_note_on_ = false;
            phase_ = 0.0f;
 8000710:	2500      	movs	r5, #0
    void Init(float threshold_dB, float ratio, float softness,
        float attack_ms, float decay_ms, float hold_ms, float sample_rate)
    {
        pregain_ = std::pow(10.0, -threshold_dB / 20);
        ratio_ = 1 / ratio - 1;
        softness_ = softness;
 8000712:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
            is_note_on_ = false;
 8000716:	4680      	mov	r8, r0
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8000718:	f504 3680 	add.w	r6, r4, #65536	; 0x10000
class SOSFilter
{
public:
    void Init(int num_sections, const SOSCoefficients* sections)
    {
        num_sections_ = num_sections;
 800071c:	f04f 0905 	mov.w	r9, #5
        void Init()
 8000720:	ed2d 8b02 	vpush	{d8}
            std::srand(static_cast<unsigned>(std::time(nullptr)));
 8000724:	f007 fcde 	bl	80080e4 <time>
 8000728:	f007 fbde 	bl	8007ee8 <srand>
            currentFrequency_ = 130.81f; // Start at C3
 800072c:	4be3      	ldr	r3, [pc, #908]	; (8000abc <recorder::SynthEngine::Init()+0x3b4>)
            is_note_on_ = false;
 800072e:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24

    void Reset(void)
    {
        for (uint32_t i = 0; i < kBufferSize; i++)
        {
            buffer_[i] = 0;
 8000732:	4641      	mov	r1, r8
            currentFrequency_ = 130.81f; // Start at C3
 8000734:	6063      	str	r3, [r4, #4]
 8000736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
            fundamentalFreq_ = 130.81f;  // Default fundamental is also C3
 800073a:	60a3      	str	r3, [r4, #8]
            targetFrequencyOffset_ = 0.0f;
            offsetCounter_ = 0;
            previousTargetIndex_ = -1;
 800073c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            offsetCounter_ = 0;
 8000740:	f8c4 8014 	str.w	r8, [r4, #20]
 8000744:	f504 7009 	add.w	r0, r4, #548	; 0x224
            previousTargetIndex_ = -1;
 8000748:	6523      	str	r3, [r4, #80]	; 0x50
        t_scaler_ = 0.5 / softness;
 800074a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
            phase_ = 0.0f;
 800074e:	6025      	str	r5, [r4, #0]
            targetFrequencyOffset_ = 0.0f;
 8000750:	60e5      	str	r5, [r4, #12]
 8000752:	f8c6 3234 	str.w	r3, [r6, #564]	; 0x234
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8000756:	4bda      	ldr	r3, [pc, #872]	; (8000ac0 <recorder::SynthEngine::Init()+0x3b8>)
        Reset();
    }

    void Reset(void)
    {
        hold_count_ = 0;
 8000758:	f8c6 8244 	str.w	r8, [r6, #580]	; 0x244
 800075c:	f8c6 3228 	str.w	r3, [r6, #552]	; 0x228
        ratio_ = 1 / ratio - 1;
 8000760:	4bd8      	ldr	r3, [pc, #864]	; (8000ac4 <recorder::SynthEngine::Init()+0x3bc>)
 8000762:	f8c6 8258 	str.w	r8, [r6, #600]	; 0x258
 8000766:	f8c6 322c 	str.w	r3, [r6, #556]	; 0x22c
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800076a:	4bd7      	ldr	r3, [pc, #860]	; (8000ac8 <recorder::SynthEngine::Init()+0x3c0>)
        envelope_ = 0;
 800076c:	f8c6 5248 	str.w	r5, [r6, #584]	; 0x248
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8000770:	f8c6 3238 	str.w	r3, [r6, #568]	; 0x238
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8000774:	4bd5      	ldr	r3, [pc, #852]	; (8000acc <recorder::SynthEngine::Init()+0x3c4>)
        envelope_ = 0;
 8000776:	f8c6 525c 	str.w	r5, [r6, #604]	; 0x25c
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 800077a:	f8c6 323c 	str.w	r3, [r6, #572]	; 0x23c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 800077e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
            Reset(initial_value);
        }

        void Reset(float initial_value = 0)
        {
            history_ = initial_value;
 8000782:	f8c6 5264 	str.w	r5, [r6, #612]	; 0x264
 8000786:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800078a:	4bd1      	ldr	r3, [pc, #836]	; (8000ad0 <recorder::SynthEngine::Init()+0x3c8>)
        softness_ = softness;
 800078c:	f8c6 7230 	str.w	r7, [r6, #560]	; 0x230
 8000790:	f8c6 324c 	str.w	r3, [r6, #588]	; 0x24c
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8000794:	4bcf      	ldr	r3, [pc, #828]	; (8000ad4 <recorder::SynthEngine::Init()+0x3cc>)
 8000796:	f8c6 3250 	str.w	r3, [r6, #592]	; 0x250
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 800079a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800079e:	f8c6 3254 	str.w	r3, [r6, #596]	; 0x254
            factor_ = omega / (1.0f + omega);
 80007a2:	4bcd      	ldr	r3, [pc, #820]	; (8000ad8 <recorder::SynthEngine::Init()+0x3d0>)
 80007a4:	f8c6 3260 	str.w	r3, [r6, #608]	; 0x260
 80007a8:	f006 ff85 	bl	80076b6 <memset>
            delay_.Init();

            // Set a local sample rate variable
            sample_rate_ = 16000.0f;
 80007ac:	4bcb      	ldr	r3, [pc, #812]	; (8000adc <recorder::SynthEngine::Init()+0x3d4>)

    void SetCoefficients(const SOSCoefficients* sections)
    {
        for (int n = 0; n < num_sections_; n++)
        {
            sections_[n].b[0] = sections[n].b[0];
 80007ae:	eddf 6acc 	vldr	s13, [pc, #816]	; 8000ae0 <recorder::SynthEngine::Init()+0x3d8>
class FormantBiquad
{
public:
    void Init(BiquadType type, float sampleRate, float centerFrequency, float Q, float gainDB = 0.0f)
    {
        type_ = type;
 80007b2:	2002      	movs	r0, #2
        }

        write_head_ = 0;
 80007b4:	f8c6 8224 	str.w	r8, [r6, #548]	; 0x224
 80007b8:	f8c6 32c8 	str.w	r3, [r6, #712]	; 0x2c8
        compressor_.Reset();
        follower_.Reset();
        delay_time_lpf_.Reset();
        interpolator_history_ = 0;
 80007bc:	f8c6 5268 	str.w	r5, [r6, #616]	; 0x268
 80007c0:	edc4 6a17 	vstr	s13, [r4, #92]	; 0x5c
            sections_[n].b[1] = sections[n].b[1];
            sections_[n].b[2] = sections[n].b[2];
 80007c4:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
            sections_[n].b[1] = sections[n].b[1];
 80007c8:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8000ae4 <recorder::SynthEngine::Init()+0x3dc>
            x_[n][0] = 0;
 80007cc:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
            sections_[n].b[1] = sections[n].b[1];
 80007d0:	edc4 6a18 	vstr	s13, [r4, #96]	; 0x60

            sections_[n].a[0] = sections[n].a[0];
 80007d4:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8000ae8 <recorder::SynthEngine::Init()+0x3e0>
            x_[n][1] = 0;
 80007d8:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
            sections_[n].a[0] = sections[n].a[0];
 80007dc:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
            sections_[n].a[1] = sections[n].a[1];
 80007e0:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8000aec <recorder::SynthEngine::Init()+0x3e4>
            x_[n][2] = 0;
 80007e4:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
            sections_[n].a[1] = sections[n].a[1];
 80007e8:	edc4 6a1b 	vstr	s13, [r4, #108]	; 0x6c
            sections_[n].b[1] = sections[n].b[1];
 80007ec:	eddf 6ac0 	vldr	s13, [pc, #768]	; 8000af0 <recorder::SynthEngine::Init()+0x3e8>
            x_[n][0] = 0;
 80007f0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
            sections_[n].b[1] = sections[n].b[1];
 80007f4:	edc4 6a1d 	vstr	s13, [r4, #116]	; 0x74
            sections_[n].a[0] = sections[n].a[0];
 80007f8:	eddf 6abe 	vldr	s13, [pc, #760]	; 8000af4 <recorder::SynthEngine::Init()+0x3ec>
            x_[n][1] = 0;
 80007fc:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
            sections_[n].a[0] = sections[n].a[0];
 8000800:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
            sections_[n].a[1] = sections[n].a[1];
 8000804:	eddf 6abc 	vldr	s13, [pc, #752]	; 8000af8 <recorder::SynthEngine::Init()+0x3f0>
            x_[n][2] = 0;
 8000808:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
            sections_[n].a[1] = sections[n].a[1];
 800080c:	edc4 6a20 	vstr	s13, [r4, #128]	; 0x80
            sections_[n].b[1] = sections[n].b[1];
 8000810:	eddf 6aba 	vldr	s13, [pc, #744]	; 8000afc <recorder::SynthEngine::Init()+0x3f4>
            x_[n][0] = 0;
 8000814:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
            sections_[n].b[1] = sections[n].b[1];
 8000818:	edc4 6a22 	vstr	s13, [r4, #136]	; 0x88
            sections_[n].a[0] = sections[n].a[0];
 800081c:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8000b00 <recorder::SynthEngine::Init()+0x3f8>
            x_[n][1] = 0;
 8000820:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
            x_[n][2] = 0;
 8000824:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
            x_[n][0] = 0;
 8000828:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            x_[n][1] = 0;
 800082c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
            x_[n][2] = 0;
 8000830:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
            x_[n][0] = 0;
 8000834:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
            x_[n][1] = 0;
 8000838:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
            x_[n][2] = 0;
 800083c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
            sections_[n].b[0] = sections[n].b[0];
 8000840:	6727      	str	r7, [r4, #112]	; 0x70
            sections_[n].b[2] = sections[n].b[2];
 8000842:	67a7      	str	r7, [r4, #120]	; 0x78
            sections_[n].b[0] = sections[n].b[0];
 8000844:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
            sections_[n].b[2] = sections[n].b[2];
 8000848:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
        num_sections_ = num_sections;
 800084c:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
            sections_[n].a[0] = sections[n].a[0];
 8000850:	edc4 6a24 	vstr	s13, [r4, #144]	; 0x90
        void Init(float sampleRate)
        {
            sampleRate_ = sampleRate;

            // Default to neutral voice
            currentVoice_ = VOICE_NEUTRAL;
 8000854:	f8a4 81fc 	strh.w	r8, [r4, #508]	; 0x1fc
            sections_[n].a[1] = sections[n].a[1];
 8000858:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8000b94 <recorder::SynthEngine::Init()+0x48c>
            {
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;

                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 800085c:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8000b04 <recorder::SynthEngine::Init()+0x3fc>
 8000860:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
            sections_[n].b[1] = sections[n].b[1];
 8000864:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8000b98 <recorder::SynthEngine::Init()+0x490>
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8000868:	4aa7      	ldr	r2, [pc, #668]	; (8000b08 <recorder::SynthEngine::Init()+0x400>)
 800086a:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
            sections_[n].a[0] = sections[n].a[0];
 800086e:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8000b9c <recorder::SynthEngine::Init()+0x494>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8000872:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000b0c <recorder::SynthEngine::Init()+0x404>
 8000876:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4
            sections_[n].a[1] = sections[n].a[1];
 800087a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000ba0 <recorder::SynthEngine::Init()+0x498>
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 800087e:	f8df e324 	ldr.w	lr, [pc, #804]	; 8000ba4 <recorder::SynthEngine::Init()+0x49c>
 8000882:	f8c4 80a8 	str.w	r8, [r4, #168]	; 0xa8
            sections_[n].b[1] = sections[n].b[1];
 8000886:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8000ba8 <recorder::SynthEngine::Init()+0x4a0>
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 800088a:	49a1      	ldr	r1, [pc, #644]	; (8000b10 <recorder::SynthEngine::Init()+0x408>)
 800088c:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
            sections_[n].a[0] = sections[n].a[0];
 8000890:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8000bac <recorder::SynthEngine::Init()+0x4a4>
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8000894:	f8df c318 	ldr.w	ip, [pc, #792]	; 8000bb0 <recorder::SynthEngine::Init()+0x4a8>
 8000898:	f8c4 80b8 	str.w	r8, [r4, #184]	; 0xb8
            sections_[n].a[1] = sections[n].a[1];
 800089c:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8000bb4 <recorder::SynthEngine::Init()+0x4ac>
            sampleRate_ = sampleRate;
 80008a0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 80008a4:	f8c4 80bc 	str.w	r8, [r4, #188]	; 0xbc
            // Initialize filters
            aa_filter_.Init();
            aa_filter_.Reset();

            // Example delay parameters
            delay_time_ = 0.3f;
 80008a8:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8000bb8 <recorder::SynthEngine::Init()+0x4b0>
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80008ac:	edc4 7a79 	vstr	s15, [r4, #484]	; 0x1e4
 80008b0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
            delay_feedback_ = 0.4f;
 80008b4:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8000bbc <recorder::SynthEngine::Init()+0x4b4>
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80008b8:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
                currentFormantQs_[i] = targetFormantQs_[i];
 80008bc:	edc4 7a76 	vstr	s15, [r4, #472]	; 0x1d8
        sampleRate_ = sampleRate;
        centerFrequency_ = centerFrequency;
        Q_ = Q;
 80008c0:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
        sampleRate_ = sampleRate;
 80008c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            sections_[n].b[0] = sections[n].b[0];
 80008c8:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
            sections_[n].b[2] = sections[n].b[2];
 80008cc:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
            sections_[n].b[0] = sections[n].b[0];
 80008d0:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
            sections_[n].b[2] = sections[n].b[2];
 80008d4:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
        x_[num_sections_][0] = 0;
 80008d8:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
        x_[num_sections_][1] = 0;
 80008dc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
        x_[num_sections_][2] = 0;
 80008e0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
            wahPosition_ = 0.0f;
 80008e4:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80008e8:	ed84 7a73 	vstr	s14, [r4, #460]	; 0x1cc
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80008ec:	f8c4 e1d0 	str.w	lr, [r4, #464]	; 0x1d0
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 80008f0:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80008f4:	f8c4 c1e8 	str.w	ip, [r4, #488]	; 0x1e8
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 80008f8:	ed84 7a70 	vstr	s14, [r4, #448]	; 0x1c0
        centerFrequency_ = centerFrequency;
 80008fc:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
        type_ = type;
 8000900:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8000904:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
 8000908:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 800090c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
                currentFormantQs_[i] = targetFormantQs_[i];
 8000910:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
        Q_ = Q;
 8000914:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
            case BANDPASS:
            {
                b0_ = alpha;
                b1_ = 0.0f;
                b2_ = -alpha;
                a0_ = 1.0f + alpha;
 8000918:	4a7e      	ldr	r2, [pc, #504]	; (8000b14 <recorder::SynthEngine::Init()+0x40c>)
        sampleRate_ = sampleRate;
 800091a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
                a0_ = 1.0f + alpha;
 800091e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
                a2_ = 1.0f - alpha;
                break;
        }

        // Normalize coefficients
        b0_ /= a0_;
 8000922:	4a7d      	ldr	r2, [pc, #500]	; (8000b18 <recorder::SynthEngine::Init()+0x410>)
        sampleRate_ = sampleRate;
 8000924:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
        b0_ /= a0_;
 8000928:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
        b1_ /= a0_;
        b2_ /= a0_;
 800092c:	4a7b      	ldr	r2, [pc, #492]	; (8000b1c <recorder::SynthEngine::Init()+0x414>)
                a0_ = 1.0f + alpha;
 800092e:	4b7c      	ldr	r3, [pc, #496]	; (8000b20 <recorder::SynthEngine::Init()+0x418>)
        b2_ /= a0_;
 8000930:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
        a1_ /= a0_;
 8000934:	4a7b      	ldr	r2, [pc, #492]	; (8000b24 <recorder::SynthEngine::Init()+0x41c>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000936:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
        a1_ /= a0_;
 800093a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
        a2_ /= a0_;
 800093e:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <recorder::SynthEngine::Init()+0x420>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000940:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        a2_ /= a0_;
 8000944:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
                a0_ = 1.0f + alpha;
 8000948:	4a78      	ldr	r2, [pc, #480]	; (8000b2c <recorder::SynthEngine::Init()+0x424>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 800094a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
                a0_ = 1.0f + alpha;
 800094e:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
        b0_ /= a0_;
 8000952:	4a77      	ldr	r2, [pc, #476]	; (8000b30 <recorder::SynthEngine::Init()+0x428>)
        b1_ /= a0_;
 8000954:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
        b0_ /= a0_;
 8000958:	f8c4 2168 	str.w	r2, [r4, #360]	; 0x168
        b2_ /= a0_;
 800095c:	4a75      	ldr	r2, [pc, #468]	; (8000b34 <recorder::SynthEngine::Init()+0x42c>)
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 800095e:	f8c4 e1c4 	str.w	lr, [r4, #452]	; 0x1c4
 8000962:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
        a1_ /= a0_;
 8000966:	4a74      	ldr	r2, [pc, #464]	; (8000b38 <recorder::SynthEngine::Init()+0x430>)
        centerFrequency_ = centerFrequency;
 8000968:	f8c4 e150 	str.w	lr, [r4, #336]	; 0x150
        a1_ /= a0_;
 800096c:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
        a2_ /= a0_;
 8000970:	4a72      	ldr	r2, [pc, #456]	; (8000b3c <recorder::SynthEngine::Init()+0x434>)
                currentFormantQs_[i] = targetFormantQs_[i];
 8000972:	f8c4 c1dc 	str.w	ip, [r4, #476]	; 0x1dc
 8000976:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
        b0_ /= a0_;
 800097a:	4a71      	ldr	r2, [pc, #452]	; (8000b40 <recorder::SynthEngine::Init()+0x438>)
        Q_ = Q;
 800097c:	f8c4 c154 	str.w	ip, [r4, #340]	; 0x154
        type_ = type;
 8000980:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
 8000984:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8000988:	f8c4 7158 	str.w	r7, [r4, #344]	; 0x158
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 800098c:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 8000990:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 8000994:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 8000998:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
        b1_ /= a0_;
 800099c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 80009a0:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
        centerFrequency_ = centerFrequency;
 80009a4:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80009a8:	f8c4 7194 	str.w	r7, [r4, #404]	; 0x194
        b0_ /= a0_;
 80009ac:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
        b2_ /= a0_;
 80009b0:	4a64      	ldr	r2, [pc, #400]	; (8000b44 <recorder::SynthEngine::Init()+0x43c>)
        float current_dutycycle;
        int randomizationcounter;
        const int randomizationperiod;
        void UpdateDutyCycle()
        {
            if (duty_cyclerandomization > 0.0f)
 80009b2:	edd4 7a85 	vldr	s15, [r4, #532]	; 0x214
                a0_ = 1.0f + alpha;
 80009b6:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
        b2_ /= a0_;
 80009ba:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
 80009be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            q_mult_ = qMult;
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <recorder::SynthEngine::Init()+0x440>)
        a1_ /= a0_;
 80009c4:	4a61      	ldr	r2, [pc, #388]	; (8000b4c <recorder::SynthEngine::Init()+0x444>)
 80009c6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
            freq_mult_ = freqMult;
 80009d2:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <recorder::SynthEngine::Init()+0x448>)
        a2_ /= a0_;
 80009d4:	4a5f      	ldr	r2, [pc, #380]	; (8000b54 <recorder::SynthEngine::Init()+0x44c>)
 80009d6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
 80009da:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
        }

        // Function to set the formant morphing rate
        void SetFormantRate(float rate)
        {
            formantRate_ = rate;
 80009de:	4b5e      	ldr	r3, [pc, #376]	; (8000b58 <recorder::SynthEngine::Init()+0x450>)
 80009e0:	4a5e      	ldr	r2, [pc, #376]	; (8000b5c <recorder::SynthEngine::Init()+0x454>)
 80009e2:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 80009e6:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
            formant_filter_.SetVoice(FormantFilter::VOICE_NEUTRAL);
            formant_filter_.setQMult(1.3);
            formant_filter_.setFreqMult(1.4f);
            formant_filter_.SetMode(FormantFilter::FILTER_MODE_NORMAL);
            formant_filter_.SetFormantRate(0.000001f);
            attack_formant_rate_ = 0.001f;
 80009ea:	4b5d      	ldr	r3, [pc, #372]	; (8000b60 <recorder::SynthEngine::Init()+0x458>)
    public:
        // Initialize the high-pass filter
        void Init(float cutoff, float sample_rate, float initial_value = 0.0f)
        {
            float omega = 2.0f * M_PI * cutoff / sample_rate;
            factor_ = omega / (1.0f + omega); // Proper bilinear transform coefficient
 80009ec:	4a5d      	ldr	r2, [pc, #372]	; (8000b64 <recorder::SynthEngine::Init()+0x45c>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 80009ee:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
 80009f2:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
 80009f6:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
 80009fa:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
        b1_ /= a0_;
 80009fe:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
            freq_mult_ = 1.0f;
 8000a02:	61e7      	str	r7, [r4, #28]
            history_ = initial_value;
 8000a04:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
            attack_formant_rate_ = 0.001f;
 8000a08:	6223      	str	r3, [r4, #32]
        }

        // Reset the filter state
        void Reset(float initial_value = 0.0f)
        {
            history_ = initial_value; // Last output sample (y[n-1])
 8000a0a:	f8c6 5270 	str.w	r5, [r6, #624]	; 0x270
            lowpassHistory_ = initial_value; // Tracks DC content
 8000a0e:	f8c6 5274 	str.w	r5, [r6, #628]	; 0x274
            factor_ = omega / (1.0f + omega); // Proper bilinear transform coefficient
 8000a12:	f8c6 226c 	str.w	r2, [r6, #620]	; 0x26c
            base_dutycycle = std::max(0.0f, std::min(1.0f, duty_cycle));
 8000a16:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
            if (duty_cyclerandomization > 0.0f)
 8000a1a:	f300 80db 	bgt.w	8000bd4 <recorder::SynthEngine::Init()+0x4cc>
 8000a1e:	eddf 8a52 	vldr	s17, [pc, #328]	; 8000b68 <recorder::SynthEngine::Init()+0x460>
            float threshold_dB = 17.0f;
            float ratio = 8.0f;
            float attack_ms = 5.0f; // fairly quick attack
            float decay_ms = 30.0f; // moderate release

            compressor_.Init(threshold_dB, ratio,
 8000a22:	ed96 8ab2 	vldr	s16, [r6, #712]	; 0x2c8
            freq_wobbliness_ = 0.0f;
 8000a26:	2500      	movs	r5, #0
                float offset = random_offset * max_offset;
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
            }
            else
            {
                current_dutycycle = base_dutycycle;
 8000a28:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
{
public:
    void Init(float threshold, float ratio, float attack_time, float release_time, float sample_rate)
    {
        threshold_ = threshold;
        ratio_ = ratio;
 8000a2c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
        threshold_ = threshold;
 8000a30:	494e      	ldr	r1, [pc, #312]	; (8000b6c <recorder::SynthEngine::Init()+0x464>)
            duty_gain_ = 1.3;
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <recorder::SynthEngine::Init()+0x440>)
        sample_rate_ = sample_rate;
        attack_coeff_ = std::exp(-1.0f / (attack_time * sample_rate_));
 8000a34:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000b70 <recorder::SynthEngine::Init()+0x468>
 8000a38:	61a3      	str	r3, [r4, #24]
            freq_wobbliness_ = 0.0f;
 8000a3a:	6465      	str	r5, [r4, #68]	; 0x44
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8000a3c:	ee80 0a08 	vdiv.f32	s0, s0, s16
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8000a40:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
        threshold_ = threshold;
 8000a44:	f8c6 1278 	str.w	r1, [r6, #632]	; 0x278
        ratio_ = ratio;
 8000a48:	f8c6 227c 	str.w	r2, [r6, #636]	; 0x27c
        sample_rate_ = sample_rate;
 8000a4c:	ed86 8aa2 	vstr	s16, [r6, #648]	; 0x288
 8000a50:	f006 f8a4 	bl	8006b9c <expf>
        release_coeff_ = std::exp(-1.0f / (release_time * sample_rate_));
 8000a54:	eddf 7a47 	vldr	s15, [pc, #284]	; 8000b74 <recorder::SynthEngine::Init()+0x46c>
        attack_coeff_ = std::exp(-1.0f / (attack_time * sample_rate_));
 8000a58:	ed86 0aa0 	vstr	s0, [r6, #640]	; 0x280
 8000a5c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8000a60:	f006 f89c 	bl	8006b9c <expf>
                             attack_ms, decay_ms, sample_rate_);
            // ADSR parameters
            adsr_attack_time_ = 0.1f; // seconds
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <recorder::SynthEngine::Init()+0x470>)
            adsr_decay_time_ = 0.2f;
 8000a66:	4845      	ldr	r0, [pc, #276]	; (8000b7c <recorder::SynthEngine::Init()+0x474>)
        sampleRate_   = sampleRate;
        phase_        = 0.0f;
        currentDepth_ = 0.0f;
        buildingUp_   = false;
        // Ensure our internal "depth_" matches the initial target
        depth_        = targetDepth_;
 8000a68:	f8d6 22a0 	ldr.w	r2, [r6, #672]	; 0x2a0
            adsr_attack_time_ = 0.1f; // seconds
 8000a6c:	f8c6 32b0 	str.w	r3, [r6, #688]	; 0x2b0
            adsr_sustain_level_ = 0.8f;
            adsr_release_time_ = 0.1f;
 8000a70:	f8c6 32bc 	str.w	r3, [r6, #700]	; 0x2bc
            adsr_decay_time_ = 0.2f;
 8000a74:	f8c6 02b4 	str.w	r0, [r6, #692]	; 0x2b4
     * @param depth       Maximum vibrato depth (0.0 -> 0.25 in typical usage).
     * @param buildupTime Time in seconds to ramp from 0 -> depth after `Trigger()`.
     */
    void SetParameters(float rate, float depth, float buildupTime)
    {
        rate_        = rate;
 8000a78:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <recorder::SynthEngine::Init()+0x478>)
 8000a7a:	4942      	ldr	r1, [pc, #264]	; (8000b84 <recorder::SynthEngine::Init()+0x47c>)
            adsr_sustain_level_ = 0.8f;
 8000a7c:	4842      	ldr	r0, [pc, #264]	; (8000b88 <recorder::SynthEngine::Init()+0x480>)
        envelope_ = 0.0f;
 8000a7e:	f8c6 528c 	str.w	r5, [r6, #652]	; 0x28c
        release_coeff_ = std::exp(-1.0f / (release_time * sample_rate_));
 8000a82:	ed86 0aa1 	vstr	s0, [r6, #644]	; 0x284
 8000a86:	f8c6 02b8 	str.w	r0, [r6, #696]	; 0x2b8
 8000a8a:	f8c4 11f0 	str.w	r1, [r4, #496]	; 0x1f0
        depth_        = targetDepth_;
 8000a8e:	f8c6 229c 	str.w	r2, [r6, #668]	; 0x29c
        rate_        = rate;
 8000a92:	f8c6 3298 	str.w	r3, [r6, #664]	; 0x298
        buildingUp_   = false;
 8000a96:	2300      	movs	r3, #0
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
 8000a98:	493c      	ldr	r1, [pc, #240]	; (8000b8c <recorder::SynthEngine::Init()+0x484>)
        buildupTime_ = (buildupTime <= 0.0f) ? 0.01f : buildupTime;
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <recorder::SynthEngine::Init()+0x488>)
        sampleRate_   = sampleRate;
 8000a9c:	ed86 8aa4 	vstr	s16, [r6, #656]	; 0x290
        phase_        = 0.0f;
 8000aa0:	f8c6 5294 	str.w	r5, [r6, #660]	; 0x294
        currentDepth_ = 0.0f;
 8000aa4:	f8c6 52a8 	str.w	r5, [r6, #680]	; 0x2a8
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
 8000aa8:	f8c6 12a0 	str.w	r1, [r6, #672]	; 0x2a0
        buildupTime_ = (buildupTime <= 0.0f) ? 0.01f : buildupTime;
 8000aac:	f8c6 22a4 	str.w	r2, [r6, #676]	; 0x2a4
        buildingUp_   = false;
 8000ab0:	f886 32ac 	strb.w	r3, [r6, #684]	; 0x2ac
            freq_mult_ = freqMult;
 8000ab4:	edc4 8a7e 	vstr	s17, [r4, #504]	; 0x1f8
 8000ab8:	e088      	b.n	8000bcc <recorder::SynthEngine::Init()+0x4c4>
 8000aba:	bf00      	nop
 8000abc:	4302cf5c 	.word	0x4302cf5c
 8000ac0:	3f642905 	.word	0x3f642905
 8000ac4:	bd430c20 	.word	0xbd430c20
 8000ac8:	3c4b8680 	.word	0x3c4b8680
 8000acc:	39831000 	.word	0x39831000
 8000ad0:	3bcc2980 	.word	0x3bcc2980
 8000ad4:	3a23c800 	.word	0x3a23c800
 8000ad8:	3b802d22 	.word	0x3b802d22
 8000adc:	467a0000 	.word	0x467a0000
 8000ae0:	3a446737 	.word	0x3a446737
 8000ae4:	3a85b218 	.word	0x3a85b218
 8000ae8:	bfbc65fb 	.word	0xbfbc65fb
 8000aec:	3f10296d 	.word	0x3f10296d
 8000af0:	beade39b 	.word	0xbeade39b
 8000af4:	bfb80d8c 	.word	0xbfb80d8c
 8000af8:	3f2d1db0 	.word	0x3f2d1db0
 8000afc:	bf74e042 	.word	0xbf74e042
 8000b00:	bfb33dc4 	.word	0xbfb33dc4
 8000b04:	4142b852 	.word	0x4142b852
 8000b08:	418228f6 	.word	0x418228f6
 8000b0c:	44368000 	.word	0x44368000
 8000b10:	45188000 	.word	0x45188000
 8000b14:	3f817cab 	.word	0x3f817cab
 8000b18:	3c3c2611 	.word	0x3c3c2611
 8000b1c:	bc3c2611 	.word	0xbc3c2611
 8000b20:	3f8337e2 	.word	0x3f8337e2
 8000b24:	bff2bba3 	.word	0xbff2bba3
 8000b28:	3f7a1ed0 	.word	0x3f7a1ed0
 8000b2c:	3f823197 	.word	0x3f823197
 8000b30:	3c8a0814 	.word	0x3c8a0814
 8000b34:	bc8a0814 	.word	0xbc8a0814
 8000b38:	bfe4faba 	.word	0xbfe4faba
 8000b3c:	3f775f7f 	.word	0x3f775f7f
 8000b40:	3cc8eb3d 	.word	0x3cc8eb3d
 8000b44:	bcc8eb3d 	.word	0xbcc8eb3d
 8000b48:	3fa66666 	.word	0x3fa66666
 8000b4c:	bf8f974e 	.word	0xbf8f974e
 8000b50:	3fb33333 	.word	0x3fb33333
 8000b54:	3f73714c 	.word	0x3f73714c
 8000b58:	358637bd 	.word	0x358637bd
 8000b5c:	3f61be9a 	.word	0x3f61be9a
 8000b60:	3a83126f 	.word	0x3a83126f
 8000b64:	3d38553d 	.word	0x3d38553d
 8000b68:	3f536814 	.word	0x3f536814
 8000b6c:	41880000 	.word	0x41880000
 8000b70:	be4ccccd 	.word	0xbe4ccccd
 8000b74:	bd088889 	.word	0xbd088889
 8000b78:	3dcccccd 	.word	0x3dcccccd
 8000b7c:	3e4ccccd 	.word	0x3e4ccccd
 8000b80:	40c00000 	.word	0x40c00000
 8000b84:	3ba3d70a 	.word	0x3ba3d70a
 8000b88:	3f4ccccd 	.word	0x3f4ccccd
 8000b8c:	3df5c28f 	.word	0x3df5c28f
 8000b90:	3fe66666 	.word	0x3fe66666
 8000b94:	3f4f7eb1 	.word	0x3f4f7eb1
 8000b98:	bf954df0 	.word	0xbf954df0
 8000b9c:	bfb0aec0 	.word	0xbfb0aec0
 8000ba0:	3f68ba72 	.word	0x3f68ba72
 8000ba4:	44884000 	.word	0x44884000
 8000ba8:	bf9e3e9d 	.word	0xbf9e3e9d
 8000bac:	bfb140a2 	.word	0xbfb140a2
 8000bb0:	4141c28f 	.word	0x4141c28f
 8000bb4:	3f793977 	.word	0x3f793977
 8000bb8:	3e99999a 	.word	0x3e99999a
 8000bbc:	3ecccccd 	.word	0x3ecccccd
 8000bc0:	4202cccd 	.word	0x4202cccd
 8000bc4:	3aa812fd 	.word	0x3aa812fd
 8000bc8:	3f333333 	.word	0x3f333333
            // Initialize and set default vibrato parameters
            vibrato_.Init(sample_rate_);
            // Example: vibrato rate = 5 Hz, depth = 0.12, buildup = 1.8 seconds
            vibrato_.SetParameters(6.0f, 0.12f, 1.8f);
            formant_filter_.setFreqMult(mapFloat(fundamentalFreq_, kMinFundamental, kMaxFundamental, 0.7f, 2.0f));
        }
 8000bcc:	ecbd 8b02 	vpop	{d8}
 8000bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8000bd4:	f007 f9b6 	bl	8007f44 <rand>
            return formant_freq_mult_;
        }

        float mapFloat(float x, float in_min, float in_max, float out_min, float out_max)
        {
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bd8:	edd4 7a02 	vldr	s15, [r4, #8]
 8000bdc:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8000bc0 <recorder::SynthEngine::Init()+0x4b8>
 8000be0:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8000bc4 <recorder::SynthEngine::Init()+0x4bc>
 8000be4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000be8:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 8000bc8 <recorder::SynthEngine::Init()+0x4c0>
                current_dutycycle = base_dutycycle;
 8000bec:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8000bf0:	eee7 8a87 	vfma.f32	s17, s15, s14
            }
        }
 8000bf4:	e715      	b.n	8000a22 <recorder::SynthEngine::Init()+0x31a>
 8000bf6:	bf00      	nop

08000bf8 <recorder::SynthEngine::RenderOneSample()>:
        float RenderOneSample()
 8000bf8:	b570      	push	{r4, r5, r6, lr}
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000bfa:	f500 3580 	add.w	r5, r0, #65536	; 0x10000
        float RenderOneSample()
 8000bfe:	4604      	mov	r4, r0
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000c00:	f8d5 32c4 	ldr.w	r3, [r5, #708]	; 0x2c4
        float RenderOneSample()
 8000c04:	ed2d 8b06 	vpush	{d8-d10}
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f040 81eb 	bne.w	8000fe4 <recorder::SynthEngine::RenderOneSample()+0x3ec>
 8000c0e:	eddf 7af0 	vldr	s15, [pc, #960]	; 8000fd0 <recorder::SynthEngine::RenderOneSample()+0x3d8>
 8000c12:	ed95 7a97 	vldr	s14, [r5, #604]	; 0x25c
 8000c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	f240 81e9 	bls.w	8000ff4 <recorder::SynthEngine::RenderOneSample()+0x3fc>
                adsr_value_ = 0.0f;
 8000c22:	2300      	movs	r3, #0
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000c24:	edd5 7ab2 	vldr	s15, [r5, #712]	; 0x2c8
                adsr_value_ = 0.0f;
 8000c28:	f8c5 32c0 	str.w	r3, [r5, #704]	; 0x2c0
            float phaseIncrement = currentFrequency_ / sample_rate_;
 8000c2c:	edd4 6a01 	vldr	s13, [r4, #4]
            if (phase_ >= 1.0f)
 8000c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            phase_ += phaseIncrement;
 8000c34:	ed94 8a00 	vldr	s16, [r4]
            float phaseIncrement = currentFrequency_ / sample_rate_;
 8000c38:	eec6 9aa7 	vdiv.f32	s19, s13, s15
            if (--randomizationcounter <= 0)
 8000c3c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8000c40:	3b01      	subs	r3, #1
 8000c42:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
            phase_ += phaseIncrement;
 8000c46:	ee39 8a88 	vadd.f32	s16, s19, s16
            if (phase_ >= 1.0f)
 8000c4a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8000c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                phase_ -= 1.0f;
 8000c52:	bfa8      	it	ge
 8000c54:	ee38 8a47 	vsubge.f32	s16, s16, s14
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	ed84 8a00 	vstr	s16, [r4]
 8000c5e:	f340 82b6 	ble.w	80011ce <recorder::SynthEngine::RenderOneSample()+0x5d6>
            float sample = (phase < current_dutycycle) ? 1.0f : -1.0f;
 8000c62:	ed94 9a86 	vldr	s18, [r4, #536]	; 0x218
 8000c66:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8000c6a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8000c6e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8000c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float PolyBlep(float t, float dt)
        {
            if (dt == 0.0f)
 8000c76:	eef5 9a40 	vcmp.f32	s19, #0.0
            float sample = (phase < current_dutycycle) ? 1.0f : -1.0f;
 8000c7a:	bf54      	ite	pl
 8000c7c:	eeb0 aa67 	vmovpl.f32	s20, s15
 8000c80:	eeb0 aa68 	vmovmi.f32	s20, s17
            if (dt == 0.0f)
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	d04b      	beq.n	8000d22 <recorder::SynthEngine::RenderOneSample()+0x12a>
                return 0.0f;
            // Normalize t to [0, 1)
            t = fmodf(t, 1.0f);
 8000c8a:	eef0 0a68 	vmov.f32	s1, s17
 8000c8e:	eeb0 0a48 	vmov.f32	s0, s16
 8000c92:	f006 f8fb 	bl	8006e8c <fmodf>
            if (t < dt)
 8000c96:	eef4 9ac0 	vcmpe.f32	s19, s0
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	f300 82c7 	bgt.w	8001230 <recorder::SynthEngine::RenderOneSample()+0x638>
            {
                t /= dt;
                return t + t - t * t - 1.0f;
            }
            else if (t > 1.0f - dt)
 8000ca2:	ee78 7ae9 	vsub.f32	s15, s17, s19
 8000ca6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cae:	dd0d      	ble.n	8000ccc <recorder::SynthEngine::RenderOneSample()+0xd4>
            {
                t = (t - 1.0f) / dt;
 8000cb0:	ee30 0a68 	vsub.f32	s0, s0, s17
                return t * t + t + t + 1.0f;
 8000cb4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            sample += PolyBlep(phase, phase_increment);
 8000cb8:	ee7a 8a28 	vadd.f32	s17, s20, s17
                t = (t - 1.0f) / dt;
 8000cbc:	ee80 7a29 	vdiv.f32	s14, s0, s19
                return t * t + t + t + 1.0f;
 8000cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
            sample += PolyBlep(phase, phase_increment);
 8000cc4:	eee7 8a27 	vfma.f32	s17, s14, s15
 8000cc8:	eeb0 aa68 	vmov.f32	s20, s17
            float t = phase - current_dutycycle;
 8000ccc:	ee38 0a49 	vsub.f32	s0, s16, s18
            if (t < 0.0f)
 8000cd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	d503      	bpl.n	8000ce2 <recorder::SynthEngine::RenderOneSample()+0xea>
                t += 1.0f;
 8000cda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000cde:	ee30 0a27 	vadd.f32	s0, s0, s15
            t = fmodf(t, 1.0f);
 8000ce2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ce6:	f006 f8d1 	bl	8006e8c <fmodf>
            if (t < dt)
 8000cea:	eef4 9ac0 	vcmpe.f32	s19, s0
 8000cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf2:	f300 8290 	bgt.w	8001216 <recorder::SynthEngine::RenderOneSample()+0x61e>
            else if (t > 1.0f - dt)
 8000cf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000cfa:	ee37 7ae9 	vsub.f32	s14, s15, s19
 8000cfe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	f340 82a0 	ble.w	800124a <recorder::SynthEngine::RenderOneSample()+0x652>
                t = (t - 1.0f) / dt;
 8000d0a:	ee30 0a67 	vsub.f32	s0, s0, s15
                return t * t + t + t + 1.0f;
 8000d0e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
                t = (t - 1.0f) / dt;
 8000d12:	eec0 6a29 	vdiv.f32	s13, s0, s19
                return t * t + t + t + 1.0f;
 8000d16:	ee36 7a87 	vadd.f32	s14, s13, s14
 8000d1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000d1e:	eef0 9a67 	vmov.f32	s19, s15
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d22:	ed94 6a4f 	vldr	s12, [r4, #316]	; 0x13c
 8000d26:	edd4 6a5e 	vldr	s13, [r4, #376]	; 0x178
 8000d2a:	edd4 7a4d 	vldr	s15, [r4, #308]	; 0x134
 8000d2e:	ed94 7a5c 	vldr	s14, [r4, #368]	; 0x170
 8000d32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d36:	edd4 3a4e 	vldr	s7, [r4, #312]	; 0x138
 8000d3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000d3e:	edd4 4a5d 	vldr	s9, [r4, #372]	; 0x174
 8000d42:	edd4 5a4c 	vldr	s11, [r4, #304]	; 0x130
 8000d46:	edd4 6a5b 	vldr	s13, [r4, #364]	; 0x16c
 8000d4a:	eee5 7aa3 	vfma.f32	s15, s11, s7
 8000d4e:	ed94 4a50 	vldr	s8, [r4, #320]	; 0x140
 8000d52:	eea6 7aa4 	vfma.f32	s14, s13, s9
        }

        float Process(float input)
        {
            history_ += factor_ * (input - history_);
 8000d56:	ed94 6a83 	vldr	s12, [r4, #524]	; 0x20c
 8000d5a:	edd4 5a5f 	vldr	s11, [r4, #380]	; 0x17c
 8000d5e:	edd4 2a49 	vldr	s5, [r4, #292]	; 0x124
 8000d62:	ee7a 8a46 	vsub.f32	s17, s20, s12
 8000d66:	ed94 5a58 	vldr	s10, [r4, #352]	; 0x160
 8000d6a:	ed94 1a51 	vldr	s2, [r4, #324]	; 0x144
 8000d6e:	eee2 7ac4 	vfms.f32	s15, s5, s8
 8000d72:	ed94 3a60 	vldr	s6, [r4, #384]	; 0x180
 8000d76:	eea5 7a65 	vfms.f32	s14, s10, s11
 8000d7a:	edd4 6a82 	vldr	s13, [r4, #520]	; 0x208
 8000d7e:	ee78 8ae9 	vsub.f32	s17, s17, s19
 8000d82:	edd4 0a4a 	vldr	s1, [r4, #296]	; 0x128
 8000d86:	edd4 1a59 	vldr	s3, [r4, #356]	; 0x164
 8000d8a:	ed94 2a4b 	vldr	s4, [r4, #300]	; 0x12c
 8000d8e:	eea6 6aa8 	vfma.f32	s12, s13, s17
 8000d92:	edd4 2a5a 	vldr	s5, [r4, #360]	; 0x168
 8000d96:	eee0 7ac1 	vfms.f32	s15, s1, s2
 8000d9a:	edd4 6a6b 	vldr	s13, [r4, #428]	; 0x1ac
 8000d9e:	eea1 7ac3 	vfms.f32	s14, s3, s6
 8000da2:	ed94 0a6d 	vldr	s0, [r4, #436]	; 0x1b4
 8000da6:	ed94 5a6c 	vldr	s10, [r4, #432]	; 0x1b0
 8000daa:	ee66 6a80 	vmul.f32	s13, s13, s0
        x2_ = x1_;
 8000dae:	edc4 3a4f 	vstr	s7, [r4, #316]	; 0x13c
        y2_ = y1_;
 8000db2:	ed84 4a51 	vstr	s8, [r4, #324]	; 0x144
        x2_ = x1_;
 8000db6:	edc4 4a5e 	vstr	s9, [r4, #376]	; 0x178
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000dba:	eee6 7a02 	vfma.f32	s15, s12, s4
        y2_ = y1_;
 8000dbe:	edc4 5a60 	vstr	s11, [r4, #384]	; 0x180
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000dc2:	eea6 7a22 	vfma.f32	s14, s12, s5
 8000dc6:	ed84 6a83 	vstr	s12, [r4, #524]	; 0x20c
        x1_ = input;
 8000dca:	ed84 6a4e 	vstr	s12, [r4, #312]	; 0x138
 8000dce:	ed84 6a5d 	vstr	s12, [r4, #372]	; 0x174
            float output1 = filters_[0].Process(input);
            float output2 = filters_[1].Process(input);
            float output3 = filters_[2].Process(input);

            // Sum the outputs and apply a gain factor
            float output = (output1 + output2 * 0.3f + output3 * 0.3f);
 8000dd2:	ed9f 3a80 	vldr	s6, [pc, #512]	; 8000fd4 <recorder::SynthEngine::RenderOneSample()+0x3dc>
        y1_ = y0;
 8000dd6:	edc4 7a50 	vstr	s15, [r4, #320]	; 0x140
 8000dda:	ed84 7a5f 	vstr	s14, [r4, #380]	; 0x17c
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000dde:	edd4 5a6a 	vldr	s11, [r4, #424]	; 0x1a8
 8000de2:	ed94 4a6e 	vldr	s8, [r4, #440]	; 0x1b8
 8000de6:	eee5 6a85 	vfma.f32	s13, s11, s10
 8000dea:	ed94 1a67 	vldr	s2, [r4, #412]	; 0x19c
 8000dee:	ed94 2a6f 	vldr	s4, [r4, #444]	; 0x1bc
 8000df2:	edd4 1a68 	vldr	s3, [r4, #416]	; 0x1a0
 8000df6:	edd4 2a69 	vldr	s5, [r4, #420]	; 0x1a4

        // Process one sample through the high-pass filter
        float Process(float input)
        {
            // Track the low frequencies (DC removal)
            lowpassHistory_ += factor_ * (input - lowpassHistory_);
 8000dfa:	edd5 5a9d 	vldr	s11, [r5, #628]	; 0x274
 8000dfe:	edd5 4ab0 	vldr	s9, [r5, #704]	; 0x2c0
 8000e02:	eee1 6a44 	vfms.f32	s13, s2, s8
 8000e06:	edd4 0a06 	vldr	s1, [r4, #24]
 8000e0a:	edd5 3a9b 	vldr	s7, [r5, #620]	; 0x26c
 8000e0e:	ee64 4aa0 	vmul.f32	s9, s9, s1
        x2_ = x1_;
 8000e12:	ed84 5a6d 	vstr	s10, [r4, #436]	; 0x1b4

    float Process(float input)
    {
        // Calculate the envelope of the input signal
        float rectified = std::fabs(input);
        if (rectified > envelope_)
 8000e16:	ed95 5aa3 	vldr	s10, [r5, #652]	; 0x28c
        x1_ = input;
 8000e1a:	ed84 6a6c 	vstr	s12, [r4, #432]	; 0x1b0
        y2_ = y1_;
 8000e1e:	ed84 4a6f 	vstr	s8, [r4, #444]	; 0x1bc
 8000e22:	eee1 6ac2 	vfms.f32	s13, s3, s4
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000e26:	eee6 6a22 	vfma.f32	s13, s12, s5
 8000e2a:	ee37 7a26 	vadd.f32	s14, s14, s13
        y1_ = y0;
 8000e2e:	edc4 6a6e 	vstr	s13, [r4, #440]	; 0x1b8
 8000e32:	eef0 6a65 	vmov.f32	s13, s11
 8000e36:	eee7 7a03 	vfma.f32	s15, s14, s6
 8000e3a:	eeb0 7a65 	vmov.f32	s14, s11
 8000e3e:	eed7 6aa4 	vfnms.f32	s13, s15, s9
 8000e42:	eea3 7aa6 	vfma.f32	s14, s7, s13
            
            // Subtract the low frequencies from the original signal
            float output = input - lowpassHistory_;
 8000e46:	eeb0 8a47 	vmov.f32	s16, s14
            lowpassHistory_ += factor_ * (input - lowpassHistory_);
 8000e4a:	ed85 7a9d 	vstr	s14, [r5, #628]	; 0x274
            float output = input - lowpassHistory_;
 8000e4e:	ee97 8aa4 	vfnms.f32	s16, s15, s9
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000e52:	eef0 7ac8 	vabs.f32	s15, s16

            history_ = output;
 8000e56:	ed85 8a9c 	vstr	s16, [r5, #624]	; 0x270
 8000e5a:	eef4 7ac5 	vcmpe.f32	s15, s10
        {
            envelope_ = attack_coeff_ * (envelope_ - rectified) + rectified;
 8000e5e:	ee35 5a67 	vsub.f32	s10, s10, s15
        if (rectified > envelope_)
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            envelope_ = attack_coeff_ * (envelope_ - rectified) + rectified;
 8000e66:	bfcc      	ite	gt
 8000e68:	ed95 7aa0 	vldrgt	s14, [r5, #640]	; 0x280
        }
        else
        {
            envelope_ = release_coeff_ * (envelope_ - rectified) + rectified;
 8000e6c:	ed95 7aa1 	vldrle	s14, [r5, #644]	; 0x284
 8000e70:	eee7 7a05 	vfma.f32	s15, s14, s10
        }

        // Calculate gain reduction
        float gain = 1.0f;
        if (envelope_ > threshold_)
 8000e74:	ed95 7a9e 	vldr	s14, [r5, #632]	; 0x278
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	edc5 7aa3 	vstr	s15, [r5, #652]	; 0x28c
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	dd0b      	ble.n	8000e9e <recorder::SynthEngine::RenderOneSample()+0x2a6>
        {
            float over_threshold = envelope_ - threshold_;
 8000e86:	ee77 5ac7 	vsub.f32	s11, s15, s14
            float compressed = threshold_ + (over_threshold / ratio_);
 8000e8a:	ed95 6a9f 	vldr	s12, [r5, #636]	; 0x27c
 8000e8e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8000e92:	ee36 7a87 	vadd.f32	s14, s13, s14
            gain = compressed / envelope_;
 8000e96:	eec7 6a27 	vdiv.f32	s13, s14, s15
        }

        // Apply gain reduction to the input signal
        return input * gain;
 8000e9a:	ee28 8a26 	vmul.f32	s16, s16, s13
 8000e9e:	edd5 7a99 	vldr	s15, [r5, #612]	; 0x264
            sample = delay_.Process(sample, delay_time_, delay_feedback_);
 8000ea2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8000ea6:	eeb0 6a67 	vmov.f32	s12, s15
 8000eaa:	edd5 5a98 	vldr	s11, [r5, #608]	; 0x260

    float Process(float input, float delay, float feedback)
    {
        delay *= delay;
        delay = delay_time_lpf_.Process(delay);
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8000eae:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000fd8 <recorder::SynthEngine::RenderOneSample()+0x3e0>
 8000eb2:	ee96 6aa6 	vfnms.f32	s12, s13, s13
 8000eb6:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 8000eba:	eee5 7a86 	vfma.f32	s15, s11, s12
 8000ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ec2:	edc5 7a99 	vstr	s15, [r5, #612]	; 0x264
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8000ec6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	f2c0 817b 	blt.w	80011c8 <recorder::SynthEngine::RenderOneSample()+0x5d0>
 8000ed2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8000ed6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ede:	f340 8132 	ble.w	8001146 <recorder::SynthEngine::RenderOneSample()+0x54e>
 8000ee2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    OnePoleLowpass delay_time_lpf_;
    float interpolator_history_;

    uint32_t ReadIndex(uint32_t offset)
    {
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8000ee6:	f8d5 6224 	ldr.w	r6, [r5, #548]	; 0x224
 8000eea:	1af3      	subs	r3, r6, r3
 8000eec:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8000ef0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ef4:	ed93 6a89 	vldr	s12, [r3, #548]	; 0x224
        output = std::clamp<float>(input + output * feedback, -2, 2);
 8000ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000efc:	eddf 4a38 	vldr	s9, [pc, #224]	; 8000fe0 <recorder::SynthEngine::RenderOneSample()+0x3e8>
 8000f00:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
        follower_.Reset();
    }

    float Process(float in)
    {
        float envelope = follower_.Process(in * pregain_);
 8000f04:	edd5 7a8a 	vldr	s15, [r5, #552]	; 0x228
 8000f08:	eef8 5a00 	vmov.f32	s11, #128	; 0xc0000000 -2.0

    float Process(float in)
    {
        in = std::abs(in);

        if (in >= envelope_)
 8000f0c:	ed95 0a92 	vldr	s0, [r5, #584]	; 0x248
 8000f10:	fe86 7ac7 	vminnm.f32	s14, s13, s14
 8000f14:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
 8000f18:	eea6 8a07 	vfma.f32	s16, s12, s14
 8000f1c:	ed85 6a9a 	vstr	s12, [r5, #616]	; 0x268
 8000f20:	fe88 8a45 	vminnm.f32	s16, s16, s10
 8000f24:	fe88 8a25 	vmaxnm.f32	s16, s16, s11
 8000f28:	ee68 7a27 	vmul.f32	s15, s16, s15
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000f2c:	eef0 7ae7 	vabs.f32	s15, s15
 8000f30:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	f2c0 813e 	blt.w	80011b8 <recorder::SynthEngine::RenderOneSample()+0x5c0>
        {
            envelope_ += attack_rate_ * (in - envelope_);
 8000f3c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000f40:	ed95 7a8e 	vldr	s14, [r5, #568]	; 0x238
            hold_count_ = 0;
 8000f44:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8000f46:	eea7 0a27 	vfma.f32	s0, s14, s15
            hold_count_ = 0;
 8000f4a:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
            envelope_ += attack_rate_ * (in - envelope_);
 8000f4e:	ed85 0a92 	vstr	s0, [r5, #584]	; 0x248
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
 8000f52:	f005 ffbf 	bl	8006ed4 <log10f>
        float sense = 20 * std::log10(envelope);
 8000f56:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
        // h11 = t^3 - t^2
        // We multiply h01 by A = ratio * softness to provide the step from 0
        // to A. We multiply h11 by 2A to make the ending slope equal to ratio.
        // Then, the sum of the terms reduces to A*t^2.

        if (db > softness_)
 8000f5a:	edd5 7a8c 	vldr	s15, [r5, #560]	; 0x230
        float sense = 20 * std::log10(envelope);
 8000f5e:	ee20 0a07 	vmul.f32	s0, s0, s14
        if (db > softness_)
 8000f62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	f340 80d3 	ble.w	8001114 <recorder::SynthEngine::RenderOneSample()+0x51c>
        {
            return ratio_ * db;
 8000f6e:	edd5 7a8b 	vldr	s15, [r5, #556]	; 0x22c
 8000f72:	ee20 0a27 	vmul.f32	s0, s0, s15
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 8000f76:	eddf 7a19 	vldr	s15, [pc, #100]	; 8000fdc <recorder::SynthEngine::RenderOneSample()+0x3e4>
        buffer_[write_head_] = compressor_.Process(output);
 8000f7a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8000f7e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000f82:	f005 fe0b 	bl	8006b9c <expf>
        output *= 0.5;
 8000f86:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
        return in * std::pow(10.0, gain / 20);
 8000f8a:	ee20 7a08 	vmul.f32	s14, s0, s16
        if (in >= envelope_)
 8000f8e:	edd5 7a97 	vldr	s15, [r5, #604]	; 0x25c
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000f92:	1c73      	adds	r3, r6, #1
        output *= 0.5;
 8000f94:	ee28 0a26 	vmul.f32	s0, s16, s13
        buffer_[write_head_] = compressor_.Process(output);
 8000f98:	ed84 7a89 	vstr	s14, [r4, #548]	; 0x224
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000f9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fa0:	eeb0 7ac0 	vabs.f32	s14, s0
 8000fa4:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 8000fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	f2c0 80a6 	blt.w	8001100 <recorder::SynthEngine::RenderOneSample()+0x508>
            envelope_ += attack_rate_ * (in - envelope_);
 8000fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb8:	edd5 6a93 	vldr	s13, [r5, #588]	; 0x24c
            hold_count_ = 0;
 8000fbc:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8000fbe:	eee6 7a87 	vfma.f32	s15, s13, s14
            hold_count_ = 0;
 8000fc2:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
        }
 8000fc6:	ecbd 8b06 	vpop	{d8-d10}
            envelope_ += attack_rate_ * (in - envelope_);
 8000fca:	edc5 7a97 	vstr	s15, [r5, #604]	; 0x25c
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	3a83126f 	.word	0x3a83126f
 8000fd4:	3e99999a 	.word	0x3e99999a
 8000fd8:	3f666666 	.word	0x3f666666
 8000fdc:	3debc8e3 	.word	0x3debc8e3
 8000fe0:	00000000 	.word	0x00000000
            switch (adsr_state_)
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	f63f ae1b 	bhi.w	8000c22 <recorder::SynthEngine::RenderOneSample()+0x2a>
 8000fec:	e8df f003 	tbb	[pc, r3]
 8000ff0:	46212807 	.word	0x46212807
        }
 8000ff4:	ecbd 8b06 	vpop	{d8-d10}
                return 0.0f;
 8000ff8:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 8000fe0 <recorder::SynthEngine::RenderOneSample()+0x3e8>
        }
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000ffe:	edd5 7ab2 	vldr	s15, [r5, #712]	; 0x2c8
 8001002:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001006:	edd5 6aac 	vldr	s13, [r5, #688]	; 0x2b0
                adsr_value_ += increment;
 800100a:	edd5 5ab0 	vldr	s11, [r5, #704]	; 0x2c0
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 800100e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001012:	ee86 7a26 	vdiv.f32	s14, s12, s13
                adsr_value_ += increment;
 8001016:	ee37 7a25 	vadd.f32	s14, s14, s11
                if (adsr_value_ >= 1.0f)
 800101a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	f2c0 8115 	blt.w	8001250 <recorder::SynthEngine::RenderOneSample()+0x658>
                    adsr_state_ = ADSRState::kDecay;
 8001026:	2302      	movs	r3, #2
                    adsr_value_ = 1.0f;
 8001028:	ed85 6ab0 	vstr	s12, [r5, #704]	; 0x2c0
                    adsr_state_ = ADSRState::kDecay;
 800102c:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 8001030:	e5fc      	b.n	8000c2c <recorder::SynthEngine::RenderOneSample()+0x34>
                adsr_value_ = adsr_sustain_level_;
 8001032:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8001036:	edd5 7ab2 	vldr	s15, [r5, #712]	; 0x2c8
                adsr_value_ = adsr_sustain_level_;
 800103a:	f8c5 32c0 	str.w	r3, [r5, #704]	; 0x2c0
                break;
 800103e:	e5f5      	b.n	8000c2c <recorder::SynthEngine::RenderOneSample()+0x34>
                float decrement = (1.0f - adsr_sustain_level_) / (adsr_decay_time_ * sample_rate_);
 8001040:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001044:	edd5 5aae 	vldr	s11, [r5, #696]	; 0x2b8
 8001048:	edd5 7ab2 	vldr	s15, [r5, #712]	; 0x2c8
 800104c:	edd5 6aad 	vldr	s13, [r5, #692]	; 0x2b4
 8001050:	ee36 6a65 	vsub.f32	s12, s12, s11
                adsr_value_ -= decrement;
 8001054:	ed95 7ab0 	vldr	s14, [r5, #704]	; 0x2c0
                float decrement = (1.0f - adsr_sustain_level_) / (adsr_decay_time_ * sample_rate_);
 8001058:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800105c:	ee86 5a26 	vdiv.f32	s10, s12, s13
                adsr_value_ -= decrement;
 8001060:	ee37 7a45 	vsub.f32	s14, s14, s10
                if (adsr_value_ <= adsr_sustain_level_)
 8001064:	eef4 5ac7 	vcmpe.f32	s11, s14
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	f2c0 80f0 	blt.w	8001250 <recorder::SynthEngine::RenderOneSample()+0x658>
                    adsr_state_ = ADSRState::kSustain;
 8001070:	2303      	movs	r3, #3
                    adsr_value_ = adsr_sustain_level_;
 8001072:	edc5 5ab0 	vstr	s11, [r5, #704]	; 0x2c0
                    adsr_state_ = ADSRState::kSustain;
 8001076:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 800107a:	e5d7      	b.n	8000c2c <recorder::SynthEngine::RenderOneSample()+0x34>
                float decrement = adsr_sustain_level_ / (adsr_release_time_ * sample_rate_);
 800107c:	edd5 7ab2 	vldr	s15, [r5, #712]	; 0x2c8
 8001080:	edd5 6aaf 	vldr	s13, [r5, #700]	; 0x2bc
 8001084:	edd5 5aae 	vldr	s11, [r5, #696]	; 0x2b8
 8001088:	ee67 6aa6 	vmul.f32	s13, s15, s13
                adsr_value_ -= decrement;
 800108c:	ed95 7ab0 	vldr	s14, [r5, #704]	; 0x2c0
            if (filterMode_ == FILTER_MODE_NORMAL)
 8001090:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
                float decrement = adsr_sustain_level_ / (adsr_release_time_ * sample_rate_);
 8001094:	ee85 6aa6 	vdiv.f32	s12, s11, s13
                adsr_value_ -= decrement;
 8001098:	ee37 7a46 	vsub.f32	s14, s14, s12
 800109c:	ed85 7ab0 	vstr	s14, [r5, #704]	; 0x2c0
 80010a0:	b9e3      	cbnz	r3, 80010dc <recorder::SynthEngine::RenderOneSample()+0x4e4>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80010a2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80010a6:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <recorder::SynthEngine::RenderOneSample()+0x6a8>)
 80010a8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80010ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80010b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80010b2:	6f99      	ldr	r1, [r3, #120]	; 0x78
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80010b4:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80010b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80010bc:	f8c0 11cc 	str.w	r1, [r0, #460]	; 0x1cc
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80010c0:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 80010c4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80010c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80010cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 80010d0:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80010d4:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80010d8:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
                if (adsr_value_ <= 0.0f)
 80010dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
            formantRate_ = rate;
 80010e0:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <recorder::SynthEngine::RenderOneSample()+0x6ac>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	f63f ad9e 	bhi.w	8000c2c <recorder::SynthEngine::RenderOneSample()+0x34>
                    adsr_state_ = ADSRState::kIdle;
 80010f0:	2300      	movs	r3, #0
                    adsr_value_ = 0.0f;
 80010f2:	f8c5 22c0 	str.w	r2, [r5, #704]	; 0x2c0
                    adsr_state_ = ADSRState::kIdle;
 80010f6:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
                    is_note_on_ = false;
 80010fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80010fe:	e595      	b.n	8000c2c <recorder::SynthEngine::RenderOneSample()+0x34>
        }
        else if (hold_count_ < hold_samples_)
 8001100:	e9d5 2395 	ldrd	r2, r3, [r5, #596]	; 0x254
 8001104:	4293      	cmp	r3, r2
 8001106:	d272      	bcs.n	80011ee <recorder::SynthEngine::RenderOneSample()+0x5f6>
        {
            hold_count_++;
 8001108:	3301      	adds	r3, #1
        }
 800110a:	ecbd 8b06 	vpop	{d8-d10}
 800110e:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
 8001112:	bd70      	pop	{r4, r5, r6, pc}
        }
        else
        {
            float t = std::max<float>(db * t_scaler_ + 0.5, 0);
 8001114:	edd5 6a8d 	vldr	s13, [r5, #564]	; 0x234
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001118:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800111c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001120:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	f100 8095 	bmi.w	8001256 <recorder::SynthEngine::RenderOneSample()+0x65e>
 800112c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001130:	ee30 0a07 	vadd.f32	s0, s0, s14
            return ratio_ * softness_ * t * t;
 8001134:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001138:	ed95 7a8b 	vldr	s14, [r5, #556]	; 0x22c
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001144:	e717      	b.n	8000f76 <recorder::SynthEngine::RenderOneSample()+0x37e>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8001146:	eddf 7a58 	vldr	s15, [pc, #352]	; 80012a8 <recorder::SynthEngine::RenderOneSample()+0x6b0>
        float delay_samples = time * kAudioSampleRate;
 800114a:	ed9f 6a58 	vldr	s12, [pc, #352]	; 80012ac <recorder::SynthEngine::RenderOneSample()+0x6b4>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 800114e:	ee77 7a27 	vadd.f32	s15, s14, s15
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001152:	f8d5 6224 	ldr.w	r6, [r5, #548]	; 0x224
        float delay_samples = time * kAudioSampleRate;
 8001156:	ee67 7a86 	vmul.f32	s15, s15, s12
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 800115a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 800115e:	ee37 7aa5 	vadd.f32	s14, s15, s11
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8001162:	eeb8 5a46 	vcvt.f32.u32	s10, s12
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001166:	ee16 2a10 	vmov	r2, s12
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 800116a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 800116e:	1ab2      	subs	r2, r6, r2
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8001170:	ee17 3a10 	vmov	r3, s14
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8001174:	ee37 7ac5 	vsub.f32	s14, s15, s10
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001178:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800117c:	1af3      	subs	r3, r6, r3
    }

    float AllpassInterpolator(float a, float b, float t)
    {
        if (t == 0)
 800117e:	eeb5 7a40 	vcmp.f32	s14, #0.0
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8001182:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001186:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 800118a:	ed92 6a89 	vldr	s12, [r2, #548]	; 0x224
        if (t == 0)
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8001192:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001196:	edd3 4a89 	vldr	s9, [r3, #548]	; 0x224
        if (t == 0)
 800119a:	f43f aead 	beq.w	8000ef8 <recorder::SynthEngine::RenderOneSample()+0x300>
        {
            interpolator_history_ = a;
        }
        else
        {
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 800119e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80011a2:	ed95 7a9a 	vldr	s14, [r5, #616]	; 0x268
 80011a6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80011aa:	ee75 5a85 	vadd.f32	s11, s11, s10
 80011ae:	eeb0 6a64 	vmov.f32	s12, s9
 80011b2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80011b6:	e69f      	b.n	8000ef8 <recorder::SynthEngine::RenderOneSample()+0x300>
        else if (hold_count_ < hold_samples_)
 80011b8:	e9d5 2390 	ldrd	r2, r3, [r5, #576]	; 0x240
 80011bc:	4293      	cmp	r3, r2
 80011be:	d221      	bcs.n	8001204 <recorder::SynthEngine::RenderOneSample()+0x60c>
            hold_count_++;
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
 80011c6:	e6c4      	b.n	8000f52 <recorder::SynthEngine::RenderOneSample()+0x35a>
 80011c8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80011cc:	e68b      	b.n	8000ee6 <recorder::SynthEngine::RenderOneSample()+0x2ee>
            if (duty_cyclerandomization > 0.0f)
 80011ce:	edd4 7a85 	vldr	s15, [r4, #532]	; 0x214
 80011d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	dc3f      	bgt.n	800125c <recorder::SynthEngine::RenderOneSample()+0x664>
                current_dutycycle = base_dutycycle;
 80011dc:	ed94 9a84 	vldr	s18, [r4, #528]	; 0x210
 80011e0:	ed84 9a86 	vstr	s18, [r4, #536]	; 0x218
                randomizationcounter = randomizationperiod;
 80011e4:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 80011e8:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
 80011ec:	e53b      	b.n	8000c66 <recorder::SynthEngine::RenderOneSample()+0x6e>
        }
        else
        {
            envelope_ += decay_rate_ * (in - envelope_);
 80011ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f2:	edd5 6a94 	vldr	s13, [r5, #592]	; 0x250
 80011f6:	ecbd 8b06 	vpop	{d8-d10}
 80011fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80011fe:	edc5 7a97 	vstr	s15, [r5, #604]	; 0x25c
 8001202:	bd70      	pop	{r4, r5, r6, pc}
 8001204:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001208:	ed95 7a8f 	vldr	s14, [r5, #572]	; 0x23c
 800120c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001210:	ed85 0a92 	vstr	s0, [r5, #584]	; 0x248
 8001214:	e69d      	b.n	8000f52 <recorder::SynthEngine::RenderOneSample()+0x35a>
                t /= dt;
 8001216:	ee80 7a29 	vdiv.f32	s14, s0, s19
                return t + t - t * t - 1.0f;
 800121a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800121e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8001222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001226:	eee7 8a27 	vfma.f32	s17, s14, s15
 800122a:	eef0 9a68 	vmov.f32	s19, s17
 800122e:	e578      	b.n	8000d22 <recorder::SynthEngine::RenderOneSample()+0x12a>
                t /= dt;
 8001230:	ee80 7a29 	vdiv.f32	s14, s0, s19
                return t + t - t * t - 1.0f;
 8001234:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            sample += PolyBlep(phase, phase_increment);
 8001238:	ee7a 8a68 	vsub.f32	s17, s20, s17
                return t + t - t * t - 1.0f;
 800123c:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sample += PolyBlep(phase, phase_increment);
 8001240:	eee7 8a27 	vfma.f32	s17, s14, s15
 8001244:	eeb0 aa68 	vmov.f32	s20, s17
                return t + t - t * t - 1.0f;
 8001248:	e540      	b.n	8000ccc <recorder::SynthEngine::RenderOneSample()+0xd4>
            }
            else
            {
                return 0.0f;
 800124a:	eddf 9a19 	vldr	s19, [pc, #100]	; 80012b0 <recorder::SynthEngine::RenderOneSample()+0x6b8>
 800124e:	e568      	b.n	8000d22 <recorder::SynthEngine::RenderOneSample()+0x12a>
                adsr_value_ -= decrement;
 8001250:	ed85 7ab0 	vstr	s14, [r5, #704]	; 0x2c0
 8001254:	e4ea      	b.n	8000c2c <recorder::SynthEngine::RenderOneSample()+0x34>
 8001256:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80012b0 <recorder::SynthEngine::RenderOneSample()+0x6b8>
 800125a:	e76d      	b.n	8001138 <recorder::SynthEngine::RenderOneSample()+0x540>
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 800125c:	f006 fe72 	bl	8007f44 <rand>
 8001260:	ee07 0a90 	vmov	s15, r0
 8001264:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001268:	ed9f 5a12 	vldr	s10, [pc, #72]	; 80012b4 <recorder::SynthEngine::RenderOneSample()+0x6bc>
 800126c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                float max_offset = 0.6f * duty_cyclerandomization; // Max 60% variation at full randomization
 8001270:	eddf 5a11 	vldr	s11, [pc, #68]	; 80012b8 <recorder::SynthEngine::RenderOneSample()+0x6c0>
 8001274:	edd4 7a85 	vldr	s15, [r4, #532]	; 0x214
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001278:	ed94 0a84 	vldr	s0, [r4, #528]	; 0x210
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 800127c:	eea6 7a85 	vfma.f32	s14, s13, s10
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001280:	ed9f 9a09 	vldr	s18, [pc, #36]	; 80012a8 <recorder::SynthEngine::RenderOneSample()+0x6b0>
                float max_offset = 0.6f * duty_cyclerandomization; // Max 60% variation at full randomization
 8001284:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001288:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80012bc <recorder::SynthEngine::RenderOneSample()+0x6c4>
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 800128c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001290:	fe80 9a09 	vmaxnm.f32	s18, s0, s18
 8001294:	fe89 9a46 	vminnm.f32	s18, s18, s12
 8001298:	ed84 9a86 	vstr	s18, [r4, #536]	; 0x218
        }
 800129c:	e7a2      	b.n	80011e4 <recorder::SynthEngine::RenderOneSample()+0x5ec>
 800129e:	bf00      	nop
 80012a0:	08008a34 	.word	0x08008a34
 80012a4:	3a83126f 	.word	0x3a83126f
 80012a8:	3dcccccd 	.word	0x3dcccccd
 80012ac:	467a0000 	.word	0x467a0000
 80012b0:	00000000 	.word	0x00000000
 80012b4:	30800000 	.word	0x30800000
 80012b8:	3f19999a 	.word	0x3f19999a
 80012bc:	3f666666 	.word	0x3f666666

080012c0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)>:
        void Process(float (&block)[kAudioOSFactor],
 80012c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c4:	ed2d 8b0c 	vpush	{d8-d13}
 80012c8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80012cc:	eeb0 ca40 	vmov.f32	s24, s0
 80012d0:	eeb0 8a60 	vmov.f32	s16, s1
 80012d4:	4604      	mov	r4, r0
 80012d6:	eeb0 aa41 	vmov.f32	s20, s2
 80012da:	4688      	mov	r8, r1
 80012dc:	4616      	mov	r6, r2
 80012de:	469a      	mov	sl, r3
            if (freq_select_button && (hold != was_hold_))
 80012e0:	b14f      	cbz	r7, 80012f6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x36>
 80012e2:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 80012e6:	4553      	cmp	r3, sl
 80012e8:	d005      	beq.n	80012f6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x36>
                is_minor_ = !is_minor_;
 80012ea:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
            if (std::fabs(formant_pot_val - previous_formant_pot_val_) > 0.05f)
 80012f6:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 80012fa:	ed9f 7af0 	vldr	s14, [pc, #960]	; 80016bc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3fc>
 80012fe:	ee78 7a67 	vsub.f32	s15, s16, s15
            was_hold_ = hold;
 8001302:	f884 a04a 	strb.w	sl, [r4, #74]	; 0x4a
  { return __builtin_fabsf(__x); }
 8001306:	eef0 7ae7 	vabs.f32	s15, s15
            if (std::fabs(formant_pot_val - previous_formant_pot_val_) > 0.05f)
 800130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	f300 8495 	bgt.w	8001c40 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x980>
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001316:	edd4 8a7c 	vldr	s17, [r4, #496]	; 0x1f0
            if (filterMode_ == FILTER_MODE_WAH)
 800131a:	f894 b1fd 	ldrb.w	fp, [r4, #509]	; 0x1fd
 800131e:	f1bb 0f01 	cmp.w	fp, #1
 8001322:	d144      	bne.n	80013ae <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xee>
                const auto &vowelA = vowelData[currentVoice_][VOWEL_A];
 8001324:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001328:	edd4 7a80 	vldr	s15, [r4, #512]	; 0x200
 800132c:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 8001330:	4ae3      	ldr	r2, [pc, #908]	; (80016c0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x400>)
 8001332:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001336:	edd2 4a0c 	vldr	s9, [r2, #48]	; 0x30
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 800133a:	ed92 5a0d 	vldr	s10, [r2, #52]	; 0x34
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 800133e:	edd2 5a0e 	vldr	s11, [r2, #56]	; 0x38
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001342:	ed92 6a0f 	vldr	s12, [r2, #60]	; 0x3c
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001346:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 800134a:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 800134e:	edd2 1a1e 	vldr	s3, [r2, #120]	; 0x78
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001352:	ed92 2a1f 	vldr	s4, [r2, #124]	; 0x7c
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001356:	edd2 2a20 	vldr	s5, [r2, #128]	; 0x80
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 800135a:	ee71 1ae4 	vsub.f32	s3, s3, s9
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 800135e:	ed92 3a21 	vldr	s6, [r2, #132]	; 0x84
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001362:	ee32 2a45 	vsub.f32	s4, s4, s10
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001366:	edd2 3a22 	vldr	s7, [r2, #136]	; 0x88
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 800136a:	ee72 2ae5 	vsub.f32	s5, s5, s11
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 800136e:	ed92 4a23 	vldr	s8, [r2, #140]	; 0x8c
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001372:	ee33 3a46 	vsub.f32	s6, s6, s12
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001376:	ee73 3ae6 	vsub.f32	s7, s7, s13
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 800137a:	ee34 4a47 	vsub.f32	s8, s8, s14
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 800137e:	eee7 4aa1 	vfma.f32	s9, s15, s3
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001382:	eea7 5a82 	vfma.f32	s10, s15, s4
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001386:	eee7 5aa2 	vfma.f32	s11, s15, s5
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 800138a:	eea7 6a83 	vfma.f32	s12, s15, s6
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 800138e:	eee7 6aa3 	vfma.f32	s13, s15, s7
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001392:	eea7 7a84 	vfma.f32	s14, s15, s8
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001396:	edc4 4a73 	vstr	s9, [r4, #460]	; 0x1cc
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 800139a:	ed84 5a74 	vstr	s10, [r4, #464]	; 0x1d0
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 800139e:	edc4 5a75 	vstr	s11, [r4, #468]	; 0x1d4
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 80013a2:	ed84 6a79 	vstr	s12, [r4, #484]	; 0x1e4
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 80013a6:	edc4 6a7a 	vstr	s13, [r4, #488]	; 0x1e8
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 80013aa:	ed84 7a7b 	vstr	s14, [r4, #492]	; 0x1ec
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 80013ae:	ed94 7a70 	vldr	s14, [r4, #448]	; 0x1c0
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80013b2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80013b6:	ed94 6a73 	vldr	s12, [r4, #460]	; 0x1cc
        float alpha = sin_omega / (2.0f * Q_);
 80013ba:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80013be:	edd4 7a76 	vldr	s15, [r4, #472]	; 0x1d8
                a1_ = -2.0f * cos_omega;
 80013c2:	eeb8 ba00 	vmov.f32	s22, #128	; 0xc0000000 -2.0
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 80013c6:	ee36 6a47 	vsub.f32	s12, s12, s14
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80013ca:	edd4 6a79 	vldr	s13, [r4, #484]	; 0x1e4
                    currentFormantFreqs_[i] * freq_mult_,
 80013ce:	edd4 9a7e 	vldr	s19, [r4, #504]	; 0x1f8
        b1_ /= a0_;
 80013d2:	f04f 0900 	mov.w	r9, #0
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80013d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80013da:	eddf baba 	vldr	s23, [pc, #744]	; 80016c4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x404>
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80013de:	eea6 7a28 	vfma.f32	s14, s12, s17
 80013e2:	edd4 5a44 	vldr	s11, [r4, #272]	; 0x110
                    currentFormantQs_[i] * q_mult_);
 80013e6:	ed94 9a7d 	vldr	s18, [r4, #500]	; 0x1f4
     */
    void SetDepth(float newDepth)
    {
        // Map from [0,1] to [0,0.25]:
        float mapped = newDepth * 0.25f;
        targetDepth_ = mapped;
 80013ea:	f504 3580 	add.w	r5, r4, #65536	; 0x10000
                currentFormantQs_[i] += qDiff * formantRate_;
 80013ee:	eee6 7aa8 	vfma.f32	s15, s13, s17
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80013f2:	ed84 8a47 	vstr	s16, [r4, #284]	; 0x11c
                filters_[i].SetParameters(
 80013f6:	ee67 6a29 	vmul.f32	s13, s14, s19
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80013fa:	ed84 7a70 	vstr	s14, [r4, #448]	; 0x1c0
                filters_[i].SetParameters(
 80013fe:	ee27 da89 	vmul.f32	s26, s15, s18
                currentFormantQs_[i] += qDiff * formantRate_;
 8001402:	edc4 7a76 	vstr	s15, [r4, #472]	; 0x1d8
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001406:	ee26 7aab 	vmul.f32	s14, s13, s23
        centerFrequency_ = centerFrequency;
 800140a:	edc4 6a45 	vstr	s13, [r4, #276]	; 0x114
        Q_ = Q;
 800140e:	ed84 da46 	vstr	s26, [r4, #280]	; 0x118
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001412:	eec7 da25 	vdiv.f32	s27, s14, s11
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001416:	eeb0 0a6d 	vmov.f32	s0, s27
 800141a:	f005 fc31 	bl	8006c80 <sinf>
 800141e:	eef0 ca40 	vmov.f32	s25, s0
  { return __builtin_cosf(__x); }
 8001422:	eeb0 0a6d 	vmov.f32	s0, s27
 8001426:	f005 fa8b 	bl	8006940 <cosf>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 800142a:	ed94 6a71 	vldr	s12, [r4, #452]	; 0x1c4
        float alpha = sin_omega / (2.0f * Q_);
 800142e:	ee6c caaa 	vmul.f32	s25, s25, s21
 8001432:	ed94 5a74 	vldr	s10, [r4, #464]	; 0x1d0
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001436:	edd4 6a77 	vldr	s13, [r4, #476]	; 0x1dc
                a1_ = -2.0f * cos_omega;
 800143a:	ee20 7a0b 	vmul.f32	s14, s0, s22
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 800143e:	ee35 5a46 	vsub.f32	s10, s10, s12
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001442:	edd4 5a7a 	vldr	s11, [r4, #488]	; 0x1e8
        float alpha = sin_omega / (2.0f * Q_);
 8001446:	eecc 7a8d 	vdiv.f32	s15, s25, s26
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 800144a:	ed84 8a56 	vstr	s16, [r4, #344]	; 0x158
        b1_ /= a0_;
 800144e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001452:	eea5 6a28 	vfma.f32	s12, s10, s17
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001456:	ee75 5ae6 	vsub.f32	s11, s11, s13
                currentFormantQs_[i] += qDiff * formantRate_;
 800145a:	eee8 6aa5 	vfma.f32	s13, s17, s11
                filters_[i].SetParameters(
 800145e:	ee69 5a86 	vmul.f32	s11, s19, s12
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001462:	ed84 6a71 	vstr	s12, [r4, #452]	; 0x1c4
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001466:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
 800146a:	ee25 5aab 	vmul.f32	s10, s11, s23
        centerFrequency_ = centerFrequency;
 800146e:	edc4 5a54 	vstr	s11, [r4, #336]	; 0x150
                filters_[i].SetParameters(
 8001472:	ee29 da26 	vmul.f32	s26, s18, s13
                currentFormantQs_[i] += qDiff * formantRate_;
 8001476:	edc4 6a77 	vstr	s13, [r4, #476]	; 0x1dc
                a0_ = 1.0f + alpha;
 800147a:	ee77 5a88 	vadd.f32	s11, s15, s16
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 800147e:	eec5 da06 	vdiv.f32	s27, s10, s12
        Q_ = Q;
 8001482:	ed84 da55 	vstr	s26, [r4, #340]	; 0x154
                a0_ = 1.0f + alpha;
 8001486:	edc4 5a48 	vstr	s11, [r4, #288]	; 0x120
        b0_ /= a0_;
 800148a:	eec8 6a25 	vdiv.f32	s13, s16, s11
                a2_ = 1.0f - alpha;
 800148e:	ee38 6a67 	vsub.f32	s12, s16, s15
  { return __builtin_sinf(__x); }
 8001492:	eeb0 0a6d 	vmov.f32	s0, s27
        b0_ /= a0_;
 8001496:	ee67 5aa6 	vmul.f32	s11, s15, s13
        a1_ /= a0_;
 800149a:	ee27 7a26 	vmul.f32	s14, s14, s13
        b2_ /= a0_;
 800149e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
        a2_ /= a0_;
 80014a2:	ee66 6a26 	vmul.f32	s13, s12, s13
        b0_ /= a0_;
 80014a6:	edc4 5a4b 	vstr	s11, [r4, #300]	; 0x12c
        a1_ /= a0_;
 80014aa:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
        b2_ /= a0_;
 80014ae:	edc4 7a4d 	vstr	s15, [r4, #308]	; 0x134
        a2_ /= a0_;
 80014b2:	edc4 6a4a 	vstr	s13, [r4, #296]	; 0x128
 80014b6:	f005 fbe3 	bl	8006c80 <sinf>
 80014ba:	eef0 ca40 	vmov.f32	s25, s0
  { return __builtin_cosf(__x); }
 80014be:	eeb0 0a6d 	vmov.f32	s0, s27
 80014c2:	f005 fa3d 	bl	8006940 <cosf>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 80014c6:	ed94 6a72 	vldr	s12, [r4, #456]	; 0x1c8
        float alpha = sin_omega / (2.0f * Q_);
 80014ca:	ee6c caaa 	vmul.f32	s25, s25, s21
 80014ce:	ed94 5a75 	vldr	s10, [r4, #468]	; 0x1d4
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80014d2:	edd4 6a78 	vldr	s13, [r4, #480]	; 0x1e0
                a1_ = -2.0f * cos_omega;
 80014d6:	ee20 7a0b 	vmul.f32	s14, s0, s22
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 80014da:	ee35 5a46 	vsub.f32	s10, s10, s12
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80014de:	edd4 5a7b 	vldr	s11, [r4, #492]	; 0x1ec
        float alpha = sin_omega / (2.0f * Q_);
 80014e2:	eecc 7a8d 	vdiv.f32	s15, s25, s26
        b1_ /= a0_;
 80014e6:	f8c4 916c 	str.w	r9, [r4, #364]	; 0x16c
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80014ea:	ed84 8a65 	vstr	s16, [r4, #404]	; 0x194
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80014ee:	eea5 6a28 	vfma.f32	s12, s10, s17
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80014f2:	ed94 5a62 	vldr	s10, [r4, #392]	; 0x188
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80014f6:	ee75 5ae6 	vsub.f32	s11, s11, s13
                currentFormantQs_[i] += qDiff * formantRate_;
 80014fa:	eee5 6aa8 	vfma.f32	s13, s11, s17
                filters_[i].SetParameters(
 80014fe:	ee66 9a29 	vmul.f32	s19, s12, s19
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001502:	ed84 6a72 	vstr	s12, [r4, #456]	; 0x1c8
 8001506:	ee69 baab 	vmul.f32	s23, s19, s23
        centerFrequency_ = centerFrequency;
 800150a:	edc4 9a63 	vstr	s19, [r4, #396]	; 0x18c
                filters_[i].SetParameters(
 800150e:	ee26 9a89 	vmul.f32	s18, s13, s18
                currentFormantQs_[i] += qDiff * formantRate_;
 8001512:	edc4 6a78 	vstr	s13, [r4, #480]	; 0x1e0
                a0_ = 1.0f + alpha;
 8001516:	ee77 5a88 	vadd.f32	s11, s15, s16
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 800151a:	eecb 9a85 	vdiv.f32	s19, s23, s10
        Q_ = Q;
 800151e:	ed84 9a64 	vstr	s18, [r4, #400]	; 0x190
                a0_ = 1.0f + alpha;
 8001522:	edc4 5a57 	vstr	s11, [r4, #348]	; 0x15c
        b0_ /= a0_;
 8001526:	eec8 6a25 	vdiv.f32	s13, s16, s11
                a2_ = 1.0f - alpha;
 800152a:	ee38 6a67 	vsub.f32	s12, s16, s15
  { return __builtin_sinf(__x); }
 800152e:	eeb0 0a69 	vmov.f32	s0, s19
        b0_ /= a0_;
 8001532:	ee66 5aa7 	vmul.f32	s11, s13, s15
        a1_ /= a0_;
 8001536:	ee27 7a26 	vmul.f32	s14, s14, s13
        b2_ /= a0_;
 800153a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
        a2_ /= a0_;
 800153e:	ee66 6a26 	vmul.f32	s13, s12, s13
        b0_ /= a0_;
 8001542:	edc4 5a5a 	vstr	s11, [r4, #360]	; 0x168
        a1_ /= a0_;
 8001546:	ed84 7a58 	vstr	s14, [r4, #352]	; 0x160
        b2_ /= a0_;
 800154a:	edc4 7a5c 	vstr	s15, [r4, #368]	; 0x170
        a2_ /= a0_;
 800154e:	edc4 6a59 	vstr	s13, [r4, #356]	; 0x164
 8001552:	f005 fb95 	bl	8006c80 <sinf>
 8001556:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_cosf(__x); }
 800155a:	eeb0 0a69 	vmov.f32	s0, s19
 800155e:	f005 f9ef 	bl	8006940 <cosf>
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001562:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80016bc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3fc>
        float alpha = sin_omega / (2.0f * Q_);
 8001566:	ee68 8aaa 	vmul.f32	s17, s17, s21
 800156a:	ed9f 5a57 	vldr	s10, [pc, #348]	; 80016c8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x408>
 800156e:	eef0 5a46 	vmov.f32	s11, s12
 8001572:	eddf 6a56 	vldr	s13, [pc, #344]	; 80016cc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x40c>
 8001576:	eddf 4a56 	vldr	s9, [pc, #344]	; 80016d0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x410>
                a1_ = -2.0f * cos_omega;
 800157a:	ee20 7a0b 	vmul.f32	s14, s0, s22
        float alpha = sin_omega / (2.0f * Q_);
 800157e:	eec8 7a89 	vdiv.f32	s15, s17, s18
        b1_ /= a0_;
 8001582:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
            if (freq_select_button && !was_freq_select_button_pressed_)
 8001586:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800158a:	eeea 5a05 	vfma.f32	s11, s20, s10
 800158e:	ed9f 5a51 	vldr	s10, [pc, #324]	; 80016d4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x414>
 8001592:	eeaa 6a26 	vfma.f32	s12, s20, s13
        float mapped = newDepth * 0.25f;
 8001596:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800159a:	eeaa 5a24 	vfma.f32	s10, s20, s9
 800159e:	ee65 6aa6 	vmul.f32	s13, s11, s13
                a0_ = 1.0f + alpha;
 80015a2:	ee37 4a88 	vadd.f32	s8, s15, s16
                a2_ = 1.0f - alpha;
 80015a6:	ee78 4a67 	vsub.f32	s9, s16, s15
 80015aa:	eec8 5a04 	vdiv.f32	s11, s16, s8
                a0_ = 1.0f + alpha;
 80015ae:	ed84 4a66 	vstr	s8, [r4, #408]	; 0x198
        a1_ /= a0_;
 80015b2:	ee27 7a25 	vmul.f32	s14, s14, s11
        b0_ /= a0_;
 80015b6:	ee27 4aa5 	vmul.f32	s8, s15, s11
        b2_ /= a0_;
 80015ba:	ee67 7ae5 	vnmul.f32	s15, s15, s11
        a2_ /= a0_;
 80015be:	ee64 5aa5 	vmul.f32	s11, s9, s11
        a1_ /= a0_;
 80015c2:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
        b0_ /= a0_;
 80015c6:	ed84 4a69 	vstr	s8, [r4, #420]	; 0x1a4
        b2_ /= a0_;
 80015ca:	edc4 7a6b 	vstr	s15, [r4, #428]	; 0x1ac
        a2_ /= a0_;
 80015ce:	edc4 5a68 	vstr	s11, [r4, #416]	; 0x1a0
        targetDepth_ = mapped;
 80015d2:	edc5 6aa8 	vstr	s13, [r5, #672]	; 0x2a0
            delay_feedback_ = mapFloat(vibrato_pot_val, 0.0f, 1.0f, 0.05f, 0.7f);
 80015d6:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
            delay_time_ = mapFloat(vibrato_pot_val, 0.0f, 1.0f, 0.7f, 0.05f);
 80015da:	ed84 5a0e 	vstr	s10, [r4, #56]	; 0x38
            if (freq_select_button && !was_freq_select_button_pressed_)
 80015de:	2f00      	cmp	r7, #0
 80015e0:	f040 8158 	bne.w	8001894 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5d4>
            else if (!freq_select_button && was_freq_select_button_pressed_)
 80015e4:	b12b      	cbz	r3, 80015f2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x332>
            if (adsr_state_ != ADSRState::kIdle)
 80015e6:	f8d5 32c4 	ldr.w	r3, [r5, #708]	; 0x2c4
 80015ea:	b113      	cbz	r3, 80015f2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x332>
                adsr_state_ = ADSRState::kRelease;
 80015ec:	2304      	movs	r3, #4
 80015ee:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
                if (button_pressed && !was_button_pressed_)
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	f000 82dd 	beq.w	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8f2>
 80015f8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8378 	beq.w	8001cf2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa32>
                if ((hold && is_note_on_) || (!hold && button_pressed))
 8001602:	f1ba 0f00 	cmp.w	sl, #0
 8001606:	d004      	beq.n	8001612 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x352>
 8001608:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 81f4 	beq.w	80019fa <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x73a>
            if (pot_value < kThresholds[0])
 8001612:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 8001616:	eeb4 cae7 	vcmpe.f32	s24, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	f100 83d0 	bmi.w	8001dc2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb02>
            else if (pot_value >= kThresholds[kNumThresholds - 1])
 8001622:	eef6 7a0c 	vmov.f32	s15, #108	; 0x3f600000  0.875
 8001626:	eeb4 cae7 	vcmpe.f32	s24, s15
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	f280 83d2 	bge.w	8001dd6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb16>
                if (pot_value < kThresholds[i])
 8001632:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8001636:	eeb4 cae7 	vcmpe.f32	s24, s15
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	f100 83d8 	bmi.w	8001df2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb32>
 8001642:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8001646:	eeb4 cae7 	vcmpe.f32	s24, s15
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	f100 83cd 	bmi.w	8001dec <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb2c>
 8001652:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001656:	eeb4 cae7 	vcmpe.f32	s24, s15
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	f100 83ce 	bmi.w	8001dfe <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb3e>
 8001662:	eef6 7a04 	vmov.f32	s15, #100	; 0x3f200000  0.625
 8001666:	eeb4 cae7 	vcmpe.f32	s24, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	f100 83c3 	bmi.w	8001df8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb38>
 8001672:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
            for (int i = 1; i < kNumThresholds; i++)
 8001676:	eeb4 cae7 	vcmpe.f32	s24, s15
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	bf4c      	ite	mi
 8001680:	f04f 0a05 	movmi.w	sl, #5
 8001684:	f04f 0a06 	movpl.w	sl, #6
            float baseTargetFrequency = fundamentalFreq_ * scaleArray[targetIndex] * freq_mult_;
 8001688:	ea4f 098a 	mov.w	r9, sl, lsl #2
            if (targetIndex != previousTargetIndex_)
 800168c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800168e:	4553      	cmp	r3, sl
 8001690:	d051      	beq.n	8001736 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x476>
                int randomVoice = std::rand() % 3;
 8001692:	f006 fc57 	bl	8007f44 <rand>
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x418>)
 8001698:	fb83 2300 	smull	r2, r3, r3, r0
 800169c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80016a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016a4:	1ac0      	subs	r0, r0, r3
            if (voice < 0 || voice >= VOICE_COUNT)
 80016a6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
            currentVoice_ = voice;
 80016aa:	bf08      	it	eq
 80016ac:	f884 01fc 	strbeq.w	r0, [r4, #508]	; 0x1fc
            int randomIndex = std::rand() % numVowels;
 80016b0:	f006 fc48 	bl	8007f44 <rand>
            if (filterMode_ == FILTER_MODE_NORMAL)
 80016b4:	f894 31fd 	ldrb.w	r3, [r4, #509]	; 0x1fd
 80016b8:	e010      	b.n	80016dc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x41c>
 80016ba:	bf00      	nop
 80016bc:	3d4ccccd 	.word	0x3d4ccccd
 80016c0:	08008a34 	.word	0x08008a34
 80016c4:	40c90fdb 	.word	0x40c90fdb
 80016c8:	3f733333 	.word	0x3f733333
 80016cc:	3f266666 	.word	0x3f266666
 80016d0:	bf266666 	.word	0xbf266666
 80016d4:	3f333333 	.word	0x3f333333
 80016d8:	55555556 	.word	0x55555556
 80016dc:	bb4b      	cbnz	r3, 8001732 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x472>
 80016de:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
 80016e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80016e6:	fb83 2300 	smull	r2, r3, r3, r0
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80016ea:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80016ee:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80016f2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80016f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001706:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5b8>)
 800170c:	4413      	add	r3, r2
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001726:	691a      	ldr	r2, [r3, #16]
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001728:	695b      	ldr	r3, [r3, #20]
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800172a:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 800172e:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
                previousTargetIndex_ = targetIndex;
 8001732:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            const float *scaleArray = is_minor_ ? kDiatonicMinorRatios : kDiatonicMajorRatios;
 8001736:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5bc>)
 800173c:	4a50      	ldr	r2, [pc, #320]	; (8001880 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5c0>)
            float baseTargetFrequency = fundamentalFreq_ * scaleArray[targetIndex] * freq_mult_;
 800173e:	edd4 7a07 	vldr	s15, [r4, #28]
            const float *scaleArray = is_minor_ ? kDiatonicMinorRatios : kDiatonicMajorRatios;
 8001742:	2900      	cmp	r1, #0
 8001744:	bf08      	it	eq
 8001746:	4613      	moveq	r3, r2
            float baseTargetFrequency = fundamentalFreq_ * scaleArray[targetIndex] * freq_mult_;
 8001748:	edd4 8a02 	vldr	s17, [r4, #8]
 800174c:	444b      	add	r3, r9
 800174e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001752:	edd3 7a00 	vldr	s15, [r3]
            if (offsetCounter_ <= 0 ||
 8001756:	6963      	ldr	r3, [r4, #20]
            float baseTargetFrequency = fundamentalFreq_ * scaleArray[targetIndex] * freq_mult_;
 8001758:	ee68 8aa7 	vmul.f32	s17, s17, s15
            if (offsetCounter_ <= 0 ||
 800175c:	2b00      	cmp	r3, #0
 800175e:	f340 82ff 	ble.w	8001d60 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xaa0>
                std::fabs(currentFrequency_ - (baseTargetFrequency + targetFrequencyOffset_)) < frequencyMargin_)
 8001762:	ed94 9a01 	vldr	s18, [r4, #4]
 8001766:	edd4 7a03 	vldr	s15, [r4, #12]
            if (offsetCounter_ <= 0 ||
 800176a:	edd4 6a04 	vldr	s13, [r4, #16]
                std::fabs(currentFrequency_ - (baseTargetFrequency + targetFrequencyOffset_)) < frequencyMargin_)
 800176e:	ee39 7a67 	vsub.f32	s14, s18, s15
 8001772:	ee37 7a68 	vsub.f32	s14, s14, s17
  { return __builtin_fabsf(__x); }
 8001776:	eeb0 7ac7 	vabs.f32	s14, s14
            if (offsetCounter_ <= 0 ||
 800177a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	f100 82ed 	bmi.w	8001d60 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xaa0>
            offsetCounter_--;
 8001786:	3b01      	subs	r3, #1
    {
        //--------------------------------------------------
        // 1) Smooth "depth_" toward "targetDepth_"
        //--------------------------------------------------
        static constexpr float kDepthSmoothing = 0.02f;  // 2% approach each sample
        float dDiff = targetDepth_ - depth_;
 8001788:	ed95 8aa7 	vldr	s16, [r5, #668]	; 0x29c
            float targetFrequency = baseTargetFrequency + targetFrequencyOffset_;
 800178c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8001790:	ed95 7aa8 	vldr	s14, [r5, #672]	; 0x2a0
        depth_ += dDiff * kDepthSmoothing;
 8001794:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001884 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5c4>
        float dDiff = targetDepth_ - depth_;
 8001798:	ee77 7a48 	vsub.f32	s15, s14, s16

        // Keep "depth_" within [0, 0.25] or whatever your max
        if (depth_ < 0.0f)
 800179c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8001888 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5c8>
            offsetCounter_--;
 80017a0:	6163      	str	r3, [r4, #20]
        depth_ += dDiff * kDepthSmoothing;
 80017a2:	eea7 8aa6 	vfma.f32	s16, s15, s13
        if (depth_ < 0.0f)
 80017a6:	eeb4 8ac6 	vcmpe.f32	s16, s12
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	f100 8303 	bmi.w	8001db8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xaf8>
            depth_ = 0.0f;
        if (depth_ > 0.25f)
 80017b2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80017b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	f340 8312 	ble.w	8001de6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb26>
            depth_ = 0.25f;
 80017c2:	eeb0 8a67 	vmov.f32	s16, s15
 80017c6:	edc5 7aa7 	vstr	s15, [r5, #668]	; 0x29c
        //    respecting "buildupTime_"
        //--------------------------------------------------
        // We'll compute a per-sample increment factor based on buildupTime_:
        // If buildupTime_ is X seconds, we want to fully go from 0 to 'depth_'
        // in X * sampleRate_ samples => each sample we move an incremental fraction.
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80017ca:	edd5 6aa4 	vldr	s13, [r5, #656]	; 0x290
 80017ce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80017d2:	ed95 7aa9 	vldr	s14, [r5, #676]	; 0x2a4
        // We clamp alpha to something smaller if we want a minimum speed
        // but let's keep it as is for now.

        // If buildingUp_ is true, we definitely ramp up from currentDepth_ toward depth_.
        // But also if depth_ changes in the middle, we still approach it (up or down).
        float cdDiff = depth_ - currentDepth_;
 80017d6:	edd5 7aaa 	vldr	s15, [r5, #680]	; 0x2a8
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80017da:	ee26 7a87 	vmul.f32	s14, s13, s14

        // Move a fraction of that difference
        currentDepth_ += cdDiff * alpha;

        // If we're close enough, or we've gone past, we can consider we've "caught up"
        if (std::fabs(cdDiff) < 0.0001f)
 80017de:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800188c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5cc>
        float cdDiff = depth_ - currentDepth_;
 80017e2:	ee38 6a67 	vsub.f32	s12, s16, s15
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80017e6:	ee84 5a87 	vdiv.f32	s10, s9, s14
 80017ea:	eeb0 7ac6 	vabs.f32	s14, s12
        if (std::fabs(cdDiff) < 0.0001f)
 80017ee:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        currentDepth_ += cdDiff * alpha;
 80017f6:	eee6 7a05 	vfma.f32	s15, s12, s10
 80017fa:	edc5 7aaa 	vstr	s15, [r5, #680]	; 0x2a8
        if (std::fabs(cdDiff) < 0.0001f)
 80017fe:	f100 82e4 	bmi.w	8001dca <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb0a>
            buildingUp_   = false; // We can consider the buildup complete
        }

        // Finally, clamp currentDepth_ so it never goes beyond depth_ in either direction
        // e.g. if depth_ decreased mid-buildup, we want currentDepth_ to smoothly go down.
        if (currentDepth_ < 0.0f)
 8001802:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001888 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5c8>
 8001806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d503      	bpl.n	8001818 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x558>
            currentDepth_ = 0.0f;
 8001810:	eef0 7a47 	vmov.f32	s15, s14
 8001814:	ed85 7aaa 	vstr	s14, [r5, #680]	; 0x2a8
        if (currentDepth_ > depth_)
 8001818:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentDepth_ = depth_;
 8001820:	bf54      	ite	pl
 8001822:	eeb0 8a67 	vmovpl.f32	s16, s15
 8001826:	ed85 8aaa 	vstrmi	s16, [r5, #680]	; 0x2a8

        //--------------------------------------------------
        // 3) Increment the LFO phase
        //--------------------------------------------------
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 800182a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001890 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5d0>
 800182e:	edd5 7aa6 	vldr	s15, [r5, #664]	; 0x298
        phase_ += phaseIncrement;
 8001832:	ed95 6aa5 	vldr	s12, [r5, #660]	; 0x294
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 8001836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183a:	ee87 0aa6 	vdiv.f32	s0, s15, s13
        phase_ += phaseIncrement;
 800183e:	ee30 0a06 	vadd.f32	s0, s0, s12
        if (phase_ >= 2.0f * static_cast<float>(M_PI))
 8001842:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            phase_ -= 2.0f * static_cast<float>(M_PI);
 800184a:	bfa8      	it	ge
 800184c:	ee30 0a47 	vsubge.f32	s0, s0, s14
 8001850:	ed85 0aa5 	vstr	s0, [r5, #660]	; 0x294
  { return __builtin_sinf(__x); }
 8001854:	f005 fa14 	bl	8006c80 <sinf>
        {
            vib *= 0.05f;  // scale down upward range
        }
*/

        float moddedFreq = inputFreq * (1.0f + vib);
 8001858:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            float diff = targetFrequency - currentFrequency_;
 800185c:	eef0 6a49 	vmov.f32	s13, s18
            currentFrequency_ += diff * freq_rate_;
 8001860:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8001864:	eee0 7a08 	vfma.f32	s15, s0, s16
            float diff = targetFrequency - currentFrequency_;
 8001868:	eed8 6aa7 	vfnms.f32	s13, s17, s15
            currentFrequency_ += diff * freq_rate_;
 800186c:	eea6 9a87 	vfma.f32	s18, s13, s14
 8001870:	ed84 9a01 	vstr	s18, [r4, #4]
        }
 8001874:	e0c1      	b.n	80019fa <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x73a>
 8001876:	bf00      	nop
 8001878:	08008a34 	.word	0x08008a34
 800187c:	080089f4 	.word	0x080089f4
 8001880:	08008a14 	.word	0x08008a14
 8001884:	3ca3d70a 	.word	0x3ca3d70a
 8001888:	00000000 	.word	0x00000000
 800188c:	38d1b717 	.word	0x38d1b717
 8001890:	40c90fdb 	.word	0x40c90fdb
            if (freq_select_button && !was_freq_select_button_pressed_)
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 819e 	bne.w	8001bd6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x916>
            adsr_state_ = ADSRState::kAttack;
 800189a:	2301      	movs	r3, #1
            adsr_value_ = 0.0f; // Start from 0
 800189c:	f8c5 92c0 	str.w	r9, [r5, #704]	; 0x2c0
            adsr_state_ = ADSRState::kAttack;
 80018a0:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
            is_note_on_ = true;
 80018a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            if (filterMode_ == FILTER_MODE_NORMAL)
 80018a8:	f1bb 0f00 	cmp.w	fp, #0
 80018ac:	d118      	bne.n	80018e0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x620>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80018ae:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 80018b2:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 80018b6:	4bd2      	ldr	r3, [pc, #840]	; (8001c00 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x940>)
 80018b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80018bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018be:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80018c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c4:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 80018c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ca:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80018ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d0:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80018d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80018d8:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80018dc:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
        currentDepth_ = 0.0f;
 80018e0:	eddf 7ad6 	vldr	s15, [pc, #856]	; 8001c3c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x97c>
        buildingUp_   = true;
 80018e4:	2301      	movs	r3, #1
        currentDepth_ = 0.0f;
 80018e6:	eeb0 7a67 	vmov.f32	s14, s15
 80018ea:	edc5 7aaa 	vstr	s15, [r5, #680]	; 0x2a8
        buildingUp_   = true;
 80018ee:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
        float dDiff = targetDepth_ - depth_;
 80018f2:	ed95 8aa7 	vldr	s16, [r5, #668]	; 0x29c
        depth_ += dDiff * kDepthSmoothing;
 80018f6:	ed9f 5ac3 	vldr	s10, [pc, #780]	; 8001c04 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x944>
        float dDiff = targetDepth_ - depth_;
 80018fa:	ee76 6ac8 	vsub.f32	s13, s13, s16
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80018fe:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8001c08 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x948>
 8001902:	ed9f 6ac2 	vldr	s12, [pc, #776]	; 8001c0c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x94c>
 8001906:	ee2c ca27 	vmul.f32	s24, s24, s15
 800190a:	eddf 4ac1 	vldr	s9, [pc, #772]	; 8001c10 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x950>
        depth_ += dDiff * kDepthSmoothing;
 800190e:	eea6 8a85 	vfma.f32	s16, s13, s10
        if (depth_ < 0.0f)
 8001912:	ed9f 4aca 	vldr	s8, [pc, #808]	; 8001c3c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x97c>
 8001916:	eef0 7a46 	vmov.f32	s15, s12
 800191a:	eddf 5abe 	vldr	s11, [pc, #760]	; 8001c14 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x954>
 800191e:	eeec 7a24 	vfma.f32	s15, s24, s9
 8001922:	ee3c ca25 	vadd.f32	s24, s24, s11
 8001926:	eeb4 8ac4 	vcmpe.f32	s16, s8
                fundamentalFreq_ = mapFloat(pot_value, 0.0f, 1.0f, kMinFundamental, kMaxFundamental);
 800192a:	ed84 ca02 	vstr	s24, [r4, #8]
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            freq_mult_ = freqMult;
 8001932:	edc4 7a7e 	vstr	s15, [r4, #504]	; 0x1f8
 8001936:	f100 81d7 	bmi.w	8001ce8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa28>
        if (depth_ > 0.25f)
 800193a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800193e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	f340 824b 	ble.w	8001de0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb20>
            depth_ = 0.25f;
 800194a:	eeb0 8a67 	vmov.f32	s16, s15
 800194e:	edc5 7aa7 	vstr	s15, [r5, #668]	; 0x29c
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 8001952:	edd5 6aa4 	vldr	s13, [r5, #656]	; 0x290
 8001956:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800195a:	edd5 7aa9 	vldr	s15, [r5, #676]	; 0x2a4
        float cdDiff = depth_ - currentDepth_;
 800195e:	ee38 6a47 	vsub.f32	s12, s16, s14
        if (std::fabs(cdDiff) < 0.0001f)
 8001962:	eddf 5aad 	vldr	s11, [pc, #692]	; 8001c18 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x958>
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 8001966:	ee66 7aa7 	vmul.f32	s15, s13, s15
  { return __builtin_fabsf(__x); }
 800196a:	eeb0 5ac6 	vabs.f32	s10, s12
 800196e:	eec4 4a27 	vdiv.f32	s9, s8, s15
        currentDepth_ += cdDiff * alpha;
 8001972:	eef0 7a47 	vmov.f32	s15, s14
        if (std::fabs(cdDiff) < 0.0001f)
 8001976:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        currentDepth_ += cdDiff * alpha;
 800197e:	eee6 7a24 	vfma.f32	s15, s12, s9
 8001982:	edc5 7aaa 	vstr	s15, [r5, #680]	; 0x2a8
        if (std::fabs(cdDiff) < 0.0001f)
 8001986:	f100 8211 	bmi.w	8001dac <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xaec>
        if (currentDepth_ < 0.0f)
 800198a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8001c3c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x97c>
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	f100 8126 	bmi.w	8001be6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x926>
        if (currentDepth_ > depth_)
 800199a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentDepth_ = depth_;
 80019a2:	bf54      	ite	pl
 80019a4:	eeb0 8a67 	vmovpl.f32	s16, s15
 80019a8:	ed85 8aaa 	vstrmi	s16, [r5, #680]	; 0x2a8
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 80019ac:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001c1c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
 80019b0:	edd5 7aa6 	vldr	s15, [r5, #664]	; 0x298
        phase_ += phaseIncrement;
 80019b4:	ed95 6aa5 	vldr	s12, [r5, #660]	; 0x294
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 80019b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019bc:	ee87 0aa6 	vdiv.f32	s0, s15, s13
        phase_ += phaseIncrement;
 80019c0:	ee30 0a06 	vadd.f32	s0, s0, s12
        if (phase_ >= 2.0f * static_cast<float>(M_PI))
 80019c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            phase_ -= 2.0f * static_cast<float>(M_PI);
 80019cc:	bfa8      	it	ge
 80019ce:	ee30 0a47 	vsubge.f32	s0, s0, s14
 80019d2:	ed85 0aa5 	vstr	s0, [r5, #660]	; 0x294
  { return __builtin_sinf(__x); }
 80019d6:	f005 f953 	bl	8006c80 <sinf>
        float moddedFreq = inputFreq * (1.0f + vib);
 80019da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            float diff = targetFrequency - currentFrequency_;
 80019de:	edd4 7a01 	vldr	s15, [r4, #4]
            currentFrequency_ += diff * freq_rate_;
 80019e2:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 80019e6:	eea0 7a08 	vfma.f32	s14, s0, s16
            float diff = targetFrequency - currentFrequency_;
 80019ea:	eeb0 6a67 	vmov.f32	s12, s15
 80019ee:	ee9c 6a07 	vfnms.f32	s12, s24, s14
            currentFrequency_ += diff * freq_rate_;
 80019f2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80019f6:	edc4 7a01 	vstr	s15, [r4, #4]
            float sample = RenderOneSample();
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff f8fc 	bl	8000bf8 <recorder::SynthEngine::RenderOneSample()>
            sample *= (kAudioOSFactor * kAudioOutputLevel);
 8001a00:	2001      	movs	r0, #1
 8001a02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001a04:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001a08:	2801      	cmp	r0, #1
 8001a0a:	4642      	mov	r2, r8
            out -= sections_[n].a[1] * x_[n+1][1];
            in = out;
        }

        // Shift final section x state
        x_[num_sections_][2] = x_[num_sections_][1];
 8001a0c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001a10:	eddf 4a8a 	vldr	s9, [pc, #552]	; 8001c3c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x97c>
            sample *= (kAudioOSFactor * kAudioOutputLevel);
 8001a14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001a18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001a1c:	f000 80c3 	beq.w	8001ba6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8e6>
        for (int n = 0; n < num_sections_; n++)
 8001a20:	2900      	cmp	r1, #0
 8001a22:	f340 8150 	ble.w	8001cc6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa06>
 8001a26:	eeb0 7a64 	vmov.f32	s14, s9
 8001a2a:	ed94 5a31 	vldr	s10, [r4, #196]	; 0xc4
 8001a2e:	2901      	cmp	r1, #1
            out += sections_[n].b[2] * x_[n][2];
 8001a30:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8001a34:	edd4 5a30 	vldr	s11, [r4, #192]	; 0xc0
 8001a38:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001a3c:	edd4 2a18 	vldr	s5, [r4, #96]	; 0x60
            out -= sections_[n].a[0] * x_[n+1][0];
 8001a40:	edd4 6a33 	vldr	s13, [r4, #204]	; 0xcc
 8001a44:	ed94 3a1a 	vldr	s6, [r4, #104]	; 0x68
 8001a48:	eee2 7aa5 	vfma.f32	s15, s5, s11
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a4c:	ed94 6a34 	vldr	s12, [r4, #208]	; 0xd0
 8001a50:	edd4 3a1b 	vldr	s7, [r4, #108]	; 0x6c
 8001a54:	ed94 4a17 	vldr	s8, [r4, #92]	; 0x5c
            x_[n][2] = x_[n][1];
 8001a58:	ed84 5a32 	vstr	s10, [r4, #200]	; 0xc8
            x_[n][1] = x_[n][0];
 8001a5c:	edc4 5a31 	vstr	s11, [r4, #196]	; 0xc4
            x_[n][0] = in;
 8001a60:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8001a64:	eee6 7ac3 	vfms.f32	s15, s13, s6
 8001a68:	eee6 7a63 	vfms.f32	s15, s12, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a6c:	eee7 7a04 	vfma.f32	s15, s14, s8
        for (int n = 0; n < num_sections_; n++)
 8001a70:	f000 8086 	beq.w	8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8c0>
            out += sections_[n].b[2] * x_[n][2];
 8001a74:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
        for (int n = 0; n < num_sections_; n++)
 8001a78:	2902      	cmp	r1, #2
 8001a7a:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
            out += sections_[n].b[2] * x_[n][2];
 8001a7e:	ee26 7a07 	vmul.f32	s14, s12, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8001a82:	edd4 5a36 	vldr	s11, [r4, #216]	; 0xd8
 8001a86:	ed94 3a1f 	vldr	s6, [r4, #124]	; 0x7c
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a8a:	ed94 5a37 	vldr	s10, [r4, #220]	; 0xdc
 8001a8e:	eea2 7aa6 	vfma.f32	s14, s5, s13
 8001a92:	edd4 3a20 	vldr	s7, [r4, #128]	; 0x80
 8001a96:	ed94 4a1c 	vldr	s8, [r4, #112]	; 0x70
            x_[n][0] = in;
 8001a9a:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
            x_[n][2] = x_[n][1];
 8001a9e:	ed84 6a35 	vstr	s12, [r4, #212]	; 0xd4
            x_[n][1] = x_[n][0];
 8001aa2:	edc4 6a34 	vstr	s13, [r4, #208]	; 0xd0
 8001aa6:	eea5 7ac3 	vfms.f32	s14, s11, s6
 8001aaa:	eea5 7a63 	vfms.f32	s14, s10, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 8001aae:	eea4 7a27 	vfma.f32	s14, s8, s15
 8001ab2:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8001ab6:	d063      	beq.n	8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8c0>
            out += sections_[n].b[2] * x_[n][2];
 8001ab8:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
        for (int n = 0; n < num_sections_; n++)
 8001abc:	2903      	cmp	r1, #3
 8001abe:	edd4 2a22 	vldr	s5, [r4, #136]	; 0x88
            out += sections_[n].b[2] * x_[n][2];
 8001ac2:	ee25 7a07 	vmul.f32	s14, s10, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8001ac6:	edd4 6a39 	vldr	s13, [r4, #228]	; 0xe4
 8001aca:	ed94 3a24 	vldr	s6, [r4, #144]	; 0x90
            out -= sections_[n].a[1] * x_[n+1][1];
 8001ace:	ed94 6a3a 	vldr	s12, [r4, #232]	; 0xe8
 8001ad2:	eea2 7aa5 	vfma.f32	s14, s5, s11
 8001ad6:	edd4 3a25 	vldr	s7, [r4, #148]	; 0x94
 8001ada:	ed94 4a21 	vldr	s8, [r4, #132]	; 0x84
            x_[n][0] = in;
 8001ade:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
            x_[n][2] = x_[n][1];
 8001ae2:	ed84 5a38 	vstr	s10, [r4, #224]	; 0xe0
            x_[n][1] = x_[n][0];
 8001ae6:	edc4 5a37 	vstr	s11, [r4, #220]	; 0xdc
 8001aea:	eea6 7ac3 	vfms.f32	s14, s13, s6
 8001aee:	eea6 7a63 	vfms.f32	s14, s12, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 8001af2:	eea4 7a27 	vfma.f32	s14, s8, s15
 8001af6:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8001afa:	d041      	beq.n	8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8c0>
            out += sections_[n].b[2] * x_[n][2];
 8001afc:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
        for (int n = 0; n < num_sections_; n++)
 8001b00:	2904      	cmp	r1, #4
 8001b02:	edd4 2a27 	vldr	s5, [r4, #156]	; 0x9c
            out += sections_[n].b[2] * x_[n][2];
 8001b06:	ee26 7a07 	vmul.f32	s14, s12, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8001b0a:	edd4 5a3c 	vldr	s11, [r4, #240]	; 0xf0
 8001b0e:	ed94 3a29 	vldr	s6, [r4, #164]	; 0xa4
            out -= sections_[n].a[1] * x_[n+1][1];
 8001b12:	ed94 5a3d 	vldr	s10, [r4, #244]	; 0xf4
 8001b16:	eea2 7aa6 	vfma.f32	s14, s5, s13
 8001b1a:	edd4 3a2a 	vldr	s7, [r4, #168]	; 0xa8
 8001b1e:	ed94 4a26 	vldr	s8, [r4, #152]	; 0x98
            x_[n][0] = in;
 8001b22:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
            x_[n][2] = x_[n][1];
 8001b26:	ed84 6a3b 	vstr	s12, [r4, #236]	; 0xec
            x_[n][1] = x_[n][0];
 8001b2a:	edc4 6a3a 	vstr	s13, [r4, #232]	; 0xe8
 8001b2e:	eea5 7ac3 	vfms.f32	s14, s11, s6
 8001b32:	eea5 7a63 	vfms.f32	s14, s10, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 8001b36:	eea4 7a27 	vfma.f32	s14, s8, s15
 8001b3a:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8001b3e:	d01f      	beq.n	8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8c0>
            out += sections_[n].b[2] * x_[n][2];
 8001b40:	ed94 7a2d 	vldr	s14, [r4, #180]	; 0xb4
 8001b44:	edd4 2a2c 	vldr	s5, [r4, #176]	; 0xb0
 8001b48:	ee25 7a07 	vmul.f32	s14, s10, s14
 8001b4c:	ed94 3a2e 	vldr	s6, [r4, #184]	; 0xb8
 8001b50:	edd4 3a3f 	vldr	s7, [r4, #252]	; 0xfc
 8001b54:	ed94 4a2f 	vldr	s8, [r4, #188]	; 0xbc
 8001b58:	eea2 7aa5 	vfma.f32	s14, s5, s11
 8001b5c:	ed94 6a40 	vldr	s12, [r4, #256]	; 0x100
            out -= sections_[n].a[1] * x_[n+1][1];
 8001b60:	edd4 6a2b 	vldr	s13, [r4, #172]	; 0xac
            x_[n][0] = in;
 8001b64:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
            x_[n][2] = x_[n][1];
 8001b68:	ed84 5a3e 	vstr	s10, [r4, #248]	; 0xf8
            x_[n][1] = x_[n][0];
 8001b6c:	edc4 5a3d 	vstr	s11, [r4, #244]	; 0xf4
 8001b70:	eea3 7a63 	vfms.f32	s14, s6, s7
 8001b74:	eea4 7a46 	vfms.f32	s14, s8, s12
            out -= sections_[n].a[1] * x_[n+1][1];
 8001b78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8001b7c:	eef0 7a47 	vmov.f32	s15, s14
        x_[num_sections_][2] = x_[num_sections_][1];
 8001b80:	f8d3 c0c4 	ldr.w	ip, [r3, #196]	; 0xc4
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001b84:	2803      	cmp	r0, #3
        x_[num_sections_][1] = x_[num_sections_][0];
 8001b86:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
        x_[num_sections_][2] = x_[num_sections_][1];
 8001b8a:	f8c3 c0c8 	str.w	ip, [r3, #200]	; 0xc8
        x_[num_sections_][0] = in;
 8001b8e:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
        x_[num_sections_][1] = x_[num_sections_][0];
 8001b92:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
                block[i] = filtered;
 8001b96:	edc2 7a00 	vstr	s15, [r2]
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001b9a:	d029      	beq.n	8001bf0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x930>
 8001b9c:	3001      	adds	r0, #1
 8001b9e:	3204      	adds	r2, #4
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001ba0:	2801      	cmp	r0, #1
 8001ba2:	f47f af3d 	bne.w	8001a20 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x760>
        for (int n = 0; n < num_sections_; n++)
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	f340 80f3 	ble.w	8001d92 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xad2>
 8001bac:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb0:	e73b      	b.n	8001a2a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x76a>
                else if (!hold && !button_pressed && was_button_pressed_)
 8001bb2:	f1ba 0f00 	cmp.w	sl, #0
 8001bb6:	f47f ad27 	bne.w	8001608 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x348>
 8001bba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f43f af1b 	beq.w	80019fa <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x73a>
            if (adsr_state_ != ADSRState::kIdle)
 8001bc4:	f8d5 32c4 	ldr.w	r3, [r5, #708]	; 0x2c4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f43f af16 	beq.w	80019fa <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x73a>
                adsr_state_ = ADSRState::kRelease;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 8001bd4:	e711      	b.n	80019fa <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x73a>
                if (!is_note_on_)
 8001bd6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f43f ae5d 	beq.w	800189a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5da>
        float cdDiff = depth_ - currentDepth_;
 8001be0:	ed95 7aaa 	vldr	s14, [r5, #680]	; 0x2a8
 8001be4:	e685      	b.n	80018f2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x632>
            currentDepth_ = 0.0f;
 8001be6:	eef0 7a47 	vmov.f32	s15, s14
 8001bea:	ed85 7aaa 	vstr	s14, [r5, #680]	; 0x2a8
 8001bee:	e6d4      	b.n	800199a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x6da>
        }
 8001bf0:	ecbd 8b0c 	vpop	{d8-d13}
            was_button_pressed_ = button_pressed;
 8001bf4:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
            was_freq_select_button_pressed_ = freq_select_button;
 8001bf8:	f884 7049 	strb.w	r7, [r4, #73]	; 0x49
        }
 8001bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c00:	08008a34 	.word	0x08008a34
 8001c04:	3ca3d70a 	.word	0x3ca3d70a
 8001c08:	447d7333 	.word	0x447d7333
 8001c0c:	3f333333 	.word	0x3f333333
 8001c10:	3a8e3773 	.word	0x3a8e3773
 8001c14:	4202cccd 	.word	0x4202cccd
 8001c18:	38d1b717 	.word	0x38d1b717
 8001c1c:	40c90fdb 	.word	0x40c90fdb
 8001c20:	bdcb295f 	.word	0xbdcb295f
 8001c24:	3db851ec 	.word	0x3db851ec
 8001c28:	30800000 	.word	0x30800000
 8001c2c:	3f19999a 	.word	0x3f19999a
 8001c30:	3f666666 	.word	0x3f666666
 8001c34:	bdccccc0 	.word	0xbdccccc0
 8001c38:	3dcccccd 	.word	0x3dcccccd
 8001c3c:	00000000 	.word	0x00000000
      if (__b < __a)
 8001c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c44:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8001c20 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x960>
 8001c48:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 8001c38 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x978>
 8001c4c:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001c24 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x964>
 8001c50:	eee8 7a06 	vfma.f32	s15, s16, s12
 8001c54:	eeb4 8ae6 	vcmpe.f32	s16, s13
 8001c58:	ee28 7a07 	vmul.f32	s14, s16, s14
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                freq_wobbliness_ = mapFloat(formant_pot_val, 0.0f, 1.0f, 0.00f, 0.09f);
 8001c60:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
                freq_rate_ = mapFloat(formant_pot_val, 0.0f, 1.0f, 0.1f, 0.0008f);
 8001c64:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
 8001c68:	d430      	bmi.n	8001ccc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa0c>
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8001c6a:	edc4 6a85 	vstr	s13, [r4, #532]	; 0x214
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8001c6e:	f006 f969 	bl	8007f44 <rand>
 8001c72:	ee07 0a90 	vmov	s15, r0
 8001c76:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001c7a:	ed5f 5a15 	vldr	s11, [pc, #-84]	; 8001c28 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x968>
 8001c7e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
                float max_offset = 0.6f * duty_cyclerandomization; // Max 60% variation at full randomization
 8001c82:	ed94 7a85 	vldr	s14, [r4, #532]	; 0x214
 8001c86:	ed1f 5a17 	vldr	s10, [pc, #-92]	; 8001c2c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x96c>
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c8a:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8001c8e:	eee6 6a25 	vfma.f32	s13, s12, s11
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c92:	ed5f 5a17 	vldr	s11, [pc, #-92]	; 8001c38 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x978>
                float max_offset = 0.6f * duty_cyclerandomization; // Max 60% variation at full randomization
 8001c96:	ee27 7a05 	vmul.f32	s14, s14, s10
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c9a:	ed1f 6a1b 	vldr	s12, [pc, #-108]	; 8001c30 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x970>
 8001c9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001ca2:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
 8001ca6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8001caa:	edc4 7a86 	vstr	s15, [r4, #536]	; 0x218
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001cae:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 8001c34 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x974>
 8001cb2:	ed5f 8a1f 	vldr	s17, [pc, #-124]	; 8001c38 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x978>
                previous_formant_pot_val_ = formant_pot_val;
 8001cb6:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001cba:	eee8 8a27 	vfma.f32	s17, s16, s15
            formantRate_ = rate;
 8001cbe:	edc4 8a7c 	vstr	s17, [r4, #496]	; 0x1f0
                previous_formant_pot_val_ = formant_pot_val;
 8001cc2:	f7ff bb2a 	b.w	800131a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5a>
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001cc6:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 8001c3c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x97c>
 8001cca:	e759      	b.n	8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8c0>
      if (__a < __b)
 8001ccc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	f300 8095 	bgt.w	8001e04 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb44>
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8001cda:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
                current_dutycycle = base_dutycycle;
 8001cde:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8001ce2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8001ce6:	e7e2      	b.n	8001cae <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x9ee>
            depth_ = 0.0f;
 8001ce8:	eeb0 8a44 	vmov.f32	s16, s8
 8001cec:	ed85 4aa7 	vstr	s8, [r5, #668]	; 0x29c
        if (depth_ > 0.25f)
 8001cf0:	e62f      	b.n	8001952 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x692>
                    if (hold)
 8001cf2:	f1ba 0f00 	cmp.w	sl, #0
 8001cf6:	d008      	beq.n	8001d0a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa4a>
                        is_note_on_ = !is_note_on_;
 8001cf8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                        if (is_note_on_)
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f43f af5d 	beq.w	8001bc4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x904>
            adsr_state_ = ADSRState::kAttack;
 8001d0a:	2301      	movs	r3, #1
            adsr_value_ = 0.0f; // Start from 0
 8001d0c:	2200      	movs	r2, #0
            adsr_state_ = ADSRState::kAttack;
 8001d0e:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
            adsr_value_ = 0.0f; // Start from 0
 8001d12:	f8c5 22c0 	str.w	r2, [r5, #704]	; 0x2c0
            is_note_on_ = true;
 8001d16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            if (filterMode_ == FILTER_MODE_NORMAL)
 8001d1a:	f1bb 0f00 	cmp.w	fp, #0
 8001d1e:	d118      	bne.n	8001d52 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa92>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8001d20:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 8001d24:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb4c>)
 8001d2a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d30:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8001d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d36:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8001d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8001d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d42:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001d4a:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001d4e:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
        buildingUp_   = true;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
        currentDepth_ = 0.0f;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
 8001d5e:	e458      	b.n	8001612 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x352>
                float maxOffset = baseTargetFrequency * freq_wobbliness_;
 8001d60:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001d64:	ee28 8aa7 	vmul.f32	s16, s17, s15
                    ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f) * maxOffset;
 8001d68:	f006 f8ec 	bl	8007f44 <rand>
 8001d6c:	ee07 0a90 	vmov	s15, r0
 8001d70:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001e10 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb50>
            float diff = targetFrequency - currentFrequency_;
 8001d74:	ed94 9a01 	vldr	s18, [r4, #4]
 8001d78:	f240 33e7 	movw	r3, #999	; 0x3e7
                    ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f) * maxOffset;
 8001d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d80:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d84:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001d88:	ee68 7a27 	vmul.f32	s15, s16, s15
                targetFrequencyOffset_ =
 8001d8c:	edc4 7a03 	vstr	s15, [r4, #12]
                offsetCounter_ = 1000;
 8001d90:	e4fa      	b.n	8001788 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x4c8>
        x_[num_sections_][2] = x_[num_sections_][1];
 8001d92:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 8001d96:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
        x_[num_sections_][1] = x_[num_sections_][0];
 8001d9a:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
        x_[num_sections_][0] = in;
 8001d9e:	ed83 0a30 	vstr	s0, [r3, #192]	; 0xc0
        x_[num_sections_][1] = x_[num_sections_][0];
 8001da2:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
                block[i] = filtered;
 8001da6:	ed82 0a00 	vstr	s0, [r2]
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001daa:	e6f7      	b.n	8001b9c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8dc>
            buildingUp_   = false; // We can consider the buildup complete
 8001dac:	2300      	movs	r3, #0
            currentDepth_ = depth_;
 8001dae:	ed85 8aaa 	vstr	s16, [r5, #680]	; 0x2a8
            buildingUp_   = false; // We can consider the buildup complete
 8001db2:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
        if (currentDepth_ < 0.0f)
 8001db6:	e5f9      	b.n	80019ac <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x6ec>
            depth_ = 0.0f;
 8001db8:	eeb0 8a46 	vmov.f32	s16, s12
 8001dbc:	ed85 6aa7 	vstr	s12, [r5, #668]	; 0x29c
        if (depth_ > 0.25f)
 8001dc0:	e503      	b.n	80017ca <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x50a>
 8001dc2:	f04f 0900 	mov.w	r9, #0
                return 0;
 8001dc6:	46ca      	mov	sl, r9
 8001dc8:	e460      	b.n	800168c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3cc>
            buildingUp_   = false; // We can consider the buildup complete
 8001dca:	2300      	movs	r3, #0
            currentDepth_ = depth_;
 8001dcc:	ed85 8aaa 	vstr	s16, [r5, #680]	; 0x2a8
            buildingUp_   = false; // We can consider the buildup complete
 8001dd0:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
        if (currentDepth_ < 0.0f)
 8001dd4:	e529      	b.n	800182a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x56a>
 8001dd6:	f04f 091c 	mov.w	r9, #28
                return kNumNotes - 1;
 8001dda:	f04f 0a07 	mov.w	sl, #7
 8001dde:	e455      	b.n	800168c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3cc>
        depth_ += dDiff * kDepthSmoothing;
 8001de0:	ed85 8aa7 	vstr	s16, [r5, #668]	; 0x29c
 8001de4:	e5b5      	b.n	8001952 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x692>
 8001de6:	ed85 8aa7 	vstr	s16, [r5, #668]	; 0x29c
 8001dea:	e4ee      	b.n	80017ca <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x50a>
            for (int i = 1; i < kNumThresholds; i++)
 8001dec:	f04f 0a02 	mov.w	sl, #2
 8001df0:	e44a      	b.n	8001688 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c8>
 8001df2:	f04f 0a01 	mov.w	sl, #1
 8001df6:	e447      	b.n	8001688 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c8>
 8001df8:	f04f 0a04 	mov.w	sl, #4
 8001dfc:	e444      	b.n	8001688 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c8>
 8001dfe:	f04f 0a03 	mov.w	sl, #3
 8001e02:	e441      	b.n	8001688 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c8>
	return __b;
 8001e04:	eef0 6a48 	vmov.f32	s13, s16
 8001e08:	e72f      	b.n	8001c6a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x9aa>
 8001e0a:	bf00      	nop
 8001e0c:	08008a34 	.word	0x08008a34
 8001e10:	30800000 	.word	0x30800000

08001e14 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
            system::Standby();
        }
    }

    const AudioOutput Process(const AudioInput &audio_in, const PotInput &pot)
    {
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
        ScopedProfilingPin<PROFILE_PROCESS> profile;
        io_.human.in.pot = pot;
        AudioOutput audio_out = {};
 8001e16:	2300      	movs	r3, #0
    {
 8001e18:	b08d      	sub	sp, #52	; 0x34
        io_.human.in.pot = pot;
 8001e1a:	4f1d      	ldr	r7, [pc, #116]	; (8001e90 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7c>)
 8001e1c:	468e      	mov	lr, r1
        AudioOutput audio_out = {};
 8001e1e:	9308      	str	r3, [sp, #32]
    {
 8001e20:	460c      	mov	r4, r1
        io_.human.in.pot = pot;
 8001e22:	46bc      	mov	ip, r7
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8001e24:	4d1b      	ldr	r5, [pc, #108]	; (8001e94 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x80>)
        AudioOutput audio_out = {};
 8001e26:	ae06      	add	r6, sp, #24
 8001e28:	e9cd 3306 	strd	r3, r3, [sp, #24]
        io_.human.in.pot = pot;
 8001e2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e34:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001e3c:	782b      	ldrb	r3, [r5, #0]
 8001e3e:	f3bf 8f5b 	dmb	ish
        State state = state_.load(std::memory_order_acquire);

        if (state == STATE_SYNTH)
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d00c      	beq.n	8001e60 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4c>
            float vib = pot[POT_3];
            float formant = pot[POT_2];
            synth_engine_.Process(audio_out[AUDIO_OUT_LINE], button_pressed, pot_value, hold, formant, vib, tune);
        }

        return audio_out;
 8001e46:	ab0c      	add	r3, sp, #48	; 0x30
 8001e48:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001e4c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    }
 8001e50:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 8001e54:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 8001e58:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8001e5c:	b00d      	add	sp, #52	; 0x34
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return history_ == (1 << kShift);
    }

    bool level(void)
    {
        return history_ & 1;
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x84>)
            synth_engine_.Process(audio_out[AUDIO_OUT_LINE], button_pressed, pot_value, hold, formant, vib, tune);
 8001e62:	4631      	mov	r1, r6
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x88>)
 8001e66:	6810      	ldr	r0, [r2, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f000 0001 	and.w	r0, r0, #1
 8001e6e:	ed94 1a02 	vldr	s2, [r4, #8]
 8001e72:	edd4 0a01 	vldr	s1, [r4, #4]
 8001e76:	f002 0201 	and.w	r2, r2, #1
 8001e7a:	f080 0001 	eor.w	r0, r0, #1
 8001e7e:	ed94 0a00 	vldr	s0, [r4]
 8001e82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e86:	9000      	str	r0, [sp, #0]
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8c>)
 8001e8a:	f7ff fa19 	bl	80012c0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)>
 8001e8e:	e7da      	b.n	8001e46 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x32>
 8001e90:	200106f4 	.word	0x200106f4
 8001e94:	2001071c 	.word	0x2001071c
 8001e98:	20000420 	.word	0x20000420
 8001e9c:	2000041c 	.word	0x2000041c
 8001ea0:	20000428 	.word	0x20000428

08001ea4 <recorder::StateMachine(bool)>:
        invert_ = invert;
    }

    uint32_t Read(void)
    {
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ea4:	4bbd      	ldr	r3, [pc, #756]	; (800219c <recorder::StateMachine(bool)+0x2f8>)
    {
 8001ea6:	b570      	push	{r4, r5, r6, lr}
 8001ea8:	e9d3 1500 	ldrd	r1, r5, [r3]

        if (invert_)
 8001eac:	7a1a      	ldrb	r2, [r3, #8]
 8001eae:	4604      	mov	r4, r0
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001eb0:	6909      	ldr	r1, [r1, #16]
 8001eb2:	40e9      	lsrs	r1, r5
 8001eb4:	f001 0101 	and.w	r1, r1, #1
        if (invert_)
 8001eb8:	b10a      	cbz	r2, 8001ebe <recorder::StateMachine(bool)+0x1a>
        {
            pin ^= 1;
 8001eba:	f081 0101 	eor.w	r1, r1, #1
        state_ = initial_state;
    }

    T Process(T in)
    {
        if (in != history_)
 8001ebe:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8001ec2:	428a      	cmp	r2, r1
 8001ec4:	f000 8184 	beq.w	80021d0 <recorder::StateMachine(bool)+0x32c>
        {
            count_ = 0;
 8001ec8:	2200      	movs	r2, #0
 8001eca:	665a      	str	r2, [r3, #100]	; 0x64
                state_ = in;
            }
        }

        history_ = in;
        return state_;
 8001ecc:	f893 c069 	ldrb.w	ip, [r3, #105]	; 0x69
        history_ = in;
 8001ed0:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    {
        for (uint32_t i = 0; i < NUM_SWITCHES; i++)
        {
            if (kEnableReverse || i != SWITCH_REVERSE)
            {
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8001ed4:	49b2      	ldr	r1, [pc, #712]	; (80021a0 <recorder::StateMachine(bool)+0x2fc>)
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ed6:	e9d3 2003 	ldrd	r2, r0, [r3, #12]
 8001eda:	6912      	ldr	r2, [r2, #16]
 8001edc:	f881 c020 	strb.w	ip, [r1, #32]
 8001ee0:	40c2      	lsrs	r2, r0
        if (invert_)
 8001ee2:	7d18      	ldrb	r0, [r3, #20]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ee4:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001ee8:	b108      	cbz	r0, 8001eee <recorder::StateMachine(bool)+0x4a>
            pin ^= 1;
 8001eea:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001eee:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	f000 8143 	beq.w	800217e <recorder::StateMachine(bool)+0x2da>
            count_ = 0;
 8001ef8:	2000      	movs	r0, #0
 8001efa:	6718      	str	r0, [r3, #112]	; 0x70
        history_ = in;
 8001efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001f00:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f04:	69d8      	ldr	r0, [r3, #28]
 8001f06:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f0a:	699a      	ldr	r2, [r3, #24]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f0c:	6912      	ldr	r2, [r2, #16]
 8001f0e:	40c2      	lsrs	r2, r0
        if (invert_)
 8001f10:	f893 0020 	ldrb.w	r0, [r3, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f14:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f18:	b108      	cbz	r0, 8001f1e <recorder::StateMachine(bool)+0x7a>
            pin ^= 1;
 8001f1a:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f1e:	f893 0080 	ldrb.w	r0, [r3, #128]	; 0x80
 8001f22:	4290      	cmp	r0, r2
 8001f24:	f000 811c 	beq.w	8002160 <recorder::StateMachine(bool)+0x2bc>
            count_ = 0;
 8001f28:	2000      	movs	r0, #0
 8001f2a:	67d8      	str	r0, [r3, #124]	; 0x7c
        history_ = in;
 8001f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001f30:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f34:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f36:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f3c:	6912      	ldr	r2, [r2, #16]
 8001f3e:	40c2      	lsrs	r2, r0
        if (invert_)
 8001f40:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f44:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f48:	b108      	cbz	r0, 8001f4e <recorder::StateMachine(bool)+0xaa>
            pin ^= 1;
 8001f4a:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f4e:	f893 008c 	ldrb.w	r0, [r3, #140]	; 0x8c
 8001f52:	4290      	cmp	r0, r2
 8001f54:	f000 80f2 	beq.w	800213c <recorder::StateMachine(bool)+0x298>
            count_ = 0;
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
        history_ = in;
 8001f5e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f66:	6912      	ldr	r2, [r2, #16]
        return state_;
 8001f68:	f893 e08d 	ldrb.w	lr, [r3, #141]	; 0x8d
 8001f6c:	40c2      	lsrs	r2, r0
        if (invert_)
 8001f6e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8001f72:	f881 e023 	strb.w	lr, [r1, #35]	; 0x23
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f76:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f7a:	b108      	cbz	r0, 8001f80 <recorder::StateMachine(bool)+0xdc>
            pin ^= 1;
 8001f7c:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f80:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8001f84:	4290      	cmp	r0, r2
 8001f86:	f000 80c7 	beq.w	8002118 <recorder::StateMachine(bool)+0x274>
            count_ = 0;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
        history_ = in;
 8001f90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f96:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001f98:	6912      	ldr	r2, [r2, #16]
 8001f9a:	40c2      	lsrs	r2, r0
 8001f9c:	f893 0099 	ldrb.w	r0, [r3, #153]	; 0x99
 8001fa0:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8001fa4:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001fa8:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8001fac:	b108      	cbz	r0, 8001fb2 <recorder::StateMachine(bool)+0x10e>
            pin ^= 1;
 8001fae:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001fb2:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	f000 809c 	beq.w	80020f4 <recorder::StateMachine(bool)+0x250>
            count_ = 0;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
        history_ = in;
 8001fc2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001fc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001fc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fca:	6912      	ldr	r2, [r2, #16]
 8001fcc:	40c2      	lsrs	r2, r0
 8001fce:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 8001fd2:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
 8001fd6:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001fda:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8001fde:	b108      	cbz	r0, 8001fe4 <recorder::StateMachine(bool)+0x140>
            pin ^= 1;
 8001fe0:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001fe4:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
 8001fe8:	4290      	cmp	r0, r2
 8001fea:	d073      	beq.n	80020d4 <recorder::StateMachine(bool)+0x230>
            count_ = 0;
 8001fec:	2000      	movs	r0, #0
 8001fee:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
        history_ = in;
 8001ff2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
            }
        }

        for (uint32_t i = 0; i < NUM_DETECTS; i++)
        {
            in.detect[i] = kEnableLineIn &&
 8001ff6:	2000      	movs	r0, #0
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8001ff8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
        history_ = (history_ << kShift) | level;
 8001ffc:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <recorder::StateMachine(bool)+0x300>)
 8001ffe:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8002002:	6813      	ldr	r3, [r2, #0]
            in.detect[i] = kEnableLineIn &&
 8002004:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
 8002008:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 800200c:	4966      	ldr	r1, [pc, #408]	; (80021a8 <recorder::StateMachine(bool)+0x304>)
 800200e:	4d67      	ldr	r5, [pc, #412]	; (80021ac <recorder::StateMachine(bool)+0x308>)
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	680a      	ldr	r2, [r1, #0]
 8002014:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8002018:	600a      	str	r2, [r1, #0]
 800201a:	782a      	ldrb	r2, [r5, #0]
        if (state == STATE_IDLE)
 800201c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002020:	bba2      	cbnz	r2, 800208c <recorder::StateMachine(bool)+0x1e8>
            if (play_button_.is_high())
 8002022:	07db      	lsls	r3, r3, #31
 8002024:	d543      	bpl.n	80020ae <recorder::StateMachine(bool)+0x20a>
        return state_ == STATE_STOPPED;
    }

    void Start(bool enable_amplifier)
    {
        if (state_ == STATE_STOPPED)
 8002026:	4e62      	ldr	r6, [pc, #392]	; (80021b0 <recorder::StateMachine(bool)+0x30c>)
 8002028:	f896 3160 	ldrb.w	r3, [r6, #352]	; 0x160
 800202c:	b9bb      	cbnz	r3, 800205e <recorder::StateMachine(bool)+0x1ba>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800202e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002032:	4a60      	ldr	r2, [pc, #384]	; (80021b4 <recorder::StateMachine(bool)+0x310>)
        {
            state_ = STATE_STARTING;
            fade_position_ = 0;
 8002034:	2300      	movs	r3, #0
            cue_stop_ = false;

            boost_enable_.Set();
            amp_enable_.Write(enable_amplifier);

            dac_.Start();
 8002036:	f506 70aa 	add.w	r0, r6, #340	; 0x154
 800203a:	6191      	str	r1, [r2, #24]
 800203c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            fade_position_ = 0;
 8002040:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
            state_ = STATE_STARTING;
 8002044:	2301      	movs	r3, #1
 8002046:	f8a6 3160 	strh.w	r3, [r6, #352]	; 0x160
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <recorder::StateMachine(bool)+0x314>)
 800204c:	619a      	str	r2, [r3, #24]
            dac_.Start();
 800204e:	f001 fc5f 	bl	8003910 <recorder::Dac::Start()>
            adc_.Start();
 8002052:	1d30      	adds	r0, r6, #4
 8002054:	f001 f982 	bl	800335c <recorder::Adc::Start()>
            StartTimer();
 8002058:	4630      	mov	r0, r6
 800205a:	f001 fc45 	bl	80038e8 <recorder::Analog::StartTimer()>
        printf("State: ");
 800205e:	4857      	ldr	r0, [pc, #348]	; (80021bc <recorder::StateMachine(bool)+0x318>)
 8002060:	f005 feb4 	bl	8007dcc <iprintf>
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }
 8002064:	2301      	movs	r3, #1
 8002066:	f3bf 8f5b 	dmb	ish
 800206a:	702b      	strb	r3, [r5, #0]
 800206c:	f3bf 8f5b 	dmb	ish
            if (standby)
 8002070:	b15c      	cbz	r4, 800208a <recorder::StateMachine(bool)+0x1e6>
        printf("State: ");
 8002072:	4852      	ldr	r0, [pc, #328]	; (80021bc <recorder::StateMachine(bool)+0x318>)
 8002074:	f005 feaa 	bl	8007dcc <iprintf>
            printf("STANDBY\n");
 8002078:	4851      	ldr	r0, [pc, #324]	; (80021c0 <recorder::StateMachine(bool)+0x31c>)
 800207a:	f005 ff2d 	bl	8007ed8 <puts>
 800207e:	230a      	movs	r3, #10
 8002080:	f3bf 8f5b 	dmb	ish
 8002084:	702b      	strb	r3, [r5, #0]
 8002086:	f3bf 8f5b 	dmb	ish
    }
 800208a:	bd70      	pop	{r4, r5, r6, pc}
        else if (state == STATE_SYNTH)
 800208c:	2901      	cmp	r1, #1
 800208e:	f000 80ae 	beq.w	80021ee <recorder::StateMachine(bool)+0x34a>
        else if (state == STATE_STANDBY)
 8002092:	290a      	cmp	r1, #10
 8002094:	d1f9      	bne.n	800208a <recorder::StateMachine(bool)+0x1e6>
            system::SerialFlushTx();
 8002096:	f002 f9f9 	bl	800448c <recorder::system::SerialFlushTx(bool)>
        }
    }

    void Stop(void)
    {
        if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 800209a:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <recorder::StateMachine(bool)+0x30c>)
 800209c:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
 80020a0:	2a02      	cmp	r2, #2
 80020a2:	f000 80b5 	beq.w	8002210 <recorder::StateMachine(bool)+0x36c>
    }
 80020a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            system::Standby();
 80020aa:	f002 b9f5 	b.w	8004498 <recorder::system::Standby()>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 80020ae:	4a45      	ldr	r2, [pc, #276]	; (80021c4 <recorder::StateMachine(bool)+0x320>)
            else if (kEnableIdleStandby &&
 80020b0:	eddf 7a45 	vldr	s15, [pc, #276]	; 80021c8 <recorder::StateMachine(bool)+0x324>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	ee07 3a10 	vmov	s14, r3
            else if (kEnableIdleStandby &&
 80020bc:	6013      	str	r3, [r2, #0]
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 80020be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            else if (kEnableIdleStandby &&
 80020c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	ddd1      	ble.n	8002070 <recorder::StateMachine(bool)+0x1cc>
                printf("Idle timeout expired\n");
 80020cc:	483f      	ldr	r0, [pc, #252]	; (80021cc <recorder::StateMachine(bool)+0x328>)
 80020ce:	f005 ff03 	bl	8007ed8 <puts>
            if (standby)
 80020d2:	e7ce      	b.n	8002072 <recorder::StateMachine(bool)+0x1ce>
        else if (in != state_)
 80020d4:	f893 00b1 	ldrb.w	r0, [r3, #177]	; 0xb1
 80020d8:	4290      	cmp	r0, r2
 80020da:	d08a      	beq.n	8001ff2 <recorder::StateMachine(bool)+0x14e>
            if (++count_ == duration_)
 80020dc:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80020e0:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 80020e4:	3001      	adds	r0, #1
 80020e6:	42a8      	cmp	r0, r5
 80020e8:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
                state_ = in;
 80020ec:	bf08      	it	eq
 80020ee:	f883 20b1 	strbeq.w	r2, [r3, #177]	; 0xb1
 80020f2:	e77e      	b.n	8001ff2 <recorder::StateMachine(bool)+0x14e>
        else if (in != state_)
 80020f4:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 80020f8:	4290      	cmp	r0, r2
 80020fa:	f43f af62 	beq.w	8001fc2 <recorder::StateMachine(bool)+0x11e>
            if (++count_ == duration_)
 80020fe:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8002102:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8002106:	3001      	adds	r0, #1
 8002108:	42a8      	cmp	r0, r5
 800210a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
 800210e:	f47f af58 	bne.w	8001fc2 <recorder::StateMachine(bool)+0x11e>
                state_ = in;
 8002112:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8002116:	e754      	b.n	8001fc2 <recorder::StateMachine(bool)+0x11e>
        else if (in != state_)
 8002118:	f893 0099 	ldrb.w	r0, [r3, #153]	; 0x99
 800211c:	4290      	cmp	r0, r2
 800211e:	f43f af37 	beq.w	8001f90 <recorder::StateMachine(bool)+0xec>
            if (++count_ == duration_)
 8002122:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8002126:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800212a:	3001      	adds	r0, #1
 800212c:	42a8      	cmp	r0, r5
 800212e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8002132:	f47f af2d 	bne.w	8001f90 <recorder::StateMachine(bool)+0xec>
                state_ = in;
 8002136:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800213a:	e729      	b.n	8001f90 <recorder::StateMachine(bool)+0xec>
        else if (in != state_)
 800213c:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
 8002140:	4290      	cmp	r0, r2
 8002142:	f43f af0c 	beq.w	8001f5e <recorder::StateMachine(bool)+0xba>
            if (++count_ == duration_)
 8002146:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800214a:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800214e:	3001      	adds	r0, #1
 8002150:	42a8      	cmp	r0, r5
 8002152:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8002156:	f47f af02 	bne.w	8001f5e <recorder::StateMachine(bool)+0xba>
                state_ = in;
 800215a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800215e:	e6fe      	b.n	8001f5e <recorder::StateMachine(bool)+0xba>
        else if (in != state_)
 8002160:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 8002164:	4290      	cmp	r0, r2
 8002166:	f43f aee1 	beq.w	8001f2c <recorder::StateMachine(bool)+0x88>
            if (++count_ == duration_)
 800216a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800216c:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800216e:	3001      	adds	r0, #1
 8002170:	42a8      	cmp	r0, r5
 8002172:	67d8      	str	r0, [r3, #124]	; 0x7c
 8002174:	f47f aeda 	bne.w	8001f2c <recorder::StateMachine(bool)+0x88>
                state_ = in;
 8002178:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 800217c:	e6d6      	b.n	8001f2c <recorder::StateMachine(bool)+0x88>
        else if (in != state_)
 800217e:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
 8002182:	4290      	cmp	r0, r2
 8002184:	f43f aeba 	beq.w	8001efc <recorder::StateMachine(bool)+0x58>
            if (++count_ == duration_)
 8002188:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800218a:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800218c:	3001      	adds	r0, #1
 800218e:	4285      	cmp	r5, r0
 8002190:	6718      	str	r0, [r3, #112]	; 0x70
 8002192:	f47f aeb3 	bne.w	8001efc <recorder::StateMachine(bool)+0x58>
                state_ = in;
 8002196:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800219a:	e6af      	b.n	8001efc <recorder::StateMachine(bool)+0x58>
 800219c:	200109b0 	.word	0x200109b0
 80021a0:	200106f4 	.word	0x200106f4
 80021a4:	2000041c 	.word	0x2000041c
 80021a8:	20000420 	.word	0x20000420
 80021ac:	2001071c 	.word	0x2001071c
 80021b0:	20010720 	.word	0x20010720
 80021b4:	58021800 	.word	0x58021800
 80021b8:	58020400 	.word	0x58020400
 80021bc:	08008948 	.word	0x08008948
 80021c0:	0800899c 	.word	0x0800899c
 80021c4:	20000424 	.word	0x20000424
 80021c8:	476a6000 	.word	0x476a6000
 80021cc:	080089a4 	.word	0x080089a4
        else if (in != state_)
 80021d0:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80021d4:	428a      	cmp	r2, r1
 80021d6:	f43f ae79 	beq.w	8001ecc <recorder::StateMachine(bool)+0x28>
            if (++count_ == duration_)
 80021da:	e9d3 0218 	ldrd	r0, r2, [r3, #96]	; 0x60
 80021de:	3201      	adds	r2, #1
 80021e0:	4290      	cmp	r0, r2
 80021e2:	665a      	str	r2, [r3, #100]	; 0x64
 80021e4:	f47f ae72 	bne.w	8001ecc <recorder::StateMachine(bool)+0x28>
                state_ = in;
 80021e8:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
 80021ec:	e66e      	b.n	8001ecc <recorder::StateMachine(bool)+0x28>
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <recorder::StateMachine(bool)+0x3b0>)
 80021f0:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80021f4:	b942      	cbnz	r2, 8002208 <recorder::StateMachine(bool)+0x364>
 80021f6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002258 <recorder::StateMachine(bool)+0x3b4>
 80021fa:	ed93 7a97 	vldr	s14, [r3, #604]	; 0x25c
 80021fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	d907      	bls.n	8002218 <recorder::StateMachine(bool)+0x374>
                synthReleaseCounter = 0;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <recorder::StateMachine(bool)+0x3b8>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    }
 800220e:	bd70      	pop	{r4, r5, r6, pc}
        {
            cue_stop_ = true;
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8002216:	e746      	b.n	80020a6 <recorder::StateMachine(bool)+0x202>
                if (++synthReleaseCounter >= 50) // 10 seconds @ ~1ms per loop
 8002218:	4c10      	ldr	r4, [pc, #64]	; (800225c <recorder::StateMachine(bool)+0x3b8>)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	2b31      	cmp	r3, #49	; 0x31
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	f67f af32 	bls.w	800208a <recorder::StateMachine(bool)+0x1e6>
        if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <recorder::StateMachine(bool)+0x3bc>)
        printf("State: ");
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <recorder::StateMachine(bool)+0x3c0>)
 800222a:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
 800222e:	2a02      	cmp	r2, #2
            cue_stop_ = true;
 8002230:	bf08      	it	eq
 8002232:	f883 1161 	strbeq.w	r1, [r3, #353]	; 0x161
 8002236:	f005 fdc9 	bl	8007dcc <iprintf>
            printf("IDLE\n");
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <recorder::StateMachine(bool)+0x3c4>)
 800223c:	f005 fe4c 	bl	8007ed8 <puts>
            idle_timeout_ = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <recorder::StateMachine(bool)+0x3c8>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	f3bf 8f5b 	dmb	ish
 800224a:	702b      	strb	r3, [r5, #0]
 800224c:	f3bf 8f5b 	dmb	ish
                    synthReleaseCounter = 0; // reset the counter
 8002250:	6023      	str	r3, [r4, #0]
    }
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	20010428 	.word	0x20010428
 8002258:	3a83126f 	.word	0x3a83126f
 800225c:	20010a70 	.word	0x20010a70
 8002260:	20010720 	.word	0x20010720
 8002264:	08008948 	.word	0x08008948
 8002268:	08008950 	.word	0x08008950
 800226c:	20000424 	.word	0x20000424

08002270 <main>:

    extern "C" int main(void)
    {
 8002270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

        system::Init();
        ProfilingPin<PROFILE_MAIN>::Set();

        analog_.Init(Process);
 8002274:	4fb7      	ldr	r7, [pc, #732]	; (8002554 <main+0x2e4>)
    {
 8002276:	b08b      	sub	sp, #44	; 0x2c
        system::Init();
 8002278:	f001 fef6 	bl	8004068 <recorder::system::Init()>
        analog_.Init(Process);
 800227c:	49b6      	ldr	r1, [pc, #728]	; (8002558 <main+0x2e8>)
 800227e:	4638      	mov	r0, r7
        gpio_base_ = gpio_base;
 8002280:	4cb6      	ldr	r4, [pc, #728]	; (800255c <main+0x2ec>)
 8002282:	f001 fa8f 	bl	80037a4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002286:	4bb6      	ldr	r3, [pc, #728]	; (8002560 <main+0x2f0>)
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002288:	49b6      	ldr	r1, [pc, #728]	; (8002564 <main+0x2f4>)
        pin_number_ = pin_number;
 800228a:	2500      	movs	r5, #0
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800228c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002290:	2601      	movs	r6, #1
        gpio_base_ = gpio_base;
 8002292:	60e1      	str	r1, [r4, #12]
        pin_number_ = pin_number;
 8002294:	f04f 0c02 	mov.w	ip, #2
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002298:	f042 0201 	orr.w	r2, r2, #1
        duration_ = duration;
 800229c:	f04f 080a 	mov.w	r8, #10
 80022a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022a8:	f002 0201 	and.w	r2, r2, #1
 80022ac:	9203      	str	r2, [sp, #12]
 80022ae:	9a03      	ldr	r2, [sp, #12]
 80022b0:	68ca      	ldr	r2, [r1, #12]
 80022b2:	f022 0203 	bic.w	r2, r2, #3
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022bc:	680a      	ldr	r2, [r1, #0]
 80022be:	f022 0203 	bic.w	r2, r2, #3
 80022c2:	600a      	str	r2, [r1, #0]
        pin_number_ = pin_number;
 80022c4:	6125      	str	r5, [r4, #16]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80022c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022d6:	f002 0201 	and.w	r2, r2, #1
 80022da:	9204      	str	r2, [sp, #16]
 80022dc:	9a04      	ldr	r2, [sp, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022de:	68ca      	ldr	r2, [r1, #12]
 80022e0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022e4:	f042 0210 	orr.w	r2, r2, #16
 80022e8:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022ea:	680a      	ldr	r2, [r1, #0]
 80022ec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022f0:	600a      	str	r2, [r1, #0]
        gpio_base_ = gpio_base;
 80022f2:	6021      	str	r1, [r4, #0]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 80022f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022f8:	f042 0208 	orr.w	r2, r2, #8
 80022fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002300:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002304:	7526      	strb	r6, [r4, #20]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 8002306:	f002 0208 	and.w	r2, r2, #8
        invert_ = invert;
 800230a:	7226      	strb	r6, [r4, #8]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 800230c:	9205      	str	r2, [sp, #20]
 800230e:	9a05      	ldr	r2, [sp, #20]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002310:	4a95      	ldr	r2, [pc, #596]	; (8002568 <main+0x2f8>)
 8002312:	68d0      	ldr	r0, [r2, #12]
 8002314:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 8002318:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800231c:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800231e:	6810      	ldr	r0, [r2, #0]
        pin_number_ = pin_number;
 8002320:	f8c4 c004 	str.w	ip, [r4, #4]
 8002324:	f04f 0c0b 	mov.w	ip, #11
 8002328:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 800232c:	6010      	str	r0, [r2, #0]
        gpio_base_ = gpio_base;
 800232e:	61a2      	str	r2, [r4, #24]
 8002330:	63e1      	str	r1, [r4, #60]	; 0x3c
        pin_number_ = pin_number;
 8002332:	6426      	str	r6, [r4, #64]	; 0x40
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002338:	f884 6020 	strb.w	r6, [r4, #32]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800233c:	f042 0204 	orr.w	r2, r2, #4
        invert_ = invert;
 8002340:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 8002344:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002348:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800234c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002350:	f002 0204 	and.w	r2, r2, #4
 8002354:	9206      	str	r2, [sp, #24]
 8002356:	9a06      	ldr	r2, [sp, #24]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002358:	4a84      	ldr	r2, [pc, #528]	; (800256c <main+0x2fc>)
        gpio_base_ = gpio_base;
 800235a:	6262      	str	r2, [r4, #36]	; 0x24
 800235c:	68d0      	ldr	r0, [r2, #12]
 800235e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002362:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002366:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002368:	6810      	ldr	r0, [r2, #0]
 800236a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800236e:	6010      	str	r0, [r2, #0]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002370:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002374:	4330      	orrs	r0, r6
 8002376:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800237a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800237e:	4030      	ands	r0, r6
 8002380:	9007      	str	r0, [sp, #28]
 8002382:	9807      	ldr	r0, [sp, #28]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002384:	68c8      	ldr	r0, [r1, #12]
 8002386:	f020 000c 	bic.w	r0, r0, #12
 800238a:	f040 0004 	orr.w	r0, r0, #4
 800238e:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002390:	6808      	ldr	r0, [r1, #0]
 8002392:	f020 000c 	bic.w	r0, r0, #12
 8002396:	6008      	str	r0, [r1, #0]
        pin_number_ = pin_number;
 8002398:	2004      	movs	r0, #4
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800239a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800239e:	f041 0104 	orr.w	r1, r1, #4
 80023a2:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80023a6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
        pin_number_ = pin_number;
 80023aa:	f8c4 c01c 	str.w	ip, [r4, #28]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80023ae:	f001 0104 	and.w	r1, r1, #4
        pin_number_ = pin_number;
 80023b2:	62a0      	str	r0, [r4, #40]	; 0x28
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80023b4:	9108      	str	r1, [sp, #32]
 80023b6:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023b8:	68d1      	ldr	r1, [r2, #12]
        gpio_base_ = gpio_base;
 80023ba:	6562      	str	r2, [r4, #84]	; 0x54
 80023bc:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80023c0:	64a2      	str	r2, [r4, #72]	; 0x48
        pin_number_ = pin_number;
 80023c2:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 80023c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80023ca:	64e0      	str	r0, [r4, #76]	; 0x4c
        invert_ = invert;
 80023cc:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
 80023d0:	60d1      	str	r1, [r2, #12]
        count_ = 0;
 80023d2:	6725      	str	r5, [r4, #112]	; 0x70
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80023d4:	6811      	ldr	r1, [r2, #0]
 80023d6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80023da:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
        history_ = initial_state;
 80023de:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
 80023e2:	6011      	str	r1, [r2, #0]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80023e4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80023e8:	4301      	orrs	r1, r0
 80023ea:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	4003      	ands	r3, r0
 80023f4:	9309      	str	r3, [sp, #36]	; 0x24
 80023f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023f8:	68d3      	ldr	r3, [r2, #12]
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002402:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240a:	6013      	str	r3, [r2, #0]
        duration_ = duration;
 800240c:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
        db_[SWITCH_PLAY].Init(kButtonDebounceDuration_ms,
 8002410:	f002 f8d2 	bl	80045b8 <recorder::system::WakeupWasPlayButton()>
        history_ = initial_state;
 8002414:	462b      	mov	r3, r5
        history_ = initial_state ? ((1 << kShift) | 1) : 0;
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <main+0x300>)
 8002418:	f360 0307 	bfi	r3, r0, #0, #8
 800241c:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
 8002420:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
 8002424:	f360 230f 	bfi	r3, r0, #8, #8
 8002428:	f8a4 508c 	strh.w	r5, [r4, #140]	; 0x8c
        duration_ = duration;
 800242c:	f8c4 80a8 	str.w	r8, [r4, #168]	; 0xa8
        history_ = initial_state;
 8002430:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8002434:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <main+0x304>)
        duration_ = duration;
 8002436:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
 800243a:	601d      	str	r5, [r3, #0]
        if (state_ == STATE_STOPPED)
 800243c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
        count_ = 0;
 8002440:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
        history_ = initial_state;
 8002444:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        count_ = 0;
 8002448:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        history_ = initial_state;
 800244c:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 8002450:	6015      	str	r5, [r2, #0]
        count_ = 0;
 8002452:	e9c4 8518 	strd	r8, r5, [r4, #96]	; 0x60
 8002456:	e9c4 851e 	strd	r8, r5, [r4, #120]	; 0x78
 800245a:	e9c4 8527 	strd	r8, r5, [r4, #156]	; 0x9c
 800245e:	e9c4 8521 	strd	r8, r5, [r4, #132]	; 0x84
 8002462:	b9b3      	cbnz	r3, 8002492 <main+0x222>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002464:	4944      	ldr	r1, [pc, #272]	; (8002578 <main+0x308>)
 8002466:	f44f 7000 	mov.w	r0, #512	; 0x200
            fade_position_ = 0;
 800246a:	2200      	movs	r2, #0
 800246c:	4b43      	ldr	r3, [pc, #268]	; (800257c <main+0x30c>)
 800246e:	6188      	str	r0, [r1, #24]
            dac_.Start();
 8002470:	f507 70aa 	add.w	r0, r7, #340	; 0x154
            fade_position_ = 0;
 8002474:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            state_ = STATE_STARTING;
 800247c:	f8a7 6160 	strh.w	r6, [r7, #352]	; 0x160
 8002480:	619a      	str	r2, [r3, #24]
            dac_.Start();
 8002482:	f001 fa45 	bl	8003910 <recorder::Dac::Start()>
            adc_.Start();
 8002486:	1d38      	adds	r0, r7, #4
 8002488:	f000 ff68 	bl	800335c <recorder::Adc::Start()>
            StartTimer();
 800248c:	4638      	mov	r0, r7
 800248e:	f001 fa2b 	bl	80038e8 <recorder::Analog::StartTimer()>
class Monitor
{
public:
    void Init(void)
    {
        length_ = 0;
 8002492:	2500      	movs	r5, #0
 8002494:	4c3a      	ldr	r4, [pc, #232]	; (8002580 <main+0x310>)
        play_button_.Init();
        tune_button_.Init();
        analog_.StartPlayback();
        //   recording_.Init();
        //  playback_.Init();
        synth_engine_.Init();
 8002496:	483b      	ldr	r0, [pc, #236]	; (8002584 <main+0x314>)
 8002498:	f7fe f936 	bl	8000708 <recorder::SynthEngine::Init()>
    bool sw[NUM_SWITCHES];
    bool detect[NUM_DETECTS];

    void Init(void)
    {
        *this = {};
 800249c:	2228      	movs	r2, #40	; 0x28
 800249e:	4629      	mov	r1, r5
 80024a0:	4839      	ldr	r0, [pc, #228]	; (8002588 <main+0x318>)
 80024a2:	f005 f908 	bl	80076b6 <memset>
 80024a6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        io_.Init();
        monitor_.Init();
        system::ReloadWatchdog();
 80024aa:	f001 fdd5 	bl	8004058 <recorder::system::ReloadWatchdog()>
        printf("State: ");
 80024ae:	4837      	ldr	r0, [pc, #220]	; (800258c <main+0x31c>)
 80024b0:	f005 fc8c 	bl	8007dcc <iprintf>
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
 80024b4:	4e34      	ldr	r6, [pc, #208]	; (8002588 <main+0x318>)
        //  playback_.Reset();
        //  sample_memory_.Init();
        // ledPin.Init(GPIOPin::SPEED_LOW, GPIOPin::TYPE_PUSHPULL, GPIOPin::PULL_NONE);
        Transition(STATE_SYNTH);

        bool expire_watchdog = false;
 80024b6:	9500      	str	r5, [sp, #0]
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }
 80024b8:	2201      	movs	r2, #1
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <main+0x320>)
 80024bc:	f204 1529 	addw	r5, r4, #297	; 0x129
 80024c0:	f3bf 8f5b 	dmb	ish
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	f3bf 8f5b 	dmb	ish
            analog_.Start(false);
        }

        for (;;)
        {
            printf("test");
 80024ca:	4832      	ldr	r0, [pc, #200]	; (8002594 <main+0x324>)
 80024cc:	f005 fc7e 	bl	8007dcc <iprintf>
    }

    const Message& Receive(void)
    {
        char* result =
            std::fgets(line_ + length_, sizeof(line_) - length_, stdin);
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <main+0x328>)
      | __memory_order_modifier(__m & __memory_order_modifier_mask));
  }

  _GLIBCXX_ALWAYS_INLINE void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(int(__m)); }
 80024d2:	f3bf 8f5b 	dmb	ish
 80024d6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 80024e0:	4420      	add	r0, r4
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	f002 f874 	bl	80045d0 <fgets>

        if (result != nullptr)
 80024e8:	b1c0      	cbz	r0, 800251c <main+0x2ac>
        {
            length_ = std::strlen(line_);
 80024ea:	4825      	ldr	r0, [pc, #148]	; (8002580 <main+0x310>)
 80024ec:	f7fd fef8 	bl	80002e0 <strlen>
 80024f0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        }

        if (length_ == 0 || line_[length_ - 1] != '\n')
 80024f4:	b118      	cbz	r0, 80024fe <main+0x28e>
 80024f6:	1e43      	subs	r3, r0, #1
 80024f8:	5ce2      	ldrb	r2, [r4, r3]
 80024fa:	2a0a      	cmp	r2, #10
 80024fc:	d011      	beq.n	8002522 <main+0x2b2>
        {
            message_.payload.type = Message::TYPE_NONE;
 80024fe:	2300      	movs	r3, #0
            ProfilingPin<PROFILE_MAIN_LOOP>::Set();
            std::atomic_thread_fence(std::memory_order_acq_rel);

            bool standby = false;
 8002500:	461f      	mov	r7, r3
 8002502:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
                printf("Erasing save data... ");
                // sample_memory_.Erase();
                printf("done\n");
            }

            if (!expire_watchdog)
 8002506:	9b00      	ldr	r3, [sp, #0]
 8002508:	b90b      	cbnz	r3, 800250e <main+0x29e>
            {
                system::ReloadWatchdog();
 800250a:	f001 fda5 	bl	8004058 <recorder::system::ReloadWatchdog()>
            }

            StateMachine(standby);
 800250e:	4638      	mov	r0, r7
 8002510:	f7ff fcc8 	bl	8001ea4 <recorder::StateMachine(bool)>
            ProfilingPin<PROFILE_MAIN_LOOP>::Clear();

            system::Delay_ms(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f001 ffa3 	bl	8004460 <recorder::system::Delay_ms(unsigned long)>
        }
 800251a:	e7d6      	b.n	80024ca <main+0x25a>
        if (length_ == 0 || line_[length_ - 1] != '\n')
 800251c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002520:	e7e8      	b.n	80024f4 <main+0x284>
        }
        else
        {
            if (line_[0] == '\xff' && length_ > 1)
 8002522:	f894 c000 	ldrb.w	ip, [r4]
 8002526:	2801      	cmp	r0, #1
 8002528:	f1ac 07ff 	sub.w	r7, ip, #255	; 0xff
 800252c:	fab7 f787 	clz	r7, r7
 8002530:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8002534:	bf08      	it	eq
 8002536:	2700      	moveq	r7, #0
 8002538:	bb87      	cbnz	r7, 800259c <main+0x32c>
            }
            else
            {
                message_.payload.type = Message::TYPE_TEXT;
                line_[length_ - 1] = '\0';
                std::strncpy(message_.payload.text, line_,
 800253a:	4911      	ldr	r1, [pc, #68]	; (8002580 <main+0x310>)
                message_.payload.type = Message::TYPE_TEXT;
 800253c:	2001      	movs	r0, #1
                std::strncpy(message_.payload.text, line_,
 800253e:	2280      	movs	r2, #128	; 0x80
                line_[length_ - 1] = '\0';
 8002540:	54e7      	strb	r7, [r4, r3]
                message_.payload.type = Message::TYPE_TEXT;
 8002542:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
                std::strncpy(message_.payload.text, line_,
 8002546:	f101 0087 	add.w	r0, r1, #135	; 0x87
 800254a:	f005 fdb8 	bl	80080be <strncpy>
                    sizeof(message_.payload.text));
            }

            length_ = 0;
 800254e:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
            else if (message.type == Message::TYPE_RESET)
 8002552:	e7d8      	b.n	8002506 <main+0x296>
 8002554:	20010720 	.word	0x20010720
 8002558:	08001e15 	.word	0x08001e15
 800255c:	200109b0 	.word	0x200109b0
 8002560:	58024400 	.word	0x58024400
 8002564:	58020000 	.word	0x58020000
 8002568:	58020c00 	.word	0x58020c00
 800256c:	58020800 	.word	0x58020800
 8002570:	2000041c 	.word	0x2000041c
 8002574:	20000420 	.word	0x20000420
 8002578:	58021800 	.word	0x58021800
 800257c:	58020400 	.word	0x58020400
 8002580:	20010884 	.word	0x20010884
 8002584:	20000428 	.word	0x20000428
 8002588:	200106f4 	.word	0x200106f4
 800258c:	08008948 	.word	0x08008948
 8002590:	2001071c 	.word	0x2001071c
 8002594:	080089bc 	.word	0x080089bc
 8002598:	20000008 	.word	0x20000008
                line_[length_ - 1] = '\0';
 800259c:	f04f 0800 	mov.w	r8, #0
}

inline size_t Decode(void* data, size_t size, const char* str)
{
    auto bytes = reinterpret_cast<uint8_t*>(data);
    size_t length = std::strlen(str);
 80025a0:	48bd      	ldr	r0, [pc, #756]	; (8002898 <main+0x628>)
 80025a2:	f804 8003 	strb.w	r8, [r4, r3]
 80025a6:	f7fd fe9b 	bl	80002e0 <strlen>
    size_t num_bytes = 0;

    while (length)
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d051      	beq.n	8002652 <main+0x3e2>
    size_t num_bytes = 0;
 80025ae:	4642      	mov	r2, r8
        uint32_t word = 0;

        for (size_t i = 0; i < 5; i++)
        {
            word *= 85;
            word += group[i];
 80025b0:	f04f 0b55 	mov.w	fp, #85	; 0x55
    while (length)
 80025b4:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8002898 <main+0x628>
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80025b8:	2804      	cmp	r0, #4
 80025ba:	f200 8181 	bhi.w	80028c0 <main+0x650>
            group[i] = length ? *str - 33 : 84;
 80025be:	f898 e000 	ldrb.w	lr, [r8]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80025c2:	4241      	negs	r1, r0
            group[i] = length ? *str - 33 : 84;
 80025c4:	2801      	cmp	r0, #1
 80025c6:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 80025ca:	fa5f f38e 	uxtb.w	r3, lr
 80025ce:	9301      	str	r3, [sp, #4]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80025d0:	4bb2      	ldr	r3, [pc, #712]	; (800289c <main+0x62c>)
 80025d2:	fba3 ce01 	umull	ip, lr, r3, r1
 80025d6:	f02e 0c03 	bic.w	ip, lr, #3
 80025da:	eb0c 0c9e 	add.w	ip, ip, lr, lsr #2
 80025de:	eba1 010c 	sub.w	r1, r1, ip
 80025e2:	ea4f 0181 	mov.w	r1, r1, lsl #2
 80025e6:	fba3 3101 	umull	r3, r1, r3, r1
 80025ea:	ea4f 0191 	mov.w	r1, r1, lsr #2
        }

        for (size_t i = 0; i < 4 - padding; i++)
 80025ee:	f1c1 0104 	rsb	r1, r1, #4
            group[i] = length ? *str - 33 : 84;
 80025f2:	f040 816d 	bne.w	80028d0 <main+0x660>
                str++;
 80025f6:	f04f 0a54 	mov.w	sl, #84	; 0x54
 80025fa:	f108 0801 	add.w	r8, r8, #1
 80025fe:	2000      	movs	r0, #0
 8002600:	46d6      	mov	lr, sl
 8002602:	46d4      	mov	ip, sl
 8002604:	46d1      	mov	r9, sl
            word += group[i];
 8002606:	9b01      	ldr	r3, [sp, #4]
 8002608:	fb1b ee03 	smlabb	lr, fp, r3, lr
            word *= 85;
 800260c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8002610:	eb0e 130e 	add.w	r3, lr, lr, lsl #4
            word += group[i];
 8002614:	4453      	add	r3, sl
            word *= 85;
 8002616:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800261a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 800261e:	444b      	add	r3, r9
            word *= 85;
 8002620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002624:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8002628:	4463      	add	r3, ip
        for (size_t i = 0; i < 4 - padding; i++)
 800262a:	f04f 0c00 	mov.w	ip, #0
        {
            if (num_bytes < size)
 800262e:	2a82      	cmp	r2, #130	; 0x82
            {
                bytes[num_bytes] = word >> 24;
 8002630:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8002634:	eb04 0e02 	add.w	lr, r4, r2
        for (size_t i = 0; i < 4 - padding; i++)
 8002638:	f10c 0c01 	add.w	ip, ip, #1
                num_bytes++;
                word <<= 8;
 800263c:	ea4f 2303 	mov.w	r3, r3, lsl #8
            if (num_bytes < size)
 8002640:	d805      	bhi.n	800264e <main+0x3de>
        for (size_t i = 0; i < 4 - padding; i++)
 8002642:	4561      	cmp	r1, ip
                num_bytes++;
 8002644:	f102 0201 	add.w	r2, r2, #1
                bytes[num_bytes] = word >> 24;
 8002648:	f88e 9084 	strb.w	r9, [lr, #132]	; 0x84
        for (size_t i = 0; i < 4 - padding; i++)
 800264c:	d8ef      	bhi.n	800262e <main+0x3be>
    while (length)
 800264e:	2800      	cmp	r0, #0
 8002650:	d1b2      	bne.n	80025b8 <main+0x348>
        checksum = 0;
    }

    bool Verify(void)
    {
        if (size > sizeof(T))
 8002652:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8002656:	2b81      	cmp	r3, #129	; 0x81
 8002658:	d820      	bhi.n	800269c <main+0x42c>
 800265a:	f8df c25c 	ldr.w	ip, [pc, #604]	; 80028b8 <main+0x648>
 800265e:	2200      	movs	r2, #0
        auto bytes = reinterpret_cast<uint8_t*>(&payload);
        uint8_t sum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            sum += bytes[i];
 8002660:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002664:	f003 317f 	and.w	r1, r3, #2139062143	; 0x7f7f7f7f
 8002668:	4053      	eors	r3, r2
 800266a:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 800266e:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8002672:	440a      	add	r2, r1
 8002674:	405a      	eors	r2, r3
        for (uint32_t i = 0; i < sizeof(T); i++)
 8002676:	4b8a      	ldr	r3, [pc, #552]	; (80028a0 <main+0x630>)
 8002678:	459c      	cmp	ip, r3
 800267a:	d1f1      	bne.n	8002660 <main+0x3f0>
            sum += bytes[i];
 800267c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002680:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 8002684:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002688:	4413      	add	r3, r2
 800268a:	4403      	add	r3, r0
 800268c:	440b      	add	r3, r1
                if (message_.Verify())
 800268e:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
 8002692:	eb03 6312 	add.w	r3, r3, r2, lsr #24
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4299      	cmp	r1, r3
 800269a:	d006      	beq.n	80026aa <main+0x43a>
                    message_.payload.type = Message::TYPE_NONE;
 800269c:	2300      	movs	r3, #0
            bool standby = false;
 800269e:	461f      	mov	r7, r3
 80026a0:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
            length_ = 0;
 80026a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            else if (message.type == Message::TYPE_ERASE)
 80026a8:	e72d      	b.n	8002506 <main+0x296>

    Packet<State> state_;

    void Ack(void)
    {
        printf("\xff" "ack\n");
 80026aa:	487e      	ldr	r0, [pc, #504]	; (80028a4 <main+0x634>)
            length_ = 0;
 80026ac:	f04f 0800 	mov.w	r8, #0
        printf("\xff" "ack\n");
 80026b0:	f005 fc12 	bl	8007ed8 <puts>
            auto message = monitor_.Receive();
 80026b4:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
            length_ = 0;
 80026b8:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
            if (message.type == Message::TYPE_QUERY)
 80026bc:	2a71      	cmp	r2, #113	; 0x71
 80026be:	d008      	beq.n	80026d2 <main+0x462>
            else if (message.type == Message::TYPE_STANDBY)
 80026c0:	2a73      	cmp	r2, #115	; 0x73
 80026c2:	f43f af20 	beq.w	8002506 <main+0x296>
            else if (message.type == Message::TYPE_WATCHDOG)
 80026c6:	2a77      	cmp	r2, #119	; 0x77
 80026c8:	f040 8124 	bne.w	8002914 <main+0x6a4>
                expire_watchdog = true;
 80026cc:	9700      	str	r7, [sp, #0]
            bool standby = false;
 80026ce:	4647      	mov	r7, r8
 80026d0:	e71d      	b.n	800250e <main+0x29e>
        for (uint32_t i = 0; i < NUM_POTS; i++)
        {
            state.pot[i] = human.pot[i];
        }

        state.play = human.sw[SWITCH_PLAY];
 80026d2:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
        return sum == checksum;
    }

    void Sign(void)
    {
        size = sizeof(T);
 80026d6:	f04f 0c21 	mov.w	ip, #33	; 0x21
 80026da:	f896 2020 	ldrb.w	r2, [r6, #32]
 80026de:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 80026e2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80026e6:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
            state.pot[i] = human.pot[i];
 80026ea:	6830      	ldr	r0, [r6, #0]
        state.play = human.sw[SWITCH_PLAY];
 80026ec:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 80026f0:	f896 7027 	ldrb.w	r7, [r6, #39]	; 0x27
            state.pot[i] = human.pot[i];
 80026f4:	f8c4 0109 	str.w	r0, [r4, #265]	; 0x109
 80026f8:	4643      	mov	r3, r8
        state.play = human.sw[SWITCH_PLAY];
 80026fa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
            state.pot[i] = human.pot[i];
 80026fe:	6870      	ldr	r0, [r6, #4]
        state.play = human.sw[SWITCH_PLAY];
 8002700:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8002704:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
            state.pot[i] = human.pot[i];
 8002708:	f8c4 010d 	str.w	r0, [r4, #269]	; 0x10d
        state.play = human.sw[SWITCH_PLAY];
 800270c:	f021 011f 	bic.w	r1, r1, #31
            state.pot[i] = human.pot[i];
 8002710:	68f0      	ldr	r0, [r6, #12]
        state.play = human.sw[SWITCH_PLAY];
 8002712:	f002 021f 	and.w	r2, r2, #31
            state.pot[i] = human.pot[i];
 8002716:	68b7      	ldr	r7, [r6, #8]
 8002718:	f8c4 0115 	str.w	r0, [r4, #277]	; 0x115
        state.play = human.sw[SWITCH_PLAY];
 800271c:	430a      	orrs	r2, r1
            state.pot[i] = human.pot[i];
 800271e:	6930      	ldr	r0, [r6, #16]
 8002720:	f8c4 7111 	str.w	r7, [r4, #273]	; 0x111
        state.play = human.sw[SWITCH_PLAY];
 8002724:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
            state.pot[i] = human.pot[i];
 8002728:	6977      	ldr	r7, [r6, #20]
 800272a:	69f2      	ldr	r2, [r6, #28]
 800272c:	f8c4 0119 	str.w	r0, [r4, #281]	; 0x119
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002730:	495d      	ldr	r1, [pc, #372]	; (80028a8 <main+0x638>)
 8002732:	69b0      	ldr	r0, [r6, #24]
 8002734:	f8a4 c107 	strh.w	ip, [r4, #263]	; 0x107
 8002738:	f8c4 711d 	str.w	r7, [r4, #285]	; 0x11d
 800273c:	f8c4 0121 	str.w	r0, [r4, #289]	; 0x121
 8002740:	f8c4 2125 	str.w	r2, [r4, #293]	; 0x125
        auto bytes = reinterpret_cast<uint8_t*>(&(payload));
        checksum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            checksum += bytes[i];
 8002744:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002748:	4413      	add	r3, r2
        for (uint32_t i = 0; i < sizeof(T); i++)
 800274a:	42a9      	cmp	r1, r5
            checksum += bytes[i];
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
        for (uint32_t i = 0; i < sizeof(T); i++)
 8002752:	d1f7      	bne.n	8002744 <main+0x4d4>
 8002754:	f04f 0c23 	mov.w	ip, #35	; 0x23
    size_t num_chars = 0;
 8002758:	f04f 0800 	mov.w	r8, #0
 800275c:	2321      	movs	r3, #33	; 0x21
    auto bytes = reinterpret_cast<const uint8_t*>(data);
 800275e:	4853      	ldr	r0, [pc, #332]	; (80028ac <main+0x63c>)
            group[4 - i] = (word % 85);
 8002760:	4662      	mov	r2, ip
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8002762:	46c1      	mov	r9, r8
            group[4 - i] = (word % 85);
 8002764:	f8df a154 	ldr.w	sl, [pc, #340]	; 80028bc <main+0x64c>
            if (data_size)
 8002768:	2a01      	cmp	r2, #1
 800276a:	d07e      	beq.n	800286a <main+0x5fa>
                word |= *bytes++;
 800276c:	8803      	ldrh	r3, [r0, #0]
            if (data_size)
 800276e:	2a02      	cmp	r2, #2
 8002770:	ba5b      	rev16	r3, r3
 8002772:	b29b      	uxth	r3, r3
            word <<= 8;
 8002774:	ea4f 2303 	mov.w	r3, r3, lsl #8
            if (data_size)
 8002778:	f000 80df 	beq.w	800293a <main+0x6ca>
 800277c:	2a03      	cmp	r2, #3
                word |= *bytes++;
 800277e:	7881      	ldrb	r1, [r0, #2]
            if (data_size)
 8002780:	f000 80f4 	beq.w	800296c <main+0x6fc>
                word |= *bytes++;
 8002784:	f850 3b04 	ldr.w	r3, [r0], #4
                data_size--;
 8002788:	3a04      	subs	r2, #4
 800278a:	ba1b      	rev	r3, r3
            group[4 - i] = (word % 85);
 800278c:	fbaa 1c03 	umull	r1, ip, sl, r3
            if (num_chars < buf_size - 1)
 8002790:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
        for (size_t i = 0; i < 5 - padding; i++)
 8002794:	f1c9 0905 	rsb	r9, r9, #5
            group[4 - i] = (word % 85);
 8002798:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800279c:	fbaa 170c 	umull	r1, r7, sl, ip
 80027a0:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80027a4:	ea4f 1797 	mov.w	r7, r7, lsr #6
 80027a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80027ac:	eba3 0301 	sub.w	r3, r3, r1
 80027b0:	fbaa e107 	umull	lr, r1, sl, r7
 80027b4:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
 80027b8:	ea4f 1191 	mov.w	r1, r1, lsr #6
 80027bc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	ebac 0c0e 	sub.w	ip, ip, lr
 80027c6:	fbaa be01 	umull	fp, lr, sl, r1
 80027ca:	eb01 0b81 	add.w	fp, r1, r1, lsl #2
 80027ce:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 80027d2:	eb0b 1b0b 	add.w	fp, fp, fp, lsl #4
 80027d6:	fa5f fc8c 	uxtb.w	ip, ip
 80027da:	eba7 070b 	sub.w	r7, r7, fp
 80027de:	eb0e 0b8e 	add.w	fp, lr, lr, lsl #2
 80027e2:	fa5f fe8e 	uxtb.w	lr, lr
 80027e6:	eb0b 1b0b 	add.w	fp, fp, fp, lsl #4
 80027ea:	b2ff      	uxtb	r7, r7
 80027ec:	eba1 010b 	sub.w	r1, r1, fp
 80027f0:	b2c9      	uxtb	r1, r1
            if (num_chars < buf_size - 1)
 80027f2:	d843      	bhi.n	800287c <main+0x60c>
                buf[num_chars] = group[i] + 33;
 80027f4:	f10e 0e21 	add.w	lr, lr, #33	; 0x21
 80027f8:	f804 e008 	strb.w	lr, [r4, r8]
                num_chars++;
 80027fc:	f108 0e01 	add.w	lr, r8, #1
            if (num_chars < buf_size - 1)
 8002800:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8002804:	d836      	bhi.n	8002874 <main+0x604>
                buf[num_chars] = group[i] + 33;
 8002806:	3121      	adds	r1, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 8002808:	f1b9 0f02 	cmp.w	r9, #2
                buf[num_chars] = group[i] + 33;
 800280c:	f804 100e 	strb.w	r1, [r4, lr]
                num_chars++;
 8002810:	f108 0e02 	add.w	lr, r8, #2
        for (size_t i = 0; i < 5 - padding; i++)
 8002814:	d01e      	beq.n	8002854 <main+0x5e4>
            if (num_chars < buf_size - 1)
 8002816:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 800281a:	d01b      	beq.n	8002854 <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 800281c:	3721      	adds	r7, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 800281e:	f1b9 0f03 	cmp.w	r9, #3
                buf[num_chars] = group[i] + 33;
 8002822:	f804 700e 	strb.w	r7, [r4, lr]
                num_chars++;
 8002826:	f108 0e03 	add.w	lr, r8, #3
        for (size_t i = 0; i < 5 - padding; i++)
 800282a:	d013      	beq.n	8002854 <main+0x5e4>
            if (num_chars < buf_size - 1)
 800282c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 8002830:	d010      	beq.n	8002854 <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 8002832:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 8002836:	f1b9 0f05 	cmp.w	r9, #5
                buf[num_chars] = group[i] + 33;
 800283a:	f804 c00e 	strb.w	ip, [r4, lr]
                num_chars++;
 800283e:	f108 0e04 	add.w	lr, r8, #4
        for (size_t i = 0; i < 5 - padding; i++)
 8002842:	d107      	bne.n	8002854 <main+0x5e4>
            if (num_chars < buf_size - 1)
 8002844:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 8002848:	d004      	beq.n	8002854 <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 800284a:	3321      	adds	r3, #33	; 0x21
 800284c:	f804 300e 	strb.w	r3, [r4, lr]
                num_chars++;
 8002850:	f108 0e05 	add.w	lr, r8, #5
    while (data_size)
 8002854:	b1aa      	cbz	r2, 8002882 <main+0x612>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8002856:	2a03      	cmp	r2, #3
 8002858:	d81b      	bhi.n	8002892 <main+0x622>
 800285a:	f1c2 0900 	rsb	r9, r2, #0
 800285e:	f009 0903 	and.w	r9, r9, #3
            if (data_size)
 8002862:	2a01      	cmp	r2, #1
                word |= *bytes++;
 8002864:	46f0      	mov	r8, lr
 8002866:	7803      	ldrb	r3, [r0, #0]
            if (data_size)
 8002868:	d180      	bne.n	800276c <main+0x4fc>
                word |= *bytes++;
 800286a:	3001      	adds	r0, #1
            word <<= 8;
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	2200      	movs	r2, #0
 8002872:	e78b      	b.n	800278c <main+0x51c>
        for (size_t i = 0; i < 5 - padding; i++)
 8002874:	f1b9 0f02 	cmp.w	r9, #2
 8002878:	d0ec      	beq.n	8002854 <main+0x5e4>
 800287a:	46f0      	mov	r8, lr
 800287c:	46c6      	mov	lr, r8
    while (data_size)
 800287e:	2a00      	cmp	r2, #0
 8002880:	d1e9      	bne.n	8002856 <main+0x5e6>
        printf("\xff%s\n", line_);
 8002882:	490b      	ldr	r1, [pc, #44]	; (80028b0 <main+0x640>)
 8002884:	4617      	mov	r7, r2
    buf[num_chars] = '\0';
 8002886:	f804 200e 	strb.w	r2, [r4, lr]
 800288a:	480a      	ldr	r0, [pc, #40]	; (80028b4 <main+0x644>)
 800288c:	f005 fa9e 	bl	8007dcc <iprintf>
    }
 8002890:	e639      	b.n	8002506 <main+0x296>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8002892:	f04f 0900 	mov.w	r9, #0
 8002896:	e7e4      	b.n	8002862 <main+0x5f2>
 8002898:	20010885 	.word	0x20010885
 800289c:	cccccccd 	.word	0xcccccccd
 80028a0:	2001098a 	.word	0x2001098a
 80028a4:	080089c4 	.word	0x080089c4
 80028a8:	2001098c 	.word	0x2001098c
 80028ac:	2001098b 	.word	0x2001098b
 80028b0:	20010884 	.word	0x20010884
 80028b4:	080089cc 	.word	0x080089cc
 80028b8:	2001090a 	.word	0x2001090a
 80028bc:	c0c0c0c1 	.word	0xc0c0c0c1
            group[i] = length ? *str - 33 : 84;
 80028c0:	f898 e000 	ldrb.w	lr, [r8]
 80028c4:	2104      	movs	r1, #4
 80028c6:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 80028ca:	fa5f f38e 	uxtb.w	r3, lr
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	f898 e001 	ldrb.w	lr, [r8, #1]
 80028d4:	2802      	cmp	r0, #2
 80028d6:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 80028da:	fa5f fe8e 	uxtb.w	lr, lr
 80028de:	d03d      	beq.n	800295c <main+0x6ec>
 80028e0:	f898 a002 	ldrb.w	sl, [r8, #2]
 80028e4:	2803      	cmp	r0, #3
 80028e6:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
 80028ea:	fa5f fa8a 	uxtb.w	sl, sl
 80028ee:	d02e      	beq.n	800294e <main+0x6de>
 80028f0:	f898 9003 	ldrb.w	r9, [r8, #3]
 80028f4:	2804      	cmp	r0, #4
 80028f6:	f1a9 0921 	sub.w	r9, r9, #33	; 0x21
 80028fa:	fa5f f989 	uxtb.w	r9, r9
 80028fe:	d020      	beq.n	8002942 <main+0x6d2>
 8002900:	f898 c004 	ldrb.w	ip, [r8, #4]
                length--;
 8002904:	3805      	subs	r0, #5
                str++;
 8002906:	f108 0805 	add.w	r8, r8, #5
            group[i] = length ? *str - 33 : 84;
 800290a:	f1ac 0c21 	sub.w	ip, ip, #33	; 0x21
            word += group[i];
 800290e:	fa5f fc8c 	uxtb.w	ip, ip
 8002912:	e678      	b.n	8002606 <main+0x396>
            else if (message.type == Message::TYPE_RESET)
 8002914:	2a72      	cmp	r2, #114	; 0x72
 8002916:	d106      	bne.n	8002926 <main+0x6b6>
                system::SerialFlushTx();
 8002918:	4640      	mov	r0, r8
            bool standby = false;
 800291a:	4647      	mov	r7, r8
                system::SerialFlushTx();
 800291c:	f001 fdb6 	bl	800448c <recorder::system::SerialFlushTx(bool)>
                system::Reset();
 8002920:	f001 fe52 	bl	80045c8 <recorder::system::Reset()>
 8002924:	e5ef      	b.n	8002506 <main+0x296>
            else if (message.type == Message::TYPE_ERASE)
 8002926:	2a65      	cmp	r2, #101	; 0x65
 8002928:	d109      	bne.n	800293e <main+0x6ce>
                printf("Erasing save data... ");
 800292a:	4812      	ldr	r0, [pc, #72]	; (8002974 <main+0x704>)
            bool standby = false;
 800292c:	4647      	mov	r7, r8
                printf("Erasing save data... ");
 800292e:	f005 fa4d 	bl	8007dcc <iprintf>
                printf("done\n");
 8002932:	4811      	ldr	r0, [pc, #68]	; (8002978 <main+0x708>)
 8002934:	f005 fad0 	bl	8007ed8 <puts>
 8002938:	e5e5      	b.n	8002506 <main+0x296>
                word |= *bytes++;
 800293a:	3002      	adds	r0, #2
            word <<= 8;
 800293c:	e797      	b.n	800286e <main+0x5fe>
            bool standby = false;
 800293e:	4647      	mov	r7, r8
 8002940:	e5e1      	b.n	8002506 <main+0x296>
                str++;
 8002942:	f108 0804 	add.w	r8, r8, #4
            word += group[i];
 8002946:	f04f 0c54 	mov.w	ip, #84	; 0x54
 800294a:	2000      	movs	r0, #0
 800294c:	e65b      	b.n	8002606 <main+0x396>
 800294e:	f04f 0c54 	mov.w	ip, #84	; 0x54
                str++;
 8002952:	f108 0803 	add.w	r8, r8, #3
            word += group[i];
 8002956:	2000      	movs	r0, #0
 8002958:	46e1      	mov	r9, ip
 800295a:	e654      	b.n	8002606 <main+0x396>
 800295c:	f04f 0a54 	mov.w	sl, #84	; 0x54
                str++;
 8002960:	f108 0802 	add.w	r8, r8, #2
            word += group[i];
 8002964:	2000      	movs	r0, #0
 8002966:	46d4      	mov	ip, sl
 8002968:	46d1      	mov	r9, sl
 800296a:	e64c      	b.n	8002606 <main+0x396>
                word |= *bytes++;
 800296c:	430b      	orrs	r3, r1
 800296e:	3003      	adds	r0, #3
 8002970:	e77d      	b.n	800286e <main+0x5fe>
 8002972:	bf00      	nop
 8002974:	080089d4 	.word	0x080089d4
 8002978:	080089ec 	.word	0x080089ec

0800297c <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE>:
    }

} // namespace recorder
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
              previous_formant_pot_val_(0.0f) // track the last pot value
 800297e:	4c24      	ldr	r4, [pc, #144]	; (8002a10 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x94>)
                           randomizationperiod(5) // Change random variation every 2 samples
 8002980:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002984:	2600      	movs	r6, #0
 8002986:	2500      	movs	r5, #0
 8002988:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
    class FormantFilter
 800298c:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8002990:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8002994:	2305      	movs	r3, #5
 8002996:	6166      	str	r6, [r4, #20]
            std::srand(static_cast<unsigned>(std::time(0)));
 8002998:	4630      	mov	r0, r6
 800299a:	64a6      	str	r6, [r4, #72]	; 0x48
 800299c:	6025      	str	r5, [r4, #0]
 800299e:	60e5      	str	r5, [r4, #12]
 80029a0:	6465      	str	r5, [r4, #68]	; 0x44
 80029a2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
 80029a6:	6565      	str	r5, [r4, #84]	; 0x54
 80029a8:	f8c4 71f4 	str.w	r7, [r4, #500]	; 0x1f4
 80029ac:	f8c4 71f8 	str.w	r7, [r4, #504]	; 0x1f8
                           randomizationperiod(5) // Change random variation every 2 samples
 80029b0:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
 80029b4:	e9c4 6387 	strd	r6, r3, [r4, #540]	; 0x21c
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x98>)
 80029ba:	6063      	str	r3, [r4, #4]
 80029bc:	60a3      	str	r3, [r4, #8]
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x9c>)
 80029c0:	6123      	str	r3, [r4, #16]
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa0>)
 80029c4:	6423      	str	r3, [r4, #64]	; 0x40
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ca:	6523      	str	r3, [r4, #80]	; 0x50
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa4>)
 80029ce:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
          buildingUp_(false)
 80029d2:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            std::srand(static_cast<unsigned>(std::time(0)));
 80029d6:	f005 fb85 	bl	80080e4 <time>
 80029da:	f005 fa85 	bl	8007ee8 <srand>
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa8>)
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xac>)
 80029e2:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 80029e6:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xb0>)
 80029ec:	f8c4 72a4 	str.w	r7, [r4, #676]	; 0x2a4
 80029f0:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
 80029f4:	f8c4 52a8 	str.w	r5, [r4, #680]	; 0x2a8
 80029f8:	f884 62ac 	strb.w	r6, [r4, #684]	; 0x2ac
 80029fc:	f8c4 52c0 	str.w	r5, [r4, #704]	; 0x2c0
 8002a00:	f8c4 62c4 	str.w	r6, [r4, #708]	; 0x2c4
 8002a04:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
 8002a08:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
 8002a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000428 	.word	0x20000428
 8002a14:	4302cf5c 	.word	0x4302cf5c
 8002a18:	3d4ccccd 	.word	0x3d4ccccd
 8002a1c:	3c23d70a 	.word	0x3c23d70a
 8002a20:	3fd9999a 	.word	0x3fd9999a
 8002a24:	3ca3d70a 	.word	0x3ca3d70a
 8002a28:	40a00000 	.word	0x40a00000
 8002a2c:	467a0000 	.word	0x467a0000

08002a30 <recorder::Adc::DMAService()>:
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_STREAM_1);
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
}

void Adc::DMAService(void)
{
 8002a30:	b570      	push	{r4, r5, r6, lr}
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8002a32:	49d4      	ldr	r1, [pc, #848]	; (8002d84 <recorder::Adc::DMAService()+0x354>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8002a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8002a38:	f44f 6400 	mov.w	r4, #2048	; 0x800
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a3c:	4ad2      	ldr	r2, [pc, #840]	; (8002d88 <recorder::Adc::DMAService()+0x358>)
 8002a3e:	b08e      	sub	sp, #56	; 0x38
 8002a40:	608c      	str	r4, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8002a42:	608b      	str	r3, [r1, #8]
 8002a44:	4603      	mov	r3, r0
 8002a46:	6891      	ldr	r1, [r2, #8]
 8002a48:	0749      	lsls	r1, r1, #29
 8002a4a:	f100 808a 	bmi.w	8002b62 <recorder::Adc::DMAService()+0x132>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002a4e:	6c10      	ldr	r0, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002a50:	49ce      	ldr	r1, [pc, #824]	; (8002d8c <recorder::Adc::DMAService()+0x35c>)
 8002a52:	6894      	ldr	r4, [r2, #8]
 8002a54:	4021      	ands	r1, r4
 8002a56:	f041 0104 	orr.w	r1, r1, #4
 8002a5a:	6091      	str	r1, [r2, #8]
    {
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
        LL_ADC_REG_StartConversion(ADC1);
        ProfilingPin<PROFILE_POT_SAMPLING>::Set();

        if (kEnableReverse && current_pot_ == POT_7)
 8002a5c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a60:	2a06      	cmp	r2, #6
 8002a62:	f000 8177 	beq.w	8002d54 <recorder::Adc::DMAService()+0x324>
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
 8002a66:	b280      	uxth	r0, r0
        }

        void Sample(float sample)
        {
            // Expand range a little bit to compensate for resistive losses
            sample = hyst_.Process(0.5 + 1.0025f * (sample - 0.5f));
 8002a68:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8002a6c:	eddf 5ac8 	vldr	s11, [pc, #800]	; 8002d90 <recorder::Adc::DMAService()+0x360>
 8002a70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a74:	ee07 0a90 	vmov	s15, r0
 8002a78:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8002d94 <recorder::Adc::DMAService()+0x364>
 8002a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a80:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8002a84:	eea6 7a86 	vfma.f32	s14, s13, s12
        {
            pot = 0;
        }

        pot_filter_[current_pot_].Sample(pot / 0xFFFF);
 8002a88:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002a8c:	0090      	lsls	r0, r2, #2
 8002a8e:	00c9      	lsls	r1, r1, #3
 8002a90:	f101 0408 	add.w	r4, r1, #8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
    }

    float Process(float input)
    {
        float delta = input - position_;
 8002a94:	4419      	add	r1, r3
 8002a96:	edd1 7a08 	vldr	s15, [r1, #32]
 8002a9a:	441c      	add	r4, r3

        if (delta >= threshold_)
 8002a9c:	edd1 6a07 	vldr	s13, [r1, #28]
        float delta = input - position_;
 8002aa0:	ee37 6a67 	vsub.f32	s12, s14, s15
        if (delta >= threshold_)
 8002aa4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	f2c0 8145 	blt.w	8002d3a <recorder::Adc::DMAService()+0x30a>
        {
            position_ = input - threshold_;
 8002ab0:	ee77 7a66 	vsub.f32	s15, s14, s13
 8002ab4:	edc1 7a08 	vstr	s15, [r1, #32]
            position_ = input + threshold_;
        }

        // Rescale to full range
        float x = position_;
        x = out_min_ + out_range_ * (x - in_min_) * in_range_inv_;
 8002ab8:	4410      	add	r0, r2
 8002aba:	3201      	adds	r2, #1
 8002abc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002ac0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002ac4:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8002ac8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002acc:	edd0 6a05 	vldr	s13, [r0, #20]
 8002ad0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002ad4:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8002ad8:	ed95 6a01 	vldr	s12, [r5, #4]
 8002adc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002ae0:	eeb0 6a66 	vmov.f32	s12, s13
 8002ae4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002ae8:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	d80a      	bhi.n	8002b08 <recorder::Adc::DMAService()+0xd8>
 8002af2:	edd1 7a06 	vldr	s15, [r1, #24]
 8002af6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	bfd4      	ite	le
 8002b00:	eef0 6a46 	vmovle.f32	s13, s12
        return std::clamp(x, out_min_, out_max_);
 8002b04:	edd0 6a06 	vldrgt	s13, [r0, #24]
        }

        float Position(float sample)
        {
            // Correct for error caused by ADC input impedance
            sample = std::clamp(sample * 64, 0.f, 64.f);
 8002b08:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8002d98 <recorder::Adc::DMAService()+0x368>
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	f2c0 810c 	blt.w	8002d34 <recorder::Adc::DMAService()+0x304>
 8002b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b20:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	f340 80f5 	ble.w	8002d16 <recorder::Adc::DMAService()+0x2e6>
        increment_ = 0;
    }

    void Sample(float sample)
    {
        increment_ = (sample - history_) * step_;
 8002b2c:	edd4 7a00 	vldr	s15, [r4]
 8002b30:	ed94 6a01 	vldr	s12, [r4, #4]
 8002b34:	ee77 7a67 	vsub.f32	s15, s14, s15

        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8002b38:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002d9c <recorder::Adc::DMAService()+0x36c>
        increment_ = (sample - history_) * step_;
 8002b3c:	ee67 7a86 	vmul.f32	s15, s15, s12
  { return __builtin_fabsf(__x); }
 8002b40:	eeb0 6ae7 	vabs.f32	s12, s15
 8002b44:	edc4 7a02 	vstr	s15, [r4, #8]
        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8002b48:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	d803      	bhi.n	8002b5a <recorder::Adc::DMAService()+0x12a>
        {
            history_ = sample;
            increment_ = 0.f;
 8002b52:	2100      	movs	r1, #0
            history_ = sample;
 8002b54:	ed84 7a00 	vstr	s14, [r4]
            increment_ = 0.f;
 8002b58:	60a1      	str	r1, [r4, #8]
        current_pot_ = (current_pot_ + 1) % NUM_POTS;
 8002b5a:	f002 0207 	and.w	r2, r2, #7
 8002b5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        }
    }

    float Next(void)
    {
        history_ += increment_;
 8002b62:	ed93 0a02 	vldr	s0, [r3, #8]
 8002b66:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 8002b6a:	ed93 1a16 	vldr	s2, [r3, #88]	; 0x58
 8002b6e:	edd3 1a20 	vldr	s3, [r3, #128]	; 0x80
 8002b72:	ed93 2a2a 	vldr	s4, [r3, #168]	; 0xa8
 8002b76:	edd3 2a34 	vldr	s5, [r3, #208]	; 0xd0
 8002b7a:	ed93 3a3e 	vldr	s6, [r3, #248]	; 0xf8
 8002b7e:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8002b82:	ed93 4a04 	vldr	s8, [r3, #16]
 8002b86:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8002b8a:	ed93 5a18 	vldr	s10, [r3, #96]	; 0x60
 8002b8e:	ee34 4a00 	vadd.f32	s8, s8, s0
 8002b92:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002b96:	ee74 4aa0 	vadd.f32	s9, s9, s1
 8002b9a:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8002b9e:	ee35 5a01 	vadd.f32	s10, s10, s2
 8002ba2:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002ba6:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8002baa:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002bae:	ee36 6a02 	vadd.f32	s12, s12, s4
 8002bb2:	edd3 3a4a 	vldr	s7, [r3, #296]	; 0x128
 8002bb6:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8002bba:	ee37 7a03 	vadd.f32	s14, s14, s6

        for (uint32_t idx = 0; idx < kAudioOSFactor; idx++)
        {
            for (uint32_t ch = 0; ch < NUM_AUDIO_INS; ch++)
            {
                float sample = dma_buffer_[read_index_];
 8002bbe:	4e78      	ldr	r6, [pc, #480]	; (8002da0 <recorder::Adc::DMAService()+0x370>)
 8002bc0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8002bc4:	ed83 6a2a 	vstr	s12, [r3, #168]	; 0xa8
 8002bc8:	edc3 6a34 	vstr	s13, [r3, #208]	; 0xd0
 8002bcc:	ed83 7a3e 	vstr	s14, [r3, #248]	; 0xf8
 8002bd0:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
 8002bd4:	ed83 4a02 	vstr	s8, [r3, #8]
            pot[i] = pot_filter_[i].Next();
 8002bd8:	ed8d 4a06 	vstr	s8, [sp, #24]
 8002bdc:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8002be0:	edcd 4a07 	vstr	s9, [sp, #28]
 8002be4:	ed83 5a16 	vstr	s10, [r3, #88]	; 0x58
 8002be8:	ed8d 5a08 	vstr	s10, [sp, #32]
 8002bec:	edc3 5a20 	vstr	s11, [r3, #128]	; 0x80
 8002bf0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8002bf4:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8002bf8:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002bfc:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 8002c00:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
                read_index_ = (read_index_ + 1) % kDMABufferSize;
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c04:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002c08:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c0c:	4c65      	ldr	r4, [pc, #404]	; (8002da4 <recorder::Adc::DMAService()+0x374>)
 8002c0e:	1c51      	adds	r1, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c10:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c14:	eeb0 6a67 	vmov.f32	s12, s15
 8002c18:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002da8 <recorder::Adc::DMAService()+0x378>
                float sample = dma_buffer_[read_index_];
 8002c1c:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c20:	fba4 0201 	umull	r0, r2, r4, r1
            }
        }

        callback_(audio, pot);
 8002c24:	681d      	ldr	r5, [r3, #0]
 8002c26:	4668      	mov	r0, sp
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c28:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c2a:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c32:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c36:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
        callback_(audio, pot);
 8002c3a:	a906      	add	r1, sp, #24
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c3c:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c40:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002c44:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c48:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c4c:	ed8d 6a00 	vstr	s12, [sp]
 8002c50:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c54:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c56:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c5e:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c62:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002c66:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c6a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002c6e:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c72:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c76:	ed8d 6a03 	vstr	s12, [sp, #12]
 8002c7a:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c7e:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c80:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c88:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c8c:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002c90:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002c98:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c9c:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002ca0:	ed8d 6a01 	vstr	s12, [sp, #4]
 8002ca4:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002ca8:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002caa:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cb2:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cb6:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002cba:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002cbe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002cc2:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cc6:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cca:	ed8d 6a04 	vstr	s12, [sp, #16]
 8002cce:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cd2:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002cd4:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cdc:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002ce0:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
                float sample = dma_buffer_[read_index_];
 8002ce4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002ce8:	3201      	adds	r2, #1
                float sample = dma_buffer_[read_index_];
 8002cea:	edd6 6a00 	vldr	s13, [r6]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cee:	fba4 6402 	umull	r6, r4, r4, r2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cf2:	ed8d 6a02 	vstr	s12, [sp, #8]
                float sample = dma_buffer_[read_index_];
 8002cf6:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cfa:	08e4      	lsrs	r4, r4, #3
 8002cfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002d00:	eee6 7a87 	vfma.f32	s15, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002d04:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 8002d08:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002d0c:	edcd 7a05 	vstr	s15, [sp, #20]
        callback_(audio, pot);
 8002d10:	47a8      	blx	r5
    }

    PerformCallback();
}
 8002d12:	b00e      	add	sp, #56	; 0x38
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8002d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d1e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002d22:	ee17 1a10 	vmov	r1, s14
 8002d26:	2900      	cmp	r1, #0
 8002d28:	da17      	bge.n	8002d5a <recorder::Adc::DMAService()+0x32a>
            return a + (b - a) * frac;
 8002d2a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002dac <recorder::Adc::DMAService()+0x37c>
 8002d2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d32:	e6fb      	b.n	8002b2c <recorder::Adc::DMAService()+0xfc>
 8002d34:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002db0 <recorder::Adc::DMAService()+0x380>
 8002d38:	e6f8      	b.n	8002b2c <recorder::Adc::DMAService()+0xfc>
        else if (delta <= -threshold_)
 8002d3a:	eef1 5a66 	vneg.f32	s11, s13
 8002d3e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	f63f aeb7 	bhi.w	8002ab8 <recorder::Adc::DMAService()+0x88>
            position_ = input + threshold_;
 8002d4a:	ee76 7a87 	vadd.f32	s15, s13, s14
 8002d4e:	edc1 7a08 	vstr	s15, [r1, #32]
 8002d52:	e6b1      	b.n	8002ab8 <recorder::Adc::DMAService()+0x88>
 8002d54:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002db4 <recorder::Adc::DMAService()+0x384>
 8002d58:	e696      	b.n	8002a88 <recorder::Adc::DMAService()+0x58>
 8002d5a:	293f      	cmp	r1, #63	; 0x3f
            float a = kPotCorrection[index];
 8002d5c:	4816      	ldr	r0, [pc, #88]	; (8002db8 <recorder::Adc::DMAService()+0x388>)
 8002d5e:	bfa8      	it	ge
 8002d60:	213f      	movge	r1, #63	; 0x3f
            float frac = sample - index;
 8002d62:	ee07 1a10 	vmov	s14, r1
            float a = kPotCorrection[index];
 8002d66:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            float frac = sample - index;
 8002d6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            return a + (b - a) * frac;
 8002d6e:	edd5 6a01 	vldr	s13, [r5, #4]
            float frac = sample - index;
 8002d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
            float a = kPotCorrection[index];
 8002d76:	ed95 7a00 	vldr	s14, [r5]
            return a + (b - a) * frac;
 8002d7a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002d7e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002d82:	e6d3      	b.n	8002b2c <recorder::Adc::DMAService()+0xfc>
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	7fffffc0 	.word	0x7fffffc0
 8002d90:	37800080 	.word	0x37800080
 8002d94:	3f8051ec 	.word	0x3f8051ec
 8002d98:	42800000 	.word	0x42800000
 8002d9c:	34000000 	.word	0x34000000
 8002da0:	38000000 	.word	0x38000000
 8002da4:	aaaaaaab 	.word	0xaaaaaaab
 8002da8:	38000080 	.word	0x38000080
 8002dac:	3c805439 	.word	0x3c805439
 8002db0:	00000000 	.word	0x00000000
 8002db4:	baa3d800 	.word	0xbaa3d800
 8002db8:	08008b24 	.word	0x08008b24

08002dbc <recorder::Adc::DMAHandler()>:

void Adc::DMAHandler(void)
{
    instance_->DMAService();
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <recorder::Adc::DMAHandler()+0x8>)
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	f7ff be36 	b.w	8002a30 <recorder::Adc::DMAService()>
 8002dc4:	20010a74 	.word	0x20010a74

08002dc8 <recorder::Adc::InitAudioSequence()>:
    while (LL_ADC_IsCalibrationOnGoing(adc));
    system::Delay_ms(1);
}

void Adc::InitAudioSequence(void)
{
 8002dc8:	b530      	push	{r4, r5, lr}
    auto adc = ADC2;
    auto trigger = LL_ADC_REG_TRIG_EXT_TIM15_TRGO;

    LL_ADC_REG_InitTypeDef reg_init =
 8002dca:	2300      	movs	r3, #0
{
 8002dcc:	b087      	sub	sp, #28
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8002dce:	4c2c      	ldr	r4, [pc, #176]	; (8002e80 <recorder::Adc::InitAudioSequence()+0xb8>)
    };
 8002dd0:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
    LL_ADC_REG_Init(adc, &reg_init);
 8002dd4:	4669      	mov	r1, sp
 8002dd6:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8002dd8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8002e78 <recorder::Adc::InitAudioSequence()+0xb0>
 8002ddc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    };
 8002de0:	2301      	movs	r3, #1
    LL_ADC_REG_InitTypeDef reg_init =
 8002de2:	ed8d 7b04 	vstr	d7, [sp, #16]
    };
 8002de6:	e9cd 2300 	strd	r2, r3, [sp]
    LL_ADC_REG_Init(adc, &reg_init);
 8002dea:	f002 fffd 	bl	8005de8 <LL_ADC_REG_Init>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <recorder::Adc::InitAudioSequence()+0xbc>)
 8002df0:	fa93 f3a3 	rbit	r3, r3

    for (uint32_t i = 0; i < NUM_AUDIO_INS; i++)
    {
        uint32_t channel = kAudioChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002df4:	2201      	movs	r2, #1
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	69e1      	ldr	r1, [r4, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
  MODIFY_REG(*preg,
 8002e00:	4821      	ldr	r0, [pc, #132]	; (8002e88 <recorder::Adc::InitAudioSequence()+0xc0>)
 8002e02:	430b      	orrs	r3, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e04:	4921      	ldr	r1, [pc, #132]	; (8002e8c <recorder::Adc::InitAudioSequence()+0xc4>)
 8002e06:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(*preg,
 8002e08:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8002e0c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8002e10:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 8002e14:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  MODIFY_REG(*preg,
 8002e18:	684b      	ldr	r3, [r1, #4]
 8002e1a:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8002e1e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <recorder::Adc::InitAudioSequence()+0xc8>)
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	69e5      	ldr	r5, [r4, #28]
 8002e30:	409a      	lsls	r2, r3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <recorder::Adc::InitAudioSequence()+0xcc>)
 8002e34:	432a      	orrs	r2, r5
 8002e36:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8002e38:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 8002e3c:	f422 32f8 	bic.w	r2, r2, #126976	; 0x1f000
 8002e40:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
 8002e44:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
  MODIFY_REG(*preg,
 8002e48:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002e4a:	4813      	ldr	r0, [pc, #76]	; (8002e98 <recorder::Adc::InitAudioSequence()+0xd0>)
  MODIFY_REG(*preg,
 8002e4c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002e50:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002e54:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002e56:	6922      	ldr	r2, [r4, #16]
 8002e58:	4013      	ands	r3, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <recorder::Adc::InitAudioSequence()+0xd4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002e5c:	f043 0303 	orr.w	r3, r3, #3
 8002e60:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e68:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002e6a:	6923      	ldr	r3, [r4, #16]
 8002e6c:	4018      	ands	r0, r3
 8002e6e:	4302      	orrs	r2, r0
 8002e70:	6122      	str	r2, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 2, LL_ADC_OVS_SHIFT_RIGHT_1);
}
 8002e72:	b007      	add	sp, #28
 8002e74:	bd30      	pop	{r4, r5, pc}
 8002e76:	bf00      	nop
 8002e78:	00000003 	.word	0x00000003
 8002e7c:	00001000 	.word	0x00001000
 8002e80:	40022100 	.word	0x40022100
 8002e84:	3ef08000 	.word	0x3ef08000
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40022114 	.word	0x40022114
 8002e90:	2e300800 	.word	0x2e300800
 8002e94:	fffffbfc 	.word	0xfffffbfc
 8002e98:	fc00fe1f 	.word	0xfc00fe1f
 8002e9c:	00010020 	.word	0x00010020

08002ea0 <recorder::Adc::InitPotSequence()>:

void Adc::InitPotSequence(void)
{
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    auto adc = ADC1;
    auto trigger = LL_ADC_REG_TRIG_SOFTWARE;

    LL_ADC_REG_InitTypeDef reg_init =
 8002ea4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8002ea8:	b087      	sub	sp, #28
    LL_ADC_REG_InitTypeDef reg_init =
 8002eaa:	f04f 0807 	mov.w	r8, #7
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eb4:	4c35      	ldr	r4, [pc, #212]	; (8002f8c <recorder::Adc::InitPotSequence()+0xec>)
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DR_TRANSFER,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8002eb6:	4669      	mov	r1, sp
    LL_ADC_REG_InitTypeDef reg_init =
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	9205      	str	r2, [sp, #20]
    LL_ADC_REG_Init(adc, &reg_init);
 8002ebc:	f104 0a1c 	add.w	sl, r4, #28
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ec0:	4f33      	ldr	r7, [pc, #204]	; (8002f90 <recorder::Adc::InitPotSequence()+0xf0>)

    for (uint32_t i = 0; i < NUM_POTS; i++)
    {
        uint32_t channel = kPotChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002ec2:	f04f 0901 	mov.w	r9, #1
 8002ec6:	4e33      	ldr	r6, [pc, #204]	; (8002f94 <recorder::Adc::InitPotSequence()+0xf4>)
 8002ec8:	4d33      	ldr	r5, [pc, #204]	; (8002f98 <recorder::Adc::InitPotSequence()+0xf8>)
    LL_ADC_REG_InitTypeDef reg_init =
 8002eca:	e9cd 8001 	strd	r8, r0, [sp, #4]
    LL_ADC_REG_Init(adc, &reg_init);
 8002ece:	4832      	ldr	r0, [pc, #200]	; (8002f98 <recorder::Adc::InitPotSequence()+0xf8>)
    LL_ADC_REG_InitTypeDef reg_init =
 8002ed0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    LL_ADC_REG_Init(adc, &reg_init);
 8002ed4:	f002 ff88 	bl	8005de8 <LL_ADC_REG_Init>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ed8:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8002fac <recorder::Adc::InitPotSequence()+0x10c>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <recorder::Adc::InitPotSequence()+0xfc>)
  MODIFY_REG(*preg,
 8002ede:	f04f 0e1f 	mov.w	lr, #31
 8002ee2:	e030      	b.n	8002f46 <recorder::Adc::InitPotSequence()+0xa6>
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002ee4:	fa09 f100 	lsl.w	r1, r9, r0
 8002ee8:	69ea      	ldr	r2, [r5, #28]
    for (uint32_t i = 0; i < NUM_POTS; i++)
 8002eea:	45a2      	cmp	sl, r4
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002eec:	ea42 0201 	orr.w	r2, r2, r1
 8002ef0:	61ea      	str	r2, [r5, #28]
        LL_ADC_REG_SetSequencerRanks(adc, kADCRegRank[i], channel);
 8002ef2:	f856 2f04 	ldr.w	r2, [r6, #4]!
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ef6:	ea4f 1192 	mov.w	r1, r2, lsr #6
  MODIFY_REG(*preg,
 8002efa:	f002 021f 	and.w	r2, r2, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002efe:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 8002f02:	fa00 f002 	lsl.w	r0, r0, r2
 8002f06:	fa0e f202 	lsl.w	r2, lr, r2
 8002f0a:	f851 b007 	ldr.w	fp, [r1, r7]
 8002f0e:	ea2b 0202 	bic.w	r2, fp, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f12:	ea4f 5bd3 	mov.w	fp, r3, lsr #23
  MODIFY_REG(*preg,
 8002f16:	f3c3 5304 	ubfx	r3, r3, #20, #5
  MODIFY_REG(*preg,
 8002f1a:	ea42 0200 	orr.w	r2, r2, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f1e:	f00b 0b04 	and.w	fp, fp, #4
  MODIFY_REG(*preg,
 8002f22:	f04f 0005 	mov.w	r0, #5
  MODIFY_REG(*preg,
 8002f26:	51ca      	str	r2, [r1, r7]
  MODIFY_REG(*preg,
 8002f28:	fa08 f103 	lsl.w	r1, r8, r3
 8002f2c:	f85b 200c 	ldr.w	r2, [fp, ip]
 8002f30:	fa00 f303 	lsl.w	r3, r0, r3
 8002f34:	ea22 0201 	bic.w	r2, r2, r1
 8002f38:	ea43 0302 	orr.w	r3, r3, r2
 8002f3c:	f84b 300c 	str.w	r3, [fp, ip]
    for (uint32_t i = 0; i < NUM_POTS; i++)
 8002f40:	d010      	beq.n	8002f64 <recorder::Adc::InitPotSequence()+0xc4>
        uint32_t channel = kPotChannels[i];
 8002f42:	f854 3b04 	ldr.w	r3, [r4], #4
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002f46:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8002f4a:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8002f4e:	2a00      	cmp	r2, #0
 8002f50:	d0c8      	beq.n	8002ee4 <recorder::Adc::InitPotSequence()+0x44>
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	fab2 f282 	clz	r2, r2
 8002f5a:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8002f5e:	fa09 f102 	lsl.w	r1, r9, r2
 8002f62:	e7c1      	b.n	8002ee8 <recorder::Adc::InitPotSequence()+0x48>
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002f64:	6928      	ldr	r0, [r5, #16]
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <recorder::Adc::InitPotSequence()+0x100>)
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <recorder::Adc::InitPotSequence()+0x104>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002f6a:	4003      	ands	r3, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <recorder::Adc::InitPotSequence()+0x108>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002f6e:	f043 0303 	orr.w	r3, r3, #3
 8002f72:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8002f74:	692b      	ldr	r3, [r5, #16]
 8002f76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f7a:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002f7c:	692b      	ldr	r3, [r5, #16]
 8002f7e:	4019      	ands	r1, r3
 8002f80:	430a      	orrs	r2, r1
 8002f82:	612a      	str	r2, [r5, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 16, LL_ADC_OVS_SHIFT_RIGHT_4);
}
 8002f84:	b007      	add	sp, #28
 8002f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8a:	bf00      	nop
 8002f8c:	08008c6c 	.word	0x08008c6c
 8002f90:	40022030 	.word	0x40022030
 8002f94:	08008c24 	.word	0x08008c24
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	0c900008 	.word	0x0c900008
 8002fa0:	fffffbfc 	.word	0xfffffbfc
 8002fa4:	fc00fe1f 	.word	0xfc00fe1f
 8002fa8:	000f0080 	.word	0x000f0080
 8002fac:	40022014 	.word	0x40022014

08002fb0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:
// PUBLIC //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Adc::Init(Callback callback)
{
    instance_ = this;
 8002fb0:	4ac1      	ldr	r2, [pc, #772]	; (80032b8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x308>)
        history_ = 0;
 8002fb2:	2300      	movs	r3, #0
        out_max_ = max;
 8002fb4:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
        step_ = 1.f / period;
 8002fba:	f04f 5e78 	mov.w	lr, #1040187392	; 0x3e000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	4dbf      	ldr	r5, [pc, #764]	; (80032bc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x30c>)
    instance_ = this;
 8002fc0:	6010      	str	r0, [r2, #0]
    callback_ = callback;
    started_ = false;
 8002fc2:	2600      	movs	r6, #0
        threshold_ = threshold;
 8002fc4:	4abe      	ldr	r2, [pc, #760]	; (80032c0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x310>)
{
 8002fc6:	b094      	sub	sp, #80	; 0x50
    callback_ = callback;
 8002fc8:	6001      	str	r1, [r0, #0]
{
 8002fca:	4604      	mov	r4, r0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002fcc:	49bd      	ldr	r1, [pc, #756]	; (80032c4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x314>)
 8002fce:	f8c0 e00c 	str.w	lr, [r0, #12]
        out_max_ = max;
 8002fd2:	f8c0 c018 	str.w	ip, [r0, #24]
        out_range_ = out_max_ - out_min_;
 8002fd6:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8002fda:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
        out_max_ = max;
 8002fde:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
        out_range_ = out_max_ - out_min_;
 8002fe2:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
 8002fe6:	f8c0 e05c 	str.w	lr, [r0, #92]	; 0x5c
        out_max_ = max;
 8002fea:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
        out_range_ = out_max_ - out_min_;
 8002fee:	f8c0 c074 	str.w	ip, [r0, #116]	; 0x74
        threshold_ = threshold;
 8002ff2:	61c2      	str	r2, [r0, #28]
        in_min_ = out_min_ + threshold_;
 8002ff4:	6282      	str	r2, [r0, #40]	; 0x28
        threshold_ = threshold;
 8002ff6:	6442      	str	r2, [r0, #68]	; 0x44
        in_min_ = out_min_ + threshold_;
 8002ff8:	6502      	str	r2, [r0, #80]	; 0x50
        threshold_ = threshold;
 8002ffa:	66c2      	str	r2, [r0, #108]	; 0x6c
        in_min_ = out_min_ + threshold_;
 8002ffc:	6782      	str	r2, [r0, #120]	; 0x78
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002ffe:	62c1      	str	r1, [r0, #44]	; 0x2c
        history_ = 0;
 8003000:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8003002:	6103      	str	r3, [r0, #16]
        out_min_ = min;
 8003004:	6143      	str	r3, [r0, #20]
        position_ = initial_value;
 8003006:	6203      	str	r3, [r0, #32]
        history_ = 0;
 8003008:	6303      	str	r3, [r0, #48]	; 0x30
        increment_ = 0;
 800300a:	6383      	str	r3, [r0, #56]	; 0x38
        out_min_ = min;
 800300c:	63c3      	str	r3, [r0, #60]	; 0x3c
        position_ = initial_value;
 800300e:	6483      	str	r3, [r0, #72]	; 0x48
        history_ = 0;
 8003010:	6583      	str	r3, [r0, #88]	; 0x58
        increment_ = 0;
 8003012:	6603      	str	r3, [r0, #96]	; 0x60
        out_min_ = min;
 8003014:	6643      	str	r3, [r0, #100]	; 0x64
        position_ = initial_value;
 8003016:	6703      	str	r3, [r0, #112]	; 0x70
    started_ = false;
 8003018:	7106      	strb	r6, [r0, #4]
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800301a:	6541      	str	r1, [r0, #84]	; 0x54
        step_ = 1.f / period;
 800301c:	f8c0 e084 	str.w	lr, [r0, #132]	; 0x84
        out_max_ = max;
 8003020:	f8c0 c090 	str.w	ip, [r0, #144]	; 0x90
        out_range_ = out_max_ - out_min_;
 8003024:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
 8003028:	f8c0 e0ac 	str.w	lr, [r0, #172]	; 0xac
        out_max_ = max;
 800302c:	f8c0 c0b8 	str.w	ip, [r0, #184]	; 0xb8
        out_range_ = out_max_ - out_min_;
 8003030:	f8c0 c0c4 	str.w	ip, [r0, #196]	; 0xc4
 8003034:	f8c0 e0d4 	str.w	lr, [r0, #212]	; 0xd4
        out_max_ = max;
 8003038:	f8c0 c0e0 	str.w	ip, [r0, #224]	; 0xe0
        out_range_ = out_max_ - out_min_;
 800303c:	f8c0 c0ec 	str.w	ip, [r0, #236]	; 0xec
 8003040:	f8c0 e0fc 	str.w	lr, [r0, #252]	; 0xfc
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8003044:	67c1      	str	r1, [r0, #124]	; 0x7c
        threshold_ = threshold;
 8003046:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
        in_min_ = out_min_ + threshold_;
 800304a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800304e:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
        threshold_ = threshold;
 8003052:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
        in_min_ = out_min_ + threshold_;
 8003056:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800305a:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
        threshold_ = threshold;
 800305e:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
        in_min_ = out_min_ + threshold_;
 8003062:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8003066:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
        history_ = 0;
 800306a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        increment_ = 0;
 800306e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        out_min_ = min;
 8003072:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        position_ = initial_value;
 8003076:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
        history_ = 0;
 800307a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
        increment_ = 0;
 800307e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        out_min_ = min;
 8003082:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        position_ = initial_value;
 8003086:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
        history_ = 0;
 800308a:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        increment_ = 0;
 800308e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        out_min_ = min;
 8003092:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
        position_ = initial_value;
 8003096:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
        history_ = 0;
 800309a:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        increment_ = 0;
 800309e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
        out_min_ = min;
 80030a2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
        position_ = initial_value;
 80030a6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
        history_ = 0;
 80030aa:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        increment_ = 0;
 80030ae:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
        out_min_ = min;
 80030b2:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        position_ = initial_value;
 80030b6:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
        step_ = 1.f / period;
 80030ba:	f8c0 e124 	str.w	lr, [r0, #292]	; 0x124
        out_max_ = max;
 80030be:	f8c0 c108 	str.w	ip, [r0, #264]	; 0x108
        out_range_ = out_max_ - out_min_;
 80030c2:	f8c0 c114 	str.w	ip, [r0, #276]	; 0x114
        out_max_ = max;
 80030c6:	f8c0 c130 	str.w	ip, [r0, #304]	; 0x130
        out_range_ = out_max_ - out_min_;
 80030ca:	f8c0 c13c 	str.w	ip, [r0, #316]	; 0x13c
        threshold_ = threshold;
 80030ce:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
        in_min_ = out_min_ + threshold_;
 80030d2:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80030d6:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
 80030da:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
        threshold_ = threshold;
 80030de:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
}

void Adc::Reset(void)
{
    read_index_ = 0;
    current_pot_ = 0;
 80030e2:	e9c0 6652 	strd	r6, r6, [r0, #328]	; 0x148
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        in_min_ = out_min_ + threshold_;
 80030ea:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    LL_GPIO_StructInit(&gpio_init);
 80030ee:	a804      	add	r0, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80030f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003104:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003110:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	9302      	str	r3, [sp, #8]
 800311a:	9b02      	ldr	r3, [sp, #8]
    LL_GPIO_StructInit(&gpio_init);
 800311c:	f002 ffa6 	bl	800606c <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_6 |
 8003120:	22ca      	movs	r2, #202	; 0xca
 8003122:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003124:	a904      	add	r1, sp, #16
 8003126:	4868      	ldr	r0, [pc, #416]	; (80032c8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x318>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8003128:	9608      	str	r6, [sp, #32]
    gpio_init.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_6 |
 800312a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    LL_GPIO_Init(GPIOA, &gpio_init);
 800312e:	f002 ff17 	bl	8005f60 <LL_GPIO_Init>
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8003132:	231f      	movs	r3, #31
    LL_GPIO_Init(GPIOC, &gpio_init);
 8003134:	a904      	add	r1, sp, #16
 8003136:	4865      	ldr	r0, [pc, #404]	; (80032cc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x31c>)
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8003138:	9304      	str	r3, [sp, #16]
    LL_GPIO_Init(GPIOC, &gpio_init);
 800313a:	f002 ff11 	bl	8005f60 <LL_GPIO_Init>
  *         performance is the same on the full voltage range
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableAnalogBooster(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 800313e:	4a64      	ldr	r2, [pc, #400]	; (80032d0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x320>)
  MODIFY_REG(ADCx->CR,
 8003140:	4964      	ldr	r1, [pc, #400]	; (80032d4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
 8003142:	6853      	ldr	r3, [r2, #4]
 8003144:	4864      	ldr	r0, [pc, #400]	; (80032d8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x328>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6053      	str	r3, [r2, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 800314c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003150:	4a62      	ldr	r2, [pc, #392]	; (80032dc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x32c>)
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800315a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 800315e:	4d60      	ldr	r5, [pc, #384]	; (80032e0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x330>)
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003168:	6893      	ldr	r3, [r2, #8]
 800316a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8003174:	688a      	ldr	r2, [r1, #8]
 8003176:	4002      	ands	r2, r0
 8003178:	f042 0202 	orr.w	r2, r2, #2
 800317c:	608a      	str	r2, [r1, #8]
 800317e:	4a59      	ldr	r2, [pc, #356]	; (80032e4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 8003180:	6893      	ldr	r3, [r2, #8]
 8003182:	4003      	ands	r3, r0
    system::Delay_ms(1);
 8003184:	2001      	movs	r0, #1
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	6093      	str	r3, [r2, #8]
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 800318c:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800318e:	4d51      	ldr	r5, [pc, #324]	; (80032d4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8003190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003194:	4a54      	ldr	r2, [pc, #336]	; (80032e8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x338>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 800319a:	688b      	ldr	r3, [r1, #8]
 800319c:	bf0c      	ite	eq
 800319e:	f443 73e0 	orreq.w	r3, r3, #448	; 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 80031a2:	f443 7340 	orrne.w	r3, r3, #768	; 0x300
 80031a6:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031a8:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 80031aa:	4b50      	ldr	r3, [pc, #320]	; (80032ec <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x33c>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031ac:	400a      	ands	r2, r1
 80031ae:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(ADCx->CR,
 80031b0:	68aa      	ldr	r2, [r5, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	60ab      	str	r3, [r5, #8]
 80031ba:	f001 f951 	bl	8004460 <recorder::system::Delay_ms(unsigned long)>
    LL_ADC_InitTypeDef adc_init =
 80031be:	2200      	movs	r2, #0
 80031c0:	2300      	movs	r3, #0
    LL_ADC_Init(adc, &adc_init);
 80031c2:	a904      	add	r1, sp, #16
 80031c4:	4628      	mov	r0, r5
    LL_ADC_InitTypeDef adc_init =
 80031c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031ca:	2300      	movs	r3, #0
 80031cc:	9306      	str	r3, [sp, #24]
    LL_ADC_Init(adc, &adc_init);
 80031ce:	f002 fdef 	bl	8005db0 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 80031d2:	68ab      	ldr	r3, [r5, #8]
 80031d4:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x340>)
 80031d6:	401a      	ands	r2, r3
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x344>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031de:	68ab      	ldr	r3, [r5, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dbfc      	blt.n	80031de <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x22e>
    system::Delay_ms(1);
 80031e4:	2001      	movs	r0, #1
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031e6:	4d3f      	ldr	r5, [pc, #252]	; (80032e4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 80031e8:	f001 f93a 	bl	8004460 <recorder::system::Delay_ms(unsigned long)>
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 80031ec:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x330>)
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 80031ee:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
    system::Delay_ms(1);
 80031f0:	2001      	movs	r0, #1
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 80031fc:	6893      	ldr	r3, [r2, #8]
 80031fe:	bf0c      	ite	eq
 8003200:	f443 73e0 	orreq.w	r3, r3, #448	; 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 8003204:	f443 7340 	orrne.w	r3, r3, #768	; 0x300
 8003208:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800320a:	4a37      	ldr	r2, [pc, #220]	; (80032e8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x338>)
 800320c:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x33c>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003210:	400a      	ands	r2, r1
 8003212:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8003214:	68aa      	ldr	r2, [r5, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	60ab      	str	r3, [r5, #8]
 800321e:	f001 f91f 	bl	8004460 <recorder::system::Delay_ms(unsigned long)>
    LL_ADC_InitTypeDef adc_init =
 8003222:	2200      	movs	r2, #0
 8003224:	2300      	movs	r3, #0
    LL_ADC_Init(adc, &adc_init);
 8003226:	a904      	add	r1, sp, #16
 8003228:	4628      	mov	r0, r5
    LL_ADC_InitTypeDef adc_init =
 800322a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800322e:	2300      	movs	r3, #0
 8003230:	9306      	str	r3, [sp, #24]
    LL_ADC_Init(adc, &adc_init);
 8003232:	f002 fdbd 	bl	8005db0 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8003236:	68ab      	ldr	r3, [r5, #8]
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x340>)
 800323a:	401a      	ands	r2, r3
 800323c:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x344>)
 800323e:	4313      	orrs	r3, r2
 8003240:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003242:	68ab      	ldr	r3, [r5, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	dbfc      	blt.n	8003242 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x292>
    system::Delay_ms(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f001 f909 	bl	8004460 <recorder::system::Delay_ms(unsigned long)>
    InitAudioSequence();
 800324e:	4620      	mov	r0, r4
 8003250:	f7ff fdba 	bl	8002dc8 <recorder::Adc::InitAudioSequence()>
    InitPotSequence();
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff fe23 	bl	8002ea0 <recorder::Adc::InitPotSequence()>
  MODIFY_REG(ADCx->CR,
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
 800325c:	481e      	ldr	r0, [pc, #120]	; (80032d8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x328>)
 800325e:	6891      	ldr	r1, [r2, #8]
 8003260:	4001      	ands	r1, r0
 8003262:	f041 0101 	orr.w	r1, r1, #1
 8003266:	6091      	str	r1, [r2, #8]
 8003268:	68ab      	ldr	r3, [r5, #8]
 800326a:	4003      	ands	r3, r0
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003272:	6813      	ldr	r3, [r2, #0]
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 8003274:	07d9      	lsls	r1, r3, #31
 8003276:	d5fc      	bpl.n	8003272 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c2>
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 800327a:	6813      	ldr	r3, [r2, #0]
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC2));
 800327c:	07db      	lsls	r3, r3, #31
 800327e:	d5fc      	bpl.n	800327a <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2ca>
    LL_DMA_InitTypeDef dma_init =
 8003280:	2234      	movs	r2, #52	; 0x34
 8003282:	2100      	movs	r1, #0
 8003284:	a806      	add	r0, sp, #24
 8003286:	250c      	movs	r5, #12
 8003288:	f004 fa15 	bl	80076b6 <memset>
 800328c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003290:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x30c>)
    LL_DMA_InitTypeDef dma_init =
 8003296:	9007      	str	r0, [sp, #28]
 8003298:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800329c:	9109      	str	r1, [sp, #36]	; 0x24
 800329e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032a2:	950c      	str	r5, [sp, #48]	; 0x30
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80032a4:	aa04      	add	r2, sp, #16
 80032a6:	4c14      	ldr	r4, [pc, #80]	; (80032f8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x348>)
    LL_DMA_InitTypeDef dma_init =
 80032a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032ac:	200a      	movs	r0, #10
 80032ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80032b2:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
 80032b6:	e021      	b.n	80032fc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x34c>
 80032b8:	20010a74 	.word	0x20010a74
 80032bc:	58024400 	.word	0x58024400
 80032c0:	3a83126f 	.word	0x3a83126f
 80032c4:	3f8041ab 	.word	0x3f8041ab
 80032c8:	58020000 	.word	0x58020000
 80032cc:	58020800 	.word	0x58020800
 80032d0:	58000400 	.word	0x58000400
 80032d4:	40022000 	.word	0x40022000
 80032d8:	7fffffc0 	.word	0x7fffffc0
 80032dc:	40022300 	.word	0x40022300
 80032e0:	5c001000 	.word	0x5c001000
 80032e4:	40022100 	.word	0x40022100
 80032e8:	5fffffc0 	.word	0x5fffffc0
 80032ec:	6fffffc0 	.word	0x6fffffc0
 80032f0:	3ffeffc0 	.word	0x3ffeffc0
 80032f4:	80010000 	.word	0x80010000
 80032f8:	40020000 	.word	0x40020000
    };
 80032fc:	4814      	ldr	r0, [pc, #80]	; (8003350 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a0>)
 80032fe:	4915      	ldr	r1, [pc, #84]	; (8003354 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a4>)
 8003300:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003304:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003308:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 800330a:	f041 0101 	orr.w	r1, r1, #1
 800330e:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003312:	2101      	movs	r1, #1
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	9b03      	ldr	r3, [sp, #12]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003320:	f002 fdcc 	bl	8005ebc <LL_DMA_Init>
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  register uint32_t dma_base_addr = (uint32_t)DMAx;

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    irq::RegisterHandler(DMA1_Stream1_IRQn, DMAHandler);
 8003326:	4628      	mov	r0, r5
 8003328:	490b      	ldr	r1, [pc, #44]	; (8003358 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a8>)
 800332a:	f023 0310 	bic.w	r3, r3, #16
 800332e:	62a3      	str	r3, [r4, #40]	; 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003332:	f023 0308 	bic.w	r3, r3, #8
 8003336:	62a3      	str	r3, [r4, #40]	; 0x28
 8003338:	f000 fc34 	bl	8003ba4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream1_IRQn, kADCIRQPriority);
 800333c:	4628      	mov	r0, r5
 800333e:	2101      	movs	r1, #1
 8003340:	f000 fc6c 	bl	8003c1c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream1_IRQn);
 8003344:	4628      	mov	r0, r5
}
 8003346:	b014      	add	sp, #80	; 0x50
 8003348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    irq::Enable(DMA1_Stream1_IRQn);
 800334c:	f000 bc4c 	b.w	8003be8 <recorder::irq::Enable(IRQn_Type)>
 8003350:	40022140 	.word	0x40022140
 8003354:	38000000 	.word	0x38000000
 8003358:	08002dbd 	.word	0x08002dbd

0800335c <recorder::Adc::Start()>:
    }
}

void Adc::Start(void)
{
    if (!started_)
 800335c:	7903      	ldrb	r3, [r0, #4]
 800335e:	bb53      	cbnz	r3, 80033b6 <recorder::Adc::Start()+0x5a>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <recorder::Adc::Start()+0x5c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003362:	f44f 6280 	mov.w	r2, #1024	; 0x400
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003366:	4915      	ldr	r1, [pc, #84]	; (80033bc <recorder::Adc::Start()+0x60>)
{
 8003368:	b430      	push	{r4, r5}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800336a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800336e:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003370:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003374:	f042 0210 	orr.w	r2, r2, #16
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800337a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337c:	f042 0208 	orr.w	r2, r2, #8
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
 8003382:	688b      	ldr	r3, [r1, #8]
 8003384:	075b      	lsls	r3, r3, #29
 8003386:	d4fc      	bmi.n	8003382 <recorder::Adc::Start()+0x26>
  MODIFY_REG(ADCx->CR,
 8003388:	688a      	ldr	r2, [r1, #8]
 800338a:	4d0d      	ldr	r5, [pc, #52]	; (80033c0 <recorder::Adc::Start()+0x64>)
 800338c:	4c0d      	ldr	r4, [pc, #52]	; (80033c4 <recorder::Adc::Start()+0x68>)
 800338e:	402a      	ands	r2, r5
 8003390:	f042 0204 	orr.w	r2, r2, #4
 8003394:	608a      	str	r2, [r1, #8]
        LL_ADC_REG_StartConversion(ADC2);

        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);

        started_ = true;
 8003396:	2101      	movs	r1, #1
 8003398:	68a3      	ldr	r3, [r4, #8]
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <recorder::Adc::Start()+0x5c>)
 800339c:	402b      	ands	r3, r5
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	60a3      	str	r3, [r4, #8]
 80033a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80033a8:	6093      	str	r3, [r2, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80033aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80033ac:	430b      	orrs	r3, r1
    }
}
 80033ae:	bc30      	pop	{r4, r5}
 80033b0:	6293      	str	r3, [r2, #40]	; 0x28
        started_ = true;
 80033b2:	7101      	strb	r1, [r0, #4]
}
 80033b4:	4770      	bx	lr
 80033b6:	4770      	bx	lr
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40022000 	.word	0x40022000
 80033c0:	7fffffc0 	.word	0x7fffffc0
 80033c4:	40022100 	.word	0x40022100

080033c8 <recorder::Adc::Stop()>:

void Adc::Stop(void)
{
    if (started_)
 80033c8:	7903      	ldrb	r3, [r0, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d04c      	beq.n	8003468 <recorder::Adc::Stop()+0xa0>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <recorder::Adc::Stop()+0xa4>)
 80033d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80033d2:	f023 0301 	bic.w	r3, r3, #1
{
 80033d6:	b430      	push	{r4, r5}
 80033d8:	6293      	str	r3, [r2, #40]	; 0x28
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 80033da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    {
        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
        while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_1));
 80033dc:	07d9      	lsls	r1, r3, #31
 80033de:	d4fc      	bmi.n	80033da <recorder::Adc::Stop()+0x12>
  MODIFY_REG(ADCx->CR,
 80033e0:	4923      	ldr	r1, [pc, #140]	; (8003470 <recorder::Adc::Stop()+0xa8>)
 80033e2:	4d24      	ldr	r5, [pc, #144]	; (8003474 <recorder::Adc::Stop()+0xac>)
 80033e4:	688a      	ldr	r2, [r1, #8]
 80033e6:	4c24      	ldr	r4, [pc, #144]	; (8003478 <recorder::Adc::Stop()+0xb0>)
 80033e8:	402a      	ands	r2, r5
 80033ea:	f042 0210 	orr.w	r2, r2, #16
 80033ee:	608a      	str	r2, [r1, #8]
 80033f0:	68a3      	ldr	r3, [r4, #8]
 80033f2:	402b      	ands	r3, r5
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033fa:	688b      	ldr	r3, [r1, #8]
 80033fc:	075b      	lsls	r3, r3, #29
 80033fe:	d4fc      	bmi.n	80033fa <recorder::Adc::Stop()+0x32>
 8003400:	491d      	ldr	r1, [pc, #116]	; (8003478 <recorder::Adc::Stop()+0xb0>)
 8003402:	688a      	ldr	r2, [r1, #8]
 8003404:	f012 0204 	ands.w	r2, r2, #4
 8003408:	d1fb      	bne.n	8003402 <recorder::Adc::Stop()+0x3a>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800340a:	4918      	ldr	r1, [pc, #96]	; (800346c <recorder::Adc::Stop()+0xa4>)
        history_ = 0;
 800340c:	2300      	movs	r3, #0
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800340e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003412:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003414:	f024 0410 	bic.w	r4, r4, #16
 8003418:	628c      	str	r4, [r1, #40]	; 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800341a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800341c:	f024 0408 	bic.w	r4, r4, #8
 8003420:	628c      	str	r4, [r1, #40]	; 0x28
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003422:	f44f 6480 	mov.w	r4, #1024	; 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8003426:	608d      	str	r5, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003428:	608c      	str	r4, [r1, #8]
 800342a:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 800342c:	6103      	str	r3, [r0, #16]
        history_ = 0;
 800342e:	6303      	str	r3, [r0, #48]	; 0x30
        increment_ = 0;
 8003430:	6383      	str	r3, [r0, #56]	; 0x38
        history_ = 0;
 8003432:	6583      	str	r3, [r0, #88]	; 0x58
        increment_ = 0;
 8003434:	6603      	str	r3, [r0, #96]	; 0x60
        history_ = 0;
 8003436:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        increment_ = 0;
 800343a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        history_ = 0;
 800343e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
        increment_ = 0;
 8003442:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        history_ = 0;
 8003446:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        increment_ = 0;
 800344a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        history_ = 0;
 800344e:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        increment_ = 0;
 8003452:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
        history_ = 0;
 8003456:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        increment_ = 0;
 800345a:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
        LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
        LL_DMA_ClearFlag_TC1(DMA1);
        LL_DMA_ClearFlag_HT1(DMA1);

        Reset();
        started_ = false;
 800345e:	7102      	strb	r2, [r0, #4]
    }
}
 8003460:	bc30      	pop	{r4, r5}
    current_pot_ = 0;
 8003462:	e9c0 2252 	strd	r2, r2, [r0, #328]	; 0x148
}
 8003466:	4770      	bx	lr
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40020000 	.word	0x40020000
 8003470:	40022000 	.word	0x40022000
 8003474:	7fffffc0 	.word	0x7fffffc0
 8003478:	40022100 	.word	0x40022100

0800347c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
    static void TimerHandler(void);

    static inline
    void AdcCallback(const AudioInput& in, const PotInput& pot)
    {
        instance_->Service(in, pot);
 800347c:	4bbb      	ldr	r3, [pc, #748]	; (800376c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f0>)
    void AdcCallback(const AudioInput& in, const PotInput& pot)
 800347e:	b530      	push	{r4, r5, lr}
        instance_->Service(in, pot);
 8003480:	681c      	ldr	r4, [r3, #0]

    void Service(const AudioInput& in, const PotInput& pot)
    {
        AudioOutput out;

        if (state_ == STATE_STARTING)
 8003482:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8003486:	2b01      	cmp	r3, #1
    void AdcCallback(const AudioInput& in, const PotInput& pot)
 8003488:	ed2d 8b08 	vpush	{d8-d11}
 800348c:	b085      	sub	sp, #20
        if (state_ == STATE_STARTING)
 800348e:	f000 80a8 	beq.w	80035e2 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x166>
            if (fade_position_ >= 1)
            {
                state_ = STATE_RUNNING;
            }
        }
        else if (state_ == STATE_RUNNING)
 8003492:	2b02      	cmp	r3, #2
 8003494:	f000 8085 	beq.w	80035a2 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x126>
                // Disable the amplifier at the start of the soft-off curve
                // instead of the end, otherwise the speaker will pop.
                amp_enable_.Clear();
            }
        }
        else if (state_ == STATE_STOPPING)
 8003498:	2b03      	cmp	r3, #3
 800349a:	f000 80ff 	beq.w	800369c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x220>
    void Process(const AudioOutput& audio)
    {
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            float sample = audio[AUDIO_OUT_LINE][i];
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800349e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 80034a2:	ed9d 6a01 	vldr	s12, [sp, #4]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80034aa:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 80034ae:	ee36 7a26 	vadd.f32	s14, s12, s13
 80034b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	f2c0 808e 	blt.w	80035de <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x162>
 80034c2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	f300 80e4 	bgt.w	8003696 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x21a>
            uint32_t code = 0.5 + 0xFFF * sample;
 80034ce:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8003770 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 80034d2:	eee7 7a26 	vfma.f32	s15, s14, s13
 80034d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034da:	ee17 2a90 	vmov	r2, s15
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 80034e2:	ed9d 6a02 	vldr	s12, [sp, #8]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            dma_buffer_[write_index_] = code;
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80034ea:	1c69      	adds	r1, r5, #1
 80034ec:	4ba1      	ldr	r3, [pc, #644]	; (8003774 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034ee:	ee36 7a26 	vadd.f32	s14, s12, s13
            dma_buffer_[write_index_] = code;
 80034f2:	48a1      	ldr	r0, [pc, #644]	; (8003778 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2fc>)
 80034f4:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034f8:	ee27 7a27 	vmul.f32	s14, s14, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80034fc:	fba3 2301 	umull	r2, r3, r3, r1
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8003512:	db62      	blt.n	80035da <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x15e>
 8003514:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	f300 80b8 	bgt.w	8003690 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x214>
            uint32_t code = 0.5 + 0xFFF * sample;
 8003520:	eddf 6a93 	vldr	s13, [pc, #588]	; 8003770 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 8003524:	eee7 7a26 	vfma.f32	s15, s14, s13
 8003528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352c:	ee17 2a90 	vmov	r2, s15
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 8003534:	ed9d 6a03 	vldr	s12, [sp, #12]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003538:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800353c:	1c59      	adds	r1, r3, #1
            dma_buffer_[write_index_] = code;
 800353e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003542:	ee36 7a26 	vadd.f32	s14, s12, s13
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
 8003548:	fba3 2301 	umull	r2, r3, r3, r1
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800354c:	ee27 7a27 	vmul.f32	s14, s14, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800355a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	db38      	blt.n	80035d6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x15a>
 8003564:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	f300 808d 	bgt.w	800368a <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20e>
            uint32_t code = 0.5 + 0xFFF * sample;
 8003570:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003770 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 8003574:	eee7 7a26 	vfma.f32	s15, s14, s13
 8003578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357c:	ee17 1a90 	vmov	r1, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003580:	1c5a      	adds	r2, r3, #1
            dma_buffer_[write_index_] = code;
 8003582:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003586:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003592:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8003596:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    }
 800359a:	b005      	add	sp, #20
 800359c:	ecbd 8b08 	vpop	{d8-d11}
 80035a0:	bd30      	pop	{r4, r5, pc}
            out = callback_(in, pot);
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x300>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4798      	blx	r3
            if (cue_stop_)
 80035a8:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
            out = callback_(in, pot);
 80035ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80035b0:	edcd 0a02 	vstr	s1, [sp, #8]
 80035b4:	ed8d 1a03 	vstr	s2, [sp, #12]
            if (cue_stop_)
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f43f af70 	beq.w	800349e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
                fade_position_ = 1;
 80035be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
                state_ = STATE_STOPPING;
 80035c2:	2003      	movs	r0, #3
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 80035c4:	4b6e      	ldr	r3, [pc, #440]	; (8003780 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x304>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ca:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
                fade_position_ = 1;
 80035ce:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
 80035d2:	619a      	str	r2, [r3, #24]
    }
 80035d4:	e763      	b.n	800349e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 80035d6:	2100      	movs	r1, #0
 80035d8:	e7d2      	b.n	8003580 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x104>
 80035da:	2200      	movs	r2, #0
 80035dc:	e7a8      	b.n	8003530 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4>
 80035de:	2200      	movs	r2, #0
 80035e0:	e77d      	b.n	80034de <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x62>
 80035e2:	ed94 9a57 	vldr	s18, [r4, #348]	; 0x15c
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035e6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                fade_position_ += 1 / kFadeDuration;
 80035ea:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8003784 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x308>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035ee:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 80035f2:	ed9f ba65 	vldr	s22, [pc, #404]	; 8003788 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30c>
 80035f6:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
                fade_position_ += 1 / kFadeDuration;
 80035fa:	ee39 0a00 	vadd.f32	s0, s18, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035fe:	eddf aa63 	vldr	s21, [pc, #396]	; 800378c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x310>
                fade_position_ += 1 / kFadeDuration;
 8003602:	eddf 9a63 	vldr	s19, [pc, #396]	; 8003790 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x314>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003606:	fe80 0a48 	vminnm.f32	s0, s0, s16
 800360a:	fe80 0a0b 	vmaxnm.f32	s0, s0, s22
  { return __builtin_cosf(__x); }
 800360e:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8003612:	f003 f995 	bl	8006940 <cosf>
 8003616:	eeb0 7a68 	vmov.f32	s14, s17
 800361a:	ee38 0a40 	vsub.f32	s0, s16, s0
                fade_position_ += 1 / kFadeDuration;
 800361e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003794 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x318>
 8003622:	ee79 9a29 	vadd.f32	s19, s18, s19
 8003626:	ee79 7a27 	vadd.f32	s15, s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800362a:	eea0 7a0a 	vfma.f32	s14, s0, s20
 800362e:	fec7 7ac8 	vminnm.f32	s15, s15, s16
 8003632:	fec7 7a8b 	vmaxnm.f32	s15, s15, s22
 8003636:	ee27 0aaa 	vmul.f32	s0, s15, s21
                    out[ch][i] = FadeCurve(fade_position_);
 800363a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800363e:	f003 f97f 	bl	8006940 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003642:	eef0 7a68 	vmov.f32	s15, s17
 8003646:	ee38 0a40 	vsub.f32	s0, s16, s0
 800364a:	eee0 7a0a 	vfma.f32	s15, s0, s20
 800364e:	fe89 0ac8 	vminnm.f32	s0, s19, s16
 8003652:	fe80 0a0b 	vmaxnm.f32	s0, s0, s22
 8003656:	ee20 0a2a 	vmul.f32	s0, s0, s21
                    out[ch][i] = FadeCurve(fade_position_);
 800365a:	edcd 7a02 	vstr	s15, [sp, #8]
 800365e:	f003 f96f 	bl	8006940 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003662:	ee38 0a40 	vsub.f32	s0, s16, s0
            if (fade_position_ >= 1)
 8003666:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003798 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31c>
 800366a:	edc4 9a57 	vstr	s19, [r4, #348]	; 0x15c
 800366e:	eeb4 9ae7 	vcmpe.f32	s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003672:	eee0 8a0a 	vfma.f32	s17, s0, s20
            if (fade_position_ >= 1)
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    out[ch][i] = FadeCurve(fade_position_);
 800367a:	edcd 8a03 	vstr	s17, [sp, #12]
            if (fade_position_ >= 1)
 800367e:	f6ff af0e 	blt.w	800349e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
                state_ = STATE_RUNNING;
 8003682:	2302      	movs	r3, #2
 8003684:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8003688:	e709      	b.n	800349e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 800368a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800368e:	e777      	b.n	8003580 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x104>
 8003690:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003694:	e74c      	b.n	8003530 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4>
 8003696:	f640 72ff 	movw	r2, #4095	; 0xfff
 800369a:	e720      	b.n	80034de <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x62>
 800369c:	ed94 9a57 	vldr	s18, [r4, #348]	; 0x15c
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036a0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
        {
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
            {
                fade_position_ -= 1 / kFadeDuration;
 80036a4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003784 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x308>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036a8:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 80036ac:	eddf aa36 	vldr	s21, [pc, #216]	; 8003788 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30c>
 80036b0:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
                fade_position_ -= 1 / kFadeDuration;
 80036b4:	ee39 0a40 	vsub.f32	s0, s18, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036b8:	ed9f aa34 	vldr	s20, [pc, #208]	; 800378c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x310>
                fade_position_ -= 1 / kFadeDuration;
 80036bc:	ed9f ba34 	vldr	s22, [pc, #208]	; 8003790 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x314>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036c0:	fe80 0a48 	vminnm.f32	s0, s0, s16
 80036c4:	fe80 0a2a 	vmaxnm.f32	s0, s0, s21
 80036c8:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80036cc:	f003 f938 	bl	8006940 <cosf>
 80036d0:	eeb0 7a68 	vmov.f32	s14, s17
 80036d4:	ee38 0a40 	vsub.f32	s0, s16, s0
                fade_position_ -= 1 / kFadeDuration;
 80036d8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003794 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x318>
 80036dc:	ee79 ba4b 	vsub.f32	s23, s18, s22
 80036e0:	ee79 7a67 	vsub.f32	s15, s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036e4:	eea0 7a29 	vfma.f32	s14, s0, s19
 80036e8:	fec7 7ac8 	vminnm.f32	s15, s15, s16
 80036ec:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
 80036f0:	ee27 0a8a 	vmul.f32	s0, s15, s20

                for (uint32_t ch = 0; ch < NUM_AUDIO_OUTS; ch++)
                {
                    out[ch][i] = FadeCurve(fade_position_);
 80036f4:	ed8d 7a01 	vstr	s14, [sp, #4]
 80036f8:	f003 f922 	bl	8006940 <cosf>
 80036fc:	eef0 7a40 	vmov.f32	s15, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003700:	fe8b 0ac8 	vminnm.f32	s0, s23, s16
 8003704:	eeb0 7a68 	vmov.f32	s14, s17
 8003708:	fe80 0a2a 	vmaxnm.f32	s0, s0, s21
 800370c:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8003710:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003714:	eea7 7aa9 	vfma.f32	s14, s15, s19
                    out[ch][i] = FadeCurve(fade_position_);
 8003718:	ed8d 7a02 	vstr	s14, [sp, #8]
 800371c:	f003 f910 	bl	8006940 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003720:	ee38 0a40 	vsub.f32	s0, s16, s0
 8003724:	edc4 ba57 	vstr	s23, [r4, #348]	; 0x15c
                }
            }

            if (fade_position_ <= 0)
 8003728:	eeb4 9acb 	vcmpe.f32	s18, s22
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800372c:	eee0 8a29 	vfma.f32	s17, s0, s19
            if (fade_position_ <= 0)
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    out[ch][i] = FadeCurve(fade_position_);
 8003734:	edcd 8a03 	vstr	s17, [sp, #12]
            if (fade_position_ <= 0)
 8003738:	f63f aeb1 	bhi.w	800349e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x320>)
            {
                state_ = STATE_STOPPED;
 800373e:	2100      	movs	r1, #0
                StopTimer();
                adc_.Stop();
 8003740:	1d20      	adds	r0, r4, #4
 8003742:	6813      	ldr	r3, [r2, #0]
                state_ = STATE_STOPPED;
 8003744:	f884 1160 	strb.w	r1, [r4, #352]	; 0x160
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6013      	str	r3, [r2, #0]
                adc_.Stop();
 800374e:	f7ff fe3b 	bl	80033c8 <recorder::Adc::Stop()>
                dac_.Stop();
 8003752:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 8003756:	f000 f917 	bl	8003988 <recorder::Dac::Stop()>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 800375a:	4909      	ldr	r1, [pc, #36]	; (8003780 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x304>)
 800375c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x324>)
 8003762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003766:	6188      	str	r0, [r1, #24]
 8003768:	619a      	str	r2, [r3, #24]
    }
 800376a:	e698      	b.n	800349e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 800376c:	20010a7c 	.word	0x20010a7c
 8003770:	457ff000 	.word	0x457ff000
 8003774:	aaaaaaab 	.word	0xaaaaaaab
 8003778:	38000030 	.word	0x38000030
 800377c:	20010a78 	.word	0x20010a78
 8003780:	58020400 	.word	0x58020400
 8003784:	39da740e 	.word	0x39da740e
 8003788:	00000000 	.word	0x00000000
 800378c:	40490fdb 	.word	0x40490fdb
 8003790:	3aa3d70a 	.word	0x3aa3d70a
 8003794:	3a5a740e 	.word	0x3a5a740e
 8003798:	3f7fae14 	.word	0x3f7fae14
 800379c:	40014000 	.word	0x40014000
 80037a0:	58021800 	.word	0x58021800

080037a4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:

namespace recorder
{

void Analog::Init(Callback callback)
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
    instance_ = this;
 80037a6:	4a49      	ldr	r2, [pc, #292]	; (80038cc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x128>)
{
 80037a8:	b08a      	sub	sp, #40	; 0x28
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 80037aa:	4c49      	ldr	r4, [pc, #292]	; (80038d0 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x12c>)
 80037ac:	4605      	mov	r5, r0
    instance_ = this;
 80037ae:	6010      	str	r0, [r2, #0]
    adc_enable_.Init();
    adc_enable_.Set();
    boost_enable_.Init();
    amp_enable_.Init();

    adc_.Init(AdcCallback);
 80037b0:	3004      	adds	r0, #4
 80037b2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0

void Analog::InitTimer(void)
{
    float period = system::kSystemClock / kAudioOSRate;

    LL_TIM_InitTypeDef timer_init =
 80037b6:	2600      	movs	r6, #0
    callback_ = callback;
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x130>)
 80037ba:	f042 0202 	orr.w	r2, r2, #2
 80037be:	6019      	str	r1, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80037c0:	2102      	movs	r1, #2
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 80037c2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 80037c6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x134>)
 80037cc:	f002 0202 	and.w	r2, r2, #2
 80037d0:	9204      	str	r2, [sp, #16]
 80037d2:	9a04      	ldr	r2, [sp, #16]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	f022 020c 	bic.w	r2, r2, #12
 80037da:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	f022 020c 	bic.w	r2, r2, #12
 80037e2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	f022 0202 	bic.w	r2, r2, #2
 80037ea:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f022 020c 	bic.w	r2, r2, #12
 80037f2:	f042 0204 	orr.w	r2, r2, #4
 80037f6:	601a      	str	r2, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80037f8:	6199      	str	r1, [r3, #24]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 80037fa:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80037fe:	4a37      	ldr	r2, [pc, #220]	; (80038dc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x138>)
 8003800:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003804:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8003808:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800380c:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8003810:	9103      	str	r1, [sp, #12]
 8003812:	9903      	ldr	r1, [sp, #12]
 8003814:	6891      	ldr	r1, [r2, #8]
 8003816:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 800381a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800381c:	68d1      	ldr	r1, [r2, #12]
 800381e:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003822:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003824:	6851      	ldr	r1, [r2, #4]
 8003826:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800382a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800382c:	6811      	ldr	r1, [r2, #0]
 800382e:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003832:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8003836:	6011      	str	r1, [r2, #0]
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8003838:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    adc_.Init(AdcCallback);
 800383c:	4928      	ldr	r1, [pc, #160]	; (80038e0 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x13c>)
 800383e:	f042 0202 	orr.w	r2, r2, #2
 8003842:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8003846:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800384a:	f002 0202 	and.w	r2, r2, #2
 800384e:	9202      	str	r2, [sp, #8]
 8003850:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003858:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003860:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003868:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003870:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f7ff fb9b 	bl	8002fb0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
    dac_.Init();
 800387a:	f505 70aa 	add.w	r0, r5, #340	; 0x154
 800387e:	f000 f909 	bl	8003a94 <recorder::Dac::Init()>
        .Prescaler         = 0,
        .CounterMode       = LL_TIM_COUNTERMODE_UP,
        .Autoreload        = static_cast<uint32_t>(period + 0.5) - 1,
        .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0,
    };
 8003882:	f240 5334 	movw	r3, #1332	; 0x534
    LL_TIM_InitTypeDef timer_init =
 8003886:	9609      	str	r6, [sp, #36]	; 0x24

    __HAL_RCC_TIM15_CLK_ENABLE();
    LL_TIM_Init(TIM15, &timer_init);
 8003888:	a905      	add	r1, sp, #20
    LL_TIM_InitTypeDef timer_init =
 800388a:	e9cd 6605 	strd	r6, r6, [sp, #20]
 800388e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003892:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800389e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    LL_TIM_Init(TIM15, &timer_init);
 80038a2:	4c10      	ldr	r4, [pc, #64]	; (80038e4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x140>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    LL_TIM_Init(TIM15, &timer_init);
 80038a8:	4620      	mov	r0, r4
    __HAL_RCC_TIM15_CLK_ENABLE();
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM15, &timer_init);
 80038ae:	f002 ff35 	bl	800671c <LL_TIM_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80038b2:	6863      	ldr	r3, [r4, #4]
    fade_position_ = 0;
 80038b4:	2200      	movs	r2, #0
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	6063      	str	r3, [r4, #4]
 80038c0:	f8c5 215c 	str.w	r2, [r5, #348]	; 0x15c
    state_ = STATE_STOPPED;
 80038c4:	f8a5 6160 	strh.w	r6, [r5, #352]	; 0x160
}
 80038c8:	b00a      	add	sp, #40	; 0x28
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	20010a7c 	.word	0x20010a7c
 80038d0:	58024400 	.word	0x58024400
 80038d4:	20010a78 	.word	0x20010a78
 80038d8:	58020400 	.word	0x58020400
 80038dc:	58021800 	.word	0x58021800
 80038e0:	0800347d 	.word	0x0800347d
 80038e4:	40014000 	.word	0x40014000

080038e8 <recorder::Analog::StartTimer()>:
  WRITE_REG(TIMx->CNT, Counter);
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <recorder::Analog::StartTimer()+0x10>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM15);
    }

    LL_TIM_SetCounter(TIM15, 0);
    LL_TIM_EnableCounter(TIM15);
}
 80038f6:	4770      	bx	lr
 80038f8:	40014000 	.word	0x40014000

080038fc <recorder::Dac::DMAHandler()>:
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <recorder::Dac::DMAHandler()+0x10>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80038fe:	2210      	movs	r2, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003900:	2120      	movs	r1, #32
 8003902:	6099      	str	r1, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003904:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8003906:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8003908:	681b      	ldr	r3, [r3, #0]
    ScopedProfilingPin<PROFILE_DAC_DMA_SERVICE> profile;
    LL_DMA_ClearFlag_TC0(DMA1);
    LL_DMA_ClearFlag_HT0(DMA1);
    LL_DMA_IsActiveFlag_TC0(DMA1);
    LL_DMA_IsActiveFlag_HT0(DMA1);
}
 800390a:	4770      	bx	lr
 800390c:	40020000 	.word	0x40020000

08003910 <recorder::Dac::Start()>:
    if (!started_)
 8003910:	7903      	ldrb	r3, [r0, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d12e      	bne.n	8003974 <recorder::Dac::Start()+0x64>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <recorder::Dac::Start()+0x68>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003918:	2110      	movs	r1, #16
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <recorder::Dac::Start()+0x6c>)
{
 800391c:	b430      	push	{r4, r5}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800391e:	2420      	movs	r4, #32
 8003920:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003922:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003924:	6919      	ldr	r1, [r3, #16]
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8003926:	4c16      	ldr	r4, [pc, #88]	; (8003980 <recorder::Dac::Start()+0x70>)
 8003928:	f041 0110 	orr.w	r1, r1, #16
 800392c:	6119      	str	r1, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800392e:	6919      	ldr	r1, [r3, #16]
 8003930:	f041 0108 	orr.w	r1, r1, #8
 8003934:	6119      	str	r1, [r3, #16]
  SET_BIT(DACx->CR,
 8003936:	6811      	ldr	r1, [r2, #0]
 8003938:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800393c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(DACx->CR,
 800393e:	6811      	ldr	r1, [r2, #0]
 8003940:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003944:	6011      	str	r1, [r2, #0]

  MODIFY_REG(*preg,
 8003946:	490f      	ldr	r1, [pc, #60]	; (8003984 <recorder::Dac::Start()+0x74>)
 8003948:	68e5      	ldr	r5, [r4, #12]
 800394a:	4029      	ands	r1, r5
 800394c:	60e1      	str	r1, [r4, #12]
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 800394e:	247d      	movs	r4, #125	; 0x7d
  SET_BIT(DACx->SWTRIGR,
 8003950:	6851      	ldr	r1, [r2, #4]
 8003952:	f041 0102 	orr.w	r1, r1, #2
 8003956:	6051      	str	r1, [r2, #4]
  MODIFY_REG(DACx->CR,
 8003958:	6811      	ldr	r1, [r2, #0]
 800395a:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800395e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8003962:	6011      	str	r1, [r2, #0]
        started_ = true;
 8003964:	2101      	movs	r1, #1
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 8003966:	609c      	str	r4, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	430a      	orrs	r2, r1
}
 800396c:	bc30      	pop	{r4, r5}
 800396e:	611a      	str	r2, [r3, #16]
        started_ = true;
 8003970:	7101      	strb	r1, [r0, #4]
}
 8003972:	4770      	bx	lr
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40020000 	.word	0x40020000
 800397c:	40007400 	.word	0x40007400
 8003980:	40007408 	.word	0x40007408
 8003984:	fffff000 	.word	0xfffff000

08003988 <recorder::Dac::Stop()>:
    if (started_)
 8003988:	7903      	ldrb	r3, [r0, #4]
 800398a:	b32b      	cbz	r3, 80039d8 <recorder::Dac::Stop()+0x50>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <recorder::Dac::Stop()+0x54>)
 800398e:	6913      	ldr	r3, [r2, #16]
 8003990:	f023 0301 	bic.w	r3, r3, #1
{
 8003994:	b430      	push	{r4, r5}
 8003996:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 8003998:	6913      	ldr	r3, [r2, #16]
        while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_0));
 800399a:	f013 0301 	ands.w	r3, r3, #1
 800399e:	d1fb      	bne.n	8003998 <recorder::Dac::Stop()+0x10>
  CLEAR_BIT(DACx->CR,
 80039a0:	4c0f      	ldr	r4, [pc, #60]	; (80039e0 <recorder::Dac::Stop()+0x58>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80039a2:	2520      	movs	r5, #32
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80039aa:	6021      	str	r1, [r4, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80039ac:	6914      	ldr	r4, [r2, #16]
        dma_buffer_[i] = 0;
 80039ae:	490d      	ldr	r1, [pc, #52]	; (80039e4 <recorder::Dac::Stop()+0x5c>)
 80039b0:	f024 0410 	bic.w	r4, r4, #16
 80039b4:	6114      	str	r4, [r2, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80039b6:	6914      	ldr	r4, [r2, #16]
 80039b8:	f024 0408 	bic.w	r4, r4, #8
 80039bc:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80039be:	2410      	movs	r4, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80039c0:	6095      	str	r5, [r2, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80039c2:	6094      	str	r4, [r2, #8]
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 80039c4:	6003      	str	r3, [r0, #0]
        dma_buffer_[i] = 0;
 80039c6:	614b      	str	r3, [r1, #20]
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80039ce:	e9c1 3303 	strd	r3, r3, [r1, #12]
}
 80039d2:	bc30      	pop	{r4, r5}
        started_ = false;
 80039d4:	7103      	strb	r3, [r0, #4]
}
 80039d6:	4770      	bx	lr
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40007400 	.word	0x40007400
 80039e4:	38000030 	.word	0x38000030

080039e8 <recorder::Dac::InitDMA()>:
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	b092      	sub	sp, #72	; 0x48
    LL_DMA_InitTypeDef dma_init =
 80039ec:	222c      	movs	r2, #44	; 0x2c
 80039ee:	2100      	movs	r1, #0
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80039f0:	4c23      	ldr	r4, [pc, #140]	; (8003a80 <recorder::Dac::InitDMA()+0x98>)
    LL_DMA_InitTypeDef dma_init =
 80039f2:	a806      	add	r0, sp, #24
 80039f4:	f003 fe5f 	bl	80076b6 <memset>
 80039f8:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <recorder::Dac::InitDMA()+0x9c>)
 80039fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a02:	9203      	str	r2, [sp, #12]
 8003a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <recorder::Dac::InitDMA()+0xa0>)
    LL_DMA_InitTypeDef dma_init =
 8003a0a:	e9cd 0207 	strd	r0, r2, [sp, #28]
 8003a0e:	2206      	movs	r2, #6
 8003a10:	2044      	movs	r0, #68	; 0x44
 8003a12:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8003a78 <recorder::Dac::InitDMA()+0x90>
 8003a16:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8003a1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, ((DAC_Channel >> (Register & 0x1FUL)) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0))));
 8003a1e:	491b      	ldr	r1, [pc, #108]	; (8003a8c <recorder::Dac::InitDMA()+0xa4>)
 8003a20:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a24:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
    };
 8003a28:	9102      	str	r1, [sp, #8]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a2a:	aa02      	add	r2, sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a2c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a30:	2100      	movs	r1, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a32:	f040 0001 	orr.w	r0, r0, #1
 8003a36:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a3a:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	9b01      	ldr	r3, [sp, #4]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a48:	f002 fa38 	bl	8005ebc <LL_DMA_Init>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003a4c:	6923      	ldr	r3, [r4, #16]
    irq::RegisterHandler(DMA1_Stream0_IRQn, DMAHandler);
 8003a4e:	200b      	movs	r0, #11
 8003a50:	490f      	ldr	r1, [pc, #60]	; (8003a90 <recorder::Dac::InitDMA()+0xa8>)
 8003a52:	f023 0310 	bic.w	r3, r3, #16
 8003a56:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	f023 0308 	bic.w	r3, r3, #8
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	f000 f8a0 	bl	8003ba4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream0_IRQn, kProfileIRQPriority);
 8003a64:	2100      	movs	r1, #0
 8003a66:	200b      	movs	r0, #11
 8003a68:	f000 f8d8 	bl	8003c1c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream0_IRQn);
 8003a6c:	200b      	movs	r0, #11
 8003a6e:	f000 f8bb 	bl	8003be8 <recorder::irq::Enable(IRQn_Type)>
}
 8003a72:	b012      	add	sp, #72	; 0x48
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	bf00      	nop
 8003a78:	00000040 	.word	0x00000040
 8003a7c:	00000100 	.word	0x00000100
 8003a80:	40020000 	.word	0x40020000
 8003a84:	38000030 	.word	0x38000030
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	40007414 	.word	0x40007414
 8003a90:	080038fd 	.word	0x080038fd

08003a94 <recorder::Dac::Init()>:
{
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        dma_buffer_[i] = 0;
 8003a98:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <recorder::Dac::Init()+0xa0>)
    started_ = false;
 8003a9a:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9c:	4e26      	ldr	r6, [pc, #152]	; (8003b38 <recorder::Dac::Init()+0xa4>)
{
 8003a9e:	b088      	sub	sp, #32
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8003aa0:	6004      	str	r4, [r0, #0]
{
 8003aa2:	4680      	mov	r8, r0
        dma_buffer_[i] = 0;
 8003aa4:	601c      	str	r4, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa6:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    started_ = false;
 8003aaa:	7104      	strb	r4, [r0, #4]
    LL_GPIO_StructInit(&gpio_init);
 8003aac:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	f042 0201 	orr.w	r2, r2, #1
        dma_buffer_[i] = 0;
 8003ab2:	615c      	str	r4, [r3, #20]
    LL_DAC_InitTypeDef dac_init =
 8003ab4:	4d21      	ldr	r5, [pc, #132]	; (8003b3c <recorder::Dac::Init()+0xa8>)
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003ab6:	4f22      	ldr	r7, [pc, #136]	; (8003b40 <recorder::Dac::Init()+0xac>)
        dma_buffer_[i] = 0;
 8003ab8:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8003abc:	e9c3 4403 	strd	r4, r4, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 8003ac4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	9b01      	ldr	r3, [sp, #4]
    LL_GPIO_StructInit(&gpio_init);
 8003ad0:	f002 facc 	bl	800606c <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_5;
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003ad8:	a902      	add	r1, sp, #8
 8003ada:	481a      	ldr	r0, [pc, #104]	; (8003b44 <recorder::Dac::Init()+0xb0>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8003adc:	9406      	str	r4, [sp, #24]
    LL_DAC_InitTypeDef dac_init =
 8003ade:	ac02      	add	r4, sp, #8
    gpio_init.Pin = LL_GPIO_PIN_5;
 8003ae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003ae4:	f002 fa3c 	bl	8005f60 <LL_GPIO_Init>
    LL_DAC_InitTypeDef dac_init =
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	e895 0003 	ldmia.w	r5, {r0, r1}
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003af0:	aa02      	add	r2, sp, #8
    LL_DAC_InitTypeDef dac_init =
 8003af2:	e884 0003 	stmia.w	r4, {r0, r1}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003af6:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003afa:	4638      	mov	r0, r7
 8003afc:	4912      	ldr	r1, [pc, #72]	; (8003b48 <recorder::Dac::Init()+0xb4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b02:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 8003b06:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
 8003b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	9b00      	ldr	r3, [sp, #0]
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003b12:	f002 f999 	bl	8005e48 <LL_DAC_Init>
  SET_BIT(DACx->CR,
 8003b16:	683b      	ldr	r3, [r7, #0]
    InitDMA();
 8003b18:	4640      	mov	r0, r8
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	603b      	str	r3, [r7, #0]
  SET_BIT(DACx->CR,
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b26:	603b      	str	r3, [r7, #0]
}
 8003b28:	b008      	add	sp, #32
 8003b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    InitDMA();
 8003b2e:	f7ff bf5b 	b.w	80039e8 <recorder::Dac::InitDMA()>
 8003b32:	bf00      	nop
 8003b34:	38000030 	.word	0x38000030
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	08008910 	.word	0x08008910
 8003b40:	40007400 	.word	0x40007400
 8003b44:	58020000 	.word	0x58020000
 8003b48:	35400072 	.word	0x35400072

08003b4c <recorder::irq::Init()>:
static Vector RAMVectorTable[kNumVectors]
    __attribute__ ((aligned(kAlignment)));

void Init(void)
{
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <recorder::irq::Init()+0x4c>)
 8003b4e:	689a      	ldr	r2, [r3, #8]

    for (uint32_t i = 0; i < kNumVectors; i++)
 8003b50:	0753      	lsls	r3, r2, #29
 8003b52:	f102 0104 	add.w	r1, r2, #4
{
 8003b56:	b510      	push	{r4, lr}
 8003b58:	4c10      	ldr	r4, [pc, #64]	; (8003b9c <recorder::irq::Init()+0x50>)
 8003b5a:	d111      	bne.n	8003b80 <recorder::irq::Init()+0x34>
 8003b5c:	428c      	cmp	r4, r1
 8003b5e:	d00f      	beq.n	8003b80 <recorder::irq::Init()+0x34>
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8003b60:	4623      	mov	r3, r4
 8003b62:	f504 7e26 	add.w	lr, r4, #664	; 0x298
    {
        RAMVectorTable[i] = src[i];
 8003b66:	eba2 0c04 	sub.w	ip, r2, r4
 8003b6a:	eb03 020c 	add.w	r2, r3, ip
 8003b6e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8003b72:	e8e3 0102 	strd	r0, r1, [r3], #8
    for (uint32_t i = 0; i < kNumVectors; i++)
 8003b76:	4573      	cmp	r3, lr
 8003b78:	d1f7      	bne.n	8003b6a <recorder::irq::Init()+0x1e>
    }

    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <recorder::irq::Init()+0x4c>)
 8003b7c:	609c      	str	r4, [r3, #8]
}
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <recorder::irq::Init()+0x54>)
        RAMVectorTable[i] = src[i];
 8003b82:	1b09      	subs	r1, r1, r4
 8003b84:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8003b88:	58ca      	ldr	r2, [r1, r3]
 8003b8a:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < kNumVectors; i++)
 8003b8e:	4283      	cmp	r3, r0
 8003b90:	d1fa      	bne.n	8003b88 <recorder::irq::Init()+0x3c>
    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8003b92:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <recorder::irq::Init()+0x4c>)
 8003b94:	609c      	str	r4, [r3, #8]
}
 8003b96:	bd10      	pop	{r4, pc}
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	20010c00 	.word	0x20010c00
 8003ba0:	20010bfc 	.word	0x20010bfc

08003ba4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>:

void RegisterHandler(IRQn_Type irqn, Vector handler)
{
    assert(irqn >= NonMaskableInt_IRQn);
 8003ba4:	f110 0f0e 	cmn.w	r0, #14
{
 8003ba8:	b508      	push	{r3, lr}
    assert(irqn >= NonMaskableInt_IRQn);
 8003baa:	db06      	blt.n	8003bba <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x16>

    uint32_t exception_num = irqn + 16;
 8003bac:	3010      	adds	r0, #16
    assert(exception_num < kNumVectors);
 8003bae:	28a5      	cmp	r0, #165	; 0xa5
 8003bb0:	dc09      	bgt.n	8003bc6 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x22>

    RAMVectorTable[exception_num] = handler;
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x30>)
 8003bb4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8003bb8:	bd08      	pop	{r3, pc}
    assert(irqn >= NonMaskableInt_IRQn);
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x34>)
 8003bbc:	211c      	movs	r1, #28
 8003bbe:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8003bc2:	f003 fb11 	bl	80071e8 <__assert_func>
    assert(exception_num < kNumVectors);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x40>)
 8003bc8:	211f      	movs	r1, #31
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8003bcc:	4804      	ldr	r0, [pc, #16]	; (8003be0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8003bce:	f003 fb0b 	bl	80071e8 <__assert_func>
 8003bd2:	bf00      	nop
 8003bd4:	20010c00 	.word	0x20010c00
 8003bd8:	08008c88 	.word	0x08008c88
 8003bdc:	08008ca4 	.word	0x08008ca4
 8003be0:	08008cec 	.word	0x08008cec
 8003be4:	08008cfc 	.word	0x08008cfc

08003be8 <recorder::irq::Enable(IRQn_Type)>:

void Enable(IRQn_Type irqn)
{
    assert(irqn >= 0);
 8003be8:	2800      	cmp	r0, #0
{
 8003bea:	b508      	push	{r3, lr}
    assert(irqn >= 0);
 8003bec:	db08      	blt.n	8003c00 <recorder::irq::Enable(IRQn_Type)+0x18>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003bee:	f000 011f 	and.w	r1, r0, #31
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	0940      	lsrs	r0, r0, #5
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <recorder::irq::Enable(IRQn_Type)+0x24>)
 8003bf8:	408b      	lsls	r3, r1
 8003bfa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC_EnableIRQ(irqn);
}
 8003bfe:	bd08      	pop	{r3, pc}
    assert(irqn >= 0);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <recorder::irq::Enable(IRQn_Type)+0x28>)
 8003c02:	2126      	movs	r1, #38	; 0x26
 8003c04:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <recorder::irq::Enable(IRQn_Type)+0x2c>)
 8003c06:	4804      	ldr	r0, [pc, #16]	; (8003c18 <recorder::irq::Enable(IRQn_Type)+0x30>)
 8003c08:	f003 faee 	bl	80071e8 <__assert_func>
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	08008d18 	.word	0x08008d18
 8003c14:	08008d24 	.word	0x08008d24
 8003c18:	08008cec 	.word	0x08008cec

08003c1c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x54>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c24:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c28:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2a:	f1bc 0f04 	cmp.w	ip, #4
 8003c2e:	bf28      	it	cs
 8003c30:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c34:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	bf8c      	ite	hi
 8003c3c:	3b03      	subhi	r3, #3
 8003c3e:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	fa02 f20c 	lsl.w	r2, r2, ip
  if ((int32_t)(IRQn) >= 0)
 8003c44:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c46:	ea21 0102 	bic.w	r1, r1, r2
 8003c4a:	fa01 f103 	lsl.w	r1, r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	db06      	blt.n	8003c5e <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	0109      	lsls	r1, r1, #4
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x58>)
 8003c54:	b2c9      	uxtb	r1, r1
 8003c56:	4403      	add	r3, r0
 8003c58:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8003c5c:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	f000 000f 	and.w	r0, r0, #15
 8003c62:	0109      	lsls	r1, r1, #4
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x5c>)
 8003c66:	b2c9      	uxtb	r1, r1
 8003c68:	4403      	add	r3, r0
 8003c6a:	7619      	strb	r1, [r3, #24]
void SetPriority(IRQn_Type irqn, uint32_t priority)
{
    uint32_t group = NVIC_GetPriorityGrouping();
    priority = NVIC_EncodePriority(group, priority, 0);
    NVIC_SetPriority(irqn, priority);
}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000ed00 	.word	0xe000ed00
 8003c74:	e000e100 	.word	0xe000e100
 8003c78:	e000ecfc 	.word	0xe000ecfc

08003c7c <recorder::Serial::Init(unsigned long)>:

void Serial::Init(uint32_t baud)
{
    instance_ = this;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7c:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <recorder::Serial::Init(unsigned long)+0x13c>)
    instance_ = this;
 8003c7e:	4a4f      	ldr	r2, [pc, #316]	; (8003dbc <recorder::Serial::Init(unsigned long)+0x140>)
{
 8003c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    instance_ = this;
 8003c84:	6010      	str	r0, [r2, #0]
{
 8003c86:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    __HAL_RCC_USART1_CLK_ENABLE();

    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8003c8c:	26c0      	movs	r6, #192	; 0xc0
{
 8003c8e:	460d      	mov	r5, r1

    while (pins != 0)
    {
        uint32_t pin = 1 << POSITION_VAL(pins);
 8003c90:	2701      	movs	r7, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c92:	f042 0202 	orr.w	r2, r2, #2
 8003c96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c9e:	f002 0202 	and.w	r2, r2, #2
 8003ca2:	9200      	str	r2, [sp, #0]
 8003ca4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ca6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003caa:	f042 0210 	orr.w	r2, r2, #16
 8003cae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <recorder::Serial::Init(unsigned long)+0x144>)
 8003cc0:	e01f      	b.n	8003d02 <recorder::Serial::Init(unsigned long)+0x86>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8003cc8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8003ccc:	ea22 0204 	bic.w	r2, r2, r4
 8003cd0:	ea42 0208 	orr.w	r2, r2, r8
 8003cd4:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003cd6:	681c      	ldr	r4, [r3, #0]
 8003cd8:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8003cdc:	ea24 040c 	bic.w	r4, r4, ip
 8003ce0:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 8003ce4:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	ea22 020c 	bic.w	r2, r2, ip
 8003cec:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	ea22 020c 	bic.w	r2, r2, ip
 8003cf4:	ea42 020e 	orr.w	r2, r2, lr
 8003cf8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4011      	ands	r1, r2
 8003cfe:	6059      	str	r1, [r3, #4]
    while (pins != 0)
 8003d00:	b33e      	cbz	r6, 8003d52 <recorder::Serial::Init(unsigned long)+0xd6>
 8003d02:	fa96 fca6 	rbit	ip, r6
        uint32_t pin = 1 << POSITION_VAL(pins);
 8003d06:	fabc fc8c 	clz	ip, ip
 8003d0a:	fa07 f40c 	lsl.w	r4, r7, ip
        CLEAR_BIT(pins, pin);
 8003d0e:	43e1      	mvns	r1, r4
 8003d10:	ea26 0604 	bic.w	r6, r6, r4
 8003d14:	fa94 f9a4 	rbit	r9, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d18:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d1c:	0a22      	lsrs	r2, r4, #8

        // Set alternate function first to avoid spurious events
        if (POSITION_VAL(pin) < 8)
 8003d1e:	fab9 f989 	clz	r9, r9
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d22:	fa0e f80c 	lsl.w	r8, lr, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d26:	fb02 f202 	mul.w	r2, r2, r2
 8003d2a:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d2e:	fa08 f80c 	lsl.w	r8, r8, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d32:	fb02 f202 	mul.w	r2, r2, r2
 8003d36:	ddc4      	ble.n	8003cc2 <recorder::Serial::Init(unsigned long)+0x46>
 8003d38:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8003d3c:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d40:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d44:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003d48:	ea28 0409 	bic.w	r4, r8, r9
 8003d4c:	4322      	orrs	r2, r4
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8003d50:	e7c1      	b.n	8003cd6 <recorder::Serial::Init(unsigned long)+0x5a>
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    LL_USART_Init(USART1, &uart_init);
 8003d52:	4c1c      	ldr	r4, [pc, #112]	; (8003dc4 <recorder::Serial::Init(unsigned long)+0x148>)
    LL_USART_InitTypeDef uart_init =
 8003d54:	2220      	movs	r2, #32
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 8003d56:	6006      	str	r6, [r0, #0]
 8003d58:	4631      	mov	r1, r6
 8003d5a:	6046      	str	r6, [r0, #4]
 8003d5c:	6486      	str	r6, [r0, #72]	; 0x48
 8003d5e:	64c6      	str	r6, [r0, #76]	; 0x4c
 8003d60:	a802      	add	r0, sp, #8
 8003d62:	f003 fca8 	bl	80076b6 <memset>
 8003d66:	230c      	movs	r3, #12
    LL_USART_Init(USART1, &uart_init);
 8003d68:	a902      	add	r1, sp, #8
 8003d6a:	4620      	mov	r0, r4
    LL_USART_InitTypeDef uart_init =
 8003d6c:	9307      	str	r3, [sp, #28]
    };
 8003d6e:	9503      	str	r5, [sp, #12]
    LL_USART_Init(USART1, &uart_init);
 8003d70:	f002 fd58 	bl	8006824 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8003d74:	68a3      	ldr	r3, [r4, #8]

    LL_USART_RequestRxDataFlush(USART1);
    LL_USART_EnableIT_RXNE(USART1);
    LL_USART_DisableIT_TXE(USART1);

    irq::RegisterHandler(USART1_IRQn, InterruptHandler);
 8003d76:	2025      	movs	r0, #37	; 0x25
 8003d78:	4913      	ldr	r1, [pc, #76]	; (8003dc8 <recorder::Serial::Init(unsigned long)+0x14c>)
 8003d7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d7e:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8003d88:	69a3      	ldr	r3, [r4, #24]
 8003d8a:	f043 0308 	orr.w	r3, r3, #8
 8003d8e:	61a3      	str	r3, [r4, #24]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	f043 0320 	orr.w	r3, r3, #32
 8003d96:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	f7ff ff00 	bl	8003ba4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(USART1_IRQn, kSerialIRQPriority);
 8003da4:	210b      	movs	r1, #11
 8003da6:	2025      	movs	r0, #37	; 0x25
 8003da8:	f7ff ff38 	bl	8003c1c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(USART1_IRQn);
 8003dac:	2025      	movs	r0, #37	; 0x25
 8003dae:	f7ff ff1b 	bl	8003be8 <recorder::irq::Enable(IRQn_Type)>
}
 8003db2:	b00b      	add	sp, #44	; 0x2c
 8003db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	20010e98 	.word	0x20010e98
 8003dc0:	58020400 	.word	0x58020400
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	08003f29 	.word	0x08003f29

08003dcc <recorder::Serial::BytesAvailable()>:
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8003dcc:	6803      	ldr	r3, [r0, #0]
 8003dce:	6840      	ldr	r0, [r0, #4]
 8003dd0:	f3bf 8f5b 	dmb	ish

uint32_t Serial::BytesAvailable(void)
{
    return rx_fifo_.available();
}
 8003dd4:	1ac0      	subs	r0, r0, r3
 8003dd6:	4770      	bx	lr

08003dd8 <recorder::Serial::GetByteBlocking()>:

uint8_t Serial::GetByteBlocking(void)
{
 8003dd8:	4602      	mov	r2, r0
 8003dda:	3004      	adds	r0, #4
 8003ddc:	6813      	ldr	r3, [r2, #0]
 8003dde:	6801      	ldr	r1, [r0, #0]
 8003de0:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d0f9      	beq.n	8003ddc <recorder::Serial::GetByteBlocking()+0x4>
        {
            return false;
        }

        item = data_[head % size];
 8003de8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        head_.store(head + 1, std::memory_order_release);
 8003dec:	3301      	adds	r3, #1
        item = data_[head % size];
 8003dee:	4411      	add	r1, r2
 8003df0:	7a08      	ldrb	r0, [r1, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8003df2:	f3bf 8f5b 	dmb	ish
 8003df6:	6013      	str	r3, [r2, #0]
    uint8_t byte = 0;
    while (!rx_fifo_.Pop(byte));
    return byte;
}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <recorder::Serial::Write(unsigned char, bool)>:

uint32_t Serial::Write(uint8_t byte, bool blocking)
{
 8003dfc:	4684      	mov	ip, r0

uint32_t Serial::Write(const uint8_t* buffer, uint32_t length, bool blocking)
{
    uint32_t i = 0;

    while (i < length && (!tx_fifo_.full() || blocking))
 8003dfe:	3048      	adds	r0, #72	; 0x48
{
 8003e00:	b510      	push	{r4, lr}
	return __atomic_load_n(&_M_i, int(__m));
 8003e02:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
 8003e06:	f10c 0e4c 	add.w	lr, ip, #76	; 0x4c
 8003e0a:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8003e0e:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8003e12:	1b1b      	subs	r3, r3, r4
    while (i < length && (!tx_fifo_.full() || blocking))
 8003e14:	2bff      	cmp	r3, #255	; 0xff
 8003e16:	d900      	bls.n	8003e1a <recorder::Serial::Write(unsigned char, bool)+0x1e>
 8003e18:	b1ba      	cbz	r2, 8003e4a <recorder::Serial::Write(unsigned char, bool)+0x4e>
 8003e1a:	f8de 3000 	ldr.w	r3, [lr]
 8003e1e:	6802      	ldr	r2, [r0, #0]
 8003e20:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8003e24:	1a9a      	subs	r2, r3, r2
 8003e26:	2aff      	cmp	r2, #255	; 0xff
 8003e28:	d8f7      	bhi.n	8003e1a <recorder::Serial::Write(unsigned char, bool)+0x1e>
            data_[(tail + i) % size] = buffer[i];
 8003e2a:	fa5c f283 	uxtab	r2, ip, r3
 8003e2e:	2001      	movs	r0, #1
        tail_.store(tail + length, std::memory_order_release);
 8003e30:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8003e32:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
	__atomic_store_n(&_M_i, __i, int(__m));
 8003e36:	f3bf 8f5b 	dmb	ish
 8003e3a:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e3e:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <recorder::Serial::Write(unsigned char, bool)+0x54>)
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	e7f7      	b.n	8003e3e <recorder::Serial::Write(unsigned char, bool)+0x42>
 8003e4e:	bf00      	nop
 8003e50:	40011000 	.word	0x40011000

08003e54 <recorder::Serial::FlushTx(bool)>:
    return i;
}

void Serial::FlushTx(bool discard)
{
    if (discard)
 8003e54:	b989      	cbnz	r1, 8003e7a <recorder::Serial::FlushTx(bool)+0x26>
 8003e56:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8003e5a:	304c      	adds	r0, #76	; 0x4c
	return __atomic_load_n(&_M_i, int(__m));
 8003e5c:	680a      	ldr	r2, [r1, #0]
 8003e5e:	6803      	ldr	r3, [r0, #0]
 8003e60:	f3bf 8f5b 	dmb	ish
        LL_USART_DisableIT_TXE(USART1);
        tx_fifo_.Init();
    }
    else
    {
        while (tx_fifo_.available());
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1f9      	bne.n	8003e5c <recorder::Serial::FlushTx(bool)+0x8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <recorder::Serial::FlushTx(bool)+0x38>)
 8003e6a:	69d3      	ldr	r3, [r2, #28]
 8003e6c:	0619      	lsls	r1, r3, #24
 8003e6e:	d5fc      	bpl.n	8003e6a <recorder::Serial::FlushTx(bool)+0x16>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003e70:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <recorder::Serial::FlushTx(bool)+0x38>)
 8003e72:	69d3      	ldr	r3, [r2, #28]
 8003e74:	065b      	lsls	r3, r3, #25
 8003e76:	d5fc      	bpl.n	8003e72 <recorder::Serial::FlushTx(bool)+0x1e>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
}
 8003e78:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e7a:	4904      	ldr	r1, [pc, #16]	; (8003e8c <recorder::Serial::FlushTx(bool)+0x38>)
	__atomic_store_n(&_M_i, __i, int(__m));
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	680b      	ldr	r3, [r1, #0]
 8003e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e84:	600b      	str	r3, [r1, #0]
 8003e86:	6482      	str	r2, [r0, #72]	; 0x48
 8003e88:	64c2      	str	r2, [r0, #76]	; 0x4c
    }
 8003e8a:	4770      	bx	lr
 8003e8c:	40011000 	.word	0x40011000

08003e90 <recorder::Serial::InterruptService()>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <recorder::Serial::InterruptService()+0x94>)
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	0692      	lsls	r2, r2, #26
 8003e96:	d516      	bpl.n	8003ec6 <recorder::Serial::InterruptService()+0x36>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8003e98:	6a59      	ldr	r1, [r3, #36]	; 0x24
	return __atomic_load_n(&_M_i, int(__m));
 8003e9a:	6843      	ldr	r3, [r0, #4]
 8003e9c:	6802      	ldr	r2, [r0, #0]
 8003e9e:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8003ea2:	1a9b      	subs	r3, r3, r2
    if (LL_USART_IsActiveFlag_RXNE(USART1))
    {
        ScopedProfilingPin<PROFILE_SERIAL_RX> profile;
        uint8_t byte = LL_USART_ReceiveData8(USART1);

        if (rx_fifo_.full())
 8003ea4:	2b3f      	cmp	r3, #63	; 0x3f
 8003ea6:	d82c      	bhi.n	8003f02 <recorder::Serial::InterruptService()+0x72>
 8003ea8:	6843      	ldr	r3, [r0, #4]
 8003eaa:	6802      	ldr	r2, [r0, #0]
 8003eac:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8003eb0:	1a9a      	subs	r2, r3, r2
 8003eb2:	2a3f      	cmp	r2, #63	; 0x3f
 8003eb4:	d807      	bhi.n	8003ec6 <recorder::Serial::InterruptService()+0x36>
            data_[(tail + i) % size] = buffer[i];
 8003eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        tail_.store(tail + length, std::memory_order_release);
 8003eba:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8003ebc:	4402      	add	r2, r0
 8003ebe:	7211      	strb	r1, [r2, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8003ec0:	f3bf 8f5b 	dmb	ish
 8003ec4:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <recorder::Serial::InterruptService()+0x94>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	0611      	lsls	r1, r2, #24
 8003ecc:	d518      	bpl.n	8003f00 <recorder::Serial::InterruptService()+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	0612      	lsls	r2, r2, #24
 8003ed2:	d515      	bpl.n	8003f00 <recorder::Serial::InterruptService()+0x70>
	return __atomic_load_n(&_M_i, int(__m));
 8003ed4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003ed6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003ed8:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003edc:	428a      	cmp	r2, r1
 8003ede:	d01b      	beq.n	8003f18 <recorder::Serial::InterruptService()+0x88>
        item = data_[head % size];
 8003ee0:	fa50 f282 	uxtab	r2, r0, r2
  USARTx->TDR = Value;
 8003ee4:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eea:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003eec:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003eee:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <recorder::Serial::InterruptService()+0x70>
        head_.store(head + 1, std::memory_order_release);
 8003ef6:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003ef8:	f3bf 8f5b 	dmb	ish
 8003efc:	6483      	str	r3, [r0, #72]	; 0x48
        else
        {
            LL_USART_DisableIT_TXE(USART1);
        }
    }
}
 8003efe:	4770      	bx	lr
 8003f00:	4770      	bx	lr
	return __atomic_load_n(&_M_i, int(__m));
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	6842      	ldr	r2, [r0, #4]
 8003f06:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d0cc      	beq.n	8003ea8 <recorder::Serial::InterruptService()+0x18>
        head_.store(head + 1, std::memory_order_release);
 8003f0e:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003f10:	f3bf 8f5b 	dmb	ish
 8003f14:	6003      	str	r3, [r0, #0]
        return true;
 8003f16:	e7c7      	b.n	8003ea8 <recorder::Serial::InterruptService()+0x18>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1e:	601a      	str	r2, [r3, #0]
}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40011000 	.word	0x40011000

08003f28 <recorder::Serial::InterruptHandler()>:

void Serial::InterruptHandler(void)
{
    ScopedProfilingPin<PROFILE_SERIAL_IRQ> profile;
    instance_->InterruptService();
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <recorder::Serial::InterruptHandler()+0x8>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	f7ff bfb0 	b.w	8003e90 <recorder::Serial::InterruptService()>
 8003f30:	20010e98 	.word	0x20010e98

08003f34 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003f34:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f38:	4905      	ldr	r1, [pc, #20]	; (8003f50 <NVIC_SystemReset+0x1c>)
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <NVIC_SystemReset+0x20>)
 8003f3c:	68ca      	ldr	r2, [r1, #12]
 8003f3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f42:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f44:	60cb      	str	r3, [r1, #12]
 8003f46:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f4a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003f4c:	e7fd      	b.n	8003f4a <NVIC_SystemReset+0x16>
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00
 8003f54:	05fa0004 	.word	0x05fa0004

08003f58 <TickHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <TickHandler+0x14>)
 8003f5a:	f06f 0101 	mvn.w	r1, #1
	return __atomic_load_n(&_M_i, int(__m));
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <TickHandler+0x18>)
 8003f60:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	6813      	ldr	r3, [r2, #0]
{
    ScopedProfilingPin<PROFILE_TICK> profile;
    LL_TIM_ClearFlag_UPDATE(TIM7);
    LL_TIM_IsActiveFlag_UPDATE(TIM7);
    uint32_t ticks = ticks_.load(std::memory_order_relaxed);
    ticks_.store(ticks + 1, std::memory_order_relaxed);
 8003f66:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003f68:	6013      	str	r3, [r2, #0]
}
 8003f6a:	4770      	bx	lr
 8003f6c:	40001400 	.word	0x40001400
 8003f70:	20010ea0 	.word	0x20010ea0

08003f74 <recorder::system::ConfigureClocks()>:
{
 8003f74:	b510      	push	{r4, lr}
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f76:	2002      	movs	r0, #2
{
 8003f78:	b0cc      	sub	sp, #304	; 0x130
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f7a:	f000 fc79 	bl	8004870 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(power_scaling);
 8003f7e:	4b30      	ldr	r3, [pc, #192]	; (8004040 <recorder::system::ConfigureClocks()+0xcc>)
 8003f80:	2100      	movs	r1, #0
 8003f82:	4a30      	ldr	r2, [pc, #192]	; (8004044 <recorder::system::ConfigureClocks()+0xd0>)
 8003f84:	9101      	str	r1, [sp, #4]
 8003f86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f88:	f021 0101 	bic.w	r1, r1, #1
 8003f8c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	6993      	ldr	r3, [r2, #24]
 8003f98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa0:	6193      	str	r3, [r2, #24]
 8003fa2:	6993      	ldr	r3, [r2, #24]
 8003fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	9b01      	ldr	r3, [sp, #4]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY));
 8003fac:	6993      	ldr	r3, [r2, #24]
 8003fae:	049b      	lsls	r3, r3, #18
 8003fb0:	d5fc      	bpl.n	8003fac <recorder::system::ConfigureClocks()+0x38>
    RCC_OscInitTypeDef osc_init = {};
 8003fb2:	2248      	movs	r2, #72	; 0x48
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	a80b      	add	r0, sp, #44	; 0x2c
 8003fb8:	f003 fb7d 	bl	80076b6 <memset>
    osc_init.HSIState = RCC_HSI_DIV1;
 8003fbc:	2301      	movs	r3, #1
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fbe:	2202      	movs	r2, #2
    osc_init.HSIState = RCC_HSI_DIV1;
 8003fc0:	930d      	str	r3, [sp, #52]	; 0x34
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fc2:	920a      	str	r2, [sp, #40]	; 0x28
    if (HAL_GetREVID() <= REV_ID_Y)
 8003fc4:	f000 fc28 	bl	8004818 <HAL_GetREVID>
 8003fc8:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fcc:	4298      	cmp	r0, r3
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <recorder::system::ConfigureClocks()+0xd4>)
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003fd0:	a80a      	add	r0, sp, #40	; 0x28
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8003fd2:	685b      	ldr	r3, [r3, #4]
                >> HAL_RCC_REV_Y_HSITRIM_Pos;
 8003fd4:	bf94      	ite	ls
 8003fd6:	f3c3 3305 	ubfxls	r3, r3, #12, #6
                >> RCC_HSICFGR_HSITRIM_Pos;
 8003fda:	f3c3 6306 	ubfxhi	r3, r3, #24, #7
 8003fde:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003fe0:	f000 fc6c 	bl	80048bc <HAL_RCC_OscConfig>
 8003fe4:	b100      	cbz	r0, 8003fe8 <recorder::system::ConfigureClocks()+0x74>
        while (1);
 8003fe6:	e7fe      	b.n	8003fe6 <recorder::system::ConfigureClocks()+0x72>
    clk_init.ClockType =
 8003fe8:	233f      	movs	r3, #63	; 0x3f
    RCC_ClkInitTypeDef clk_init = {};
 8003fea:	9009      	str	r0, [sp, #36]	; 0x24
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8003fec:	2101      	movs	r1, #1
    clk_init.ClockType =
 8003fee:	9302      	str	r3, [sp, #8]
    RCC_ClkInitTypeDef clk_init = {};
 8003ff0:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003ff4:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8003ff8:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8003ffc:	a802      	add	r0, sp, #8
 8003ffe:	f000 ff8b 	bl	8004f18 <HAL_RCC_ClockConfig>
 8004002:	b100      	cbz	r0, 8004006 <recorder::system::ConfigureClocks()+0x92>
        while (1);
 8004004:	e7fe      	b.n	8004004 <recorder::system::ConfigureClocks()+0x90>
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8004006:	4601      	mov	r1, r0
 8004008:	22b8      	movs	r2, #184	; 0xb8
 800400a:	a81e      	add	r0, sp, #120	; 0x78
    periph_clk_init.PLL3 =
 800400c:	4c0f      	ldr	r4, [pc, #60]	; (800404c <recorder::system::ConfigureClocks()+0xd8>)
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 800400e:	f003 fb52 	bl	80076b6 <memset>
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8004012:	490f      	ldr	r1, [pc, #60]	; (8004050 <recorder::system::ConfigureClocks()+0xdc>)
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8004014:	2210      	movs	r2, #16
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8004016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    periph_clk_init.PLL3 =
 800401a:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 800401e:	911d      	str	r1, [sp, #116]	; 0x74
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8004020:	923b      	str	r2, [sp, #236]	; 0xec
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8004022:	9345      	str	r3, [sp, #276]	; 0x114
    periph_clk_init.PLL3 =
 8004024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004026:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800402a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800402e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HAL_RCCEx_PeriphCLKConfig(&periph_clk_init) != HAL_OK)
 8004032:	a81d      	add	r0, sp, #116	; 0x74
 8004034:	f001 f97e 	bl	8005334 <HAL_RCCEx_PeriphCLKConfig>
 8004038:	b908      	cbnz	r0, 800403e <recorder::system::ConfigureClocks()+0xca>
}
 800403a:	b04c      	add	sp, #304	; 0x130
 800403c:	bd10      	pop	{r4, pc}
        while (1);
 800403e:	e7fe      	b.n	800403e <recorder::system::ConfigureClocks()+0xca>
 8004040:	58000400 	.word	0x58000400
 8004044:	58024800 	.word	0x58024800
 8004048:	58024400 	.word	0x58024400
 800404c:	08008928 	.word	0x08008928
 8004050:	02080001 	.word	0x02080001

08004054 <HAL_InitTick>:
HAL_StatusTypeDef HAL_InitTick(uint32_t)
{
    // This is called from HAL_RCC_ClockConfig() but we don't want to use
    // SysTick, so override it and do nothing.
    return HAL_OK;
}
 8004054:	2000      	movs	r0, #0
 8004056:	4770      	bx	lr

08004058 <recorder::system::ReloadWatchdog()>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <recorder::system::ReloadWatchdog()+0xc>)
 800405a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800405e:	601a      	str	r2, [r3, #0]

void ReloadWatchdog(void)
{
    ScopedProfilingPin<PROFILE_WATCHDOG> profile;
    LL_IWDG_ReloadCounter(IWDG1);
}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	58004800 	.word	0x58004800

08004068 <recorder::system::Init()>:

void Init(void)
{
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800406c:	b672      	cpsid	i
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800406e:	4cb6      	ldr	r4, [pc, #728]	; (8004348 <recorder::system::Init()+0x2e0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004070:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8004074:	4bb5      	ldr	r3, [pc, #724]	; (800434c <recorder::system::Init()+0x2e4>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8004076:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  reg_value  =  (reg_value                                   |
 800407a:	4ab5      	ldr	r2, [pc, #724]	; (8004350 <recorder::system::Init()+0x2e8>)
 800407c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    __disable_irq();

    InitFPU();

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    SystemCoreClock = kSystemClock;
 8004080:	4db4      	ldr	r5, [pc, #720]	; (8004354 <recorder::system::Init()+0x2ec>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8004082:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8004086:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004088:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 800408c:	6359      	str	r1, [r3, #52]	; 0x34
    FPU->FPDSCR |= FPU_FPDSCR_FZ_Msk;
 800408e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004090:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004094:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR |= FPU_FPDSCR_AHP_Msk;
 8004096:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004098:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800409c:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR &= ~FPU_FPDSCR_RMode_Msk;
 800409e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040a0:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80040a4:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR |= (2 << FPU_FPDSCR_RMode_Pos);
 80040a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040a8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80040ac:	63d9      	str	r1, [r3, #60]	; 0x3c
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ae:	68e3      	ldr	r3, [r4, #12]
    SystemCoreClock = kSystemClock;
 80040b0:	49a9      	ldr	r1, [pc, #676]	; (8004358 <recorder::system::Init()+0x2f0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040b2:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 80040b4:	431a      	orrs	r2, r3
    SystemD2Clock = kSystemClock;
 80040b6:	4ba9      	ldr	r3, [pc, #676]	; (800435c <recorder::system::Init()+0x2f4>)
  SCB->AIRCR =  reg_value;
 80040b8:	60e2      	str	r2, [r4, #12]
    SystemCoreClock = kSystemClock;
 80040ba:	6029      	str	r1, [r5, #0]
    SystemD2Clock = kSystemClock;
 80040bc:	6019      	str	r1, [r3, #0]

    ConfigureClocks();
 80040be:	f7ff ff59 	bl	8003f74 <recorder::system::ConfigureClocks()>
  __ASM volatile ("dsb 0xF":::"memory");
 80040c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040c6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80040ca:	2600      	movs	r6, #0
 80040cc:	f8c4 6250 	str.w	r6, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80040d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80040d8:	6963      	ldr	r3, [r4, #20]
 80040da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040de:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80040e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4c9d      	ldr	r4, [pc, #628]	; (8004360 <recorder::system::Init()+0x2f8>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80040ea:	4b9e      	ldr	r3, [pc, #632]	; (8004364 <recorder::system::Init()+0x2fc>)
 80040ec:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80040f0:	4a9d      	ldr	r2, [pc, #628]	; (8004368 <recorder::system::Init()+0x300>)
 80040f2:	f041 0102 	orr.w	r1, r1, #2
    LL_TIM_Init(TIM7, &timer_init);
 80040f6:	4d9d      	ldr	r5, [pc, #628]	; (800436c <recorder::system::Init()+0x304>)
 80040f8:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 80040fc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004100:	f001 0102 	and.w	r1, r1, #2
 8004104:	9106      	str	r1, [sp, #24]
 8004106:	9906      	ldr	r1, [sp, #24]
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800410e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004112:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800411a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004122:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004124:	6819      	ldr	r1, [r3, #0]
 8004126:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800412a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800412e:	6019      	str	r1, [r3, #0]
 8004130:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004134:	f041 0102 	orr.w	r1, r1, #2
 8004138:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 800413c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004140:	f001 0102 	and.w	r1, r1, #2
 8004144:	9105      	str	r1, [sp, #20]
 8004146:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004148:	6899      	ldr	r1, [r3, #8]
 800414a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800414e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004152:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800415a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004162:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800416a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800416e:	6019      	str	r1, [r3, #0]
 8004170:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004174:	f041 0102 	orr.w	r1, r1, #2
 8004178:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 800417c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004180:	f001 0102 	and.w	r1, r1, #2
 8004184:	9104      	str	r1, [sp, #16]
 8004186:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004188:	6899      	ldr	r1, [r3, #8]
 800418a:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 800418e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004192:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004194:	68d9      	ldr	r1, [r3, #12]
 8004196:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 800419a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80041a2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 80041aa:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80041b4:	f041 0102 	orr.w	r1, r1, #2
 80041b8:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 80041bc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80041c0:	f001 0102 	and.w	r1, r1, #2
 80041c4:	9103      	str	r1, [sp, #12]
 80041c6:	9903      	ldr	r1, [sp, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80041c8:	6899      	ldr	r1, [r3, #8]
 80041ca:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80041ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80041d2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80041d4:	68d9      	ldr	r1, [r3, #12]
 80041d6:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80041da:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80041e2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80041ea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80041ee:	6019      	str	r1, [r3, #0]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 80041f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80041f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80041fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	9b02      	ldr	r3, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004208:	6893      	ldr	r3, [r2, #8]
 800420a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004212:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004214:	68d3      	ldr	r3, [r2, #12]
 8004216:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800421a:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800421c:	6853      	ldr	r3, [r2, #4]
 800421e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004222:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004224:	6813      	ldr	r3, [r2, #0]
 8004226:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422e:	6013      	str	r3, [r2, #0]
    // Leave DCache disabled or else DMA won't work
    SCB_EnableICache();

    profiling::Init();
    ScopedProfilingPin<PROFILE_SYSTEM_INIT> profile;
    irq::Init();
 8004230:	f7ff fc8c 	bl	8003b4c <recorder::irq::Init()>
    serial_.Init(115200);
 8004234:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004238:	484d      	ldr	r0, [pc, #308]	; (8004370 <recorder::system::Init()+0x308>)
 800423a:	f7ff fd1f 	bl	8003c7c <recorder::Serial::Init(unsigned long)>
 800423e:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <recorder::system::Init()+0x30c>)
    LL_TIM_Init(TIM7, &timer_init);
 8004240:	a907      	add	r1, sp, #28
 8004242:	4628      	mov	r0, r5
 8004244:	601e      	str	r6, [r3, #0]
    LL_TIM_InitTypeDef timer_init =
 8004246:	2310      	movs	r3, #16
 8004248:	9607      	str	r6, [sp, #28]
 800424a:	9308      	str	r3, [sp, #32]
    };
 800424c:	f641 03ff 	movw	r3, #6399	; 0x18ff
    LL_TIM_InitTypeDef timer_init =
 8004250:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    };
 8004254:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004256:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8004262:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM7, &timer_init);
 800426e:	f002 fa55 	bl	800671c <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004272:	68eb      	ldr	r3, [r5, #12]
    irq::RegisterHandler(TIM7_IRQn, TickHandler);
 8004274:	2037      	movs	r0, #55	; 0x37
 8004276:	4940      	ldr	r1, [pc, #256]	; (8004378 <recorder::system::Init()+0x310>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	602b      	str	r3, [r5, #0]
 8004286:	f7ff fc8d 	bl	8003ba4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(TIM7_IRQn, kTickIRQPriority);
 800428a:	210a      	movs	r1, #10
 800428c:	2037      	movs	r0, #55	; 0x37
 800428e:	f7ff fcc5 	bl	8003c1c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(TIM7_IRQn);
 8004292:	2037      	movs	r0, #55	; 0x37
 8004294:	f7ff fca8 	bl	8003be8 <recorder::irq::Enable(IRQn_Type)>
    if ((FLASH->OPTSR_CUR & mask) != value)
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <recorder::system::Init()+0x314>)
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <recorder::system::Init()+0x318>)
 800429c:	69d1      	ldr	r1, [r2, #28]
 800429e:	400b      	ands	r3, r1
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d010      	beq.n	80042c6 <recorder::system::Init()+0x25e>
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80042a4:	4937      	ldr	r1, [pc, #220]	; (8004384 <recorder::system::Init()+0x31c>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80042a6:	4838      	ldr	r0, [pc, #224]	; (8004388 <recorder::system::Init()+0x320>)
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 80042a8:	4b38      	ldr	r3, [pc, #224]	; (800438c <recorder::system::Init()+0x324>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80042aa:	6090      	str	r0, [r2, #8]
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80042ac:	6091      	str	r1, [r2, #8]
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 80042ae:	6a11      	ldr	r1, [r2, #32]
 80042b0:	400b      	ands	r3, r1
 80042b2:	f043 0310 	orr.w	r3, r3, #16
 80042b6:	6213      	str	r3, [r2, #32]
        FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80042b8:	6993      	ldr	r3, [r2, #24]
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	6193      	str	r3, [r2, #24]
        while (FLASH->OPTSR_CUR & FLASH_OPTSR_OPT_BUSY);
 80042c0:	69d3      	ldr	r3, [r2, #28]
 80042c2:	07d8      	lsls	r0, r3, #31
 80042c4:	d4fc      	bmi.n	80042c0 <recorder::system::Init()+0x258>
    __HAL_DBGMCU_FREEZE_IWDG1();
 80042c6:	4932      	ldr	r1, [pc, #200]	; (8004390 <recorder::system::Init()+0x328>)
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80042c8:	f64c 44cc 	movw	r4, #52428	; 0xcccc
 80042cc:	4b31      	ldr	r3, [pc, #196]	; (8004394 <recorder::system::Init()+0x32c>)
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80042ce:	f245 5055 	movw	r0, #21845	; 0x5555
 80042d2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042d8:	654a      	str	r2, [r1, #84]	; 0x54
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80042da:	2103      	movs	r1, #3
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80042dc:	2264      	movs	r2, #100	; 0x64
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80042de:	601c      	str	r4, [r3, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80042e0:	6018      	str	r0, [r3, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80042e2:	6059      	str	r1, [r3, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80042e4:	609a      	str	r2, [r3, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	0751      	lsls	r1, r2, #29
 80042ea:	d1fc      	bne.n	80042e6 <recorder::system::Init()+0x27e>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80042ec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80042f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042f2:	b662      	cpsie	i
    InitTimer(kSystemClock / 10000);

    InitWatchdog(100);
    __enable_irq();

    uint32_t reset_flags = RCC->RSR;
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <recorder::system::Init()+0x2f8>)
    LL_RCC_ClearResetFlags();
    printf("Reset source was ");
 80042f6:	4828      	ldr	r0, [pc, #160]	; (8004398 <recorder::system::Init()+0x330>)
    uint32_t reset_flags = RCC->RSR;
 80042f8:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80042fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004304:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    printf("Reset source was ");
 8004308:	f003 fd60 	bl	8007dcc <iprintf>

    switch (reset_flags >> 16)
 800430c:	0c23      	lsrs	r3, r4, #16
 800430e:	2bfe      	cmp	r3, #254	; 0xfe
 8004310:	f000 808b 	beq.w	800442a <recorder::system::Init()+0x3c2>
 8004314:	d94e      	bls.n	80043b4 <recorder::system::Init()+0x34c>
 8004316:	f241 0246 	movw	r2, #4166	; 0x1046
 800431a:	4293      	cmp	r3, r2
 800431c:	d070      	beq.n	8004400 <recorder::system::Init()+0x398>
 800431e:	d952      	bls.n	80043c6 <recorder::system::Init()+0x35e>
 8004320:	f244 0246 	movw	r2, #16454	; 0x4046
 8004324:	4293      	cmp	r3, r2
 8004326:	d17b      	bne.n	8004420 <recorder::system::Init()+0x3b8>
        case 0x0146: printf("SFT\n");   break;
        case 0x0006: printf("CPU\n");   break;
        case 0x1046: printf("WWDG1\n"); break;
        case 0x0446: printf("IWDG1\n"); break;
        case 0x001E: printf("WAKE\n");  break;
        case 0x4046: printf("LPWR\n");  break;
 8004328:	481c      	ldr	r0, [pc, #112]	; (800439c <recorder::system::Init()+0x334>)
 800432a:	f003 fdd5 	bl	8007ed8 <puts>
        default: printf("unknown: 0x%08lX\n", reset_flags);
    }

    wakeup_flags_ = PWR->WKUPFR;
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <recorder::system::Init()+0x338>)
 8004330:	4c1c      	ldr	r4, [pc, #112]	; (80043a4 <recorder::system::Init()+0x33c>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 8004334:	07da      	lsls	r2, r3, #31
    wakeup_flags_ = PWR->WKUPFR;
 8004336:	6023      	str	r3, [r4, #0]
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 8004338:	d458      	bmi.n	80043ec <recorder::system::Init()+0x384>
    {
        printf("Wakeup event was record button\n");
    }

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 800433a:	079b      	lsls	r3, r3, #30
 800433c:	d45c      	bmi.n	80043f8 <recorder::system::Init()+0x390>
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <recorder::system::Init()+0x2f8>)
 8004340:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
 8004344:	e030      	b.n	80043a8 <recorder::system::Init()+0x340>
 8004346:	bf00      	nop
 8004348:	e000ed00 	.word	0xe000ed00
 800434c:	e000ef00 	.word	0xe000ef00
 8004350:	05fa0300 	.word	0x05fa0300
 8004354:	20000000 	.word	0x20000000
 8004358:	03d09000 	.word	0x03d09000
 800435c:	20000004 	.word	0x20000004
 8004360:	58024400 	.word	0x58024400
 8004364:	58020400 	.word	0x58020400
 8004368:	58021800 	.word	0x58021800
 800436c:	40001400 	.word	0x40001400
 8004370:	20010ea4 	.word	0x20010ea4
 8004374:	20010ea0 	.word	0x20010ea0
 8004378:	08003f59 	.word	0x08003f59
 800437c:	52002000 	.word	0x52002000
 8004380:	00060010 	.word	0x00060010
 8004384:	4c5d6e7f 	.word	0x4c5d6e7f
 8004388:	08192a3b 	.word	0x08192a3b
 800438c:	fff9ffef 	.word	0xfff9ffef
 8004390:	5c001000 	.word	0x5c001000
 8004394:	58004800 	.word	0x58004800
 8004398:	08008d4c 	.word	0x08008d4c
 800439c:	08008d90 	.word	0x08008d90
 80043a0:	58024800 	.word	0x58024800
 80043a4:	20010e9c 	.word	0x20010e9c
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    {
        printf("Wakeup event was play button\n");
    }

    LL_RCC_ClearResetFlags();
}
 80043b0:	b00c      	add	sp, #48	; 0x30
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
    switch (reset_flags >> 16)
 80043b4:	2b46      	cmp	r3, #70	; 0x46
 80043b6:	d02f      	beq.n	8004418 <recorder::system::Init()+0x3b0>
 80043b8:	d910      	bls.n	80043dc <recorder::system::Init()+0x374>
 80043ba:	2b66      	cmp	r3, #102	; 0x66
 80043bc:	d130      	bne.n	8004420 <recorder::system::Init()+0x3b8>
        case 0x0066: printf("BOR\n");   break;
 80043be:	481d      	ldr	r0, [pc, #116]	; (8004434 <recorder::system::Init()+0x3cc>)
 80043c0:	f003 fd8a 	bl	8007ed8 <puts>
 80043c4:	e7b3      	b.n	800432e <recorder::system::Init()+0x2c6>
    switch (reset_flags >> 16)
 80043c6:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 80043ca:	d01d      	beq.n	8004408 <recorder::system::Init()+0x3a0>
 80043cc:	f240 4246 	movw	r2, #1094	; 0x446
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d125      	bne.n	8004420 <recorder::system::Init()+0x3b8>
        case 0x0446: printf("IWDG1\n"); break;
 80043d4:	4818      	ldr	r0, [pc, #96]	; (8004438 <recorder::system::Init()+0x3d0>)
 80043d6:	f003 fd7f 	bl	8007ed8 <puts>
 80043da:	e7a8      	b.n	800432e <recorder::system::Init()+0x2c6>
    switch (reset_flags >> 16)
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d017      	beq.n	8004410 <recorder::system::Init()+0x3a8>
 80043e0:	2b1e      	cmp	r3, #30
 80043e2:	d11d      	bne.n	8004420 <recorder::system::Init()+0x3b8>
        case 0x001E: printf("WAKE\n");  break;
 80043e4:	4815      	ldr	r0, [pc, #84]	; (800443c <recorder::system::Init()+0x3d4>)
 80043e6:	f003 fd77 	bl	8007ed8 <puts>
 80043ea:	e7a0      	b.n	800432e <recorder::system::Init()+0x2c6>
        printf("Wakeup event was record button\n");
 80043ec:	4814      	ldr	r0, [pc, #80]	; (8004440 <recorder::system::Init()+0x3d8>)
 80043ee:	f003 fd73 	bl	8007ed8 <puts>
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	079b      	lsls	r3, r3, #30
 80043f6:	d5a2      	bpl.n	800433e <recorder::system::Init()+0x2d6>
        printf("Wakeup event was play button\n");
 80043f8:	4812      	ldr	r0, [pc, #72]	; (8004444 <recorder::system::Init()+0x3dc>)
 80043fa:	f003 fd6d 	bl	8007ed8 <puts>
 80043fe:	e79e      	b.n	800433e <recorder::system::Init()+0x2d6>
        case 0x1046: printf("WWDG1\n"); break;
 8004400:	4811      	ldr	r0, [pc, #68]	; (8004448 <recorder::system::Init()+0x3e0>)
 8004402:	f003 fd69 	bl	8007ed8 <puts>
 8004406:	e792      	b.n	800432e <recorder::system::Init()+0x2c6>
        case 0x0146: printf("SFT\n");   break;
 8004408:	4810      	ldr	r0, [pc, #64]	; (800444c <recorder::system::Init()+0x3e4>)
 800440a:	f003 fd65 	bl	8007ed8 <puts>
 800440e:	e78e      	b.n	800432e <recorder::system::Init()+0x2c6>
        case 0x0006: printf("CPU\n");   break;
 8004410:	480f      	ldr	r0, [pc, #60]	; (8004450 <recorder::system::Init()+0x3e8>)
 8004412:	f003 fd61 	bl	8007ed8 <puts>
 8004416:	e78a      	b.n	800432e <recorder::system::Init()+0x2c6>
        case 0x0046: printf("NRST\n");  break;
 8004418:	480e      	ldr	r0, [pc, #56]	; (8004454 <recorder::system::Init()+0x3ec>)
 800441a:	f003 fd5d 	bl	8007ed8 <puts>
 800441e:	e786      	b.n	800432e <recorder::system::Init()+0x2c6>
        default: printf("unknown: 0x%08lX\n", reset_flags);
 8004420:	4621      	mov	r1, r4
 8004422:	480d      	ldr	r0, [pc, #52]	; (8004458 <recorder::system::Init()+0x3f0>)
 8004424:	f003 fcd2 	bl	8007dcc <iprintf>
 8004428:	e781      	b.n	800432e <recorder::system::Init()+0x2c6>
        case 0x00FE: printf("POR\n");   break;
 800442a:	480c      	ldr	r0, [pc, #48]	; (800445c <recorder::system::Init()+0x3f4>)
 800442c:	f003 fd54 	bl	8007ed8 <puts>
 8004430:	e77d      	b.n	800432e <recorder::system::Init()+0x2c6>
 8004432:	bf00      	nop
 8004434:	08008d6c 	.word	0x08008d6c
 8004438:	08008d80 	.word	0x08008d80
 800443c:	08008d88 	.word	0x08008d88
 8004440:	08008dac 	.word	0x08008dac
 8004444:	08008dcc 	.word	0x08008dcc
 8004448:	08008d78 	.word	0x08008d78
 800444c:	08008d70 	.word	0x08008d70
 8004450:	08008d74 	.word	0x08008d74
 8004454:	08008d64 	.word	0x08008d64
 8004458:	08008d98 	.word	0x08008d98
 800445c:	08008d60 	.word	0x08008d60

08004460 <recorder::system::Delay_ms(unsigned long)>:
{
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
}

void Delay_ms(uint32_t ms)
{
 8004460:	b570      	push	{r4, r5, r6, lr}
    uint32_t start = ticks_.load(std::memory_order_acquire);

    while (TickDelta(start) < ms * 10)
 8004462:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return __atomic_load_n(&_M_i, int(__m));
 8004466:	4d08      	ldr	r5, [pc, #32]	; (8004488 <recorder::system::Delay_ms(unsigned long)+0x28>)
 8004468:	0044      	lsls	r4, r0, #1
 800446a:	682e      	ldr	r6, [r5, #0]
 800446c:	f3bf 8f5b 	dmb	ish
 8004470:	e001      	b.n	8004476 <recorder::system::Delay_ms(unsigned long)+0x16>
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
}

void Sleep(void)
{
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004472:	f000 f9ef 	bl	8004854 <HAL_PWR_EnterSLEEPMode>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	2000      	movs	r0, #0
 800447c:	f3bf 8f5b 	dmb	ish
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
 8004480:	1b9b      	subs	r3, r3, r6
    while (TickDelta(start) < ms * 10)
 8004482:	429c      	cmp	r4, r3
 8004484:	d8f5      	bhi.n	8004472 <recorder::system::Delay_ms(unsigned long)+0x12>
}
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	20010ea0 	.word	0x20010ea0

0800448c <recorder::system::SerialFlushTx(bool)>:
{
 800448c:	4601      	mov	r1, r0
    serial_.FlushTx(discard);
 800448e:	4801      	ldr	r0, [pc, #4]	; (8004494 <recorder::system::SerialFlushTx(bool)+0x8>)
 8004490:	f7ff bce0 	b.w	8003e54 <recorder::Serial::FlushTx(bool)>
 8004494:	20010ea4 	.word	0x20010ea4

08004498 <recorder::system::Standby()>:
{
 8004498:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid f" : : : "memory");
 800449a:	b671      	cpsid	f
        NVIC->ICER[i] = 0xFFFFFFFF;
 800449c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80044a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  * @rmtoll CPUCR     RUN_D3       LL_PWR_CPU_DisableD3RunInLowPowerMode\n
  * @retval None
  */
__STATIC_INLINE void LL_PWR_CPU_DisableD3RunInLowPowerMode(void)
{
  CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_RUN_D3);
 80044a4:	4c41      	ldr	r4, [pc, #260]	; (80045ac <recorder::system::Standby()+0x114>)
 80044a6:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <recorder::system::Standby()+0x118>)
 80044a8:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044ac:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044b0:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044b4:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044b8:	f8c3 5188 	str.w	r5, [r3, #392]	; 0x188
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044bc:	f8c3 5288 	str.w	r5, [r3, #648]	; 0x288
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044c0:	f8c3 518c 	str.w	r5, [r3, #396]	; 0x18c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044c4:	f8c3 528c 	str.w	r5, [r3, #652]	; 0x28c
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044c8:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044cc:	f8c3 5290 	str.w	r5, [r3, #656]	; 0x290
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044d0:	f8c3 5194 	str.w	r5, [r3, #404]	; 0x194
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044d4:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044d8:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044dc:	f8c3 5298 	str.w	r5, [r3, #664]	; 0x298
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044e0:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044e4:	f8c3 529c 	str.w	r5, [r3, #668]	; 0x29c
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ee:	6123      	str	r3, [r4, #16]
    HAL_DisableDBGSleepMode();
 80044f0:	f000 f998 	bl	8004824 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DisableDBGStopMode();
 80044f4:	f000 f99e 	bl	8004834 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DisableDBGStandbyMode();
 80044f8:	f000 f9a4 	bl	8004844 <HAL_DBGMCU_DisableDBGStandbyMode>
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 80044fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	2201      	movs	r2, #1
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	62a3      	str	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPullUp(uint32_t WakeUpPin)
{
  MODIFY_REG(PWR->WKUPEPR, \
 8004506:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004508:	fa92 f1a2 	rbit	r1, r2
 800450c:	fab1 f181 	clz	r1, r1
 8004510:	fa92 f3a2 	rbit	r3, r2
 8004514:	fab3 f383 	clz	r3, r3
 8004518:	4091      	lsls	r1, r2
 800451a:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 800451e:	3308      	adds	r3, #8
 8004520:	f001 011e 	and.w	r1, r1, #30
 8004524:	4093      	lsls	r3, r2
 8004526:	fa0c f101 	lsl.w	r1, ip, r1
 800452a:	f003 031e 	and.w	r3, r3, #30
 800452e:	ea20 0101 	bic.w	r1, r0, r1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	430b      	orrs	r3, r1
 8004538:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 800453a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800453c:	4313      	orrs	r3, r2
 800453e:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 8004540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004546:	62a3      	str	r3, [r4, #40]	; 0x28
 8004548:	2302      	movs	r3, #2
  MODIFY_REG(PWR->WKUPEPR, \
 800454a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800454c:	fa93 f1a3 	rbit	r1, r3
 8004550:	fab1 f181 	clz	r1, r1
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	4091      	lsls	r1, r2
 800455e:	3308      	adds	r3, #8
 8004560:	f001 011e 	and.w	r1, r1, #30
 8004564:	4093      	lsls	r3, r2
 8004566:	fa0c f101 	lsl.w	r1, ip, r1
 800456a:	f003 031e 	and.w	r3, r3, #30
 800456e:	ea20 0101 	bic.w	r1, r0, r1
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004576:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <recorder::system::Standby()+0x11c>)
 8004578:	430b      	orrs	r3, r1
 800457a:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 800457c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	62a3      	str	r3, [r4, #40]	; 0x28
    PWR->WKUPCR = 0xFFFFFFFF;
 8004584:	6225      	str	r5, [r4, #32]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D1, PDMode);
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6123      	str	r3, [r4, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D2, PDMode);
 800458e:	6923      	ldr	r3, [r4, #16]
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	6123      	str	r3, [r4, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D3 , PDMode);
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	6123      	str	r3, [r4, #16]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800459e:	6913      	ldr	r3, [r2, #16]
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	6113      	str	r3, [r2, #16]
    __WFI();
 80045a6:	bf30      	wfi
}

void Reset(void)
{
    NVIC_SystemReset();
 80045a8:	f7ff fcc4 	bl	8003f34 <NVIC_SystemReset>
 80045ac:	58024800 	.word	0x58024800
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <recorder::system::WakeupWasPlayButton()>:
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
 80045b8:	4b02      	ldr	r3, [pc, #8]	; (80045c4 <recorder::system::WakeupWasPlayButton()+0xc>)
 80045ba:	6818      	ldr	r0, [r3, #0]
}
 80045bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20010e9c 	.word	0x20010e9c

080045c8 <recorder::system::Reset()>:
{
 80045c8:	b508      	push	{r3, lr}
    NVIC_SystemReset();
 80045ca:	f7ff fcb3 	bl	8003f34 <NVIC_SystemReset>
 80045ce:	bf00      	nop

080045d0 <fgets>:
}

extern "C"
char* fgets(char* str, int count, std::FILE* stream)
{
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (count < 2)
 80045d4:	2901      	cmp	r1, #1
{
 80045d6:	b083      	sub	sp, #12
 80045d8:	9001      	str	r0, [sp, #4]
    if (count < 2)
 80045da:	dd33      	ble.n	8004644 <fgets+0x74>
 80045dc:	4616      	mov	r6, r2
        return nullptr;
    }

    int i;

    for (i = 0; i < count - 1; i++)
 80045de:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 80045e2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80045e6:	f04f 0a00 	mov.w	sl, #0
    {
        char byte = std::getc(stream);
 80045ea:	4630      	mov	r0, r6
 80045ec:	f002 ffea 	bl	80075c4 <getc>
 80045f0:	4605      	mov	r5, r0
        bool error = std::ferror(stream);
 80045f2:	4630      	mov	r0, r6
 80045f4:	f002 fe8c 	bl	8007310 <ferror>
 80045f8:	4607      	mov	r7, r0
        bool eof = std::feof(stream);
 80045fa:	4630      	mov	r0, r6
        char byte = std::getc(stream);
 80045fc:	b2ed      	uxtb	r5, r5
        bool eof = std::feof(stream);
 80045fe:	f002 fe51 	bl	80072a4 <feof>
 8004602:	4604      	mov	r4, r0
        std::clearerr(stream);
 8004604:	4630      	mov	r0, r6
        bool eof = std::feof(stream);
 8004606:	f1b4 0b00 	subs.w	fp, r4, #0
 800460a:	bf18      	it	ne
 800460c:	f04f 0b01 	movne.w	fp, #1
        std::clearerr(stream);
 8004610:	f002 fe08 	bl	8007224 <clearerr>

        if (error || (eof && i == 0))
 8004614:	b9b7      	cbnz	r7, 8004644 <fgets+0x74>
 8004616:	f1ba 0f00 	cmp.w	sl, #0
 800461a:	d102      	bne.n	8004622 <fgets+0x52>
 800461c:	f1bb 0f00 	cmp.w	fp, #0
 8004620:	d110      	bne.n	8004644 <fgets+0x74>
        {
            return nullptr;
        }
        else if (eof)
 8004622:	b99c      	cbnz	r4, 800464c <fgets+0x7c>
        }
        else
        {
            str[i] = byte;

            if (byte == '\n')
 8004624:	2d0a      	cmp	r5, #10
            str[i] = byte;
 8004626:	f808 5f01 	strb.w	r5, [r8, #1]!
            if (byte == '\n')
 800462a:	d003      	beq.n	8004634 <fgets+0x64>
    for (i = 0; i < count - 1; i++)
 800462c:	f10a 0a01 	add.w	sl, sl, #1
 8004630:	45ca      	cmp	sl, r9
 8004632:	d1da      	bne.n	80045ea <fgets+0x1a>
                break;
            }
        }
    }

    str[i + 1] = '\0';
 8004634:	9801      	ldr	r0, [sp, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	eb00 030a 	add.w	r3, r0, sl
 800463c:	705a      	strb	r2, [r3, #1]
    return str;
}
 800463e:	b003      	add	sp, #12
 8004640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nullptr;
 8004644:	2000      	movs	r0, #0
}
 8004646:	b003      	add	sp, #12
 8004648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return str;
 800464c:	9b01      	ldr	r3, [sp, #4]
            str[i] = '\0';
 800464e:	2200      	movs	r2, #0
            return str;
 8004650:	4618      	mov	r0, r3
            str[i] = '\0';
 8004652:	f803 200a 	strb.w	r2, [r3, sl]
}
 8004656:	b003      	add	sp, #12
 8004658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800465c <_read>:

extern "C"
int _read(int file, char* ptr, int len)
{
 800465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool prev_was_cr = false;

    if (file == STDIN_FILENO)
 8004660:	bb18      	cbnz	r0, 80046aa <_read+0x4e>
    {
        int i = 0;

        while (i < len && serial_.BytesAvailable())
 8004662:	2a00      	cmp	r2, #0
 8004664:	4604      	mov	r4, r0
 8004666:	4616      	mov	r6, r2
 8004668:	dd1c      	ble.n	80046a4 <_read+0x48>
 800466a:	4688      	mov	r8, r1
 800466c:	4d13      	ldr	r5, [pc, #76]	; (80046bc <_read+0x60>)
 800466e:	4f14      	ldr	r7, [pc, #80]	; (80046c0 <_read+0x64>)
 8004670:	e009      	b.n	8004686 <_read+0x2a>
            if (is_cr)
            {
                ch = '\n';
            }

            if (!(is_lf && prev_was_cr))
 8004672:	280a      	cmp	r0, #10
 8004674:	d101      	bne.n	800467a <_read+0x1e>
 8004676:	783a      	ldrb	r2, [r7, #0]
 8004678:	b912      	cbnz	r2, 8004680 <_read+0x24>
            {
                ptr[i++] = ch;
 800467a:	f808 0004 	strb.w	r0, [r8, r4]
 800467e:	3401      	adds	r4, #1
        while (i < len && serial_.BytesAvailable())
 8004680:	42b4      	cmp	r4, r6
            }

            prev_was_cr = is_cr;
 8004682:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 8004684:	da0e      	bge.n	80046a4 <_read+0x48>
 8004686:	4628      	mov	r0, r5
 8004688:	f7ff fba0 	bl	8003dcc <recorder::Serial::BytesAvailable()>
 800468c:	4603      	mov	r3, r0
            char ch = serial_.GetByteBlocking();
 800468e:	4628      	mov	r0, r5
        while (i < len && serial_.BytesAvailable())
 8004690:	b143      	cbz	r3, 80046a4 <_read+0x48>
            char ch = serial_.GetByteBlocking();
 8004692:	f7ff fba1 	bl	8003dd8 <recorder::Serial::GetByteBlocking()>
            bool is_cr = (ch == '\r');
 8004696:	280d      	cmp	r0, #13
 8004698:	bf0c      	ite	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	2300      	movne	r3, #0
            if (is_cr)
 800469e:	d1e8      	bne.n	8004672 <_read+0x16>
                ch = '\n';
 80046a0:	200a      	movs	r0, #10
 80046a2:	e7ea      	b.n	800467a <_read+0x1e>
 80046a4:	4620      	mov	r0, r4
        return i;
    }

    errno = ENOENT;
    return -1;
}
 80046a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 80046aa:	f002 fdf5 	bl	8007298 <__errno>
 80046ae:	2202      	movs	r2, #2
 80046b0:	4603      	mov	r3, r0
    return -1;
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOENT;
 80046b6:	601a      	str	r2, [r3, #0]
    return -1;
 80046b8:	e7f5      	b.n	80046a6 <_read+0x4a>
 80046ba:	bf00      	nop
 80046bc:	20010ea4 	.word	0x20010ea4
 80046c0:	20010ff4 	.word	0x20010ff4

080046c4 <_write>:
extern "C"
int _write(int file, char* ptr, int len)
{
    static char prev = '\0';

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80046c4:	1e43      	subs	r3, r0, #1
 80046c6:	2b01      	cmp	r3, #1
{
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80046cc:	d822      	bhi.n	8004714 <_write+0x50>
    {
        for (int i = 0; i < len; i++)
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	4690      	mov	r8, r2
 80046d2:	dd1c      	ble.n	800470e <_write+0x4a>
 80046d4:	1e4c      	subs	r4, r1, #1
 80046d6:	4e13      	ldr	r6, [pc, #76]	; (8004724 <_write+0x60>)
        {
            if (ptr[i] == '\n' && prev != '\r')
            {
                serial_.Write('\r', true);
 80046d8:	4d13      	ldr	r5, [pc, #76]	; (8004728 <_write+0x64>)
 80046da:	18a7      	adds	r7, r4, r2
 80046dc:	e008      	b.n	80046f0 <_write+0x2c>
            }

            serial_.Write(ptr[i], true);
 80046de:	4619      	mov	r1, r3
 80046e0:	2201      	movs	r2, #1
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7ff fb8a 	bl	8003dfc <recorder::Serial::Write(unsigned char, bool)>
            prev = ptr[i];
 80046e8:	7823      	ldrb	r3, [r4, #0]
        for (int i = 0; i < len; i++)
 80046ea:	42bc      	cmp	r4, r7
            prev = ptr[i];
 80046ec:	7033      	strb	r3, [r6, #0]
        for (int i = 0; i < len; i++)
 80046ee:	d00e      	beq.n	800470e <_write+0x4a>
            if (ptr[i] == '\n' && prev != '\r')
 80046f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046f4:	2b0a      	cmp	r3, #10
 80046f6:	d1f2      	bne.n	80046de <_write+0x1a>
 80046f8:	f896 c000 	ldrb.w	ip, [r6]
                serial_.Write('\r', true);
 80046fc:	210d      	movs	r1, #13
 80046fe:	2201      	movs	r2, #1
 8004700:	4628      	mov	r0, r5
            if (ptr[i] == '\n' && prev != '\r')
 8004702:	458c      	cmp	ip, r1
 8004704:	d0eb      	beq.n	80046de <_write+0x1a>
                serial_.Write('\r', true);
 8004706:	f7ff fb79 	bl	8003dfc <recorder::Serial::Write(unsigned char, bool)>
            serial_.Write(ptr[i], true);
 800470a:	7823      	ldrb	r3, [r4, #0]
 800470c:	e7e7      	b.n	80046de <_write+0x1a>

        return len;
    }

    errno = ENOENT;
    return -1;
 800470e:	4640      	mov	r0, r8
}
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8004714:	f002 fdc0 	bl	8007298 <__errno>
 8004718:	2202      	movs	r2, #2
 800471a:	4603      	mov	r3, r0
    return -1;
 800471c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOENT;
 8004720:	601a      	str	r2, [r3, #0]
    return -1;
 8004722:	e7f5      	b.n	8004710 <_write+0x4c>
 8004724:	20010ff5 	.word	0x20010ff5
 8004728:	20010ea4 	.word	0x20010ea4

0800472c <_GLOBAL__sub_I_TickHandler>:
      __atomic_base() noexcept = default;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <_GLOBAL__sub_I_TickHandler+0x10>)
 800472e:	2200      	movs	r2, #0
 8004730:	e9c3 2200 	strd	r2, r2, [r3]
 8004734:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48

}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20010ea4 	.word	0x20010ea4

08004740 <Default_Handler>:
 8004740:	e7fe      	b.n	8004740 <Default_Handler>
 8004742:	bf00      	nop

08004744 <Reset_Handler>:
 8004744:	480b      	ldr	r0, [pc, #44]	; (8004774 <Reset_Handler+0x30>)
 8004746:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <Reset_Handler+0x34>)
 8004748:	4290      	cmp	r0, r2
 800474a:	d003      	beq.n	8004754 <Reset_Handler+0x10>
 800474c:	1a12      	subs	r2, r2, r0
 800474e:	490b      	ldr	r1, [pc, #44]	; (800477c <Reset_Handler+0x38>)
 8004750:	f002 ffa3 	bl	800769a <memcpy>
 8004754:	480a      	ldr	r0, [pc, #40]	; (8004780 <Reset_Handler+0x3c>)
 8004756:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <Reset_Handler+0x40>)
 8004758:	4290      	cmp	r0, r2
 800475a:	d003      	beq.n	8004764 <Reset_Handler+0x20>
 800475c:	1a12      	subs	r2, r2, r0
 800475e:	2100      	movs	r1, #0
 8004760:	f002 ffa9 	bl	80076b6 <memset>
 8004764:	f000 f810 	bl	8004788 <SystemInit>
 8004768:	f002 ff70 	bl	800764c <__libc_init_array>
 800476c:	f7fd fd80 	bl	8002270 <main>
 8004770:	e7fe      	b.n	8004770 <Reset_Handler+0x2c>
 8004772:	bf00      	nop
 8004774:	20000000 	.word	0x20000000
 8004778:	2000006c 	.word	0x2000006c
 800477c:	0800934c 	.word	0x0800934c
 8004780:	20000400 	.word	0x20000400
 8004784:	20011010 	.word	0x20011010

08004788 <SystemInit>:
 8004788:	b410      	push	{r4}
 800478a:	4c1a      	ldr	r4, [pc, #104]	; (80047f4 <SystemInit+0x6c>)
 800478c:	2200      	movs	r2, #0
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <SystemInit+0x70>)
 8004790:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004794:	4819      	ldr	r0, [pc, #100]	; (80047fc <SystemInit+0x74>)
 8004796:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800479a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	4c17      	ldr	r4, [pc, #92]	; (8004800 <SystemInit+0x78>)
 80047a2:	f041 0101 	orr.w	r1, r1, #1
 80047a6:	6019      	str	r1, [r3, #0]
 80047a8:	611a      	str	r2, [r3, #16]
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	4008      	ands	r0, r1
 80047ae:	4915      	ldr	r1, [pc, #84]	; (8004804 <SystemInit+0x7c>)
 80047b0:	6018      	str	r0, [r3, #0]
 80047b2:	619a      	str	r2, [r3, #24]
 80047b4:	61da      	str	r2, [r3, #28]
 80047b6:	621a      	str	r2, [r3, #32]
 80047b8:	629a      	str	r2, [r3, #40]	; 0x28
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
 80047be:	635a      	str	r2, [r3, #52]	; 0x34
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
 80047c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80047ce:	6018      	str	r0, [r3, #0]
 80047d0:	661a      	str	r2, [r3, #96]	; 0x60
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	4019      	ands	r1, r3
 80047d6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80047da:	d203      	bcs.n	80047e4 <SystemInit+0x5c>
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <SystemInit+0x80>)
 80047de:	2201      	movs	r2, #1
 80047e0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <SystemInit+0x6c>)
 80047e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000ed00 	.word	0xe000ed00
 80047f8:	58024400 	.word	0x58024400
 80047fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8004800:	5c001000 	.word	0x5c001000
 8004804:	ffff0000 	.word	0xffff0000
 8004808:	51008000 	.word	0x51008000

0800480c <HAL_GetTick>:
 800480c:	4b01      	ldr	r3, [pc, #4]	; (8004814 <HAL_GetTick+0x8>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20010ff8 	.word	0x20010ff8

08004818 <HAL_GetREVID>:
 8004818:	4b01      	ldr	r3, [pc, #4]	; (8004820 <HAL_GetREVID+0x8>)
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	0c00      	lsrs	r0, r0, #16
 800481e:	4770      	bx	lr
 8004820:	5c001000 	.word	0x5c001000

08004824 <HAL_DBGMCU_DisableDBGSleepMode>:
 8004824:	4a02      	ldr	r2, [pc, #8]	; (8004830 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004826:	6853      	ldr	r3, [r2, #4]
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6053      	str	r3, [r2, #4]
 800482e:	4770      	bx	lr
 8004830:	5c001000 	.word	0x5c001000

08004834 <HAL_DBGMCU_DisableDBGStopMode>:
 8004834:	4a02      	ldr	r2, [pc, #8]	; (8004840 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8004836:	6853      	ldr	r3, [r2, #4]
 8004838:	f023 0302 	bic.w	r3, r3, #2
 800483c:	6053      	str	r3, [r2, #4]
 800483e:	4770      	bx	lr
 8004840:	5c001000 	.word	0x5c001000

08004844 <HAL_DBGMCU_DisableDBGStandbyMode>:
 8004844:	4a02      	ldr	r2, [pc, #8]	; (8004850 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8004846:	6853      	ldr	r3, [r2, #4]
 8004848:	f023 0304 	bic.w	r3, r3, #4
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	4770      	bx	lr
 8004850:	5c001000 	.word	0x5c001000

08004854 <HAL_PWR_EnterSLEEPMode>:
 8004854:	4a05      	ldr	r2, [pc, #20]	; (800486c <HAL_PWR_EnterSLEEPMode+0x18>)
 8004856:	2901      	cmp	r1, #1
 8004858:	6913      	ldr	r3, [r2, #16]
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	6113      	str	r3, [r2, #16]
 8004860:	d001      	beq.n	8004866 <HAL_PWR_EnterSLEEPMode+0x12>
 8004862:	bf20      	wfe
 8004864:	4770      	bx	lr
 8004866:	bf30      	wfi
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <HAL_PWREx_ConfigSupply>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_PWREx_ConfigSupply+0x48>)
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	0752      	lsls	r2, r2, #29
 8004878:	d404      	bmi.n	8004884 <HAL_PWREx_ConfigSupply+0x14>
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4283      	cmp	r3, r0
 8004882:	d114      	bne.n	80048ae <HAL_PWREx_ConfigSupply+0x3e>
 8004884:	4c0c      	ldr	r4, [pc, #48]	; (80048b8 <HAL_PWREx_ConfigSupply+0x48>)
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	4318      	orrs	r0, r3
 800488e:	60e0      	str	r0, [r4, #12]
 8004890:	f7ff ffbc 	bl	800480c <HAL_GetTick>
 8004894:	4605      	mov	r5, r0
 8004896:	e005      	b.n	80048a4 <HAL_PWREx_ConfigSupply+0x34>
 8004898:	f7ff ffb8 	bl	800480c <HAL_GetTick>
 800489c:	1b40      	subs	r0, r0, r5
 800489e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80048a2:	d806      	bhi.n	80048b2 <HAL_PWREx_ConfigSupply+0x42>
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	049b      	lsls	r3, r3, #18
 80048a8:	d5f6      	bpl.n	8004898 <HAL_PWREx_ConfigSupply+0x28>
 80048aa:	2000      	movs	r0, #0
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
 80048ae:	2001      	movs	r0, #1
 80048b0:	bd38      	pop	{r3, r4, r5, pc}
 80048b2:	2003      	movs	r0, #3
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
 80048b6:	bf00      	nop
 80048b8:	58024800 	.word	0x58024800

080048bc <HAL_RCC_OscConfig>:
 80048bc:	2800      	cmp	r0, #0
 80048be:	f000 81de 	beq.w	8004c7e <HAL_RCC_OscConfig+0x3c2>
 80048c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	4604      	mov	r4, r0
 80048c8:	07d8      	lsls	r0, r3, #31
 80048ca:	d530      	bpl.n	800492e <HAL_RCC_OscConfig+0x72>
 80048cc:	499f      	ldr	r1, [pc, #636]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 80048ce:	690a      	ldr	r2, [r1, #16]
 80048d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80048d2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80048d6:	2a10      	cmp	r2, #16
 80048d8:	f000 8100 	beq.w	8004adc <HAL_RCC_OscConfig+0x220>
 80048dc:	2a18      	cmp	r2, #24
 80048de:	f000 80f8 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x216>
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	f000 8120 	beq.w	8004b2c <HAL_RCC_OscConfig+0x270>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 815e 	beq.w	8004bae <HAL_RCC_OscConfig+0x2f2>
 80048f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f6:	4b95      	ldr	r3, [pc, #596]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	f000 822f 	beq.w	8004d5c <HAL_RCC_OscConfig+0x4a0>
 80048fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f7ff ff7e 	bl	800480c <HAL_GetTick>
 8004910:	4e8e      	ldr	r6, [pc, #568]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004912:	f241 3788 	movw	r7, #5000	; 0x1388
 8004916:	4605      	mov	r5, r0
 8004918:	e005      	b.n	8004926 <HAL_RCC_OscConfig+0x6a>
 800491a:	f7ff ff77 	bl	800480c <HAL_GetTick>
 800491e:	1b40      	subs	r0, r0, r5
 8004920:	42b8      	cmp	r0, r7
 8004922:	f200 8142 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004926:	6833      	ldr	r3, [r6, #0]
 8004928:	039a      	lsls	r2, r3, #14
 800492a:	d5f6      	bpl.n	800491a <HAL_RCC_OscConfig+0x5e>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	079d      	lsls	r5, r3, #30
 8004930:	f100 8085 	bmi.w	8004a3e <HAL_RCC_OscConfig+0x182>
 8004934:	06d9      	lsls	r1, r3, #27
 8004936:	d52f      	bpl.n	8004998 <HAL_RCC_OscConfig+0xdc>
 8004938:	4a84      	ldr	r2, [pc, #528]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 800493a:	6913      	ldr	r3, [r2, #16]
 800493c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800493e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004942:	2b08      	cmp	r3, #8
 8004944:	f000 80da 	beq.w	8004afc <HAL_RCC_OscConfig+0x240>
 8004948:	2b18      	cmp	r3, #24
 800494a:	f000 80d2 	beq.w	8004af2 <HAL_RCC_OscConfig+0x236>
 800494e:	69e3      	ldr	r3, [r4, #28]
 8004950:	4d7e      	ldr	r5, [pc, #504]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8165 	beq.w	8004c22 <HAL_RCC_OscConfig+0x366>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7ff ff54 	bl	800480c <HAL_GetTick>
 8004964:	4606      	mov	r6, r0
 8004966:	e005      	b.n	8004974 <HAL_RCC_OscConfig+0xb8>
 8004968:	f7ff ff50 	bl	800480c <HAL_GetTick>
 800496c:	1b80      	subs	r0, r0, r6
 800496e:	2802      	cmp	r0, #2
 8004970:	f200 811b 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	05db      	lsls	r3, r3, #23
 8004978:	d5f6      	bpl.n	8004968 <HAL_RCC_OscConfig+0xac>
 800497a:	f7ff ff4d 	bl	8004818 <HAL_GetREVID>
 800497e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004982:	4298      	cmp	r0, r3
 8004984:	f200 820b 	bhi.w	8004d9e <HAL_RCC_OscConfig+0x4e2>
 8004988:	686b      	ldr	r3, [r5, #4]
 800498a:	6a22      	ldr	r2, [r4, #32]
 800498c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004990:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004994:	606b      	str	r3, [r5, #4]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	071d      	lsls	r5, r3, #28
 800499a:	d516      	bpl.n	80049ca <HAL_RCC_OscConfig+0x10e>
 800499c:	6963      	ldr	r3, [r4, #20]
 800499e:	4d6b      	ldr	r5, [pc, #428]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 811c 	beq.w	8004bde <HAL_RCC_OscConfig+0x322>
 80049a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	676b      	str	r3, [r5, #116]	; 0x74
 80049ae:	f7ff ff2d 	bl	800480c <HAL_GetTick>
 80049b2:	4606      	mov	r6, r0
 80049b4:	e005      	b.n	80049c2 <HAL_RCC_OscConfig+0x106>
 80049b6:	f7ff ff29 	bl	800480c <HAL_GetTick>
 80049ba:	1b80      	subs	r0, r0, r6
 80049bc:	2802      	cmp	r0, #2
 80049be:	f200 80f4 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 80049c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80049c4:	0798      	lsls	r0, r3, #30
 80049c6:	d5f6      	bpl.n	80049b6 <HAL_RCC_OscConfig+0xfa>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	069a      	lsls	r2, r3, #26
 80049cc:	d516      	bpl.n	80049fc <HAL_RCC_OscConfig+0x140>
 80049ce:	69a3      	ldr	r3, [r4, #24]
 80049d0:	4d5e      	ldr	r5, [pc, #376]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8114 	beq.w	8004c00 <HAL_RCC_OscConfig+0x344>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7ff ff14 	bl	800480c <HAL_GetTick>
 80049e4:	4606      	mov	r6, r0
 80049e6:	e005      	b.n	80049f4 <HAL_RCC_OscConfig+0x138>
 80049e8:	f7ff ff10 	bl	800480c <HAL_GetTick>
 80049ec:	1b80      	subs	r0, r0, r6
 80049ee:	2802      	cmp	r0, #2
 80049f0:	f200 80db 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	049f      	lsls	r7, r3, #18
 80049f8:	d5f6      	bpl.n	80049e8 <HAL_RCC_OscConfig+0x12c>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	0759      	lsls	r1, r3, #29
 80049fe:	f100 809b 	bmi.w	8004b38 <HAL_RCC_OscConfig+0x27c>
 8004a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a04:	b1cb      	cbz	r3, 8004a3a <HAL_RCC_OscConfig+0x17e>
 8004a06:	4d51      	ldr	r5, [pc, #324]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004a08:	692a      	ldr	r2, [r5, #16]
 8004a0a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004a0e:	2a18      	cmp	r2, #24
 8004a10:	d06d      	beq.n	8004aee <HAL_RCC_OscConfig+0x232>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f000 8139 	beq.w	8004c92 <HAL_RCC_OscConfig+0x3d6>
 8004a20:	f7ff fef4 	bl	800480c <HAL_GetTick>
 8004a24:	4604      	mov	r4, r0
 8004a26:	e005      	b.n	8004a34 <HAL_RCC_OscConfig+0x178>
 8004a28:	f7ff fef0 	bl	800480c <HAL_GetTick>
 8004a2c:	1b00      	subs	r0, r0, r4
 8004a2e:	2802      	cmp	r0, #2
 8004a30:	f200 80bb 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	019b      	lsls	r3, r3, #6
 8004a38:	d4f6      	bmi.n	8004a28 <HAL_RCC_OscConfig+0x16c>
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3e:	4a43      	ldr	r2, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004a40:	6913      	ldr	r3, [r2, #16]
 8004a42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a44:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004a48:	d129      	bne.n	8004a9e <HAL_RCC_OscConfig+0x1e2>
 8004a4a:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004a4c:	68e2      	ldr	r2, [r4, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0759      	lsls	r1, r3, #29
 8004a52:	d501      	bpl.n	8004a58 <HAL_RCC_OscConfig+0x19c>
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	d04a      	beq.n	8004aee <HAL_RCC_OscConfig+0x232>
 8004a58:	4d3c      	ldr	r5, [pc, #240]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	f023 0319 	bic.w	r3, r3, #25
 8004a60:	4313      	orrs	r3, r2
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7ff fed2 	bl	800480c <HAL_GetTick>
 8004a68:	4606      	mov	r6, r0
 8004a6a:	e005      	b.n	8004a78 <HAL_RCC_OscConfig+0x1bc>
 8004a6c:	f7ff fece 	bl	800480c <HAL_GetTick>
 8004a70:	1b80      	subs	r0, r0, r6
 8004a72:	2802      	cmp	r0, #2
 8004a74:	f200 8099 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	075b      	lsls	r3, r3, #29
 8004a7c:	d5f6      	bpl.n	8004a6c <HAL_RCC_OscConfig+0x1b0>
 8004a7e:	f7ff fecb 	bl	8004818 <HAL_GetREVID>
 8004a82:	f241 0303 	movw	r3, #4099	; 0x1003
 8004a86:	6922      	ldr	r2, [r4, #16]
 8004a88:	4298      	cmp	r0, r3
 8004a8a:	686b      	ldr	r3, [r5, #4]
 8004a8c:	f200 80f0 	bhi.w	8004c70 <HAL_RCC_OscConfig+0x3b4>
 8004a90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a94:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004a98:	606b      	str	r3, [r5, #4]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	e74a      	b.n	8004934 <HAL_RCC_OscConfig+0x78>
 8004a9e:	2b18      	cmp	r3, #24
 8004aa0:	f000 80e2 	beq.w	8004c68 <HAL_RCC_OscConfig+0x3ac>
 8004aa4:	4d29      	ldr	r5, [pc, #164]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004aa6:	68e2      	ldr	r2, [r4, #12]
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	f000 80cb 	beq.w	8004c46 <HAL_RCC_OscConfig+0x38a>
 8004ab0:	f023 0319 	bic.w	r3, r3, #25
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	f7ff fea8 	bl	800480c <HAL_GetTick>
 8004abc:	4606      	mov	r6, r0
 8004abe:	e004      	b.n	8004aca <HAL_RCC_OscConfig+0x20e>
 8004ac0:	f7ff fea4 	bl	800480c <HAL_GetTick>
 8004ac4:	1b80      	subs	r0, r0, r6
 8004ac6:	2802      	cmp	r0, #2
 8004ac8:	d86f      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	075f      	lsls	r7, r3, #29
 8004ace:	d5f7      	bpl.n	8004ac0 <HAL_RCC_OscConfig+0x204>
 8004ad0:	e7d5      	b.n	8004a7e <HAL_RCC_OscConfig+0x1c2>
 8004ad2:	f001 0103 	and.w	r1, r1, #3
 8004ad6:	2902      	cmp	r1, #2
 8004ad8:	f47f af03 	bne.w	80048e2 <HAL_RCC_OscConfig+0x26>
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	0391      	lsls	r1, r2, #14
 8004ae2:	f57f af24 	bpl.w	800492e <HAL_RCC_OscConfig+0x72>
 8004ae6:	6862      	ldr	r2, [r4, #4]
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	f47f af20 	bne.w	800492e <HAL_RCC_OscConfig+0x72>
 8004aee:	2001      	movs	r0, #1
 8004af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af2:	f002 0203 	and.w	r2, r2, #3
 8004af6:	2a01      	cmp	r2, #1
 8004af8:	f47f af29 	bne.w	800494e <HAL_RCC_OscConfig+0x92>
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	05da      	lsls	r2, r3, #23
 8004b02:	d502      	bpl.n	8004b0a <HAL_RCC_OscConfig+0x24e>
 8004b04:	69e3      	ldr	r3, [r4, #28]
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d1f1      	bne.n	8004aee <HAL_RCC_OscConfig+0x232>
 8004b0a:	f7ff fe85 	bl	8004818 <HAL_GetREVID>
 8004b0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004b14:	4298      	cmp	r0, r3
 8004b16:	6a21      	ldr	r1, [r4, #32]
 8004b18:	f200 80b3 	bhi.w	8004c82 <HAL_RCC_OscConfig+0x3c6>
 8004b1c:	6853      	ldr	r3, [r2, #4]
 8004b1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b22:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8004b26:	6053      	str	r3, [r2, #4]
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	e735      	b.n	8004998 <HAL_RCC_OscConfig+0xdc>
 8004b2c:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <HAL_RCC_OscConfig+0x290>)
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e6e9      	b.n	800490c <HAL_RCC_OscConfig+0x50>
 8004b38:	4d05      	ldr	r5, [pc, #20]	; (8004b50 <HAL_RCC_OscConfig+0x294>)
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	f7ff fe63 	bl	800480c <HAL_GetTick>
 8004b46:	4606      	mov	r6, r0
 8004b48:	e009      	b.n	8004b5e <HAL_RCC_OscConfig+0x2a2>
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	58024800 	.word	0x58024800
 8004b54:	f7ff fe5a 	bl	800480c <HAL_GetTick>
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	2864      	cmp	r0, #100	; 0x64
 8004b5c:	d825      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	05da      	lsls	r2, r3, #23
 8004b62:	d5f7      	bpl.n	8004b54 <HAL_RCC_OscConfig+0x298>
 8004b64:	68a3      	ldr	r3, [r4, #8]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	f000 8122 	beq.w	8004db0 <HAL_RCC_OscConfig+0x4f4>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80fd 	beq.w	8004d6c <HAL_RCC_OscConfig+0x4b0>
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	4b95      	ldr	r3, [pc, #596]	; (8004dcc <HAL_RCC_OscConfig+0x510>)
 8004b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b78:	f000 8120 	beq.w	8004dbc <HAL_RCC_OscConfig+0x500>
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	671a      	str	r2, [r3, #112]	; 0x70
 8004b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b84:	f022 0204 	bic.w	r2, r2, #4
 8004b88:	671a      	str	r2, [r3, #112]	; 0x70
 8004b8a:	f7ff fe3f 	bl	800480c <HAL_GetTick>
 8004b8e:	4e8f      	ldr	r6, [pc, #572]	; (8004dcc <HAL_RCC_OscConfig+0x510>)
 8004b90:	f241 3788 	movw	r7, #5000	; 0x1388
 8004b94:	4605      	mov	r5, r0
 8004b96:	e004      	b.n	8004ba2 <HAL_RCC_OscConfig+0x2e6>
 8004b98:	f7ff fe38 	bl	800480c <HAL_GetTick>
 8004b9c:	1b40      	subs	r0, r0, r5
 8004b9e:	42b8      	cmp	r0, r7
 8004ba0:	d803      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004ba2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004ba4:	079b      	lsls	r3, r3, #30
 8004ba6:	d5f7      	bpl.n	8004b98 <HAL_RCC_OscConfig+0x2dc>
 8004ba8:	e72b      	b.n	8004a02 <HAL_RCC_OscConfig+0x146>
 8004baa:	2003      	movs	r0, #3
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bae:	4d87      	ldr	r5, [pc, #540]	; (8004dcc <HAL_RCC_OscConfig+0x510>)
 8004bb0:	f241 3788 	movw	r7, #5000	; 0x1388
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bba:	602b      	str	r3, [r5, #0]
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	f7ff fe22 	bl	800480c <HAL_GetTick>
 8004bc8:	4606      	mov	r6, r0
 8004bca:	e004      	b.n	8004bd6 <HAL_RCC_OscConfig+0x31a>
 8004bcc:	f7ff fe1e 	bl	800480c <HAL_GetTick>
 8004bd0:	1b80      	subs	r0, r0, r6
 8004bd2:	42b8      	cmp	r0, r7
 8004bd4:	d8e9      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	039b      	lsls	r3, r3, #14
 8004bda:	d4f7      	bmi.n	8004bcc <HAL_RCC_OscConfig+0x310>
 8004bdc:	e6a6      	b.n	800492c <HAL_RCC_OscConfig+0x70>
 8004bde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	676b      	str	r3, [r5, #116]	; 0x74
 8004be6:	f7ff fe11 	bl	800480c <HAL_GetTick>
 8004bea:	4606      	mov	r6, r0
 8004bec:	e004      	b.n	8004bf8 <HAL_RCC_OscConfig+0x33c>
 8004bee:	f7ff fe0d 	bl	800480c <HAL_GetTick>
 8004bf2:	1b80      	subs	r0, r0, r6
 8004bf4:	2802      	cmp	r0, #2
 8004bf6:	d8d8      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004bf8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004bfa:	0799      	lsls	r1, r3, #30
 8004bfc:	d4f7      	bmi.n	8004bee <HAL_RCC_OscConfig+0x332>
 8004bfe:	e6e3      	b.n	80049c8 <HAL_RCC_OscConfig+0x10c>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7ff fe00 	bl	800480c <HAL_GetTick>
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	e004      	b.n	8004c1a <HAL_RCC_OscConfig+0x35e>
 8004c10:	f7ff fdfc 	bl	800480c <HAL_GetTick>
 8004c14:	1b80      	subs	r0, r0, r6
 8004c16:	2802      	cmp	r0, #2
 8004c18:	d8c7      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004c1a:	682b      	ldr	r3, [r5, #0]
 8004c1c:	0498      	lsls	r0, r3, #18
 8004c1e:	d4f7      	bmi.n	8004c10 <HAL_RCC_OscConfig+0x354>
 8004c20:	e6eb      	b.n	80049fa <HAL_RCC_OscConfig+0x13e>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	f7ff fdef 	bl	800480c <HAL_GetTick>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	e004      	b.n	8004c3c <HAL_RCC_OscConfig+0x380>
 8004c32:	f7ff fdeb 	bl	800480c <HAL_GetTick>
 8004c36:	1b80      	subs	r0, r0, r6
 8004c38:	2802      	cmp	r0, #2
 8004c3a:	d8b6      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	05df      	lsls	r7, r3, #23
 8004c40:	d4f7      	bmi.n	8004c32 <HAL_RCC_OscConfig+0x376>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	e6a8      	b.n	8004998 <HAL_RCC_OscConfig+0xdc>
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7ff fdde 	bl	800480c <HAL_GetTick>
 8004c50:	4606      	mov	r6, r0
 8004c52:	e004      	b.n	8004c5e <HAL_RCC_OscConfig+0x3a2>
 8004c54:	f7ff fdda 	bl	800480c <HAL_GetTick>
 8004c58:	1b80      	subs	r0, r0, r6
 8004c5a:	2802      	cmp	r0, #2
 8004c5c:	d8a5      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	0758      	lsls	r0, r3, #29
 8004c62:	d4f7      	bmi.n	8004c54 <HAL_RCC_OscConfig+0x398>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	e665      	b.n	8004934 <HAL_RCC_OscConfig+0x78>
 8004c68:	0790      	lsls	r0, r2, #30
 8004c6a:	f47f af1b 	bne.w	8004aa4 <HAL_RCC_OscConfig+0x1e8>
 8004c6e:	e6ec      	b.n	8004a4a <HAL_RCC_OscConfig+0x18e>
 8004c70:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c78:	606b      	str	r3, [r5, #4]
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	e65a      	b.n	8004934 <HAL_RCC_OscConfig+0x78>
 8004c7e:	2001      	movs	r0, #1
 8004c80:	4770      	bx	lr
 8004c82:	68d3      	ldr	r3, [r2, #12]
 8004c84:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004c88:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c8c:	60d3      	str	r3, [r2, #12]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	e682      	b.n	8004998 <HAL_RCC_OscConfig+0xdc>
 8004c92:	f7ff fdbb 	bl	800480c <HAL_GetTick>
 8004c96:	4606      	mov	r6, r0
 8004c98:	e004      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3e8>
 8004c9a:	f7ff fdb7 	bl	800480c <HAL_GetTick>
 8004c9e:	1b80      	subs	r0, r0, r6
 8004ca0:	2802      	cmp	r0, #2
 8004ca2:	d882      	bhi.n	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	0199      	lsls	r1, r3, #6
 8004ca8:	d4f7      	bmi.n	8004c9a <HAL_RCC_OscConfig+0x3de>
 8004caa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004cac:	4b48      	ldr	r3, [pc, #288]	; (8004dd0 <HAL_RCC_OscConfig+0x514>)
 8004cae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	4948      	ldr	r1, [pc, #288]	; (8004dd4 <HAL_RCC_OscConfig+0x518>)
 8004cb4:	4e45      	ldr	r6, [pc, #276]	; (8004dcc <HAL_RCC_OscConfig+0x510>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004cbe:	62ab      	str	r3, [r5, #40]	; 0x28
 8004cc0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	3a01      	subs	r2, #1
 8004cc8:	025b      	lsls	r3, r3, #9
 8004cca:	0412      	lsls	r2, r2, #16
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ce0:	3a01      	subs	r2, #1
 8004ce2:	0612      	lsls	r2, r2, #24
 8004ce4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	632b      	str	r3, [r5, #48]	; 0x30
 8004cec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004cf4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004cf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004cf8:	4011      	ands	r1, r2
 8004cfa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004cfe:	6369      	str	r1, [r5, #52]	; 0x34
 8004d00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d04:	f023 030c 	bic.w	r3, r3, #12
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004d10:	f023 0302 	bic.w	r3, r3, #2
 8004d14:	4313      	orrs	r3, r2
 8004d16:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d26:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	f7ff fd64 	bl	800480c <HAL_GetTick>
 8004d44:	4604      	mov	r4, r0
 8004d46:	e005      	b.n	8004d54 <HAL_RCC_OscConfig+0x498>
 8004d48:	f7ff fd60 	bl	800480c <HAL_GetTick>
 8004d4c:	1b00      	subs	r0, r0, r4
 8004d4e:	2802      	cmp	r0, #2
 8004d50:	f63f af2b 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004d54:	6833      	ldr	r3, [r6, #0]
 8004d56:	019a      	lsls	r2, r3, #6
 8004d58:	d5f6      	bpl.n	8004d48 <HAL_RCC_OscConfig+0x48c>
 8004d5a:	e66e      	b.n	8004a3a <HAL_RCC_OscConfig+0x17e>
 8004d5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e5cf      	b.n	800490c <HAL_RCC_OscConfig+0x50>
 8004d6c:	4d17      	ldr	r5, [pc, #92]	; (8004dcc <HAL_RCC_OscConfig+0x510>)
 8004d6e:	f241 3788 	movw	r7, #5000	; 0x1388
 8004d72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	672b      	str	r3, [r5, #112]	; 0x70
 8004d7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d7c:	f023 0304 	bic.w	r3, r3, #4
 8004d80:	672b      	str	r3, [r5, #112]	; 0x70
 8004d82:	f7ff fd43 	bl	800480c <HAL_GetTick>
 8004d86:	4606      	mov	r6, r0
 8004d88:	e005      	b.n	8004d96 <HAL_RCC_OscConfig+0x4da>
 8004d8a:	f7ff fd3f 	bl	800480c <HAL_GetTick>
 8004d8e:	1b80      	subs	r0, r0, r6
 8004d90:	42b8      	cmp	r0, r7
 8004d92:	f63f af0a 	bhi.w	8004baa <HAL_RCC_OscConfig+0x2ee>
 8004d96:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d98:	0798      	lsls	r0, r3, #30
 8004d9a:	d4f6      	bmi.n	8004d8a <HAL_RCC_OscConfig+0x4ce>
 8004d9c:	e631      	b.n	8004a02 <HAL_RCC_OscConfig+0x146>
 8004d9e:	68eb      	ldr	r3, [r5, #12]
 8004da0:	6a22      	ldr	r2, [r4, #32]
 8004da2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004da6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004daa:	60eb      	str	r3, [r5, #12]
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	e5f3      	b.n	8004998 <HAL_RCC_OscConfig+0xdc>
 8004db0:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <HAL_RCC_OscConfig+0x510>)
 8004db2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e6e6      	b.n	8004b8a <HAL_RCC_OscConfig+0x2ce>
 8004dbc:	f042 0204 	orr.w	r2, r2, #4
 8004dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8004dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	671a      	str	r2, [r3, #112]	; 0x70
 8004dca:	e6de      	b.n	8004b8a <HAL_RCC_OscConfig+0x2ce>
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	fffffc0c 	.word	0xfffffc0c
 8004dd4:	ffff0007 	.word	0xffff0007

08004dd8 <HAL_RCC_GetSysClockFreq>:
 8004dd8:	4a47      	ldr	r2, [pc, #284]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x120>)
 8004dda:	6913      	ldr	r3, [r2, #16]
 8004ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d004      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x16>
 8004de4:	2b18      	cmp	r3, #24
 8004de6:	d00d      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x2c>
 8004de8:	b11b      	cbz	r3, 8004df2 <HAL_RCC_GetSysClockFreq+0x1a>
 8004dea:	4844      	ldr	r0, [pc, #272]	; (8004efc <HAL_RCC_GetSysClockFreq+0x124>)
 8004dec:	4770      	bx	lr
 8004dee:	4844      	ldr	r0, [pc, #272]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x128>)
 8004df0:	4770      	bx	lr
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	0699      	lsls	r1, r3, #26
 8004df6:	d54a      	bpl.n	8004e8e <HAL_RCC_GetSysClockFreq+0xb6>
 8004df8:	6813      	ldr	r3, [r2, #0]
 8004dfa:	4842      	ldr	r0, [pc, #264]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dfc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004e00:	40d8      	lsrs	r0, r3
 8004e02:	4770      	bx	lr
 8004e04:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004e06:	b430      	push	{r4, r5}
 8004e08:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004e0a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004e0c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004e10:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004e12:	f3c4 1005 	ubfx	r0, r4, #4, #6
 8004e16:	d038      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0xb2>
 8004e18:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004e1c:	f005 0501 	and.w	r5, r5, #1
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	fb05 f101 	mul.w	r1, r5, r1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	ee07 1a90 	vmov	s15, r1
 8004e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e32:	d002      	beq.n	8004e3a <HAL_RCC_GetSysClockFreq+0x62>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d02c      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0xba>
 8004e38:	b393      	cbz	r3, 8004ea0 <HAL_RCC_GetSysClockFreq+0xc8>
 8004e3a:	ee07 0a90 	vmov	s15, r0
 8004e3e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x130>
 8004e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004e48:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004e4c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x134>
 8004e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e54:	ee06 3a90 	vmov	s13, r3
 8004e58:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004e5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004e60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004e64:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004e68:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004e6c:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x120>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004e74:	3301      	adds	r3, #1
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e86:	ee17 0a90 	vmov	r0, s15
 8004e8a:	bc30      	pop	{r4, r5}
 8004e8c:	4770      	bx	lr
 8004e8e:	481d      	ldr	r0, [pc, #116]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e90:	4770      	bx	lr
 8004e92:	ee07 0a90 	vmov	s15, r0
 8004e96:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004f10 <HAL_RCC_GetSysClockFreq+0x138>
 8004e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9e:	e7d2      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x6e>
 8004ea0:	6813      	ldr	r3, [r2, #0]
 8004ea2:	069b      	lsls	r3, r3, #26
 8004ea4:	d520      	bpl.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x110>
 8004ea6:	6814      	ldr	r4, [r2, #0]
 8004ea8:	ee07 0a90 	vmov	s15, r0
 8004eac:	4915      	ldr	r1, [pc, #84]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004eae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004eb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004eb4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8004eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ebc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x134>
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	40e1      	lsrs	r1, r4
 8004ec6:	ee06 3a90 	vmov	s13, r3
 8004eca:	ee05 1a90 	vmov	s11, r1
 8004ece:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004ed2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004ed6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004eda:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004ede:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004ee2:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004ee6:	e7c1      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x94>
 8004ee8:	ee07 0a90 	vmov	s15, r0
 8004eec:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004f14 <HAL_RCC_GetSysClockFreq+0x13c>
 8004ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ef4:	e7a7      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x6e>
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	003d0900 	.word	0x003d0900
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	03d09000 	.word	0x03d09000
 8004f08:	4a742400 	.word	0x4a742400
 8004f0c:	39000000 	.word	0x39000000
 8004f10:	4b742400 	.word	0x4b742400
 8004f14:	4c742400 	.word	0x4c742400

08004f18 <HAL_RCC_ClockConfig>:
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f000 8102 	beq.w	8005122 <HAL_RCC_ClockConfig+0x20a>
 8004f1e:	4a87      	ldr	r2, [pc, #540]	; (800513c <HAL_RCC_ClockConfig+0x224>)
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	428b      	cmp	r3, r1
 8004f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	460d      	mov	r5, r1
 8004f30:	d20c      	bcs.n	8004f4c <HAL_RCC_ClockConfig+0x34>
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	428b      	cmp	r3, r1
 8004f44:	d002      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x34>
 8004f46:	2001      	movs	r0, #1
 8004f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	075f      	lsls	r7, r3, #29
 8004f50:	d50b      	bpl.n	8004f6a <HAL_RCC_ClockConfig+0x52>
 8004f52:	497b      	ldr	r1, [pc, #492]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8004f54:	6920      	ldr	r0, [r4, #16]
 8004f56:	698a      	ldr	r2, [r1, #24]
 8004f58:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f5c:	4290      	cmp	r0, r2
 8004f5e:	d904      	bls.n	8004f6a <HAL_RCC_ClockConfig+0x52>
 8004f60:	698a      	ldr	r2, [r1, #24]
 8004f62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f66:	4302      	orrs	r2, r0
 8004f68:	618a      	str	r2, [r1, #24]
 8004f6a:	071e      	lsls	r6, r3, #28
 8004f6c:	d50b      	bpl.n	8004f86 <HAL_RCC_ClockConfig+0x6e>
 8004f6e:	4974      	ldr	r1, [pc, #464]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8004f70:	6960      	ldr	r0, [r4, #20]
 8004f72:	69ca      	ldr	r2, [r1, #28]
 8004f74:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f78:	4290      	cmp	r0, r2
 8004f7a:	d904      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x6e>
 8004f7c:	69ca      	ldr	r2, [r1, #28]
 8004f7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f82:	4302      	orrs	r2, r0
 8004f84:	61ca      	str	r2, [r1, #28]
 8004f86:	06d8      	lsls	r0, r3, #27
 8004f88:	d50b      	bpl.n	8004fa2 <HAL_RCC_ClockConfig+0x8a>
 8004f8a:	496d      	ldr	r1, [pc, #436]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8004f8c:	69a0      	ldr	r0, [r4, #24]
 8004f8e:	69ca      	ldr	r2, [r1, #28]
 8004f90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004f94:	4290      	cmp	r0, r2
 8004f96:	d904      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x8a>
 8004f98:	69ca      	ldr	r2, [r1, #28]
 8004f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9e:	4302      	orrs	r2, r0
 8004fa0:	61ca      	str	r2, [r1, #28]
 8004fa2:	0699      	lsls	r1, r3, #26
 8004fa4:	d50b      	bpl.n	8004fbe <HAL_RCC_ClockConfig+0xa6>
 8004fa6:	4966      	ldr	r1, [pc, #408]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8004fa8:	69e0      	ldr	r0, [r4, #28]
 8004faa:	6a0a      	ldr	r2, [r1, #32]
 8004fac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fb0:	4290      	cmp	r0, r2
 8004fb2:	d904      	bls.n	8004fbe <HAL_RCC_ClockConfig+0xa6>
 8004fb4:	6a0a      	ldr	r2, [r1, #32]
 8004fb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fba:	4302      	orrs	r2, r0
 8004fbc:	620a      	str	r2, [r1, #32]
 8004fbe:	079a      	lsls	r2, r3, #30
 8004fc0:	f140 80a1 	bpl.w	8005106 <HAL_RCC_ClockConfig+0x1ee>
 8004fc4:	485e      	ldr	r0, [pc, #376]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8004fc6:	68e1      	ldr	r1, [r4, #12]
 8004fc8:	6982      	ldr	r2, [r0, #24]
 8004fca:	f002 020f 	and.w	r2, r2, #15
 8004fce:	4291      	cmp	r1, r2
 8004fd0:	d904      	bls.n	8004fdc <HAL_RCC_ClockConfig+0xc4>
 8004fd2:	6982      	ldr	r2, [r0, #24]
 8004fd4:	f022 020f 	bic.w	r2, r2, #15
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	6182      	str	r2, [r0, #24]
 8004fdc:	07d8      	lsls	r0, r3, #31
 8004fde:	d530      	bpl.n	8005042 <HAL_RCC_ClockConfig+0x12a>
 8004fe0:	4a57      	ldr	r2, [pc, #348]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8004fe2:	68a1      	ldr	r1, [r4, #8]
 8004fe4:	6993      	ldr	r3, [r2, #24]
 8004fe6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fea:	430b      	orrs	r3, r1
 8004fec:	6193      	str	r3, [r2, #24]
 8004fee:	6861      	ldr	r1, [r4, #4]
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	2902      	cmp	r1, #2
 8004ff4:	f000 8097 	beq.w	8005126 <HAL_RCC_ClockConfig+0x20e>
 8004ff8:	2903      	cmp	r1, #3
 8004ffa:	f000 808e 	beq.w	800511a <HAL_RCC_ClockConfig+0x202>
 8004ffe:	2901      	cmp	r1, #1
 8005000:	f000 8097 	beq.w	8005132 <HAL_RCC_ClockConfig+0x21a>
 8005004:	0758      	lsls	r0, r3, #29
 8005006:	d59e      	bpl.n	8004f46 <HAL_RCC_ClockConfig+0x2e>
 8005008:	4e4d      	ldr	r6, [pc, #308]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 800500a:	f241 3888 	movw	r8, #5000	; 0x1388
 800500e:	6933      	ldr	r3, [r6, #16]
 8005010:	f023 0307 	bic.w	r3, r3, #7
 8005014:	430b      	orrs	r3, r1
 8005016:	6133      	str	r3, [r6, #16]
 8005018:	f7ff fbf8 	bl	800480c <HAL_GetTick>
 800501c:	4607      	mov	r7, r0
 800501e:	e005      	b.n	800502c <HAL_RCC_ClockConfig+0x114>
 8005020:	f7ff fbf4 	bl	800480c <HAL_GetTick>
 8005024:	1bc0      	subs	r0, r0, r7
 8005026:	4540      	cmp	r0, r8
 8005028:	f200 8081 	bhi.w	800512e <HAL_RCC_ClockConfig+0x216>
 800502c:	6933      	ldr	r3, [r6, #16]
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005034:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005038:	d1f2      	bne.n	8005020 <HAL_RCC_ClockConfig+0x108>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	0799      	lsls	r1, r3, #30
 800503e:	d506      	bpl.n	800504e <HAL_RCC_ClockConfig+0x136>
 8005040:	68e1      	ldr	r1, [r4, #12]
 8005042:	483f      	ldr	r0, [pc, #252]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8005044:	6982      	ldr	r2, [r0, #24]
 8005046:	f002 020f 	and.w	r2, r2, #15
 800504a:	428a      	cmp	r2, r1
 800504c:	d85f      	bhi.n	800510e <HAL_RCC_ClockConfig+0x1f6>
 800504e:	493b      	ldr	r1, [pc, #236]	; (800513c <HAL_RCC_ClockConfig+0x224>)
 8005050:	680a      	ldr	r2, [r1, #0]
 8005052:	f002 020f 	and.w	r2, r2, #15
 8005056:	42aa      	cmp	r2, r5
 8005058:	d90a      	bls.n	8005070 <HAL_RCC_ClockConfig+0x158>
 800505a:	680a      	ldr	r2, [r1, #0]
 800505c:	f022 020f 	bic.w	r2, r2, #15
 8005060:	432a      	orrs	r2, r5
 8005062:	600a      	str	r2, [r1, #0]
 8005064:	680a      	ldr	r2, [r1, #0]
 8005066:	f002 020f 	and.w	r2, r2, #15
 800506a:	42aa      	cmp	r2, r5
 800506c:	f47f af6b 	bne.w	8004f46 <HAL_RCC_ClockConfig+0x2e>
 8005070:	075a      	lsls	r2, r3, #29
 8005072:	d50b      	bpl.n	800508c <HAL_RCC_ClockConfig+0x174>
 8005074:	4932      	ldr	r1, [pc, #200]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8005076:	6920      	ldr	r0, [r4, #16]
 8005078:	698a      	ldr	r2, [r1, #24]
 800507a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800507e:	4290      	cmp	r0, r2
 8005080:	d204      	bcs.n	800508c <HAL_RCC_ClockConfig+0x174>
 8005082:	698a      	ldr	r2, [r1, #24]
 8005084:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005088:	4302      	orrs	r2, r0
 800508a:	618a      	str	r2, [r1, #24]
 800508c:	071f      	lsls	r7, r3, #28
 800508e:	d50b      	bpl.n	80050a8 <HAL_RCC_ClockConfig+0x190>
 8005090:	492b      	ldr	r1, [pc, #172]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 8005092:	6960      	ldr	r0, [r4, #20]
 8005094:	69ca      	ldr	r2, [r1, #28]
 8005096:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800509a:	4290      	cmp	r0, r2
 800509c:	d204      	bcs.n	80050a8 <HAL_RCC_ClockConfig+0x190>
 800509e:	69ca      	ldr	r2, [r1, #28]
 80050a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050a4:	4302      	orrs	r2, r0
 80050a6:	61ca      	str	r2, [r1, #28]
 80050a8:	06de      	lsls	r6, r3, #27
 80050aa:	d50b      	bpl.n	80050c4 <HAL_RCC_ClockConfig+0x1ac>
 80050ac:	4924      	ldr	r1, [pc, #144]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 80050ae:	69a0      	ldr	r0, [r4, #24]
 80050b0:	69ca      	ldr	r2, [r1, #28]
 80050b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80050b6:	4290      	cmp	r0, r2
 80050b8:	d204      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x1ac>
 80050ba:	69ca      	ldr	r2, [r1, #28]
 80050bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050c0:	4302      	orrs	r2, r0
 80050c2:	61ca      	str	r2, [r1, #28]
 80050c4:	069d      	lsls	r5, r3, #26
 80050c6:	d50b      	bpl.n	80050e0 <HAL_RCC_ClockConfig+0x1c8>
 80050c8:	4a1d      	ldr	r2, [pc, #116]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 80050ca:	69e1      	ldr	r1, [r4, #28]
 80050cc:	6a13      	ldr	r3, [r2, #32]
 80050ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050d2:	4299      	cmp	r1, r3
 80050d4:	d204      	bcs.n	80050e0 <HAL_RCC_ClockConfig+0x1c8>
 80050d6:	6a13      	ldr	r3, [r2, #32]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	430b      	orrs	r3, r1
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	f7ff fe7a 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <HAL_RCC_ClockConfig+0x228>)
 80050e6:	4603      	mov	r3, r0
 80050e8:	4816      	ldr	r0, [pc, #88]	; (8005144 <HAL_RCC_ClockConfig+0x22c>)
 80050ea:	6992      	ldr	r2, [r2, #24]
 80050ec:	4916      	ldr	r1, [pc, #88]	; (8005148 <HAL_RCC_ClockConfig+0x230>)
 80050ee:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80050f2:	5c82      	ldrb	r2, [r0, r2]
 80050f4:	200e      	movs	r0, #14
 80050f6:	f002 021f 	and.w	r2, r2, #31
 80050fa:	40d3      	lsrs	r3, r2
 80050fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005100:	600b      	str	r3, [r1, #0]
 8005102:	f7fe bfa7 	b.w	8004054 <HAL_InitTick>
 8005106:	07da      	lsls	r2, r3, #31
 8005108:	f53f af6a 	bmi.w	8004fe0 <HAL_RCC_ClockConfig+0xc8>
 800510c:	e79f      	b.n	800504e <HAL_RCC_ClockConfig+0x136>
 800510e:	6982      	ldr	r2, [r0, #24]
 8005110:	f022 020f 	bic.w	r2, r2, #15
 8005114:	4311      	orrs	r1, r2
 8005116:	6181      	str	r1, [r0, #24]
 8005118:	e799      	b.n	800504e <HAL_RCC_ClockConfig+0x136>
 800511a:	019f      	lsls	r7, r3, #6
 800511c:	f53f af74 	bmi.w	8005008 <HAL_RCC_ClockConfig+0xf0>
 8005120:	e711      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2e>
 8005122:	2001      	movs	r0, #1
 8005124:	4770      	bx	lr
 8005126:	039b      	lsls	r3, r3, #14
 8005128:	f53f af6e 	bmi.w	8005008 <HAL_RCC_ClockConfig+0xf0>
 800512c:	e70b      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2e>
 800512e:	2003      	movs	r0, #3
 8005130:	e70a      	b.n	8004f48 <HAL_RCC_ClockConfig+0x30>
 8005132:	05de      	lsls	r6, r3, #23
 8005134:	f53f af68 	bmi.w	8005008 <HAL_RCC_ClockConfig+0xf0>
 8005138:	e705      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2e>
 800513a:	bf00      	nop
 800513c:	52002000 	.word	0x52002000
 8005140:	58024400 	.word	0x58024400
 8005144:	08008dec 	.word	0x08008dec
 8005148:	20000000 	.word	0x20000000

0800514c <RCCEx_PLL2_Config>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	4c3a      	ldr	r4, [pc, #232]	; (8005238 <RCCEx_PLL2_Config+0xec>)
 8005150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b03      	cmp	r3, #3
 8005158:	d067      	beq.n	800522a <RCCEx_PLL2_Config+0xde>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	f7ff fb51 	bl	800480c <HAL_GetTick>
 800516a:	4605      	mov	r5, r0
 800516c:	e004      	b.n	8005178 <RCCEx_PLL2_Config+0x2c>
 800516e:	f7ff fb4d 	bl	800480c <HAL_GetTick>
 8005172:	1b43      	subs	r3, r0, r5
 8005174:	2b02      	cmp	r3, #2
 8005176:	d856      	bhi.n	8005226 <RCCEx_PLL2_Config+0xda>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	011a      	lsls	r2, r3, #4
 800517c:	d4f7      	bmi.n	800516e <RCCEx_PLL2_Config+0x22>
 800517e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005180:	6832      	ldr	r2, [r6, #0]
 8005182:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005186:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800518a:	62a3      	str	r3, [r4, #40]	; 0x28
 800518c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005190:	3b01      	subs	r3, #1
 8005192:	3a01      	subs	r2, #1
 8005194:	025b      	lsls	r3, r3, #9
 8005196:	0412      	lsls	r2, r2, #16
 8005198:	b29b      	uxth	r3, r3
 800519a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800519e:	4313      	orrs	r3, r2
 80051a0:	6872      	ldr	r2, [r6, #4]
 80051a2:	3a01      	subs	r2, #1
 80051a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a8:	4313      	orrs	r3, r2
 80051aa:	6932      	ldr	r2, [r6, #16]
 80051ac:	3a01      	subs	r2, #1
 80051ae:	0612      	lsls	r2, r2, #24
 80051b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80051b4:	4313      	orrs	r3, r2
 80051b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80051b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051ba:	6972      	ldr	r2, [r6, #20]
 80051bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051c0:	4313      	orrs	r3, r2
 80051c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051c6:	69b3      	ldr	r3, [r6, #24]
 80051c8:	f022 0220 	bic.w	r2, r2, #32
 80051cc:	431a      	orrs	r2, r3
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <RCCEx_PLL2_Config+0xf0>)
 80051d0:	62e2      	str	r2, [r4, #44]	; 0x2c
 80051d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051d4:	f022 0210 	bic.w	r2, r2, #16
 80051d8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80051da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051dc:	69f2      	ldr	r2, [r6, #28]
 80051de:	400b      	ands	r3, r1
 80051e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80051e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80051e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051e8:	f043 0310 	orr.w	r3, r3, #16
 80051ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051f0:	b1ef      	cbz	r7, 800522e <RCCEx_PLL2_Config+0xe2>
 80051f2:	2f01      	cmp	r7, #1
 80051f4:	bf0c      	ite	eq
 80051f6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80051fa:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80051fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <RCCEx_PLL2_Config+0xec>)
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	f7ff faff 	bl	800480c <HAL_GetTick>
 800520e:	4605      	mov	r5, r0
 8005210:	e004      	b.n	800521c <RCCEx_PLL2_Config+0xd0>
 8005212:	f7ff fafb 	bl	800480c <HAL_GetTick>
 8005216:	1b40      	subs	r0, r0, r5
 8005218:	2802      	cmp	r0, #2
 800521a:	d804      	bhi.n	8005226 <RCCEx_PLL2_Config+0xda>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	d5f7      	bpl.n	8005212 <RCCEx_PLL2_Config+0xc6>
 8005222:	2000      	movs	r0, #0
 8005224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005226:	2003      	movs	r0, #3
 8005228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522a:	2001      	movs	r0, #1
 800522c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005232:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005234:	e7e4      	b.n	8005200 <RCCEx_PLL2_Config+0xb4>
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
 800523c:	ffff0007 	.word	0xffff0007

08005240 <RCCEx_PLL3_Config>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	4c3a      	ldr	r4, [pc, #232]	; (800532c <RCCEx_PLL3_Config+0xec>)
 8005244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d067      	beq.n	800531e <RCCEx_PLL3_Config+0xde>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	4606      	mov	r6, r0
 8005252:	460f      	mov	r7, r1
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	f7ff fad7 	bl	800480c <HAL_GetTick>
 800525e:	4605      	mov	r5, r0
 8005260:	e004      	b.n	800526c <RCCEx_PLL3_Config+0x2c>
 8005262:	f7ff fad3 	bl	800480c <HAL_GetTick>
 8005266:	1b43      	subs	r3, r0, r5
 8005268:	2b02      	cmp	r3, #2
 800526a:	d856      	bhi.n	800531a <RCCEx_PLL3_Config+0xda>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	009a      	lsls	r2, r3, #2
 8005270:	d4f7      	bmi.n	8005262 <RCCEx_PLL3_Config+0x22>
 8005272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005274:	6832      	ldr	r2, [r6, #0]
 8005276:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800527a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800527e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005280:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	3a01      	subs	r2, #1
 8005288:	025b      	lsls	r3, r3, #9
 800528a:	0412      	lsls	r2, r2, #16
 800528c:	b29b      	uxth	r3, r3
 800528e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005292:	4313      	orrs	r3, r2
 8005294:	6872      	ldr	r2, [r6, #4]
 8005296:	3a01      	subs	r2, #1
 8005298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529c:	4313      	orrs	r3, r2
 800529e:	6932      	ldr	r2, [r6, #16]
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0612      	lsls	r2, r2, #24
 80052a4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80052a8:	4313      	orrs	r3, r2
 80052aa:	6423      	str	r3, [r4, #64]	; 0x40
 80052ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052ae:	6972      	ldr	r2, [r6, #20]
 80052b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052b4:	4313      	orrs	r3, r2
 80052b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052ba:	69b3      	ldr	r3, [r6, #24]
 80052bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052c0:	431a      	orrs	r2, r3
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <RCCEx_PLL3_Config+0xf0>)
 80052c4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80052c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052cc:	62e2      	str	r2, [r4, #44]	; 0x2c
 80052ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80052d0:	69f2      	ldr	r2, [r6, #28]
 80052d2:	400b      	ands	r3, r1
 80052d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80052d8:	6463      	str	r3, [r4, #68]	; 0x44
 80052da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052e4:	b1ef      	cbz	r7, 8005322 <RCCEx_PLL3_Config+0xe2>
 80052e6:	2f01      	cmp	r7, #1
 80052e8:	bf0c      	ite	eq
 80052ea:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
 80052ee:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80052f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052f4:	4c0d      	ldr	r4, [pc, #52]	; (800532c <RCCEx_PLL3_Config+0xec>)
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	f7ff fa85 	bl	800480c <HAL_GetTick>
 8005302:	4605      	mov	r5, r0
 8005304:	e004      	b.n	8005310 <RCCEx_PLL3_Config+0xd0>
 8005306:	f7ff fa81 	bl	800480c <HAL_GetTick>
 800530a:	1b40      	subs	r0, r0, r5
 800530c:	2802      	cmp	r0, #2
 800530e:	d804      	bhi.n	800531a <RCCEx_PLL3_Config+0xda>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	d5f7      	bpl.n	8005306 <RCCEx_PLL3_Config+0xc6>
 8005316:	2000      	movs	r0, #0
 8005318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800531a:	2003      	movs	r0, #3
 800531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800531e:	2001      	movs	r0, #1
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005326:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005328:	e7e4      	b.n	80052f4 <RCCEx_PLL3_Config+0xb4>
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
 8005330:	ffff0007 	.word	0xffff0007

08005334 <HAL_RCCEx_PeriphCLKConfig>:
 8005334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	6803      	ldr	r3, [r0, #0]
 800533a:	4604      	mov	r4, r0
 800533c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8005340:	d022      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005342:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005344:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005348:	f000 84ce 	beq.w	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800534c:	d811      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800534e:	2a00      	cmp	r2, #0
 8005350:	f000 84f8 	beq.w	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8005354:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005358:	f040 84f1 	bne.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800535c:	2102      	movs	r1, #2
 800535e:	3004      	adds	r0, #4
 8005360:	f7ff fef4 	bl	800514c <RCCEx_PLL2_Config>
 8005364:	4606      	mov	r6, r0
 8005366:	2e00      	cmp	r6, #0
 8005368:	f040 8486 	bne.w	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800536c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	e003      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005372:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005376:	f040 84e2 	bne.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800537a:	48a8      	ldr	r0, [pc, #672]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800537c:	2600      	movs	r6, #0
 800537e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005380:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005384:	430a      	orrs	r2, r1
 8005386:	6502      	str	r2, [r0, #80]	; 0x50
 8005388:	05dd      	lsls	r5, r3, #23
 800538a:	d50a      	bpl.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800538c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800538e:	2a04      	cmp	r2, #4
 8005390:	d806      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005392:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005396:	04a2      	.short	0x04a2
 8005398:	049a0493 	.word	0x049a0493
 800539c:	02df02df 	.word	0x02df02df
 80053a0:	2601      	movs	r6, #1
 80053a2:	4635      	mov	r5, r6
 80053a4:	0598      	lsls	r0, r3, #22
 80053a6:	d51b      	bpl.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80053a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80053aa:	2a80      	cmp	r2, #128	; 0x80
 80053ac:	f000 845b 	beq.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x932>
 80053b0:	f200 80ec 	bhi.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x258>
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	f000 838b 	beq.w	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 80053ba:	2a40      	cmp	r2, #64	; 0x40
 80053bc:	f040 80ed 	bne.w	800559a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80053c0:	2100      	movs	r1, #0
 80053c2:	1d20      	adds	r0, r4, #4
 80053c4:	f7ff fec2 	bl	800514c <RCCEx_PLL2_Config>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	4605      	mov	r5, r0
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	f040 8367 	bne.w	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 80053d2:	4992      	ldr	r1, [pc, #584]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80053d8:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80053dc:	4302      	orrs	r2, r0
 80053de:	650a      	str	r2, [r1, #80]	; 0x50
 80053e0:	0559      	lsls	r1, r3, #21
 80053e2:	d51f      	bpl.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80053e4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80053e8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80053ec:	f000 8447 	beq.w	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80053f0:	f200 80d6 	bhi.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	f000 8371 	beq.w	8005adc <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80053fa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80053fe:	f040 80d7 	bne.w	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005402:	2100      	movs	r1, #0
 8005404:	1d20      	adds	r0, r4, #4
 8005406:	f7ff fea1 	bl	800514c <RCCEx_PLL2_Config>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	4605      	mov	r5, r0
 800540e:	2d00      	cmp	r5, #0
 8005410:	f040 8344 	bne.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8005414:	4981      	ldr	r1, [pc, #516]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005416:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800541a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800541c:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005420:	4302      	orrs	r2, r0
 8005422:	658a      	str	r2, [r1, #88]	; 0x58
 8005424:	051a      	lsls	r2, r3, #20
 8005426:	d51f      	bpl.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005428:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800542c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005430:	f000 842e 	beq.w	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005434:	f200 80bf 	bhi.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8005438:	2a00      	cmp	r2, #0
 800543a:	f000 8355 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800543e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005442:	f040 80c0 	bne.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005446:	2100      	movs	r1, #0
 8005448:	1d20      	adds	r0, r4, #4
 800544a:	f7ff fe7f 	bl	800514c <RCCEx_PLL2_Config>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	4605      	mov	r5, r0
 8005452:	2d00      	cmp	r5, #0
 8005454:	f040 832a 	bne.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0x778>
 8005458:	4970      	ldr	r1, [pc, #448]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800545a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800545e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005460:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8005464:	4302      	orrs	r2, r0
 8005466:	658a      	str	r2, [r1, #88]	; 0x58
 8005468:	019f      	lsls	r7, r3, #6
 800546a:	d518      	bpl.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800546c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800546e:	2a20      	cmp	r2, #32
 8005470:	f000 83da 	beq.w	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005474:	f200 80aa 	bhi.w	80055cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005478:	b13a      	cbz	r2, 800548a <HAL_RCCEx_PeriphCLKConfig+0x156>
 800547a:	2a10      	cmp	r2, #16
 800547c:	f040 80a9 	bne.w	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8005480:	4966      	ldr	r1, [pc, #408]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005482:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005484:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005488:	62ca      	str	r2, [r1, #44]	; 0x2c
 800548a:	2d00      	cmp	r5, #0
 800548c:	f040 8359 	bne.w	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005490:	4962      	ldr	r1, [pc, #392]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005492:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005494:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005496:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800549a:	4302      	orrs	r2, r0
 800549c:	64ca      	str	r2, [r1, #76]	; 0x4c
 800549e:	04d8      	lsls	r0, r3, #19
 80054a0:	d51d      	bpl.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80054a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80054a8:	f000 83fb 	beq.w	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80054ac:	f200 8094 	bhi.w	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	f000 831f 	beq.w	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80054b6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80054ba:	f040 8095 	bne.w	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054be:	2100      	movs	r1, #0
 80054c0:	1d20      	adds	r0, r4, #4
 80054c2:	f7ff fe43 	bl	800514c <RCCEx_PLL2_Config>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	4605      	mov	r5, r0
 80054ca:	2d00      	cmp	r5, #0
 80054cc:	f040 82ec 	bne.w	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x774>
 80054d0:	4952      	ldr	r1, [pc, #328]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80054d4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80054d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80054da:	4302      	orrs	r2, r0
 80054dc:	650a      	str	r2, [r1, #80]	; 0x50
 80054de:	0499      	lsls	r1, r3, #18
 80054e0:	d51a      	bpl.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80054e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80054e4:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80054e8:	f000 8374 	beq.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80054ec:	d87f      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80054ee:	b14a      	cbz	r2, 8005504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80054f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80054f4:	f040 8083 	bne.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054f8:	2101      	movs	r1, #1
 80054fa:	1d20      	adds	r0, r4, #4
 80054fc:	f7ff fe26 	bl	800514c <RCCEx_PLL2_Config>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	4605      	mov	r5, r0
 8005504:	2d00      	cmp	r5, #0
 8005506:	f040 831e 	bne.w	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800550a:	4944      	ldr	r1, [pc, #272]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800550c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800550e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005510:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005514:	4302      	orrs	r2, r0
 8005516:	650a      	str	r2, [r1, #80]	; 0x50
 8005518:	045a      	lsls	r2, r3, #17
 800551a:	d51b      	bpl.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800551c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8005520:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005524:	f000 8360 	beq.w	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005528:	d86c      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800552a:	b142      	cbz	r2, 800553e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800552c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005530:	d170      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8005532:	2101      	movs	r1, #1
 8005534:	1d20      	adds	r0, r4, #4
 8005536:	f7ff fe09 	bl	800514c <RCCEx_PLL2_Config>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4605      	mov	r5, r0
 800553e:	2d00      	cmp	r5, #0
 8005540:	f040 8303 	bne.w	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005544:	4935      	ldr	r1, [pc, #212]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005546:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800554a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800554c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005550:	4302      	orrs	r2, r0
 8005552:	658a      	str	r2, [r1, #88]	; 0x58
 8005554:	041f      	lsls	r7, r3, #16
 8005556:	d50d      	bpl.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005558:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800555a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800555e:	f000 8331 	beq.w	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8005562:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005566:	f000 8201 	beq.w	800596c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800556a:	2a00      	cmp	r2, #0
 800556c:	f000 8204 	beq.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8005570:	2601      	movs	r6, #1
 8005572:	4635      	mov	r5, r6
 8005574:	01d8      	lsls	r0, r3, #7
 8005576:	d55d      	bpl.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005578:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800557a:	2a03      	cmp	r2, #3
 800557c:	f200 840a 	bhi.w	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005580:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005584:	03170054 	.word	0x03170054
 8005588:	0054004e 	.word	0x0054004e
 800558c:	2ac0      	cmp	r2, #192	; 0xc0
 800558e:	f43f af1d 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005592:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005596:	f43f af19 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800559a:	2601      	movs	r6, #1
 800559c:	4635      	mov	r5, r6
 800559e:	e71f      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80055a0:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80055a4:	f43f af33 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0xda>
 80055a8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80055ac:	f43f af2f 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0xda>
 80055b0:	2601      	movs	r6, #1
 80055b2:	4635      	mov	r5, r6
 80055b4:	e736      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80055b6:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80055ba:	f43f af4a 	beq.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80055be:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80055c2:	f43f af46 	beq.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80055c6:	2601      	movs	r6, #1
 80055c8:	4635      	mov	r5, r6
 80055ca:	e74d      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80055cc:	2a30      	cmp	r2, #48	; 0x30
 80055ce:	f43f af5c 	beq.w	800548a <HAL_RCCEx_PeriphCLKConfig+0x156>
 80055d2:	2601      	movs	r6, #1
 80055d4:	4635      	mov	r5, r6
 80055d6:	e762      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80055d8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80055dc:	f43f af75 	beq.w	80054ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055e0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80055e4:	f43f af71 	beq.w	80054ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055e8:	2601      	movs	r6, #1
 80055ea:	4635      	mov	r5, r6
 80055ec:	e777      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80055ee:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80055f2:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80055f6:	d085      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80055f8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80055fc:	d082      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80055fe:	2601      	movs	r6, #1
 8005600:	4635      	mov	r5, r6
 8005602:	e789      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005604:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8005608:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800560c:	d097      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800560e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005612:	d094      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005614:	2601      	movs	r6, #1
 8005616:	4635      	mov	r5, r6
 8005618:	e79c      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800561a:	bf00      	nop
 800561c:	58024400 	.word	0x58024400
 8005620:	2102      	movs	r1, #2
 8005622:	1d20      	adds	r0, r4, #4
 8005624:	f7ff fd92 	bl	800514c <RCCEx_PLL2_Config>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	4605      	mov	r5, r0
 800562c:	2d00      	cmp	r5, #0
 800562e:	f000 826b 	beq.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8005632:	462e      	mov	r6, r5
 8005634:	0259      	lsls	r1, r3, #9
 8005636:	f100 81f0 	bmi.w	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 800563a:	07df      	lsls	r7, r3, #31
 800563c:	d52f      	bpl.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800563e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005640:	2a28      	cmp	r2, #40	; 0x28
 8005642:	d82a      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x366>
 8005644:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005648:	002901d3 	.word	0x002901d3
 800564c:	00290029 	.word	0x00290029
 8005650:	00290029 	.word	0x00290029
 8005654:	00290029 	.word	0x00290029
 8005658:	0029036d 	.word	0x0029036d
 800565c:	00290029 	.word	0x00290029
 8005660:	00290029 	.word	0x00290029
 8005664:	00290029 	.word	0x00290029
 8005668:	002901cc 	.word	0x002901cc
 800566c:	00290029 	.word	0x00290029
 8005670:	00290029 	.word	0x00290029
 8005674:	00290029 	.word	0x00290029
 8005678:	002901d3 	.word	0x002901d3
 800567c:	00290029 	.word	0x00290029
 8005680:	00290029 	.word	0x00290029
 8005684:	00290029 	.word	0x00290029
 8005688:	002901d3 	.word	0x002901d3
 800568c:	00290029 	.word	0x00290029
 8005690:	00290029 	.word	0x00290029
 8005694:	00290029 	.word	0x00290029
 8005698:	01d3      	.short	0x01d3
 800569a:	2601      	movs	r6, #1
 800569c:	4635      	mov	r5, r6
 800569e:	0798      	lsls	r0, r3, #30
 80056a0:	d516      	bpl.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 80056a2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80056a4:	2a05      	cmp	r2, #5
 80056a6:	f200 8378 	bhi.w	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80056aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80056ae:	000d      	.short	0x000d
 80056b0:	00060330 	.word	0x00060330
 80056b4:	000d000d 	.word	0x000d000d
 80056b8:	000d      	.short	0x000d
 80056ba:	2101      	movs	r1, #1
 80056bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056c0:	f7ff fdbe 	bl	8005240 <RCCEx_PLL3_Config>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	4605      	mov	r5, r0
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	f000 8225 	beq.w	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80056ce:	462e      	mov	r6, r5
 80056d0:	0759      	lsls	r1, r3, #29
 80056d2:	d517      	bpl.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80056d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80056d8:	2a05      	cmp	r2, #5
 80056da:	f200 8361 	bhi.w	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80056de:	e8df f012 	tbh	[pc, r2, lsl #1]
 80056e2:	000d      	.short	0x000d
 80056e4:	0006030c 	.word	0x0006030c
 80056e8:	000d000d 	.word	0x000d000d
 80056ec:	000d      	.short	0x000d
 80056ee:	2101      	movs	r1, #1
 80056f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056f4:	f7ff fda4 	bl	8005240 <RCCEx_PLL3_Config>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	4605      	mov	r5, r0
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	f000 8213 	beq.w	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8005702:	462e      	mov	r6, r5
 8005704:	069a      	lsls	r2, r3, #26
 8005706:	d51d      	bpl.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005708:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800570c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005710:	f000 8245 	beq.w	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8005714:	f200 80dc 	bhi.w	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005718:	b14a      	cbz	r2, 800572e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800571a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800571e:	f040 80e1 	bne.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8005722:	2100      	movs	r1, #0
 8005724:	1d20      	adds	r0, r4, #4
 8005726:	f7ff fd11 	bl	800514c <RCCEx_PLL2_Config>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	4605      	mov	r5, r0
 800572e:	2d00      	cmp	r5, #0
 8005730:	f040 8205 	bne.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005734:	49a9      	ldr	r1, [pc, #676]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005736:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800573a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800573c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005740:	4302      	orrs	r2, r0
 8005742:	654a      	str	r2, [r1, #84]	; 0x54
 8005744:	065f      	lsls	r7, r3, #25
 8005746:	d51d      	bpl.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005748:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800574c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005750:	f000 8254 	beq.w	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 8005754:	f200 80c9 	bhi.w	80058ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8005758:	b14a      	cbz	r2, 800576e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800575a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800575e:	f040 80ce 	bne.w	80058fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005762:	2100      	movs	r1, #0
 8005764:	1d20      	adds	r0, r4, #4
 8005766:	f7ff fcf1 	bl	800514c <RCCEx_PLL2_Config>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4605      	mov	r5, r0
 800576e:	2d00      	cmp	r5, #0
 8005770:	f040 81c8 	bne.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005774:	4999      	ldr	r1, [pc, #612]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005776:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800577a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800577c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005780:	4302      	orrs	r2, r0
 8005782:	658a      	str	r2, [r1, #88]	; 0x58
 8005784:	0618      	lsls	r0, r3, #24
 8005786:	d51d      	bpl.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005788:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800578c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005790:	f000 823f 	beq.w	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8005794:	f200 80b6 	bhi.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005798:	b14a      	cbz	r2, 80057ae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800579a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800579e:	f040 80bb 	bne.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80057a2:	2100      	movs	r1, #0
 80057a4:	1d20      	adds	r0, r4, #4
 80057a6:	f7ff fcd1 	bl	800514c <RCCEx_PLL2_Config>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	4605      	mov	r5, r0
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	f040 81a6 	bne.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80057b4:	4989      	ldr	r1, [pc, #548]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80057b6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80057ba:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80057bc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057c0:	4302      	orrs	r2, r0
 80057c2:	658a      	str	r2, [r1, #88]	; 0x58
 80057c4:	0719      	lsls	r1, r3, #28
 80057c6:	d50b      	bpl.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80057c8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80057cc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80057d0:	f000 823e 	beq.w	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80057d4:	4881      	ldr	r0, [pc, #516]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80057d6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80057dc:	430a      	orrs	r2, r1
 80057de:	6542      	str	r2, [r0, #84]	; 0x54
 80057e0:	06da      	lsls	r2, r3, #27
 80057e2:	d50b      	bpl.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 80057e4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80057e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80057ec:	f000 8225 	beq.w	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x906>
 80057f0:	487a      	ldr	r0, [pc, #488]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80057f2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80057f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057f8:	430a      	orrs	r2, r1
 80057fa:	6582      	str	r2, [r0, #88]	; 0x58
 80057fc:	031f      	lsls	r7, r3, #12
 80057fe:	d50e      	bpl.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005800:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005804:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005808:	f000 80d4 	beq.w	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800580c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005810:	f000 80d7 	beq.w	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005814:	2900      	cmp	r1, #0
 8005816:	f000 81ba 	beq.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 800581a:	2601      	movs	r6, #1
 800581c:	4635      	mov	r5, r6
 800581e:	0358      	lsls	r0, r3, #13
 8005820:	d50f      	bpl.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005822:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005826:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800582a:	f000 80b0 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800582e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005832:	f000 80b3 	beq.w	800599c <HAL_RCCEx_PeriphCLKConfig+0x668>
 8005836:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800583a:	f000 81a0 	beq.w	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800583e:	2601      	movs	r6, #1
 8005840:	4635      	mov	r5, r6
 8005842:	03d9      	lsls	r1, r3, #15
 8005844:	d509      	bpl.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005846:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005848:	2a00      	cmp	r2, #0
 800584a:	f000 8186 	beq.w	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x826>
 800584e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005852:	f000 812d 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8005856:	2601      	movs	r6, #1
 8005858:	4635      	mov	r5, r6
 800585a:	009a      	lsls	r2, r3, #2
 800585c:	f100 80d2 	bmi.w	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005860:	039f      	lsls	r7, r3, #14
 8005862:	d45c      	bmi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005864:	1e30      	subs	r0, r6, #0
 8005866:	bf18      	it	ne
 8005868:	2001      	movne	r0, #1
 800586a:	02de      	lsls	r6, r3, #11
 800586c:	d506      	bpl.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x548>
 800586e:	495b      	ldr	r1, [pc, #364]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005870:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005872:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005874:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005878:	432a      	orrs	r2, r5
 800587a:	650a      	str	r2, [r1, #80]	; 0x50
 800587c:	00dd      	lsls	r5, r3, #3
 800587e:	d507      	bpl.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8005880:	4956      	ldr	r1, [pc, #344]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005882:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8005886:	690a      	ldr	r2, [r1, #16]
 8005888:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800588c:	432a      	orrs	r2, r5
 800588e:	610a      	str	r2, [r1, #16]
 8005890:	0299      	lsls	r1, r3, #10
 8005892:	d506      	bpl.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8005894:	4951      	ldr	r1, [pc, #324]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005896:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8005898:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800589a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800589e:	432a      	orrs	r2, r5
 80058a0:	650a      	str	r2, [r1, #80]	; 0x50
 80058a2:	005a      	lsls	r2, r3, #1
 80058a4:	d509      	bpl.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x586>
 80058a6:	4a4d      	ldr	r2, [pc, #308]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80058a8:	6911      	ldr	r1, [r2, #16]
 80058aa:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80058ae:	6111      	str	r1, [r2, #16]
 80058b0:	6911      	ldr	r1, [r2, #16]
 80058b2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80058b6:	4329      	orrs	r1, r5
 80058b8:	6111      	str	r1, [r2, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da06      	bge.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80058be:	4a47      	ldr	r2, [pc, #284]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80058c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80058c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80058c4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80058c8:	430b      	orrs	r3, r1
 80058ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d0:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80058d4:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80058d8:	f43f af29 	beq.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80058dc:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80058e0:	f43f af25 	beq.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80058e4:	2601      	movs	r6, #1
 80058e6:	4635      	mov	r5, r6
 80058e8:	e72c      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80058ea:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80058ee:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80058f2:	f43f af3c 	beq.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80058f6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80058fa:	f43f af38 	beq.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80058fe:	2601      	movs	r6, #1
 8005900:	4635      	mov	r5, r6
 8005902:	e73f      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005904:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005908:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800590c:	f43f af4f 	beq.w	80057ae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005910:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005914:	f43f af4b 	beq.w	80057ae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005918:	2601      	movs	r6, #1
 800591a:	4635      	mov	r5, r6
 800591c:	e752      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800591e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005920:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005924:	f000 8122 	beq.w	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005928:	d906      	bls.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800592a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800592e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005932:	d003      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005934:	2001      	movs	r0, #1
 8005936:	e798      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005938:	2a00      	cmp	r2, #0
 800593a:	d1fb      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800593c:	2d00      	cmp	r5, #0
 800593e:	d1f9      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005940:	4d26      	ldr	r5, [pc, #152]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005942:	1e30      	subs	r0, r6, #0
 8005944:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8005946:	bf18      	it	ne
 8005948:	2001      	movne	r0, #1
 800594a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800594e:	430a      	orrs	r2, r1
 8005950:	656a      	str	r2, [r5, #84]	; 0x54
 8005952:	e78a      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005954:	4635      	mov	r5, r6
 8005956:	2d00      	cmp	r5, #0
 8005958:	f040 80a4 	bne.w	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800595c:	491f      	ldr	r1, [pc, #124]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800595e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005960:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005962:	f022 0207 	bic.w	r2, r2, #7
 8005966:	4302      	orrs	r2, r0
 8005968:	650a      	str	r2, [r1, #80]	; 0x50
 800596a:	e51b      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800596c:	2101      	movs	r1, #1
 800596e:	1d20      	adds	r0, r4, #4
 8005970:	f7ff fbec 	bl	800514c <RCCEx_PLL2_Config>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	4605      	mov	r5, r0
 8005978:	2d00      	cmp	r5, #0
 800597a:	f040 80de 	bne.w	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x806>
 800597e:	4917      	ldr	r1, [pc, #92]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005980:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005982:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005988:	4302      	orrs	r2, r0
 800598a:	650a      	str	r2, [r1, #80]	; 0x50
 800598c:	e5f2      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800598e:	2101      	movs	r1, #1
 8005990:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005994:	f7ff fc54 	bl	8005240 <RCCEx_PLL3_Config>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	4605      	mov	r5, r0
 800599c:	2d00      	cmp	r5, #0
 800599e:	f040 80da 	bne.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x822>
 80059a2:	490e      	ldr	r1, [pc, #56]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80059a4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80059a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80059aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80059ae:	4302      	orrs	r2, r0
 80059b0:	654a      	str	r2, [r1, #84]	; 0x54
 80059b2:	e746      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80059b4:	2102      	movs	r1, #2
 80059b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059ba:	f7ff fc41 	bl	8005240 <RCCEx_PLL3_Config>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	4605      	mov	r5, r0
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	f040 80c5 	bne.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80059c8:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80059ca:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80059ce:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80059d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80059d4:	4302      	orrs	r2, r0
 80059d6:	658a      	str	r2, [r1, #88]	; 0x58
 80059d8:	e721      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
 80059e0:	2101      	movs	r1, #1
 80059e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059e6:	f7ff fc2b 	bl	8005240 <RCCEx_PLL3_Config>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	4605      	mov	r5, r0
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	f040 80ad 	bne.w	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80059f4:	49af      	ldr	r1, [pc, #700]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80059f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80059f8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80059fa:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80059fe:	4302      	orrs	r2, r0
 8005a00:	654a      	str	r2, [r1, #84]	; 0x54
 8005a02:	e64c      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005a04:	2102      	movs	r1, #2
 8005a06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a0a:	f7ff fc19 	bl	8005240 <RCCEx_PLL3_Config>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f43f af25 	beq.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005a16:	2601      	movs	r6, #1
 8005a18:	e722      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005a1a:	4fa7      	ldr	r7, [pc, #668]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	f7fe fef2 	bl	800480c <HAL_GetTick>
 8005a28:	4680      	mov	r8, r0
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8005a2c:	f7fe feee 	bl	800480c <HAL_GetTick>
 8005a30:	eba0 0008 	sub.w	r0, r0, r8
 8005a34:	2864      	cmp	r0, #100	; 0x64
 8005a36:	f200 817e 	bhi.w	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	05da      	lsls	r2, r3, #23
 8005a3e:	d5f5      	bpl.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	f040 81a4 	bne.w	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8005a46:	4a9b      	ldr	r2, [pc, #620]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005a48:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005a4c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a4e:	4059      	eors	r1, r3
 8005a50:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005a54:	d00b      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005a56:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a58:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005a5a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005a5e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005a62:	6710      	str	r0, [r2, #112]	; 0x70
 8005a64:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005a66:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005a6a:	6710      	str	r0, [r2, #112]	; 0x70
 8005a6c:	6711      	str	r1, [r2, #112]	; 0x70
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	f000 816e 	beq.w	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005a76:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005a7a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005a7e:	f000 817c 	beq.w	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8005a82:	498c      	ldr	r1, [pc, #560]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005a84:	690a      	ldr	r2, [r1, #16]
 8005a86:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005a8a:	610a      	str	r2, [r1, #16]
 8005a8c:	4a89      	ldr	r2, [pc, #548]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a92:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6713      	str	r3, [r2, #112]	; 0x70
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	e5ce      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005a9c:	462e      	mov	r6, r5
 8005a9e:	e4c1      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005aa0:	462e      	mov	r6, r5
 8005aa2:	e49d      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005aa4:	462e      	mov	r6, r5
 8005aa6:	e47d      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005aa8:	462e      	mov	r6, r5
 8005aaa:	e518      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005aac:	462e      	mov	r6, r5
 8005aae:	e4db      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	1d20      	adds	r0, r4, #4
 8005ab4:	f7ff fb4a 	bl	800514c <RCCEx_PLL2_Config>
 8005ab8:	4605      	mov	r5, r0
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	d153      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8005ac0:	497c      	ldr	r1, [pc, #496]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005ac2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005ac4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005ac6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005aca:	4302      	orrs	r2, r0
 8005acc:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005ace:	e6c4      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005ad0:	4978      	ldr	r1, [pc, #480]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005ad2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ad4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ad8:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ada:	e477      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005adc:	4975      	ldr	r1, [pc, #468]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005ade:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ae0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ae4:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ae6:	e492      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005ae8:	4972      	ldr	r1, [pc, #456]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005aea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005aec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005af0:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005af2:	e4ae      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005af4:	496f      	ldr	r1, [pc, #444]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005af6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005af8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005afc:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005afe:	e4e4      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b00:	462e      	mov	r6, r5
 8005b02:	e65f      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005b04:	462e      	mov	r6, r5
 8005b06:	e63d      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005b08:	496a      	ldr	r1, [pc, #424]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005b0c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005b0e:	f022 0203 	bic.w	r2, r2, #3
 8005b12:	4302      	orrs	r2, r0
 8005b14:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005b16:	e58d      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005b18:	4966      	ldr	r1, [pc, #408]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b1a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005b1c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005b1e:	f022 0207 	bic.w	r2, r2, #7
 8005b22:	4302      	orrs	r2, r0
 8005b24:	654a      	str	r2, [r1, #84]	; 0x54
 8005b26:	e5d3      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005b28:	4962      	ldr	r1, [pc, #392]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005b2e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005b30:	f022 0207 	bic.w	r2, r2, #7
 8005b34:	4302      	orrs	r2, r0
 8005b36:	658a      	str	r2, [r1, #88]	; 0x58
 8005b38:	e5e4      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005b3a:	462e      	mov	r6, r5
 8005b3c:	e51a      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005b3e:	462e      	mov	r6, r5
 8005b40:	e600      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005b42:	462e      	mov	r6, r5
 8005b44:	e4ab      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005b46:	462e      	mov	r6, r5
 8005b48:	e4e6      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005b4a:	462e      	mov	r6, r5
 8005b4c:	e502      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005b4e:	462e      	mov	r6, r5
 8005b50:	e5a5      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005b52:	462e      	mov	r6, r5
 8005b54:	e663      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005b56:	462e      	mov	r6, r5
 8005b58:	e673      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005b5a:	4956      	ldr	r1, [pc, #344]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b5c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b62:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	d0ab      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
 8005b68:	462e      	mov	r6, r5
 8005b6a:	e676      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005b6c:	4851      	ldr	r0, [pc, #324]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b6e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b70:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005b74:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	f47f aedc 	bne.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005b7c:	e6e0      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b7e:	494d      	ldr	r1, [pc, #308]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b80:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b86:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	d1e4      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8005b8c:	e709      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b8e:	1d20      	adds	r0, r4, #4
 8005b90:	f7ff fadc 	bl	800514c <RCCEx_PLL2_Config>
 8005b94:	4605      	mov	r5, r0
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	d1da      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005b9c:	e714      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ba4:	f7ff fb4c 	bl	8005240 <RCCEx_PLL3_Config>
 8005ba8:	4605      	mov	r5, r0
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	d1c6      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005bb0:	e5c0      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005bb2:	4940      	ldr	r1, [pc, #256]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005bb4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005bba:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	f47f ad38 	bne.w	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005bc2:	e7a1      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8005bc4:	493b      	ldr	r1, [pc, #236]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005bc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005bcc:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	d1b3      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8005bd2:	e6d4      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bda:	f7ff fb31 	bl	8005240 <RCCEx_PLL3_Config>
 8005bde:	4605      	mov	r5, r0
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	d1af      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005be6:	e490      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005be8:	2101      	movs	r1, #1
 8005bea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bee:	f7ff fb27 	bl	8005240 <RCCEx_PLL3_Config>
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	d1a7      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005bfa:	e4a3      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c02:	f7ff fb1d 	bl	8005240 <RCCEx_PLL3_Config>
 8005c06:	4605      	mov	r5, r0
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	f47f af7a 	bne.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005c10:	e5b0      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005c12:	2102      	movs	r1, #2
 8005c14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c18:	f7ff fb12 	bl	8005240 <RCCEx_PLL3_Config>
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	2d00      	cmp	r5, #0
 8005c22:	f47f af6d 	bne.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005c26:	e5c5      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005c28:	2102      	movs	r1, #2
 8005c2a:	1d20      	adds	r0, r4, #4
 8005c2c:	f7ff fa8e 	bl	800514c <RCCEx_PLL2_Config>
 8005c30:	4605      	mov	r5, r0
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	d184      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005c38:	e42a      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c40:	f7ff fafe 	bl	8005240 <RCCEx_PLL3_Config>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	2800      	cmp	r0, #0
 8005c48:	f43f add8 	beq.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8005c4c:	2601      	movs	r6, #1
 8005c4e:	e5d5      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8005c50:	2102      	movs	r1, #2
 8005c52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c56:	f7ff faf3 	bl	8005240 <RCCEx_PLL3_Config>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	f43f adbf 	beq.w	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005c62:	2601      	movs	r6, #1
 8005c64:	e5bc      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005c66:	2100      	movs	r1, #0
 8005c68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c6c:	f7ff fae8 	bl	8005240 <RCCEx_PLL3_Config>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	4605      	mov	r5, r0
 8005c74:	f7ff bbaa 	b.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	f7ff bb85 	b.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c84:	f7ff fadc 	bl	8005240 <RCCEx_PLL3_Config>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	f7ff bbbf 	b.w	800540e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005c90:	2100      	movs	r1, #0
 8005c92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c96:	f7ff fad3 	bl	8005240 <RCCEx_PLL3_Config>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	f7ff bbd8 	b.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ca8:	f7ff faca 	bl	8005240 <RCCEx_PLL3_Config>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	4605      	mov	r5, r0
 8005cb0:	e40b      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	58024800 	.word	0x58024800
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	1d20      	adds	r0, r4, #4
 8005cc0:	f7ff fa44 	bl	800514c <RCCEx_PLL2_Config>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	e645      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005cca:	2100      	movs	r1, #0
 8005ccc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005cd0:	f7ff fab6 	bl	8005240 <RCCEx_PLL3_Config>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	e63d      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005cda:	4933      	ldr	r1, [pc, #204]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005cdc:	4635      	mov	r5, r6
 8005cde:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ce0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ce4:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ce6:	e636      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005ce8:	2102      	movs	r1, #2
 8005cea:	3024      	adds	r0, #36	; 0x24
 8005cec:	f7ff faa8 	bl	8005240 <RCCEx_PLL3_Config>
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	f43f ab3a 	beq.w	800536c <HAL_RCCEx_PeriphCLKConfig+0x38>
 8005cf8:	e7be      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	1d20      	adds	r0, r4, #4
 8005cfe:	f7ff fa25 	bl	800514c <RCCEx_PLL2_Config>
 8005d02:	4605      	mov	r5, r0
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	f47f acfb 	bne.w	8005702 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005d0c:	e70c      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8005d0e:	2101      	movs	r1, #1
 8005d10:	1d20      	adds	r0, r4, #4
 8005d12:	f7ff fa1b 	bl	800514c <RCCEx_PLL2_Config>
 8005d16:	4605      	mov	r5, r0
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	f47f acd7 	bne.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005d20:	e6fa      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005d22:	2101      	movs	r1, #1
 8005d24:	1d20      	adds	r0, r4, #4
 8005d26:	f7ff fa11 	bl	800514c <RCCEx_PLL2_Config>
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	f47f af0d 	bne.w	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005d34:	e65e      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005d36:	2603      	movs	r6, #3
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	4635      	mov	r5, r6
 8005d3c:	e47d      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005d3e:	2601      	movs	r6, #1
 8005d40:	f7ff bb22 	b.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005d44:	4818      	ldr	r0, [pc, #96]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005d46:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d48:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005d4c:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005d4e:	f7ff bb14 	b.w	800537a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005d52:	f7fe fd5b 	bl	800480c <HAL_GetTick>
 8005d56:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8005da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	f241 3988 	movw	r9, #5000	; 0x1388
 8005d60:	e004      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8005d62:	f7fe fd53 	bl	800480c <HAL_GetTick>
 8005d66:	1bc0      	subs	r0, r0, r7
 8005d68:	4548      	cmp	r0, r9
 8005d6a:	d8e4      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8005d6c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005d70:	079b      	lsls	r3, r3, #30
 8005d72:	d5f6      	bpl.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8005d74:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005d78:	e67d      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8005d7a:	480b      	ldr	r0, [pc, #44]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005d7c:	4a0b      	ldr	r2, [pc, #44]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005d7e:	6901      	ldr	r1, [r0, #16]
 8005d80:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005d84:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	6102      	str	r2, [r0, #16]
 8005d8c:	e67e      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x758>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	462e      	mov	r6, r5
 8005d92:	e452      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005d94:	2601      	movs	r6, #1
 8005d96:	4635      	mov	r5, r6
 8005d98:	e44c      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d9a:	2601      	movs	r6, #1
 8005d9c:	4635      	mov	r5, r6
 8005d9e:	e497      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005da0:	2601      	movs	r6, #1
 8005da2:	4635      	mov	r5, r6
 8005da4:	e4ae      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005da6:	bf00      	nop
 8005da8:	58024400 	.word	0x58024400
 8005dac:	00ffffcf 	.word	0x00ffffcf

08005db0 <LL_ADC_Init>:
 8005db0:	6882      	ldr	r2, [r0, #8]
 8005db2:	07d3      	lsls	r3, r2, #31
 8005db4:	d413      	bmi.n	8005dde <LL_ADC_Init+0x2e>
 8005db6:	68c2      	ldr	r2, [r0, #12]
 8005db8:	4603      	mov	r3, r0
 8005dba:	6808      	ldr	r0, [r1, #0]
 8005dbc:	b430      	push	{r4, r5}
 8005dbe:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
 8005dc2:	ea40 0104 	orr.w	r1, r0, r4
 8005dc6:	4c07      	ldr	r4, [pc, #28]	; (8005de4 <LL_ADC_Init+0x34>)
 8005dc8:	2001      	movs	r0, #1
 8005dca:	4014      	ands	r4, r2
 8005dcc:	4321      	orrs	r1, r4
 8005dce:	60d9      	str	r1, [r3, #12]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dd6:	432a      	orrs	r2, r5
 8005dd8:	bc30      	pop	{r4, r5}
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	4770      	bx	lr
 8005dde:	2000      	movs	r0, #0
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	ffffbfe3 	.word	0xffffbfe3

08005de8 <LL_ADC_REG_Init>:
 8005de8:	6882      	ldr	r2, [r0, #8]
 8005dea:	07d3      	lsls	r3, r2, #31
 8005dec:	d418      	bmi.n	8005e20 <LL_ADC_REG_Init+0x38>
 8005dee:	4603      	mov	r3, r0
 8005df0:	b430      	push	{r4, r5}
 8005df2:	684c      	ldr	r4, [r1, #4]
 8005df4:	b9b4      	cbnz	r4, 8005e24 <LL_ADC_REG_Init+0x3c>
 8005df6:	68c2      	ldr	r2, [r0, #12]
 8005df8:	4812      	ldr	r0, [pc, #72]	; (8005e44 <LL_ADC_REG_Init+0x5c>)
 8005dfa:	4010      	ands	r0, r2
 8005dfc:	680a      	ldr	r2, [r1, #0]
 8005dfe:	4310      	orrs	r0, r2
 8005e00:	68ca      	ldr	r2, [r1, #12]
 8005e02:	4310      	orrs	r0, r2
 8005e04:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 8005e08:	ea40 0105 	orr.w	r1, r0, r5
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	60d9      	str	r1, [r3, #12]
 8005e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e12:	2001      	movs	r0, #1
 8005e14:	f022 020f 	bic.w	r2, r2, #15
 8005e18:	4322      	orrs	r2, r4
 8005e1a:	bc30      	pop	{r4, r5}
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e1e:	4770      	bx	lr
 8005e20:	2000      	movs	r0, #0
 8005e22:	4770      	bx	lr
 8005e24:	68c0      	ldr	r0, [r0, #12]
 8005e26:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <LL_ADC_REG_Init+0x5c>)
 8005e28:	4002      	ands	r2, r0
 8005e2a:	6808      	ldr	r0, [r1, #0]
 8005e2c:	4302      	orrs	r2, r0
 8005e2e:	6888      	ldr	r0, [r1, #8]
 8005e30:	4302      	orrs	r2, r0
 8005e32:	68c8      	ldr	r0, [r1, #12]
 8005e34:	4302      	orrs	r2, r0
 8005e36:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005e3a:	4302      	orrs	r2, r0
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	60da      	str	r2, [r3, #12]
 8005e40:	e7e6      	b.n	8005e10 <LL_ADC_REG_Init+0x28>
 8005e42:	bf00      	nop
 8005e44:	fff0c01c 	.word	0xfff0c01c

08005e48 <LL_DAC_Init>:
 8005e48:	f04f 0c01 	mov.w	ip, #1
 8005e4c:	f001 0110 	and.w	r1, r1, #16
 8005e50:	4603      	mov	r3, r0
 8005e52:	6800      	ldr	r0, [r0, #0]
 8005e54:	fa0c fc01 	lsl.w	ip, ip, r1
 8005e58:	ea3c 0000 	bics.w	r0, ip, r0
 8005e5c:	d02b      	beq.n	8005eb6 <LL_DAC_Init+0x6e>
 8005e5e:	6850      	ldr	r0, [r2, #4]
 8005e60:	b470      	push	{r4, r5, r6}
 8005e62:	b9d0      	cbnz	r0, 8005e9a <LL_DAC_Init+0x52>
 8005e64:	24fc      	movs	r4, #252	; 0xfc
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	408c      	lsls	r4, r1
 8005e6a:	ea20 0004 	bic.w	r0, r0, r4
 8005e6e:	6814      	ldr	r4, [r2, #0]
 8005e70:	408c      	lsls	r4, r1
 8005e72:	4320      	orrs	r0, r4
 8005e74:	6018      	str	r0, [r3, #0]
 8005e76:	6955      	ldr	r5, [r2, #20]
 8005e78:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8005e7a:	e9d2 0603 	ldrd	r0, r6, [r2, #12]
 8005e7e:	ea40 0206 	orr.w	r2, r0, r6
 8005e82:	2007      	movs	r0, #7
 8005e84:	432a      	orrs	r2, r5
 8005e86:	4088      	lsls	r0, r1
 8005e88:	fa02 f101 	lsl.w	r1, r2, r1
 8005e8c:	ea24 0200 	bic.w	r2, r4, r0
 8005e90:	2001      	movs	r0, #1
 8005e92:	4311      	orrs	r1, r2
 8005e94:	bc70      	pop	{r4, r5, r6}
 8005e96:	63d9      	str	r1, [r3, #60]	; 0x3c
 8005e98:	4770      	bx	lr
 8005e9a:	6815      	ldr	r5, [r2, #0]
 8005e9c:	681c      	ldr	r4, [r3, #0]
 8005e9e:	4328      	orrs	r0, r5
 8005ea0:	6895      	ldr	r5, [r2, #8]
 8005ea2:	4328      	orrs	r0, r5
 8005ea4:	f640 75fc 	movw	r5, #4092	; 0xffc
 8005ea8:	408d      	lsls	r5, r1
 8005eaa:	4088      	lsls	r0, r1
 8005eac:	ea24 0405 	bic.w	r4, r4, r5
 8005eb0:	4320      	orrs	r0, r4
 8005eb2:	6018      	str	r0, [r3, #0]
 8005eb4:	e7df      	b.n	8005e76 <LL_DAC_Init+0x2e>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop

08005ebc <LL_DMA_Init>:
 8005ebc:	4b23      	ldr	r3, [pc, #140]	; (8005f4c <LL_DMA_Init+0x90>)
 8005ebe:	b4f0      	push	{r4, r5, r6, r7}
 8005ec0:	5c5c      	ldrb	r4, [r3, r1]
 8005ec2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8005ec4:	5907      	ldr	r7, [r0, r4]
 8005ec6:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8005eca:	4333      	orrs	r3, r6
 8005ecc:	6916      	ldr	r6, [r2, #16]
 8005ece:	4333      	orrs	r3, r6
 8005ed0:	6956      	ldr	r6, [r2, #20]
 8005ed2:	4333      	orrs	r3, r6
 8005ed4:	6996      	ldr	r6, [r2, #24]
 8005ed6:	4333      	orrs	r3, r6
 8005ed8:	69d6      	ldr	r6, [r2, #28]
 8005eda:	4333      	orrs	r3, r6
 8005edc:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8005ede:	4333      	orrs	r3, r6
 8005ee0:	4e1b      	ldr	r6, [pc, #108]	; (8005f50 <LL_DMA_Init+0x94>)
 8005ee2:	403e      	ands	r6, r7
 8005ee4:	4333      	orrs	r3, r6
 8005ee6:	5103      	str	r3, [r0, r4]
 8005ee8:	1903      	adds	r3, r0, r4
 8005eea:	b195      	cbz	r5, 8005f12 <LL_DMA_Init+0x56>
 8005eec:	695e      	ldr	r6, [r3, #20]
 8005eee:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005ef0:	f026 0607 	bic.w	r6, r6, #7
 8005ef4:	433d      	orrs	r5, r7
 8005ef6:	4335      	orrs	r5, r6
 8005ef8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005efa:	615d      	str	r5, [r3, #20]
 8005efc:	5905      	ldr	r5, [r0, r4]
 8005efe:	f025 75c0 	bic.w	r5, r5, #25165824	; 0x1800000
 8005f02:	4335      	orrs	r5, r6
 8005f04:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8005f06:	5105      	str	r5, [r0, r4]
 8005f08:	5905      	ldr	r5, [r0, r4]
 8005f0a:	f425 05c0 	bic.w	r5, r5, #6291456	; 0x600000
 8005f0e:	4335      	orrs	r5, r6
 8005f10:	5105      	str	r5, [r0, r4]
 8005f12:	6854      	ldr	r4, [r2, #4]
 8005f14:	60dc      	str	r4, [r3, #12]
 8005f16:	6814      	ldr	r4, [r2, #0]
 8005f18:	609c      	str	r4, [r3, #8]
 8005f1a:	4c0e      	ldr	r4, [pc, #56]	; (8005f54 <LL_DMA_Init+0x98>)
 8005f1c:	685d      	ldr	r5, [r3, #4]
 8005f1e:	402c      	ands	r4, r5
 8005f20:	6a15      	ldr	r5, [r2, #32]
 8005f22:	432c      	orrs	r4, r5
 8005f24:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005f26:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <LL_DMA_Init+0x9c>)
 8005f28:	605c      	str	r4, [r3, #4]
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <LL_DMA_Init+0xa0>)
 8005f2c:	4290      	cmp	r0, r2
 8005f2e:	f04f 0001 	mov.w	r0, #1
 8005f32:	440b      	add	r3, r1
 8005f34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005f38:	bf18      	it	ne
 8005f3a:	3320      	addne	r3, #32
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f42:	432a      	orrs	r2, r5
 8005f44:	bcf0      	pop	{r4, r5, r6, r7}
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	08008dfc 	.word	0x08008dfc
 8005f50:	fffc801f 	.word	0xfffc801f
 8005f54:	ffff0000 	.word	0xffff0000
 8005f58:	40020000 	.word	0x40020000
 8005f5c:	10008200 	.word	0x10008200

08005f60 <LL_GPIO_Init>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	680c      	ldr	r4, [r1, #0]
 8005f66:	b083      	sub	sp, #12
 8005f68:	fa94 fca4 	rbit	ip, r4
 8005f6c:	fabc fc8c 	clz	ip, ip
 8005f70:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005f74:	d075      	beq.n	8006062 <LL_GPIO_Init+0x102>
 8005f76:	684f      	ldr	r7, [r1, #4]
 8005f78:	2601      	movs	r6, #1
 8005f7a:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 8005f7e:	e00d      	b.n	8005f9c <LL_GPIO_Init+0x3c>
 8005f80:	68c3      	ldr	r3, [r0, #12]
 8005f82:	ea08 0803 	and.w	r8, r8, r3
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	ea43 0308 	orr.w	r3, r3, r8
 8005f90:	60c3      	str	r3, [r0, #12]
 8005f92:	f10c 0c01 	add.w	ip, ip, #1
 8005f96:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005f9a:	d048      	beq.n	800602e <LL_GPIO_Init+0xce>
 8005f9c:	fa06 f30c 	lsl.w	r3, r6, ip
 8005fa0:	4023      	ands	r3, r4
 8005fa2:	fb03 f203 	mul.w	r2, r3, r3
 8005fa6:	d0f4      	beq.n	8005f92 <LL_GPIO_Init+0x32>
 8005fa8:	6805      	ldr	r5, [r0, #0]
 8005faa:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8005fae:	fb07 f902 	mul.w	r9, r7, r2
 8005fb2:	f1bb 0f01 	cmp.w	fp, #1
 8005fb6:	ea25 0e08 	bic.w	lr, r5, r8
 8005fba:	ea6f 0808 	mvn.w	r8, r8
 8005fbe:	ea4e 0509 	orr.w	r5, lr, r9
 8005fc2:	6005      	str	r5, [r0, #0]
 8005fc4:	d8dc      	bhi.n	8005f80 <LL_GPIO_Init+0x20>
 8005fc6:	0a1d      	lsrs	r5, r3, #8
 8005fc8:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8005fcc:	fb02 fe02 	mul.w	lr, r2, r2
 8005fd0:	2f02      	cmp	r7, #2
 8005fd2:	fb05 f505 	mul.w	r5, r5, r5
 8005fd6:	ea08 0909 	and.w	r9, r8, r9
 8005fda:	fb05 f505 	mul.w	r5, r5, r5
 8005fde:	9500      	str	r5, [sp, #0]
 8005fe0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005fe4:	9501      	str	r5, [sp, #4]
 8005fe6:	688d      	ldr	r5, [r1, #8]
 8005fe8:	fb05 fa02 	mul.w	sl, r5, r2
 8005fec:	690d      	ldr	r5, [r1, #16]
 8005fee:	ea4a 0909 	orr.w	r9, sl, r9
 8005ff2:	fb05 f202 	mul.w	r2, r5, r2
 8005ff6:	f8c0 9008 	str.w	r9, [r0, #8]
 8005ffa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005ffe:	ea08 0809 	and.w	r8, r8, r9
 8006002:	ea42 0208 	orr.w	r2, r2, r8
 8006006:	60c2      	str	r2, [r0, #12]
 8006008:	d1c3      	bne.n	8005f92 <LL_GPIO_Init+0x32>
 800600a:	2bff      	cmp	r3, #255	; 0xff
 800600c:	d81e      	bhi.n	800604c <LL_GPIO_Init+0xec>
 800600e:	694b      	ldr	r3, [r1, #20]
 8006010:	f10c 0c01 	add.w	ip, ip, #1
 8006014:	6a02      	ldr	r2, [r0, #32]
 8006016:	fb03 f30e 	mul.w	r3, r3, lr
 800601a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800601e:	ea22 0e0e 	bic.w	lr, r2, lr
 8006022:	ea4e 0303 	orr.w	r3, lr, r3
 8006026:	6203      	str	r3, [r0, #32]
 8006028:	fa34 f30c 	lsrs.w	r3, r4, ip
 800602c:	d1b6      	bne.n	8005f9c <LL_GPIO_Init+0x3c>
 800602e:	f1bb 0f01 	cmp.w	fp, #1
 8006032:	d807      	bhi.n	8006044 <LL_GPIO_Init+0xe4>
 8006034:	6843      	ldr	r3, [r0, #4]
 8006036:	68ca      	ldr	r2, [r1, #12]
 8006038:	ea23 0304 	bic.w	r3, r3, r4
 800603c:	fb02 f404 	mul.w	r4, r2, r4
 8006040:	431c      	orrs	r4, r3
 8006042:	6044      	str	r4, [r0, #4]
 8006044:	2001      	movs	r0, #1
 8006046:	b003      	add	sp, #12
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800604e:	9b01      	ldr	r3, [sp, #4]
 8006050:	9d00      	ldr	r5, [sp, #0]
 8006052:	ea22 0203 	bic.w	r2, r2, r3
 8006056:	694b      	ldr	r3, [r1, #20]
 8006058:	fb05 f303 	mul.w	r3, r5, r3
 800605c:	4313      	orrs	r3, r2
 800605e:	6243      	str	r3, [r0, #36]	; 0x24
 8006060:	e797      	b.n	8005f92 <LL_GPIO_Init+0x32>
 8006062:	684b      	ldr	r3, [r1, #4]
 8006064:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006068:	e7e1      	b.n	800602e <LL_GPIO_Init+0xce>
 800606a:	bf00      	nop

0800606c <LL_GPIO_StructInit>:
 800606c:	2300      	movs	r3, #0
 800606e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006072:	2203      	movs	r2, #3
 8006074:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8006078:	e9c0 1200 	strd	r1, r2, [r0]
 800607c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <LL_RCC_GetPLL1ClockFreq>:
 8006084:	495c      	ldr	r1, [pc, #368]	; (80061f8 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8006086:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b01      	cmp	r3, #1
 800608e:	b430      	push	{r4, r5}
 8006090:	f000 80aa 	beq.w	80061e8 <LL_RCC_GetPLL1ClockFreq+0x164>
 8006094:	2b02      	cmp	r3, #2
 8006096:	f000 80a0 	beq.w	80061da <LL_RCC_GetPLL1ClockFreq+0x156>
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8092 	beq.w	80061c4 <LL_RCC_GetPLL1ClockFreq+0x140>
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	4d54      	ldr	r5, [pc, #336]	; (80061f8 <LL_RCC_GetPLL1ClockFreq+0x174>)
 80060a6:	e9c0 3300 	strd	r3, r3, [r0]
 80060aa:	6083      	str	r3, [r0, #8]
 80060ac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80060ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80060b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80060b2:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80060b6:	f013 0301 	ands.w	r3, r3, #1
 80060ba:	d002      	beq.n	80060c2 <LL_RCC_GetPLL1ClockFreq+0x3e>
 80060bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80060be:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80060c2:	2900      	cmp	r1, #0
 80060c4:	d07c      	beq.n	80061c0 <LL_RCC_GetPLL1ClockFreq+0x13c>
 80060c6:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80060ca:	3401      	adds	r4, #1
 80060cc:	ee07 4a10 	vmov	s14, r4
 80060d0:	4c49      	ldr	r4, [pc, #292]	; (80061f8 <LL_RCC_GetPLL1ClockFreq+0x174>)
 80060d2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80060d4:	03ed      	lsls	r5, r5, #15
 80060d6:	d523      	bpl.n	8006120 <LL_RCC_GetPLL1ClockFreq+0x9c>
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80060e0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80060e2:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80060e6:	ee07 2a90 	vmov	s15, r2
 80060ea:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80061fc <LL_RCC_GetPLL1ClockFreq+0x178>
 80060ee:	f3c4 2446 	ubfx	r4, r4, #9, #7
 80060f2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80060f6:	ee07 1a90 	vmov	s15, r1
 80060fa:	eea4 6a85 	vfma.f32	s12, s9, s10
 80060fe:	3401      	adds	r4, #1
 8006100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006104:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006108:	ee07 4a90 	vmov	s15, r4
 800610c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006110:	ee26 6a86 	vmul.f32	s12, s13, s12
 8006114:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006118:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800611c:	edc0 6a00 	vstr	s13, [r0]
 8006120:	4c35      	ldr	r4, [pc, #212]	; (80061f8 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8006122:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006124:	03ad      	lsls	r5, r5, #14
 8006126:	d523      	bpl.n	8006170 <LL_RCC_GetPLL1ClockFreq+0xec>
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006130:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8006132:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8006136:	ee07 2a90 	vmov	s15, r2
 800613a:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80061fc <LL_RCC_GetPLL1ClockFreq+0x178>
 800613e:	f3c4 4406 	ubfx	r4, r4, #16, #7
 8006142:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8006146:	ee07 1a90 	vmov	s15, r1
 800614a:	eea4 6a85 	vfma.f32	s12, s9, s10
 800614e:	3401      	adds	r4, #1
 8006150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006154:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006158:	ee07 4a90 	vmov	s15, r4
 800615c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006160:	ee26 6a86 	vmul.f32	s12, s13, s12
 8006164:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006168:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800616c:	edc0 6a01 	vstr	s13, [r0, #4]
 8006170:	4c21      	ldr	r4, [pc, #132]	; (80061f8 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8006172:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006174:	036d      	lsls	r5, r5, #13
 8006176:	d523      	bpl.n	80061c0 <LL_RCC_GetPLL1ClockFreq+0x13c>
 8006178:	ee07 2a90 	vmov	s15, r2
 800617c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006180:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 80061fc <LL_RCC_GetPLL1ClockFreq+0x178>
 8006184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006188:	ee07 1a90 	vmov	s15, r1
 800618c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619a:	eec6 5a86 	vdiv.f32	s11, s13, s12
 800619e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80061a2:	3301      	adds	r3, #1
 80061a4:	eea7 7a85 	vfma.f32	s14, s15, s10
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b0:	ee25 7a87 	vmul.f32	s14, s11, s14
 80061b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80061b8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80061bc:	edc0 6a02 	vstr	s13, [r0, #8]
 80061c0:	bc30      	pop	{r4, r5}
 80061c2:	4770      	bx	lr
 80061c4:	680a      	ldr	r2, [r1, #0]
 80061c6:	f012 0204 	ands.w	r2, r2, #4
 80061ca:	f43f af6a 	beq.w	80060a2 <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061ce:	680b      	ldr	r3, [r1, #0]
 80061d0:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80061d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80061d6:	40da      	lsrs	r2, r3
 80061d8:	e763      	b.n	80060a2 <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061da:	680a      	ldr	r2, [r1, #0]
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <LL_RCC_GetPLL1ClockFreq+0x180>)
 80061de:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80061e2:	bf18      	it	ne
 80061e4:	461a      	movne	r2, r3
 80061e6:	e75c      	b.n	80060a2 <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061e8:	680a      	ldr	r2, [r1, #0]
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <LL_RCC_GetPLL1ClockFreq+0x184>)
 80061ec:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80061f0:	bf18      	it	ne
 80061f2:	461a      	movne	r2, r3
 80061f4:	e755      	b.n	80060a2 <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	39000000 	.word	0x39000000
 8006200:	03d09000 	.word	0x03d09000
 8006204:	00f42400 	.word	0x00f42400
 8006208:	003d0900 	.word	0x003d0900

0800620c <LL_RCC_GetPLL2ClockFreq>:
 800620c:	495c      	ldr	r1, [pc, #368]	; (8006380 <LL_RCC_GetPLL2ClockFreq+0x174>)
 800620e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	2b01      	cmp	r3, #1
 8006216:	b430      	push	{r4, r5}
 8006218:	f000 80aa 	beq.w	8006370 <LL_RCC_GetPLL2ClockFreq+0x164>
 800621c:	2b02      	cmp	r3, #2
 800621e:	f000 80a0 	beq.w	8006362 <LL_RCC_GetPLL2ClockFreq+0x156>
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 8092 	beq.w	800634c <LL_RCC_GetPLL2ClockFreq+0x140>
 8006228:	2200      	movs	r2, #0
 800622a:	2300      	movs	r3, #0
 800622c:	4d54      	ldr	r5, [pc, #336]	; (8006380 <LL_RCC_GetPLL2ClockFreq+0x174>)
 800622e:	e9c0 3300 	strd	r3, r3, [r0]
 8006232:	6083      	str	r3, [r0, #8]
 8006234:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006236:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8006238:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800623a:	f3c1 3105 	ubfx	r1, r1, #12, #6
 800623e:	f013 0310 	ands.w	r3, r3, #16
 8006242:	d002      	beq.n	800624a <LL_RCC_GetPLL2ClockFreq+0x3e>
 8006244:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006246:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800624a:	2900      	cmp	r1, #0
 800624c:	d07c      	beq.n	8006348 <LL_RCC_GetPLL2ClockFreq+0x13c>
 800624e:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8006252:	3401      	adds	r4, #1
 8006254:	ee07 4a10 	vmov	s14, r4
 8006258:	4c49      	ldr	r4, [pc, #292]	; (8006380 <LL_RCC_GetPLL2ClockFreq+0x174>)
 800625a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800625c:	032d      	lsls	r5, r5, #12
 800625e:	d523      	bpl.n	80062a8 <LL_RCC_GetPLL2ClockFreq+0x9c>
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006268:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800626a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800626e:	ee07 2a90 	vmov	s15, r2
 8006272:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8006384 <LL_RCC_GetPLL2ClockFreq+0x178>
 8006276:	f3c4 2446 	ubfx	r4, r4, #9, #7
 800627a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800627e:	ee07 1a90 	vmov	s15, r1
 8006282:	eea4 6a85 	vfma.f32	s12, s9, s10
 8006286:	3401      	adds	r4, #1
 8006288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800628c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006290:	ee07 4a90 	vmov	s15, r4
 8006294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006298:	ee26 6a86 	vmul.f32	s12, s13, s12
 800629c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80062a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062a4:	edc0 6a00 	vstr	s13, [r0]
 80062a8:	4c35      	ldr	r4, [pc, #212]	; (8006380 <LL_RCC_GetPLL2ClockFreq+0x174>)
 80062aa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80062ac:	02ed      	lsls	r5, r5, #11
 80062ae:	d523      	bpl.n	80062f8 <LL_RCC_GetPLL2ClockFreq+0xec>
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80062b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80062ba:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80062be:	ee07 2a90 	vmov	s15, r2
 80062c2:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8006384 <LL_RCC_GetPLL2ClockFreq+0x178>
 80062c6:	f3c4 4406 	ubfx	r4, r4, #16, #7
 80062ca:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80062ce:	ee07 1a90 	vmov	s15, r1
 80062d2:	eea4 6a85 	vfma.f32	s12, s9, s10
 80062d6:	3401      	adds	r4, #1
 80062d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062dc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80062e0:	ee07 4a90 	vmov	s15, r4
 80062e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e8:	ee26 6a86 	vmul.f32	s12, s13, s12
 80062ec:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80062f0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062f4:	edc0 6a01 	vstr	s13, [r0, #4]
 80062f8:	4c21      	ldr	r4, [pc, #132]	; (8006380 <LL_RCC_GetPLL2ClockFreq+0x174>)
 80062fa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80062fc:	02ad      	lsls	r5, r5, #10
 80062fe:	d523      	bpl.n	8006348 <LL_RCC_GetPLL2ClockFreq+0x13c>
 8006300:	ee07 2a90 	vmov	s15, r2
 8006304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006308:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8006384 <LL_RCC_GetPLL2ClockFreq+0x178>
 800630c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006310:	ee07 1a90 	vmov	s15, r1
 8006314:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800631e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006322:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8006326:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800632a:	3301      	adds	r3, #1
 800632c:	eea7 7a85 	vfma.f32	s14, s15, s10
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006338:	ee25 7a87 	vmul.f32	s14, s11, s14
 800633c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006340:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006344:	edc0 6a02 	vstr	s13, [r0, #8]
 8006348:	bc30      	pop	{r4, r5}
 800634a:	4770      	bx	lr
 800634c:	680a      	ldr	r2, [r1, #0]
 800634e:	f012 0204 	ands.w	r2, r2, #4
 8006352:	f43f af6a 	beq.w	800622a <LL_RCC_GetPLL2ClockFreq+0x1e>
 8006356:	680b      	ldr	r3, [r1, #0]
 8006358:	4a0b      	ldr	r2, [pc, #44]	; (8006388 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 800635a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800635e:	40da      	lsrs	r2, r3
 8006360:	e763      	b.n	800622a <LL_RCC_GetPLL2ClockFreq+0x1e>
 8006362:	680a      	ldr	r2, [r1, #0]
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <LL_RCC_GetPLL2ClockFreq+0x180>)
 8006366:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800636a:	bf18      	it	ne
 800636c:	461a      	movne	r2, r3
 800636e:	e75c      	b.n	800622a <LL_RCC_GetPLL2ClockFreq+0x1e>
 8006370:	680a      	ldr	r2, [r1, #0]
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <LL_RCC_GetPLL2ClockFreq+0x184>)
 8006374:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8006378:	bf18      	it	ne
 800637a:	461a      	movne	r2, r3
 800637c:	e755      	b.n	800622a <LL_RCC_GetPLL2ClockFreq+0x1e>
 800637e:	bf00      	nop
 8006380:	58024400 	.word	0x58024400
 8006384:	39000000 	.word	0x39000000
 8006388:	03d09000 	.word	0x03d09000
 800638c:	00f42400 	.word	0x00f42400
 8006390:	003d0900 	.word	0x003d0900

08006394 <LL_RCC_GetPLL3ClockFreq>:
 8006394:	4a62      	ldr	r2, [pc, #392]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8006396:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b01      	cmp	r3, #1
 800639e:	b410      	push	{r4}
 80063a0:	f000 80a5 	beq.w	80064ee <LL_RCC_GetPLL3ClockFreq+0x15a>
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	f000 809b 	beq.w	80064e0 <LL_RCC_GetPLL3ClockFreq+0x14c>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 808c 	beq.w	80064c8 <LL_RCC_GetPLL3ClockFreq+0x134>
 80063b0:	4c5b      	ldr	r4, [pc, #364]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80063b2:	2300      	movs	r3, #0
 80063b4:	e9c0 3300 	strd	r3, r3, [r0]
 80063b8:	6083      	str	r3, [r0, #8]
 80063ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80063bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063be:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80063c0:	f3c2 5205 	ubfx	r2, r2, #20, #6
 80063c4:	05e4      	lsls	r4, r4, #23
 80063c6:	d57c      	bpl.n	80064c2 <LL_RCC_GetPLL3ClockFreq+0x12e>
 80063c8:	ee06 3a90 	vmov	s13, r3
 80063cc:	4c54      	ldr	r4, [pc, #336]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80063ce:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80063d0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 80063d4:	ee07 4a10 	vmov	s14, r4
 80063d8:	2a00      	cmp	r2, #0
 80063da:	d072      	beq.n	80064c2 <LL_RCC_GetPLL3ClockFreq+0x12e>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d070      	beq.n	80064c2 <LL_RCC_GetPLL3ClockFreq+0x12e>
 80063e0:	4b4f      	ldr	r3, [pc, #316]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80063e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80063e6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80063e8:	3101      	adds	r1, #1
 80063ea:	ee07 1a90 	vmov	s15, r1
 80063ee:	0261      	lsls	r1, r4, #9
 80063f0:	d51f      	bpl.n	8006432 <LL_RCC_GetPLL3ClockFreq+0x9e>
 80063f2:	ee06 2a10 	vmov	s12, r2
 80063f6:	eef8 4ae6 	vcvt.f32.s32	s9, s13
 80063fa:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006404:	ed9f 4a47 	vldr	s8, [pc, #284]	; 8006524 <LL_RCC_GetPLL3ClockFreq+0x190>
 8006408:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800640c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006410:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8006414:	3301      	adds	r3, #1
 8006416:	ee06 3a10 	vmov	s12, r3
 800641a:	eea3 5a84 	vfma.f32	s10, s7, s8
 800641e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006422:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006426:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800642a:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 800642e:	edc0 5a00 	vstr	s11, [r0]
 8006432:	4b3b      	ldr	r3, [pc, #236]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8006434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006436:	020c      	lsls	r4, r1, #8
 8006438:	d51f      	bpl.n	800647a <LL_RCC_GetPLL3ClockFreq+0xe6>
 800643a:	ee06 2a10 	vmov	s12, r2
 800643e:	eef8 4ae6 	vcvt.f32.s32	s9, s13
 8006442:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800644c:	ed9f 4a35 	vldr	s8, [pc, #212]	; 8006524 <LL_RCC_GetPLL3ClockFreq+0x190>
 8006450:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8006454:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006458:	eec4 5a86 	vdiv.f32	s11, s9, s12
 800645c:	3301      	adds	r3, #1
 800645e:	ee06 3a10 	vmov	s12, r3
 8006462:	eea3 5a84 	vfma.f32	s10, s7, s8
 8006466:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800646a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800646e:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8006472:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8006476:	edc0 5a01 	vstr	s11, [r0, #4]
 800647a:	4b29      	ldr	r3, [pc, #164]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 800647c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800647e:	01c9      	lsls	r1, r1, #7
 8006480:	d51f      	bpl.n	80064c2 <LL_RCC_GetPLL3ClockFreq+0x12e>
 8006482:	ee06 2a10 	vmov	s12, r2
 8006486:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800648a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	eeb8 5ac6 	vcvt.f32.s32	s10, s12
 8006494:	eddf 5a23 	vldr	s11, [pc, #140]	; 8006524 <LL_RCC_GetPLL3ClockFreq+0x190>
 8006498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80064a0:	ee86 6a85 	vdiv.f32	s12, s13, s10
 80064a4:	3301      	adds	r3, #1
 80064a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80064aa:	ee07 3a10 	vmov	s14, r3
 80064ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80064b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80064be:	edc0 6a02 	vstr	s13, [r0, #8]
 80064c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	6813      	ldr	r3, [r2, #0]
 80064ca:	0759      	lsls	r1, r3, #29
 80064cc:	f57f af70 	bpl.w	80063b0 <LL_RCC_GetPLL3ClockFreq+0x1c>
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <LL_RCC_GetPLL3ClockFreq+0x194>)
 80064d4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80064d8:	40d3      	lsrs	r3, r2
 80064da:	ee06 3a90 	vmov	s13, r3
 80064de:	e00c      	b.n	80064fa <LL_RCC_GetPLL3ClockFreq+0x166>
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	039c      	lsls	r4, r3, #14
 80064e4:	f57f af64 	bpl.w	80063b0 <LL_RCC_GetPLL3ClockFreq+0x1c>
 80064e8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800652c <LL_RCC_GetPLL3ClockFreq+0x198>
 80064ec:	e005      	b.n	80064fa <LL_RCC_GetPLL3ClockFreq+0x166>
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	05db      	lsls	r3, r3, #23
 80064f2:	f57f af5d 	bpl.w	80063b0 <LL_RCC_GetPLL3ClockFreq+0x1c>
 80064f6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006530 <LL_RCC_GetPLL3ClockFreq+0x19c>
 80064fa:	2200      	movs	r2, #0
 80064fc:	4b08      	ldr	r3, [pc, #32]	; (8006520 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80064fe:	e9c0 2200 	strd	r2, r2, [r0]
 8006502:	6082      	str	r2, [r0, #8]
 8006504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006506:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	f3c2 5205 	ubfx	r2, r2, #20, #6
 800650e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006512:	ee07 3a10 	vmov	s14, r3
 8006516:	f04f 0301 	mov.w	r3, #1
 800651a:	f43f af5d 	beq.w	80063d8 <LL_RCC_GetPLL3ClockFreq+0x44>
 800651e:	e755      	b.n	80063cc <LL_RCC_GetPLL3ClockFreq+0x38>
 8006520:	58024400 	.word	0x58024400
 8006524:	39000000 	.word	0x39000000
 8006528:	03d09000 	.word	0x03d09000
 800652c:	00f42400 	.word	0x00f42400
 8006530:	003d0900 	.word	0x003d0900

08006534 <LL_RCC_GetUSARTClockFreq>:
 8006534:	4a6e      	ldr	r2, [pc, #440]	; (80066f0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006536:	f3c0 2104 	ubfx	r1, r0, #8, #5
 800653a:	0e03      	lsrs	r3, r0, #24
 800653c:	fa52 f280 	uxtab	r2, r2, r0
 8006540:	408b      	lsls	r3, r1
 8006542:	f8d2 244c 	ldr.w	r2, [r2, #1100]	; 0x44c
 8006546:	4013      	ands	r3, r2
 8006548:	40cb      	lsrs	r3, r1
 800654a:	b510      	push	{r4, lr}
 800654c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006550:	4c68      	ldr	r4, [pc, #416]	; (80066f4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006552:	b084      	sub	sp, #16
 8006554:	42a0      	cmp	r0, r4
 8006556:	d00c      	beq.n	8006572 <LL_RCC_GetUSARTClockFreq+0x3e>
 8006558:	d83d      	bhi.n	80065d6 <LL_RCC_GetUSARTClockFreq+0xa2>
 800655a:	4b67      	ldr	r3, [pc, #412]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800655c:	4298      	cmp	r0, r3
 800655e:	f000 8086 	beq.w	800666e <LL_RCC_GetUSARTClockFreq+0x13a>
 8006562:	d91f      	bls.n	80065a4 <LL_RCC_GetUSARTClockFreq+0x70>
 8006564:	4b65      	ldr	r3, [pc, #404]	; (80066fc <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8006566:	4298      	cmp	r0, r3
 8006568:	d012      	beq.n	8006590 <LL_RCC_GetUSARTClockFreq+0x5c>
 800656a:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 800656e:	4298      	cmp	r0, r3
 8006570:	d10a      	bne.n	8006588 <LL_RCC_GetUSARTClockFreq+0x54>
 8006572:	4b63      	ldr	r3, [pc, #396]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800657a:	d003      	beq.n	8006584 <LL_RCC_GetUSARTClockFreq+0x50>
 800657c:	a801      	add	r0, sp, #4
 800657e:	f7ff ff09 	bl	8006394 <LL_RCC_GetPLL3ClockFreq>
 8006582:	9802      	ldr	r0, [sp, #8]
 8006584:	b004      	add	sp, #16
 8006586:	bd10      	pop	{r4, pc}
 8006588:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800658c:	4298      	cmp	r0, r3
 800658e:	d156      	bne.n	800663e <LL_RCC_GetUSARTClockFreq+0x10a>
 8006590:	4b5b      	ldr	r3, [pc, #364]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006598:	d0f4      	beq.n	8006584 <LL_RCC_GetUSARTClockFreq+0x50>
 800659a:	a801      	add	r0, sp, #4
 800659c:	f7ff fe36 	bl	800620c <LL_RCC_GetPLL2ClockFreq>
 80065a0:	9802      	ldr	r0, [sp, #8]
 80065a2:	e7ef      	b.n	8006584 <LL_RCC_GetUSARTClockFreq+0x50>
 80065a4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80065a8:	4298      	cmp	r0, r3
 80065aa:	d148      	bne.n	800663e <LL_RCC_GetUSARTClockFreq+0x10a>
 80065ac:	4b54      	ldr	r3, [pc, #336]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b4:	2b18      	cmp	r3, #24
 80065b6:	d845      	bhi.n	8006644 <LL_RCC_GetUSARTClockFreq+0x110>
 80065b8:	e8df f003 	tbb	[pc, r3]
 80065bc:	44444488 	.word	0x44444488
 80065c0:	44444444 	.word	0x44444444
 80065c4:	44444498 	.word	0x44444498
 80065c8:	44444444 	.word	0x44444444
 80065cc:	4444448f 	.word	0x4444448f
 80065d0:	44444444 	.word	0x44444444
 80065d4:	91          	.byte	0x91
 80065d5:	00          	.byte	0x00
 80065d6:	4b4b      	ldr	r3, [pc, #300]	; (8006704 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80065d8:	4298      	cmp	r0, r3
 80065da:	d018      	beq.n	800660e <LL_RCC_GetUSARTClockFreq+0xda>
 80065dc:	d90f      	bls.n	80065fe <LL_RCC_GetUSARTClockFreq+0xca>
 80065de:	4b4a      	ldr	r3, [pc, #296]	; (8006708 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 80065e0:	4298      	cmp	r0, r3
 80065e2:	d003      	beq.n	80065ec <LL_RCC_GetUSARTClockFreq+0xb8>
 80065e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80065e8:	4298      	cmp	r0, r3
 80065ea:	d128      	bne.n	800663e <LL_RCC_GetUSARTClockFreq+0x10a>
 80065ec:	4b44      	ldr	r3, [pc, #272]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80065ee:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80065f0:	f010 0002 	ands.w	r0, r0, #2
 80065f4:	bf18      	it	ne
 80065f6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80065fa:	b004      	add	sp, #16
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006602:	4298      	cmp	r0, r3
 8006604:	d010      	beq.n	8006628 <LL_RCC_GetUSARTClockFreq+0xf4>
 8006606:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 800660a:	4298      	cmp	r0, r3
 800660c:	d108      	bne.n	8006620 <LL_RCC_GetUSARTClockFreq+0xec>
 800660e:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006610:	4b3e      	ldr	r3, [pc, #248]	; (800670c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8006612:	6810      	ldr	r0, [r2, #0]
 8006614:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006618:	bf18      	it	ne
 800661a:	4618      	movne	r0, r3
 800661c:	b004      	add	sp, #16
 800661e:	bd10      	pop	{r4, pc}
 8006620:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006624:	4298      	cmp	r0, r3
 8006626:	d10a      	bne.n	800663e <LL_RCC_GetUSARTClockFreq+0x10a>
 8006628:	4b35      	ldr	r3, [pc, #212]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	f010 0004 	ands.w	r0, r0, #4
 8006630:	d0a8      	beq.n	8006584 <LL_RCC_GetUSARTClockFreq+0x50>
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4836      	ldr	r0, [pc, #216]	; (8006710 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8006636:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800663a:	40d8      	lsrs	r0, r3
 800663c:	e7a2      	b.n	8006584 <LL_RCC_GetUSARTClockFreq+0x50>
 800663e:	2000      	movs	r0, #0
 8006640:	b004      	add	sp, #16
 8006642:	bd10      	pop	{r4, pc}
 8006644:	2300      	movs	r3, #0
 8006646:	4a2e      	ldr	r2, [pc, #184]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006648:	6990      	ldr	r0, [r2, #24]
 800664a:	6994      	ldr	r4, [r2, #24]
 800664c:	69d2      	ldr	r2, [r2, #28]
 800664e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8006652:	f004 040f 	and.w	r4, r4, #15
 8006656:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800665a:	492e      	ldr	r1, [pc, #184]	; (8006714 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 800665c:	5c08      	ldrb	r0, [r1, r0]
 800665e:	5d0c      	ldrb	r4, [r1, r4]
 8006660:	fa23 f000 	lsr.w	r0, r3, r0
 8006664:	5c8a      	ldrb	r2, [r1, r2]
 8006666:	40e0      	lsrs	r0, r4
 8006668:	40d0      	lsrs	r0, r2
 800666a:	b004      	add	sp, #16
 800666c:	bd10      	pop	{r4, pc}
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006676:	2b18      	cmp	r3, #24
 8006678:	d80e      	bhi.n	8006698 <LL_RCC_GetUSARTClockFreq+0x164>
 800667a:	e8df f003 	tbb	[pc, r3]
 800667e:	0d20      	.short	0x0d20
 8006680:	0d0d0d0d 	.word	0x0d0d0d0d
 8006684:	0d350d0d 	.word	0x0d350d0d
 8006688:	0d0d0d0d 	.word	0x0d0d0d0d
 800668c:	0d1e0d0d 	.word	0x0d1e0d0d
 8006690:	0d0d0d0d 	.word	0x0d0d0d0d
 8006694:	0d0d      	.short	0x0d0d
 8006696:	19          	.byte	0x19
 8006697:	00          	.byte	0x00
 8006698:	2300      	movs	r3, #0
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800669c:	6990      	ldr	r0, [r2, #24]
 800669e:	6994      	ldr	r4, [r2, #24]
 80066a0:	69d2      	ldr	r2, [r2, #28]
 80066a2:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80066a6:	f004 040f 	and.w	r4, r4, #15
 80066aa:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80066ae:	e7d4      	b.n	800665a <LL_RCC_GetUSARTClockFreq+0x126>
 80066b0:	a801      	add	r0, sp, #4
 80066b2:	f7ff fce7 	bl	8006084 <LL_RCC_GetPLL1ClockFreq>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	e7ef      	b.n	800669a <LL_RCC_GetUSARTClockFreq+0x166>
 80066ba:	4b17      	ldr	r3, [pc, #92]	; (8006718 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 80066bc:	e7ed      	b.n	800669a <LL_RCC_GetUSARTClockFreq+0x166>
 80066be:	4a10      	ldr	r2, [pc, #64]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80066c0:	4b13      	ldr	r3, [pc, #76]	; (8006710 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80066c8:	40d3      	lsrs	r3, r2
 80066ca:	e7e6      	b.n	800669a <LL_RCC_GetUSARTClockFreq+0x166>
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80066ce:	4b10      	ldr	r3, [pc, #64]	; (8006710 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80066d6:	40d3      	lsrs	r3, r2
 80066d8:	e7b5      	b.n	8006646 <LL_RCC_GetUSARTClockFreq+0x112>
 80066da:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 80066dc:	e7b3      	b.n	8006646 <LL_RCC_GetUSARTClockFreq+0x112>
 80066de:	a801      	add	r0, sp, #4
 80066e0:	f7ff fcd0 	bl	8006084 <LL_RCC_GetPLL1ClockFreq>
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	e7ae      	b.n	8006646 <LL_RCC_GetUSARTClockFreq+0x112>
 80066e8:	4b08      	ldr	r3, [pc, #32]	; (800670c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80066ea:	e7d6      	b.n	800669a <LL_RCC_GetUSARTClockFreq+0x166>
 80066ec:	4b07      	ldr	r3, [pc, #28]	; (800670c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80066ee:	e7aa      	b.n	8006646 <LL_RCC_GetUSARTClockFreq+0x112>
 80066f0:	58024000 	.word	0x58024000
 80066f4:	07020308 	.word	0x07020308
 80066f8:	07000308 	.word	0x07000308
 80066fc:	07010308 	.word	0x07010308
 8006700:	58024400 	.word	0x58024400
 8006704:	07040308 	.word	0x07040308
 8006708:	07050008 	.word	0x07050008
 800670c:	003d0900 	.word	0x003d0900
 8006710:	03d09000 	.word	0x03d09000
 8006714:	08008e04 	.word	0x08008e04
 8006718:	00f42400 	.word	0x00f42400

0800671c <LL_TIM_Init>:
 800671c:	4a3b      	ldr	r2, [pc, #236]	; (800680c <LL_TIM_Init+0xf0>)
 800671e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006722:	6803      	ldr	r3, [r0, #0]
 8006724:	eba0 0202 	sub.w	r2, r0, r2
 8006728:	fab2 f282 	clz	r2, r2
 800672c:	b430      	push	{r4, r5}
 800672e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8006732:	d01f      	beq.n	8006774 <LL_TIM_Init+0x58>
 8006734:	b9f2      	cbnz	r2, 8006774 <LL_TIM_Init+0x58>
 8006736:	4c36      	ldr	r4, [pc, #216]	; (8006810 <LL_TIM_Init+0xf4>)
 8006738:	42a0      	cmp	r0, r4
 800673a:	d042      	beq.n	80067c2 <LL_TIM_Init+0xa6>
 800673c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006740:	42a0      	cmp	r0, r4
 8006742:	d03e      	beq.n	80067c2 <LL_TIM_Init+0xa6>
 8006744:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006748:	42a0      	cmp	r0, r4
 800674a:	d044      	beq.n	80067d6 <LL_TIM_Init+0xba>
 800674c:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8006750:	42a0      	cmp	r0, r4
 8006752:	d040      	beq.n	80067d6 <LL_TIM_Init+0xba>
 8006754:	4c2f      	ldr	r4, [pc, #188]	; (8006814 <LL_TIM_Init+0xf8>)
 8006756:	4a30      	ldr	r2, [pc, #192]	; (8006818 <LL_TIM_Init+0xfc>)
 8006758:	4290      	cmp	r0, r2
 800675a:	bf18      	it	ne
 800675c:	42a0      	cmpne	r0, r4
 800675e:	d04a      	beq.n	80067f6 <LL_TIM_Init+0xda>
 8006760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006764:	4290      	cmp	r0, r2
 8006766:	d046      	beq.n	80067f6 <LL_TIM_Init+0xda>
 8006768:	688c      	ldr	r4, [r1, #8]
 800676a:	880a      	ldrh	r2, [r1, #0]
 800676c:	6003      	str	r3, [r0, #0]
 800676e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006770:	6282      	str	r2, [r0, #40]	; 0x28
 8006772:	e01f      	b.n	80067b4 <LL_TIM_Init+0x98>
 8006774:	684c      	ldr	r4, [r1, #4]
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	4323      	orrs	r3, r4
 800677c:	4c27      	ldr	r4, [pc, #156]	; (800681c <LL_TIM_Init+0x100>)
 800677e:	1b04      	subs	r4, r0, r4
 8006780:	fab4 f484 	clz	r4, r4
 8006784:	0964      	lsrs	r4, r4, #5
 8006786:	68cd      	ldr	r5, [r1, #12]
 8006788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678c:	432b      	orrs	r3, r5
 800678e:	6003      	str	r3, [r0, #0]
 8006790:	688b      	ldr	r3, [r1, #8]
 8006792:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006794:	880b      	ldrh	r3, [r1, #0]
 8006796:	6283      	str	r3, [r0, #40]	; 0x28
 8006798:	b952      	cbnz	r2, 80067b0 <LL_TIM_Init+0x94>
 800679a:	b94c      	cbnz	r4, 80067b0 <LL_TIM_Init+0x94>
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <LL_TIM_Init+0xf8>)
 800679e:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <LL_TIM_Init+0xfc>)
 80067a0:	4298      	cmp	r0, r3
 80067a2:	bf18      	it	ne
 80067a4:	4290      	cmpne	r0, r2
 80067a6:	d003      	beq.n	80067b0 <LL_TIM_Init+0x94>
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	4298      	cmp	r0, r3
 80067ae:	d101      	bne.n	80067b4 <LL_TIM_Init+0x98>
 80067b0:	7c0b      	ldrb	r3, [r1, #16]
 80067b2:	6303      	str	r3, [r0, #48]	; 0x30
 80067b4:	6943      	ldr	r3, [r0, #20]
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	bc30      	pop	{r4, r5}
 80067bc:	6143      	str	r3, [r0, #20]
 80067be:	2001      	movs	r0, #1
 80067c0:	4770      	bx	lr
 80067c2:	4c16      	ldr	r4, [pc, #88]	; (800681c <LL_TIM_Init+0x100>)
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	684d      	ldr	r5, [r1, #4]
 80067ca:	1b04      	subs	r4, r0, r4
 80067cc:	432b      	orrs	r3, r5
 80067ce:	fab4 f484 	clz	r4, r4
 80067d2:	0964      	lsrs	r4, r4, #5
 80067d4:	e7d7      	b.n	8006786 <LL_TIM_Init+0x6a>
 80067d6:	684d      	ldr	r5, [r1, #4]
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	4c0f      	ldr	r4, [pc, #60]	; (800681c <LL_TIM_Init+0x100>)
 80067de:	432b      	orrs	r3, r5
 80067e0:	4d0f      	ldr	r5, [pc, #60]	; (8006820 <LL_TIM_Init+0x104>)
 80067e2:	1b04      	subs	r4, r0, r4
 80067e4:	42a8      	cmp	r0, r5
 80067e6:	fab4 f484 	clz	r4, r4
 80067ea:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80067ee:	d0ca      	beq.n	8006786 <LL_TIM_Init+0x6a>
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d1c8      	bne.n	8006786 <LL_TIM_Init+0x6a>
 80067f4:	e7ae      	b.n	8006754 <LL_TIM_Init+0x38>
 80067f6:	68cc      	ldr	r4, [r1, #12]
 80067f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fc:	688a      	ldr	r2, [r1, #8]
 80067fe:	4323      	orrs	r3, r4
 8006800:	6003      	str	r3, [r0, #0]
 8006802:	880b      	ldrh	r3, [r1, #0]
 8006804:	62c2      	str	r2, [r0, #44]	; 0x2c
 8006806:	6283      	str	r3, [r0, #40]	; 0x28
 8006808:	e7c8      	b.n	800679c <LL_TIM_Init+0x80>
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40000400 	.word	0x40000400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40010400 	.word	0x40010400
 8006820:	40000c00 	.word	0x40000c00

08006824 <LL_USART_Init>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4604      	mov	r4, r0
 8006828:	6800      	ldr	r0, [r0, #0]
 800682a:	f010 0001 	ands.w	r0, r0, #1
 800682e:	d13d      	bne.n	80068ac <LL_USART_Init+0x88>
 8006830:	690a      	ldr	r2, [r1, #16]
 8006832:	460d      	mov	r5, r1
 8006834:	688b      	ldr	r3, [r1, #8]
 8006836:	6821      	ldr	r1, [r4, #0]
 8006838:	4313      	orrs	r3, r2
 800683a:	696a      	ldr	r2, [r5, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	69ea      	ldr	r2, [r5, #28]
 8006840:	4313      	orrs	r3, r2
 8006842:	4a37      	ldr	r2, [pc, #220]	; (8006920 <LL_USART_Init+0xfc>)
 8006844:	400a      	ands	r2, r1
 8006846:	68e9      	ldr	r1, [r5, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	6862      	ldr	r2, [r4, #4]
 800684e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006852:	430a      	orrs	r2, r1
 8006854:	69a9      	ldr	r1, [r5, #24]
 8006856:	6062      	str	r2, [r4, #4]
 8006858:	68a3      	ldr	r3, [r4, #8]
 800685a:	4a32      	ldr	r2, [pc, #200]	; (8006924 <LL_USART_Init+0x100>)
 800685c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006860:	4294      	cmp	r4, r2
 8006862:	ea43 0301 	orr.w	r3, r3, r1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	d043      	beq.n	80068f2 <LL_USART_Init+0xce>
 800686a:	4b2f      	ldr	r3, [pc, #188]	; (8006928 <LL_USART_Init+0x104>)
 800686c:	429c      	cmp	r4, r3
 800686e:	d01f      	beq.n	80068b0 <LL_USART_Init+0x8c>
 8006870:	4b2e      	ldr	r3, [pc, #184]	; (800692c <LL_USART_Init+0x108>)
 8006872:	429c      	cmp	r4, r3
 8006874:	d01c      	beq.n	80068b0 <LL_USART_Init+0x8c>
 8006876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687a:	429c      	cmp	r4, r3
 800687c:	d018      	beq.n	80068b0 <LL_USART_Init+0x8c>
 800687e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006882:	429c      	cmp	r4, r3
 8006884:	d014      	beq.n	80068b0 <LL_USART_Init+0x8c>
 8006886:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800688a:	429c      	cmp	r4, r3
 800688c:	d031      	beq.n	80068f2 <LL_USART_Init+0xce>
 800688e:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8006892:	429c      	cmp	r4, r3
 8006894:	d00c      	beq.n	80068b0 <LL_USART_Init+0x8c>
 8006896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800689a:	429c      	cmp	r4, r3
 800689c:	d008      	beq.n	80068b0 <LL_USART_Init+0x8c>
 800689e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068a0:	8829      	ldrh	r1, [r5, #0]
 80068a2:	f023 030f 	bic.w	r3, r3, #15
 80068a6:	430b      	orrs	r3, r1
 80068a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	2000      	movs	r0, #0
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	481f      	ldr	r0, [pc, #124]	; (8006930 <LL_USART_Init+0x10c>)
 80068b2:	f7ff fe3f 	bl	8006534 <LL_RCC_GetUSARTClockFreq>
 80068b6:	b1a0      	cbz	r0, 80068e2 <LL_USART_Init+0xbe>
 80068b8:	686b      	ldr	r3, [r5, #4]
 80068ba:	b193      	cbz	r3, 80068e2 <LL_USART_Init+0xbe>
 80068bc:	69ea      	ldr	r2, [r5, #28]
 80068be:	6829      	ldr	r1, [r5, #0]
 80068c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80068c4:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <LL_USART_Init+0x110>)
 80068c6:	b289      	uxth	r1, r1
 80068c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80068cc:	d017      	beq.n	80068fe <LL_USART_Init+0xda>
 80068ce:	fbb0 f2f2 	udiv	r2, r0, r2
 80068d2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80068d6:	2001      	movs	r0, #1
 80068d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068dc:	b292      	uxth	r2, r2
 80068de:	60e2      	str	r2, [r4, #12]
 80068e0:	e001      	b.n	80068e6 <LL_USART_Init+0xc2>
 80068e2:	8829      	ldrh	r1, [r5, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068e8:	f023 030f 	bic.w	r3, r3, #15
 80068ec:	430b      	orrs	r3, r1
 80068ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	4811      	ldr	r0, [pc, #68]	; (8006938 <LL_USART_Init+0x114>)
 80068f4:	f7ff fe1e 	bl	8006534 <LL_RCC_GetUSARTClockFreq>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d1dd      	bne.n	80068b8 <LL_USART_Init+0x94>
 80068fc:	e7f1      	b.n	80068e2 <LL_USART_Init+0xbe>
 80068fe:	fbb0 f0f2 	udiv	r0, r0, r2
 8006902:	085a      	lsrs	r2, r3, #1
 8006904:	f64f 75f0 	movw	r5, #65520	; 0xfff0
 8006908:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800690c:	fbb0 f2f3 	udiv	r2, r0, r3
 8006910:	ea02 0005 	and.w	r0, r2, r5
 8006914:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8006918:	4303      	orrs	r3, r0
 800691a:	2001      	movs	r0, #1
 800691c:	60e3      	str	r3, [r4, #12]
 800691e:	e7e2      	b.n	80068e6 <LL_USART_Init+0xc2>
 8006920:	efff69f3 	.word	0xefff69f3
 8006924:	40011000 	.word	0x40011000
 8006928:	40004400 	.word	0x40004400
 800692c:	40004800 	.word	0x40004800
 8006930:	07000008 	.word	0x07000008
 8006934:	08008e14 	.word	0x08008e14
 8006938:	07000308 	.word	0x07000308
 800693c:	00000000 	.word	0x00000000

08006940 <cosf>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	ee10 4a10 	vmov	r4, s0
 8006946:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800694a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800694e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8006952:	d21e      	bcs.n	8006992 <cosf+0x52>
 8006954:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006958:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800695c:	d36f      	bcc.n	8006a3e <cosf+0xfe>
 800695e:	ee27 1b07 	vmul.f64	d1, d7, d7
 8006962:	4b63      	ldr	r3, [pc, #396]	; (8006af0 <cosf+0x1b0>)
 8006964:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006968:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 800696c:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006970:	eea7 5b02 	vfma.f64	d5, d7, d2
 8006974:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006978:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800697c:	eea7 0b03 	vfma.f64	d0, d7, d3
 8006980:	ee27 7b01 	vmul.f64	d7, d7, d1
 8006984:	eea1 0b04 	vfma.f64	d0, d1, d4
 8006988:	eea5 0b07 	vfma.f64	d0, d5, d7
 800698c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	f240 422e 	movw	r2, #1070	; 0x42e
 8006996:	4293      	cmp	r3, r2
 8006998:	d854      	bhi.n	8006a44 <cosf+0x104>
 800699a:	4955      	ldr	r1, [pc, #340]	; (8006af0 <cosf+0x1b0>)
 800699c:	ed91 6b08 	vldr	d6, [r1, #32]
 80069a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069a4:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80069a8:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
 80069ac:	ee16 3a90 	vmov	r3, s13
 80069b0:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80069b4:	161b      	asrs	r3, r3, #24
 80069b6:	f013 0f02 	tst.w	r3, #2
 80069ba:	ee06 3a90 	vmov	s13, r3
 80069be:	f101 0270 	add.w	r2, r1, #112	; 0x70
 80069c2:	bf08      	it	eq
 80069c4:	460a      	moveq	r2, r1
 80069c6:	07d8      	lsls	r0, r3, #31
 80069c8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80069cc:	eea6 7b45 	vfms.f64	d7, d6, d5
 80069d0:	ee27 6b07 	vmul.f64	d6, d7, d7
 80069d4:	d51a      	bpl.n	8006a0c <cosf+0xcc>
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80069de:	ed93 2b00 	vldr	d2, [r3]
 80069e2:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
 80069e6:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
 80069ea:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
 80069ee:	eea6 5b04 	vfma.f64	d5, d6, d4
 80069f2:	ee27 7b02 	vmul.f64	d7, d7, d2
 80069f6:	ee27 4b06 	vmul.f64	d4, d7, d6
 80069fa:	ee26 6b04 	vmul.f64	d6, d6, d4
 80069fe:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006a02:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006a06:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
 8006a10:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
 8006a14:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
 8006a18:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
 8006a1c:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
 8006a20:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006a24:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006a28:	eea6 0b03 	vfma.f64	d0, d6, d3
 8006a2c:	ee26 6b05 	vmul.f64	d6, d6, d5
 8006a30:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006a34:	eea7 0b06 	vfma.f64	d0, d7, d6
 8006a38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
 8006a3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006a48:	d23d      	bcs.n	8006ac6 <cosf+0x186>
 8006a4a:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <cosf+0x1b4>)
 8006a4c:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006a50:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006a54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a58:	690d      	ldr	r5, [r1, #16]
 8006a5a:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006a5e:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006a62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a66:	4083      	lsls	r3, r0
 8006a68:	6a08      	ldr	r0, [r1, #32]
 8006a6a:	fb03 f202 	mul.w	r2, r3, r2
 8006a6e:	fba3 1000 	umull	r1, r0, r3, r0
 8006a72:	fbe3 0205 	umlal	r0, r2, r3, r5
 8006a76:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8006a7a:	0f8d      	lsrs	r5, r1, #30
 8006a7c:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8006a80:	1a51      	subs	r1, r2, r1
 8006a82:	f7f9 fe13 	bl	80006ac <__aeabi_l2d>
 8006a86:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <cosf+0x1b8>)
 8006a88:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8006ae8 <cosf+0x1a8>
 8006a8c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006a90:	ec41 0b16 	vmov	d6, r0, r1
 8006a94:	f014 0f02 	tst.w	r4, #2
 8006a98:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8006a9c:	bf08      	it	eq
 8006a9e:	4613      	moveq	r3, r2
 8006aa0:	07e9      	lsls	r1, r5, #31
 8006aa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006aa6:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006aaa:	d510      	bpl.n	8006ace <cosf+0x18e>
 8006aac:	f004 0403 	and.w	r4, r4, #3
 8006ab0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8006ab4:	ed94 2b00 	vldr	d2, [r4]
 8006ab8:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8006abc:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006ac0:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
 8006ac4:	e793      	b.n	80069ee <cosf+0xae>
 8006ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aca:	f000 b857 	b.w	8006b7c <__math_invalidf>
 8006ace:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006ad2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006ad6:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006ada:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006ade:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006ae2:	e79d      	b.n	8006a20 <cosf+0xe0>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	54442d18 	.word	0x54442d18
 8006aec:	3c1921fb 	.word	0x3c1921fb
 8006af0:	08008fd8 	.word	0x08008fd8
 8006af4:	08008f78 	.word	0x08008f78
 8006af8:	08009048 	.word	0x08009048

08006afc <with_errnof>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006b04:	4604      	mov	r4, r0
 8006b06:	f000 fbc7 	bl	8007298 <__errno>
 8006b0a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006b0e:	6004      	str	r4, [r0, #0]
 8006b10:	b002      	add	sp, #8
 8006b12:	bd10      	pop	{r4, pc}

08006b14 <xflowf>:
 8006b14:	b130      	cbz	r0, 8006b24 <xflowf+0x10>
 8006b16:	eef1 7a40 	vneg.f32	s15, s0
 8006b1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b1e:	2022      	movs	r0, #34	; 0x22
 8006b20:	f7ff bfec 	b.w	8006afc <with_errnof>
 8006b24:	eef0 7a40 	vmov.f32	s15, s0
 8006b28:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b2c:	2022      	movs	r0, #34	; 0x22
 8006b2e:	f7ff bfe5 	b.w	8006afc <with_errnof>
 8006b32:	bf00      	nop

08006b34 <__math_uflowf>:
 8006b34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b3c <__math_uflowf+0x8>
 8006b38:	f7ff bfec 	b.w	8006b14 <xflowf>
 8006b3c:	10000000 	.word	0x10000000

08006b40 <__math_may_uflowf>:
 8006b40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b48 <__math_may_uflowf+0x8>
 8006b44:	f7ff bfe6 	b.w	8006b14 <xflowf>
 8006b48:	1a200000 	.word	0x1a200000

08006b4c <__math_oflowf>:
 8006b4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b54 <__math_oflowf+0x8>
 8006b50:	f7ff bfe0 	b.w	8006b14 <xflowf>
 8006b54:	70000000 	.word	0x70000000

08006b58 <__math_divzerof>:
 8006b58:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006b78 <__math_divzerof+0x20>
 8006b5c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8006b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f04f 0022 	mov.w	r0, #34	; 0x22
 8006b6a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 8006b6e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006b72:	f7ff bfc3 	b.w	8006afc <with_errnof>
 8006b76:	bf00      	nop
 8006b78:	00000000 	.word	0x00000000

08006b7c <__math_invalidf>:
 8006b7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006b80:	eeb4 0a40 	vcmp.f32	s0, s0
 8006b84:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 8006b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8006b90:	d602      	bvs.n	8006b98 <__math_invalidf+0x1c>
 8006b92:	2021      	movs	r0, #33	; 0x21
 8006b94:	f7ff bfb2 	b.w	8006afc <with_errnof>
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop

08006b9c <expf>:
 8006b9c:	ee10 3a10 	vmov	r3, s0
 8006ba0:	f240 412a 	movw	r1, #1066	; 0x42a
 8006ba4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ba8:	428a      	cmp	r2, r1
 8006baa:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
 8006bae:	d832      	bhi.n	8006c16 <expf+0x7a>
 8006bb0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <expf+0xd0>)
 8006bb6:	ed93 2b4a 	vldr	d2, [r3, #296]	; 0x128
 8006bba:	ed93 1b48 	vldr	d1, [r3, #288]	; 0x120
 8006bbe:	eeb0 7b41 	vmov.f64	d7, d1
 8006bc2:	eea2 7b03 	vfma.f64	d7, d2, d3
 8006bc6:	ee17 0a10 	vmov	r0, s14
 8006bca:	ee37 7b41 	vsub.f64	d7, d7, d1
 8006bce:	f000 021f 	and.w	r2, r0, #31
 8006bd2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8006bd6:	b430      	push	{r4, r5}
 8006bd8:	ee92 7b03 	vfnms.f64	d7, d2, d3
 8006bdc:	ed93 4b4c 	vldr	d4, [r3, #304]	; 0x130
 8006be0:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8006be4:	684d      	ldr	r5, [r1, #4]
 8006be6:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8006bea:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8006bee:	eea4 6b07 	vfma.f64	d6, d4, d7
 8006bf2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	190a      	adds	r2, r1, r4
 8006bfa:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8006bfe:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006c02:	ec43 2b17 	vmov	d7, r2, r3
 8006c06:	eea6 0b04 	vfma.f64	d0, d6, d4
 8006c0a:	bc30      	pop	{r4, r5}
 8006c0c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006c10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006c14:	4770      	bx	lr
 8006c16:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8006c1a:	d020      	beq.n	8006c5e <expf+0xc2>
 8006c1c:	f5b2 6fff 	cmp.w	r2, #2040	; 0x7f8
 8006c20:	d21a      	bcs.n	8006c58 <expf+0xbc>
 8006c22:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006c70 <expf+0xd4>
 8006c26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2e:	dc10      	bgt.n	8006c52 <expf+0xb6>
 8006c30:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006c74 <expf+0xd8>
 8006c34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3c:	d412      	bmi.n	8006c64 <expf+0xc8>
 8006c3e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006c78 <expf+0xdc>
 8006c42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	d5b1      	bpl.n	8006bb0 <expf+0x14>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f7ff bf77 	b.w	8006b40 <__math_may_uflowf>
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7ff bf7a 	b.w	8006b4c <__math_oflowf>
 8006c58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c5c:	4770      	bx	lr
 8006c5e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006c7c <expf+0xe0>
 8006c62:	4770      	bx	lr
 8006c64:	2000      	movs	r0, #0
 8006c66:	f7ff bf65 	b.w	8006b34 <__math_uflowf>
 8006c6a:	bf00      	nop
 8006c6c:	08008e30 	.word	0x08008e30
 8006c70:	42b17217 	.word	0x42b17217
 8006c74:	c2cff1b4 	.word	0xc2cff1b4
 8006c78:	c2ce8ecf 	.word	0xc2ce8ecf
 8006c7c:	00000000 	.word	0x00000000

08006c80 <sinf>:
 8006c80:	b530      	push	{r4, r5, lr}
 8006c82:	ee10 4a10 	vmov	r4, s0
 8006c86:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006c8a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006c8e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006c92:	b083      	sub	sp, #12
 8006c94:	d21b      	bcs.n	8006cce <sinf+0x4e>
 8006c96:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006c9a:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006c9e:	d370      	bcc.n	8006d82 <sinf+0x102>
 8006ca0:	ee26 2b05 	vmul.f64	d2, d6, d5
 8006ca4:	ee25 1b02 	vmul.f64	d1, d5, d2
 8006ca8:	4b75      	ldr	r3, [pc, #468]	; (8006e80 <sinf+0x200>)
 8006caa:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
 8006cae:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006cb2:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
 8006cb6:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006cba:	eea2 6b04 	vfma.f64	d6, d2, d4
 8006cbe:	eeb0 0b46 	vmov.f64	d0, d6
 8006cc2:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006cc6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006cca:	b003      	add	sp, #12
 8006ccc:	bd30      	pop	{r4, r5, pc}
 8006cce:	f240 422e 	movw	r2, #1070	; 0x42e
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d860      	bhi.n	8006d98 <sinf+0x118>
 8006cd6:	496a      	ldr	r1, [pc, #424]	; (8006e80 <sinf+0x200>)
 8006cd8:	ed91 7b08 	vldr	d7, [r1, #32]
 8006cdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ce0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ce4:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
 8006ce8:	ee17 3a90 	vmov	r3, s15
 8006cec:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8006cf0:	161b      	asrs	r3, r3, #24
 8006cf2:	f013 0f02 	tst.w	r3, #2
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8006cfe:	bf08      	it	eq
 8006d00:	460a      	moveq	r2, r1
 8006d02:	07d8      	lsls	r0, r3, #31
 8006d04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d08:	eea7 6b45 	vfms.f64	d6, d7, d5
 8006d0c:	eeb0 0b46 	vmov.f64	d0, d6
 8006d10:	ee26 7b06 	vmul.f64	d7, d6, d6
 8006d14:	d41b      	bmi.n	8006d4e <sinf+0xce>
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8006d1e:	ed92 5b1a 	vldr	d5, [r2, #104]	; 0x68
 8006d22:	ed93 3b00 	vldr	d3, [r3]
 8006d26:	ed92 6b18 	vldr	d6, [r2, #96]	; 0x60
 8006d2a:	ee20 0b03 	vmul.f64	d0, d0, d3
 8006d2e:	ed92 4b16 	vldr	d4, [r2, #88]	; 0x58
 8006d32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006d36:	ee20 5b07 	vmul.f64	d5, d0, d7
 8006d3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d3e:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006d42:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006d46:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006d4a:	b003      	add	sp, #12
 8006d4c:	bd30      	pop	{r4, r5, pc}
 8006d4e:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
 8006d52:	ee27 5b07 	vmul.f64	d5, d7, d7
 8006d56:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
 8006d5a:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
 8006d5e:	eea7 6b02 	vfma.f64	d6, d7, d2
 8006d62:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
 8006d66:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
 8006d6a:	eea7 0b03 	vfma.f64	d0, d7, d3
 8006d6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d72:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006d76:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006d7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006d7e:	b003      	add	sp, #12
 8006d80:	bd30      	pop	{r4, r5, pc}
 8006d82:	0d22      	lsrs	r2, r4, #20
 8006d84:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8006d88:	d1df      	bne.n	8006d4a <sinf+0xca>
 8006d8a:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8006d8e:	ee00 4a10 	vmov	s0, r4
 8006d92:	ed8d 5a01 	vstr	s10, [sp, #4]
 8006d96:	e7d8      	b.n	8006d4a <sinf+0xca>
 8006d98:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006d9c:	d24b      	bcs.n	8006e36 <sinf+0x1b6>
 8006d9e:	4b39      	ldr	r3, [pc, #228]	; (8006e84 <sinf+0x204>)
 8006da0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006da4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006da8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dac:	690d      	ldr	r5, [r1, #16]
 8006dae:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006db2:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006db6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dba:	4083      	lsls	r3, r0
 8006dbc:	6a08      	ldr	r0, [r1, #32]
 8006dbe:	fb03 f202 	mul.w	r2, r3, r2
 8006dc2:	fba3 1000 	umull	r1, r0, r3, r0
 8006dc6:	fbe3 0205 	umlal	r0, r2, r3, r5
 8006dca:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8006dce:	0f8d      	lsrs	r5, r1, #30
 8006dd0:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8006dd4:	1a51      	subs	r1, r2, r1
 8006dd6:	f7f9 fc69 	bl	80006ac <__aeabi_l2d>
 8006dda:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <sinf+0x208>)
 8006ddc:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8006e78 <sinf+0x1f8>
 8006de0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006de4:	ec41 0b16 	vmov	d6, r0, r1
 8006de8:	f014 0f02 	tst.w	r4, #2
 8006dec:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8006df0:	bf08      	it	eq
 8006df2:	4613      	moveq	r3, r2
 8006df4:	07e9      	lsls	r1, r5, #31
 8006df6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006dfa:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006dfe:	d41f      	bmi.n	8006e40 <sinf+0x1c0>
 8006e00:	f004 0403 	and.w	r4, r4, #3
 8006e04:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8006e08:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8006e0c:	ed94 2b00 	vldr	d2, [r4]
 8006e10:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006e14:	ee27 7b02 	vmul.f64	d7, d7, d2
 8006e18:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
 8006e1c:	eea6 5b04 	vfma.f64	d5, d6, d4
 8006e20:	ee27 4b06 	vmul.f64	d4, d7, d6
 8006e24:	ee26 6b04 	vmul.f64	d6, d6, d4
 8006e28:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006e2c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006e30:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8006e34:	e789      	b.n	8006d4a <sinf+0xca>
 8006e36:	b003      	add	sp, #12
 8006e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e3c:	f7ff be9e 	b.w	8006b7c <__math_invalidf>
 8006e40:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006e44:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006e48:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006e4c:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006e50:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006e54:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006e58:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006e5c:	eea6 0b03 	vfma.f64	d0, d6, d3
 8006e60:	ee26 6b05 	vmul.f64	d6, d6, d5
 8006e64:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006e68:	eea7 0b06 	vfma.f64	d0, d7, d6
 8006e6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e70:	e76b      	b.n	8006d4a <sinf+0xca>
 8006e72:	bf00      	nop
 8006e74:	f3af 8000 	nop.w
 8006e78:	54442d18 	.word	0x54442d18
 8006e7c:	3c1921fb 	.word	0x3c1921fb
 8006e80:	08008fd8 	.word	0x08008fd8
 8006e84:	08008f78 	.word	0x08008f78
 8006e88:	08009048 	.word	0x08009048

08006e8c <fmodf>:
 8006e8c:	b508      	push	{r3, lr}
 8006e8e:	ed2d 8b02 	vpush	{d8}
 8006e92:	eef0 8a40 	vmov.f32	s17, s0
 8006e96:	eeb0 8a60 	vmov.f32	s16, s1
 8006e9a:	f000 f84b 	bl	8006f34 <__ieee754_fmodf>
 8006e9e:	eef4 8a48 	vcmp.f32	s17, s16
 8006ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea6:	d606      	bvs.n	8006eb6 <fmodf+0x2a>
 8006ea8:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006ed0 <fmodf+0x44>
 8006eac:	eeb4 8a68 	vcmp.f32	s16, s17
 8006eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb4:	d002      	beq.n	8006ebc <fmodf+0x30>
 8006eb6:	ecbd 8b02 	vpop	{d8}
 8006eba:	bd08      	pop	{r3, pc}
 8006ebc:	f000 f9ec 	bl	8007298 <__errno>
 8006ec0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006ec4:	ecbd 8b02 	vpop	{d8}
 8006ec8:	2321      	movs	r3, #33	; 0x21
 8006eca:	6003      	str	r3, [r0, #0]
 8006ecc:	bd08      	pop	{r3, pc}
 8006ece:	bf00      	nop
 8006ed0:	00000000 	.word	0x00000000

08006ed4 <log10f>:
 8006ed4:	b508      	push	{r3, lr}
 8006ed6:	ed2d 8b02 	vpush	{d8}
 8006eda:	eeb0 8a40 	vmov.f32	s16, s0
 8006ede:	f000 f8b9 	bl	8007054 <__ieee754_log10f>
 8006ee2:	eeb4 8a48 	vcmp.f32	s16, s16
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	d60f      	bvs.n	8006f0c <log10f+0x38>
 8006eec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef4:	d80a      	bhi.n	8006f0c <log10f+0x38>
 8006ef6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	d108      	bne.n	8006f12 <log10f+0x3e>
 8006f00:	f000 f9ca 	bl	8007298 <__errno>
 8006f04:	2322      	movs	r3, #34	; 0x22
 8006f06:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006f2c <log10f+0x58>
 8006f0a:	6003      	str	r3, [r0, #0]
 8006f0c:	ecbd 8b02 	vpop	{d8}
 8006f10:	bd08      	pop	{r3, pc}
 8006f12:	f000 f9c1 	bl	8007298 <__errno>
 8006f16:	ecbd 8b02 	vpop	{d8}
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2221      	movs	r2, #33	; 0x21
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	4803      	ldr	r0, [pc, #12]	; (8006f30 <log10f+0x5c>)
 8006f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f26:	f000 b959 	b.w	80071dc <nanf>
 8006f2a:	bf00      	nop
 8006f2c:	ff800000 	.word	0xff800000
 8006f30:	080089d0 	.word	0x080089d0

08006f34 <__ieee754_fmodf>:
 8006f34:	b530      	push	{r4, r5, lr}
 8006f36:	b083      	sub	sp, #12
 8006f38:	edcd 0a01 	vstr	s1, [sp, #4]
 8006f3c:	9d01      	ldr	r5, [sp, #4]
 8006f3e:	f035 4000 	bics.w	r0, r5, #2147483648	; 0x80000000
 8006f42:	d041      	beq.n	8006fc8 <__ieee754_fmodf+0x94>
 8006f44:	ee10 ea10 	vmov	lr, s0
 8006f48:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
 8006f4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f50:	da3a      	bge.n	8006fc8 <__ieee754_fmodf+0x94>
 8006f52:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006f56:	dc37      	bgt.n	8006fc8 <__ieee754_fmodf+0x94>
 8006f58:	4283      	cmp	r3, r0
 8006f5a:	db3b      	blt.n	8006fd4 <__ieee754_fmodf+0xa0>
 8006f5c:	f00e 4400 	and.w	r4, lr, #2147483648	; 0x80000000
 8006f60:	d03a      	beq.n	8006fd8 <__ieee754_fmodf+0xa4>
 8006f62:	f01e 4fff 	tst.w	lr, #2139095040	; 0x7f800000
 8006f66:	d156      	bne.n	8007016 <__ieee754_fmodf+0xe2>
 8006f68:	0219      	lsls	r1, r3, #8
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006f70:	dd04      	ble.n	8006f7c <__ieee754_fmodf+0x48>
 8006f72:	0049      	lsls	r1, r1, #1
 8006f74:	2900      	cmp	r1, #0
 8006f76:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006f7a:	dcfa      	bgt.n	8006f72 <__ieee754_fmodf+0x3e>
 8006f7c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006f80:	d157      	bne.n	8007032 <__ieee754_fmodf+0xfe>
 8006f82:	0201      	lsls	r1, r0, #8
 8006f84:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 8006f88:	d403      	bmi.n	8006f92 <__ieee754_fmodf+0x5e>
 8006f8a:	0049      	lsls	r1, r1, #1
 8006f8c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006f90:	d5fb      	bpl.n	8006f8a <__ieee754_fmodf+0x56>
 8006f92:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006f96:	db47      	blt.n	8007028 <__ieee754_fmodf+0xf4>
 8006f98:	f3ce 0316 	ubfx	r3, lr, #0, #23
 8006f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fa0:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8006fa4:	db3a      	blt.n	800701c <__ieee754_fmodf+0xe8>
 8006fa6:	f3c5 0016 	ubfx	r0, r5, #0, #23
 8006faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006fae:	ebb2 020c 	subs.w	r2, r2, ip
 8006fb2:	d104      	bne.n	8006fbe <__ieee754_fmodf+0x8a>
 8006fb4:	e017      	b.n	8006fe6 <__ieee754_fmodf+0xb2>
 8006fb6:	d00f      	beq.n	8006fd8 <__ieee754_fmodf+0xa4>
 8006fb8:	004b      	lsls	r3, r1, #1
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	d013      	beq.n	8006fe6 <__ieee754_fmodf+0xb2>
 8006fbe:	1a19      	subs	r1, r3, r0
 8006fc0:	2900      	cmp	r1, #0
 8006fc2:	daf8      	bge.n	8006fb6 <__ieee754_fmodf+0x82>
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	e7f8      	b.n	8006fba <__ieee754_fmodf+0x86>
 8006fc8:	eddd 7a01 	vldr	s15, [sp, #4]
 8006fcc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006fd0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006fd4:	b003      	add	sp, #12
 8006fd6:	bd30      	pop	{r4, r5, pc}
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	; (8007050 <__ieee754_fmodf+0x11c>)
 8006fda:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 8006fde:	ed93 0a00 	vldr	s0, [r3]
 8006fe2:	b003      	add	sp, #12
 8006fe4:	bd30      	pop	{r4, r5, pc}
 8006fe6:	1a18      	subs	r0, r3, r0
 8006fe8:	bf58      	it	pl
 8006fea:	4603      	movpl	r3, r0
 8006fec:	b91b      	cbnz	r3, 8006ff6 <__ieee754_fmodf+0xc2>
 8006fee:	e7f3      	b.n	8006fd8 <__ieee754_fmodf+0xa4>
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ffa:	dbf9      	blt.n	8006ff0 <__ieee754_fmodf+0xbc>
 8006ffc:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8007000:	db1c      	blt.n	800703c <__ieee754_fmodf+0x108>
 8007002:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007006:	f10c 0c7f 	add.w	ip, ip, #127	; 0x7f
 800700a:	4323      	orrs	r3, r4
 800700c:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
 8007010:	ee00 3a10 	vmov	s0, r3
 8007014:	e7de      	b.n	8006fd4 <__ieee754_fmodf+0xa0>
 8007016:	15da      	asrs	r2, r3, #23
 8007018:	3a7f      	subs	r2, #127	; 0x7f
 800701a:	e7af      	b.n	8006f7c <__ieee754_fmodf+0x48>
 800701c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007020:	eba1 010c 	sub.w	r1, r1, ip
 8007024:	4088      	lsls	r0, r1
 8007026:	e7c2      	b.n	8006fae <__ieee754_fmodf+0x7a>
 8007028:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800702c:	1a89      	subs	r1, r1, r2
 800702e:	408b      	lsls	r3, r1
 8007030:	e7b6      	b.n	8006fa0 <__ieee754_fmodf+0x6c>
 8007032:	ea4f 5ce0 	mov.w	ip, r0, asr #23
 8007036:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
 800703a:	e7aa      	b.n	8006f92 <__ieee754_fmodf+0x5e>
 800703c:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007040:	eba2 0c0c 	sub.w	ip, r2, ip
 8007044:	fa43 f30c 	asr.w	r3, r3, ip
 8007048:	4323      	orrs	r3, r4
 800704a:	ee00 3a10 	vmov	s0, r3
 800704e:	e7c1      	b.n	8006fd4 <__ieee754_fmodf+0xa0>
 8007050:	080090b8 	.word	0x080090b8

08007054 <__ieee754_log10f>:
 8007054:	b508      	push	{r3, lr}
 8007056:	ee10 3a10 	vmov	r3, s0
 800705a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800705e:	ed2d 8b02 	vpush	{d8}
 8007062:	d02b      	beq.n	80070bc <__ieee754_log10f+0x68>
 8007064:	2b00      	cmp	r3, #0
 8007066:	db32      	blt.n	80070ce <__ieee754_log10f+0x7a>
 8007068:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800706c:	da41      	bge.n	80070f2 <__ieee754_log10f+0x9e>
 800706e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007072:	db35      	blt.n	80070e0 <__ieee754_log10f+0x8c>
 8007074:	2100      	movs	r1, #0
 8007076:	15da      	asrs	r2, r3, #23
 8007078:	3a7f      	subs	r2, #127	; 0x7f
 800707a:	440a      	add	r2, r1
 800707c:	0fd1      	lsrs	r1, r2, #31
 800707e:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8007082:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8007086:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800708a:	ee07 2a90 	vmov	s15, r2
 800708e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8007092:	ee00 3a10 	vmov	s0, r3
 8007096:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800709a:	f000 f83b 	bl	8007114 <logf>
 800709e:	eddf 7a17 	vldr	s15, [pc, #92]	; 80070fc <__ieee754_log10f+0xa8>
 80070a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007100 <__ieee754_log10f+0xac>
 80070a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80070aa:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007104 <__ieee754_log10f+0xb0>
 80070ae:	eea8 0a07 	vfma.f32	s0, s16, s14
 80070b2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80070b6:	ecbd 8b02 	vpop	{d8}
 80070ba:	bd08      	pop	{r3, pc}
 80070bc:	ecbd 8b02 	vpop	{d8}
 80070c0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007108 <__ieee754_log10f+0xb4>
 80070c4:	eddf 7a11 	vldr	s15, [pc, #68]	; 800710c <__ieee754_log10f+0xb8>
 80070c8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80070cc:	bd08      	pop	{r3, pc}
 80070ce:	ecbd 8b02 	vpop	{d8}
 80070d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80070d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800710c <__ieee754_log10f+0xb8>
 80070da:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80070de:	bd08      	pop	{r3, pc}
 80070e0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007110 <__ieee754_log10f+0xbc>
 80070e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80070e8:	f06f 0118 	mvn.w	r1, #24
 80070ec:	ee17 3a90 	vmov	r3, s15
 80070f0:	e7c1      	b.n	8007076 <__ieee754_log10f+0x22>
 80070f2:	ecbd 8b02 	vpop	{d8}
 80070f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070fa:	bd08      	pop	{r3, pc}
 80070fc:	3ede5bd9 	.word	0x3ede5bd9
 8007100:	355427db 	.word	0x355427db
 8007104:	3e9a2080 	.word	0x3e9a2080
 8007108:	cc000000 	.word	0xcc000000
 800710c:	00000000 	.word	0x00000000
 8007110:	4c000000 	.word	0x4c000000

08007114 <logf>:
 8007114:	ee10 3a10 	vmov	r3, s0
 8007118:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800711c:	ee10 1a10 	vmov	r1, s0
 8007120:	d038      	beq.n	8007194 <logf+0x80>
 8007122:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8007126:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800712a:	d236      	bcs.n	800719a <logf+0x86>
 800712c:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8007130:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8007134:	4b26      	ldr	r3, [pc, #152]	; (80071d0 <logf+0xbc>)
 8007136:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800713a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800713e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8007142:	ed93 4b40 	vldr	d4, [r3, #256]	; 0x100
 8007146:	ed93 5b44 	vldr	d5, [r3, #272]	; 0x110
 800714a:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 800714e:	ed93 6b42 	vldr	d6, [r3, #264]	; 0x108
 8007152:	0dd3      	lsrs	r3, r2, #23
 8007154:	05db      	lsls	r3, r3, #23
 8007156:	ed90 2b00 	vldr	d2, [r0]
 800715a:	1acb      	subs	r3, r1, r3
 800715c:	ee03 3a90 	vmov	s7, r3
 8007160:	ed90 1b02 	vldr	d1, [r0, #8]
 8007164:	15d2      	asrs	r2, r2, #23
 8007166:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800716a:	eea2 0b03 	vfma.f64	d0, d2, d3
 800716e:	ee03 2a90 	vmov	s7, r2
 8007172:	ee20 2b00 	vmul.f64	d2, d0, d0
 8007176:	eea5 7b00 	vfma.f64	d7, d5, d0
 800717a:	eeb8 3be3 	vcvt.f64.s32	d3, s7
 800717e:	eea6 7b02 	vfma.f64	d7, d6, d2
 8007182:	eea3 1b04 	vfma.f64	d1, d3, d4
 8007186:	ee30 0b01 	vadd.f64	d0, d0, d1
 800718a:	eea2 0b07 	vfma.f64	d0, d2, d7
 800718e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007192:	4770      	bx	lr
 8007194:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80071d4 <logf+0xc0>
 8007198:	4770      	bx	lr
 800719a:	005a      	lsls	r2, r3, #1
 800719c:	d014      	beq.n	80071c8 <logf+0xb4>
 800719e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80071a2:	d014      	beq.n	80071ce <logf+0xba>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	db0b      	blt.n	80071c0 <logf+0xac>
 80071a8:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80071ac:	d208      	bcs.n	80071c0 <logf+0xac>
 80071ae:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80071d8 <logf+0xc4>
 80071b2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80071b6:	ee17 3a90 	vmov	r3, s15
 80071ba:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80071be:	e7b5      	b.n	800712c <logf+0x18>
 80071c0:	ee00 3a10 	vmov	s0, r3
 80071c4:	f7ff bcda 	b.w	8006b7c <__math_invalidf>
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7ff bcc5 	b.w	8006b58 <__math_divzerof>
 80071ce:	4770      	bx	lr
 80071d0:	080090c0 	.word	0x080090c0
 80071d4:	00000000 	.word	0x00000000
 80071d8:	4b000000 	.word	0x4b000000

080071dc <nanf>:
 80071dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071e4 <nanf+0x8>
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	7fc00000 	.word	0x7fc00000

080071e8 <__assert_func>:
 80071e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ea:	4614      	mov	r4, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <__assert_func+0x2c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4605      	mov	r5, r0
 80071f4:	68d8      	ldr	r0, [r3, #12]
 80071f6:	b14c      	cbz	r4, 800720c <__assert_func+0x24>
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <__assert_func+0x30>)
 80071fa:	9100      	str	r1, [sp, #0]
 80071fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007200:	4906      	ldr	r1, [pc, #24]	; (800721c <__assert_func+0x34>)
 8007202:	462b      	mov	r3, r5
 8007204:	f000 f990 	bl	8007528 <fiprintf>
 8007208:	f001 f858 	bl	80082bc <abort>
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <__assert_func+0x38>)
 800720e:	461c      	mov	r4, r3
 8007210:	e7f3      	b.n	80071fa <__assert_func+0x12>
 8007212:	bf00      	nop
 8007214:	20000008 	.word	0x20000008
 8007218:	080091e0 	.word	0x080091e0
 800721c:	080091ed 	.word	0x080091ed
 8007220:	0800921b 	.word	0x0800921b

08007224 <clearerr>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <clearerr+0x64>)
 8007228:	681d      	ldr	r5, [r3, #0]
 800722a:	4604      	mov	r4, r0
 800722c:	b125      	cbz	r5, 8007238 <clearerr+0x14>
 800722e:	69ab      	ldr	r3, [r5, #24]
 8007230:	b913      	cbnz	r3, 8007238 <clearerr+0x14>
 8007232:	4628      	mov	r0, r5
 8007234:	f000 f8fa 	bl	800742c <__sinit>
 8007238:	4b14      	ldr	r3, [pc, #80]	; (800728c <clearerr+0x68>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d118      	bne.n	8007270 <clearerr+0x4c>
 800723e:	686c      	ldr	r4, [r5, #4]
 8007240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007242:	07d8      	lsls	r0, r3, #31
 8007244:	d405      	bmi.n	8007252 <clearerr+0x2e>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	0599      	lsls	r1, r3, #22
 800724a:	d402      	bmi.n	8007252 <clearerr+0x2e>
 800724c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724e:	f000 fa22 	bl	8007696 <__retarget_lock_acquire_recursive>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007258:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800725c:	07d2      	lsls	r2, r2, #31
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	d410      	bmi.n	8007284 <clearerr+0x60>
 8007262:	059b      	lsls	r3, r3, #22
 8007264:	d40e      	bmi.n	8007284 <clearerr+0x60>
 8007266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726c:	f000 ba14 	b.w	8007698 <__retarget_lock_release_recursive>
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <clearerr+0x6c>)
 8007272:	429c      	cmp	r4, r3
 8007274:	d101      	bne.n	800727a <clearerr+0x56>
 8007276:	68ac      	ldr	r4, [r5, #8]
 8007278:	e7e2      	b.n	8007240 <clearerr+0x1c>
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <clearerr+0x70>)
 800727c:	429c      	cmp	r4, r3
 800727e:	bf08      	it	eq
 8007280:	68ec      	ldreq	r4, [r5, #12]
 8007282:	e7dd      	b.n	8007240 <clearerr+0x1c>
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	20000008 	.word	0x20000008
 800728c:	0800923c 	.word	0x0800923c
 8007290:	0800925c 	.word	0x0800925c
 8007294:	0800921c 	.word	0x0800921c

08007298 <__errno>:
 8007298:	4b01      	ldr	r3, [pc, #4]	; (80072a0 <__errno+0x8>)
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20000008 	.word	0x20000008

080072a4 <feof>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4b16      	ldr	r3, [pc, #88]	; (8007300 <feof+0x5c>)
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	4604      	mov	r4, r0
 80072ac:	b125      	cbz	r5, 80072b8 <feof+0x14>
 80072ae:	69ab      	ldr	r3, [r5, #24]
 80072b0:	b913      	cbnz	r3, 80072b8 <feof+0x14>
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 f8ba 	bl	800742c <__sinit>
 80072b8:	4b12      	ldr	r3, [pc, #72]	; (8007304 <feof+0x60>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	d116      	bne.n	80072ec <feof+0x48>
 80072be:	686c      	ldr	r4, [r5, #4]
 80072c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c2:	07d8      	lsls	r0, r3, #31
 80072c4:	d405      	bmi.n	80072d2 <feof+0x2e>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	0599      	lsls	r1, r3, #22
 80072ca:	d402      	bmi.n	80072d2 <feof+0x2e>
 80072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ce:	f000 f9e2 	bl	8007696 <__retarget_lock_acquire_recursive>
 80072d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	07d2      	lsls	r2, r2, #31
 80072d8:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80072dc:	d404      	bmi.n	80072e8 <feof+0x44>
 80072de:	059b      	lsls	r3, r3, #22
 80072e0:	d402      	bmi.n	80072e8 <feof+0x44>
 80072e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072e4:	f000 f9d8 	bl	8007698 <__retarget_lock_release_recursive>
 80072e8:	4628      	mov	r0, r5
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <feof+0x64>)
 80072ee:	429c      	cmp	r4, r3
 80072f0:	d101      	bne.n	80072f6 <feof+0x52>
 80072f2:	68ac      	ldr	r4, [r5, #8]
 80072f4:	e7e4      	b.n	80072c0 <feof+0x1c>
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <feof+0x68>)
 80072f8:	429c      	cmp	r4, r3
 80072fa:	bf08      	it	eq
 80072fc:	68ec      	ldreq	r4, [r5, #12]
 80072fe:	e7df      	b.n	80072c0 <feof+0x1c>
 8007300:	20000008 	.word	0x20000008
 8007304:	0800923c 	.word	0x0800923c
 8007308:	0800925c 	.word	0x0800925c
 800730c:	0800921c 	.word	0x0800921c

08007310 <ferror>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <ferror+0x5c>)
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	4604      	mov	r4, r0
 8007318:	b125      	cbz	r5, 8007324 <ferror+0x14>
 800731a:	69ab      	ldr	r3, [r5, #24]
 800731c:	b913      	cbnz	r3, 8007324 <ferror+0x14>
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f884 	bl	800742c <__sinit>
 8007324:	4b12      	ldr	r3, [pc, #72]	; (8007370 <ferror+0x60>)
 8007326:	429c      	cmp	r4, r3
 8007328:	d116      	bne.n	8007358 <ferror+0x48>
 800732a:	686c      	ldr	r4, [r5, #4]
 800732c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800732e:	07d8      	lsls	r0, r3, #31
 8007330:	d405      	bmi.n	800733e <ferror+0x2e>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	0599      	lsls	r1, r3, #22
 8007336:	d402      	bmi.n	800733e <ferror+0x2e>
 8007338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800733a:	f000 f9ac 	bl	8007696 <__retarget_lock_acquire_recursive>
 800733e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	07d2      	lsls	r2, r2, #31
 8007344:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8007348:	d404      	bmi.n	8007354 <ferror+0x44>
 800734a:	059b      	lsls	r3, r3, #22
 800734c:	d402      	bmi.n	8007354 <ferror+0x44>
 800734e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007350:	f000 f9a2 	bl	8007698 <__retarget_lock_release_recursive>
 8007354:	4628      	mov	r0, r5
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <ferror+0x64>)
 800735a:	429c      	cmp	r4, r3
 800735c:	d101      	bne.n	8007362 <ferror+0x52>
 800735e:	68ac      	ldr	r4, [r5, #8]
 8007360:	e7e4      	b.n	800732c <ferror+0x1c>
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <ferror+0x68>)
 8007364:	429c      	cmp	r4, r3
 8007366:	bf08      	it	eq
 8007368:	68ec      	ldreq	r4, [r5, #12]
 800736a:	e7df      	b.n	800732c <ferror+0x1c>
 800736c:	20000008 	.word	0x20000008
 8007370:	0800923c 	.word	0x0800923c
 8007374:	0800925c 	.word	0x0800925c
 8007378:	0800921c 	.word	0x0800921c

0800737c <std>:
 800737c:	2300      	movs	r3, #0
 800737e:	b510      	push	{r4, lr}
 8007380:	4604      	mov	r4, r0
 8007382:	e9c0 3300 	strd	r3, r3, [r0]
 8007386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800738a:	6083      	str	r3, [r0, #8]
 800738c:	8181      	strh	r1, [r0, #12]
 800738e:	6643      	str	r3, [r0, #100]	; 0x64
 8007390:	81c2      	strh	r2, [r0, #14]
 8007392:	6183      	str	r3, [r0, #24]
 8007394:	4619      	mov	r1, r3
 8007396:	2208      	movs	r2, #8
 8007398:	305c      	adds	r0, #92	; 0x5c
 800739a:	f000 f98c 	bl	80076b6 <memset>
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <std+0x38>)
 80073a0:	6263      	str	r3, [r4, #36]	; 0x24
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <std+0x3c>)
 80073a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <std+0x40>)
 80073a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <std+0x44>)
 80073ac:	6224      	str	r4, [r4, #32]
 80073ae:	6323      	str	r3, [r4, #48]	; 0x30
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	08008039 	.word	0x08008039
 80073b8:	0800805b 	.word	0x0800805b
 80073bc:	08008093 	.word	0x08008093
 80073c0:	080080b7 	.word	0x080080b7

080073c4 <_cleanup_r>:
 80073c4:	4901      	ldr	r1, [pc, #4]	; (80073cc <_cleanup_r+0x8>)
 80073c6:	f000 b8de 	b.w	8007586 <_fwalk_reent>
 80073ca:	bf00      	nop
 80073cc:	080083f9 	.word	0x080083f9

080073d0 <__sfmoreglue>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	2268      	movs	r2, #104	; 0x68
 80073d4:	1e4d      	subs	r5, r1, #1
 80073d6:	4355      	muls	r5, r2
 80073d8:	460e      	mov	r6, r1
 80073da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073de:	f000 f993 	bl	8007708 <_malloc_r>
 80073e2:	4604      	mov	r4, r0
 80073e4:	b140      	cbz	r0, 80073f8 <__sfmoreglue+0x28>
 80073e6:	2100      	movs	r1, #0
 80073e8:	e9c0 1600 	strd	r1, r6, [r0]
 80073ec:	300c      	adds	r0, #12
 80073ee:	60a0      	str	r0, [r4, #8]
 80073f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073f4:	f000 f95f 	bl	80076b6 <memset>
 80073f8:	4620      	mov	r0, r4
 80073fa:	bd70      	pop	{r4, r5, r6, pc}

080073fc <__sfp_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sfp_lock_acquire+0x8>)
 80073fe:	f000 b94a 	b.w	8007696 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20010ffd 	.word	0x20010ffd

08007408 <__sfp_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sfp_lock_release+0x8>)
 800740a:	f000 b945 	b.w	8007698 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20010ffd 	.word	0x20010ffd

08007414 <__sinit_lock_acquire>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__sinit_lock_acquire+0x8>)
 8007416:	f000 b93e 	b.w	8007696 <__retarget_lock_acquire_recursive>
 800741a:	bf00      	nop
 800741c:	20010ffe 	.word	0x20010ffe

08007420 <__sinit_lock_release>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__sinit_lock_release+0x8>)
 8007422:	f000 b939 	b.w	8007698 <__retarget_lock_release_recursive>
 8007426:	bf00      	nop
 8007428:	20010ffe 	.word	0x20010ffe

0800742c <__sinit>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4604      	mov	r4, r0
 8007430:	f7ff fff0 	bl	8007414 <__sinit_lock_acquire>
 8007434:	69a3      	ldr	r3, [r4, #24]
 8007436:	b11b      	cbz	r3, 8007440 <__sinit+0x14>
 8007438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800743c:	f7ff bff0 	b.w	8007420 <__sinit_lock_release>
 8007440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007444:	6523      	str	r3, [r4, #80]	; 0x50
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <__sinit+0x68>)
 8007448:	4a13      	ldr	r2, [pc, #76]	; (8007498 <__sinit+0x6c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	62a2      	str	r2, [r4, #40]	; 0x28
 800744e:	42a3      	cmp	r3, r4
 8007450:	bf04      	itt	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	61a3      	streq	r3, [r4, #24]
 8007456:	4620      	mov	r0, r4
 8007458:	f000 f820 	bl	800749c <__sfp>
 800745c:	6060      	str	r0, [r4, #4]
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f81c 	bl	800749c <__sfp>
 8007464:	60a0      	str	r0, [r4, #8]
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f818 	bl	800749c <__sfp>
 800746c:	2200      	movs	r2, #0
 800746e:	60e0      	str	r0, [r4, #12]
 8007470:	2104      	movs	r1, #4
 8007472:	6860      	ldr	r0, [r4, #4]
 8007474:	f7ff ff82 	bl	800737c <std>
 8007478:	68a0      	ldr	r0, [r4, #8]
 800747a:	2201      	movs	r2, #1
 800747c:	2109      	movs	r1, #9
 800747e:	f7ff ff7d 	bl	800737c <std>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	2202      	movs	r2, #2
 8007486:	2112      	movs	r1, #18
 8007488:	f7ff ff78 	bl	800737c <std>
 800748c:	2301      	movs	r3, #1
 800748e:	61a3      	str	r3, [r4, #24]
 8007490:	e7d2      	b.n	8007438 <__sinit+0xc>
 8007492:	bf00      	nop
 8007494:	0800927c 	.word	0x0800927c
 8007498:	080073c5 	.word	0x080073c5

0800749c <__sfp>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	4607      	mov	r7, r0
 80074a0:	f7ff ffac 	bl	80073fc <__sfp_lock_acquire>
 80074a4:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <__sfp+0x84>)
 80074a6:	681e      	ldr	r6, [r3, #0]
 80074a8:	69b3      	ldr	r3, [r6, #24]
 80074aa:	b913      	cbnz	r3, 80074b2 <__sfp+0x16>
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff ffbd 	bl	800742c <__sinit>
 80074b2:	3648      	adds	r6, #72	; 0x48
 80074b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	d503      	bpl.n	80074c4 <__sfp+0x28>
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	b30b      	cbz	r3, 8007504 <__sfp+0x68>
 80074c0:	6836      	ldr	r6, [r6, #0]
 80074c2:	e7f7      	b.n	80074b4 <__sfp+0x18>
 80074c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074c8:	b9d5      	cbnz	r5, 8007500 <__sfp+0x64>
 80074ca:	4b16      	ldr	r3, [pc, #88]	; (8007524 <__sfp+0x88>)
 80074cc:	60e3      	str	r3, [r4, #12]
 80074ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074d2:	6665      	str	r5, [r4, #100]	; 0x64
 80074d4:	f000 f8de 	bl	8007694 <__retarget_lock_init_recursive>
 80074d8:	f7ff ff96 	bl	8007408 <__sfp_lock_release>
 80074dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074e4:	6025      	str	r5, [r4, #0]
 80074e6:	61a5      	str	r5, [r4, #24]
 80074e8:	2208      	movs	r2, #8
 80074ea:	4629      	mov	r1, r5
 80074ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074f0:	f000 f8e1 	bl	80076b6 <memset>
 80074f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074fc:	4620      	mov	r0, r4
 80074fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007500:	3468      	adds	r4, #104	; 0x68
 8007502:	e7d9      	b.n	80074b8 <__sfp+0x1c>
 8007504:	2104      	movs	r1, #4
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff ff62 	bl	80073d0 <__sfmoreglue>
 800750c:	4604      	mov	r4, r0
 800750e:	6030      	str	r0, [r6, #0]
 8007510:	2800      	cmp	r0, #0
 8007512:	d1d5      	bne.n	80074c0 <__sfp+0x24>
 8007514:	f7ff ff78 	bl	8007408 <__sfp_lock_release>
 8007518:	230c      	movs	r3, #12
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	e7ee      	b.n	80074fc <__sfp+0x60>
 800751e:	bf00      	nop
 8007520:	0800927c 	.word	0x0800927c
 8007524:	ffff0001 	.word	0xffff0001

08007528 <fiprintf>:
 8007528:	b40e      	push	{r1, r2, r3}
 800752a:	b503      	push	{r0, r1, lr}
 800752c:	4601      	mov	r1, r0
 800752e:	ab03      	add	r3, sp, #12
 8007530:	4805      	ldr	r0, [pc, #20]	; (8007548 <fiprintf+0x20>)
 8007532:	f853 2b04 	ldr.w	r2, [r3], #4
 8007536:	6800      	ldr	r0, [r0, #0]
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	f000 f983 	bl	8007844 <_vfiprintf_r>
 800753e:	b002      	add	sp, #8
 8007540:	f85d eb04 	ldr.w	lr, [sp], #4
 8007544:	b003      	add	sp, #12
 8007546:	4770      	bx	lr
 8007548:	20000008 	.word	0x20000008

0800754c <_fwalk>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	460f      	mov	r7, r1
 8007552:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007556:	2600      	movs	r6, #0
 8007558:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800755c:	f1b8 0801 	subs.w	r8, r8, #1
 8007560:	d505      	bpl.n	800756e <_fwalk+0x22>
 8007562:	6824      	ldr	r4, [r4, #0]
 8007564:	2c00      	cmp	r4, #0
 8007566:	d1f7      	bne.n	8007558 <_fwalk+0xc>
 8007568:	4630      	mov	r0, r6
 800756a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d906      	bls.n	8007582 <_fwalk+0x36>
 8007574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007578:	3301      	adds	r3, #1
 800757a:	d002      	beq.n	8007582 <_fwalk+0x36>
 800757c:	4628      	mov	r0, r5
 800757e:	47b8      	blx	r7
 8007580:	4306      	orrs	r6, r0
 8007582:	3568      	adds	r5, #104	; 0x68
 8007584:	e7ea      	b.n	800755c <_fwalk+0x10>

08007586 <_fwalk_reent>:
 8007586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758a:	4606      	mov	r6, r0
 800758c:	4688      	mov	r8, r1
 800758e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007592:	2700      	movs	r7, #0
 8007594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007598:	f1b9 0901 	subs.w	r9, r9, #1
 800759c:	d505      	bpl.n	80075aa <_fwalk_reent+0x24>
 800759e:	6824      	ldr	r4, [r4, #0]
 80075a0:	2c00      	cmp	r4, #0
 80075a2:	d1f7      	bne.n	8007594 <_fwalk_reent+0xe>
 80075a4:	4638      	mov	r0, r7
 80075a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d907      	bls.n	80075c0 <_fwalk_reent+0x3a>
 80075b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b4:	3301      	adds	r3, #1
 80075b6:	d003      	beq.n	80075c0 <_fwalk_reent+0x3a>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4630      	mov	r0, r6
 80075bc:	47c0      	blx	r8
 80075be:	4307      	orrs	r7, r0
 80075c0:	3568      	adds	r5, #104	; 0x68
 80075c2:	e7e9      	b.n	8007598 <_fwalk_reent+0x12>

080075c4 <getc>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4b1d      	ldr	r3, [pc, #116]	; (800763c <getc+0x78>)
 80075c8:	681d      	ldr	r5, [r3, #0]
 80075ca:	4604      	mov	r4, r0
 80075cc:	b125      	cbz	r5, 80075d8 <getc+0x14>
 80075ce:	69ab      	ldr	r3, [r5, #24]
 80075d0:	b913      	cbnz	r3, 80075d8 <getc+0x14>
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7ff ff2a 	bl	800742c <__sinit>
 80075d8:	4b19      	ldr	r3, [pc, #100]	; (8007640 <getc+0x7c>)
 80075da:	429c      	cmp	r4, r3
 80075dc:	d11e      	bne.n	800761c <getc+0x58>
 80075de:	686c      	ldr	r4, [r5, #4]
 80075e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075e2:	07d8      	lsls	r0, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <getc+0x2e>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	0599      	lsls	r1, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <getc+0x2e>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f000 f852 	bl	8007696 <__retarget_lock_acquire_recursive>
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	da19      	bge.n	8007630 <getc+0x6c>
 80075fc:	4628      	mov	r0, r5
 80075fe:	4621      	mov	r1, r4
 8007600:	f000 fcde 	bl	8007fc0 <__srget_r>
 8007604:	4605      	mov	r5, r0
 8007606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007608:	07da      	lsls	r2, r3, #31
 800760a:	d405      	bmi.n	8007618 <getc+0x54>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	059b      	lsls	r3, r3, #22
 8007610:	d402      	bmi.n	8007618 <getc+0x54>
 8007612:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007614:	f000 f840 	bl	8007698 <__retarget_lock_release_recursive>
 8007618:	4628      	mov	r0, r5
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	4b09      	ldr	r3, [pc, #36]	; (8007644 <getc+0x80>)
 800761e:	429c      	cmp	r4, r3
 8007620:	d101      	bne.n	8007626 <getc+0x62>
 8007622:	68ac      	ldr	r4, [r5, #8]
 8007624:	e7dc      	b.n	80075e0 <getc+0x1c>
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <getc+0x84>)
 8007628:	429c      	cmp	r4, r3
 800762a:	bf08      	it	eq
 800762c:	68ec      	ldreq	r4, [r5, #12]
 800762e:	e7d7      	b.n	80075e0 <getc+0x1c>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	781d      	ldrb	r5, [r3, #0]
 8007638:	e7e5      	b.n	8007606 <getc+0x42>
 800763a:	bf00      	nop
 800763c:	20000008 	.word	0x20000008
 8007640:	0800923c 	.word	0x0800923c
 8007644:	0800925c 	.word	0x0800925c
 8007648:	0800921c 	.word	0x0800921c

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	; (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	; (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <__libc_init_array+0x44>)
 8007660:	f001 fe60 	bl	8009324 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	0800933c 	.word	0x0800933c
 8007688:	0800933c 	.word	0x0800933c
 800768c:	0800933c 	.word	0x0800933c
 8007690:	08009348 	.word	0x08009348

08007694 <__retarget_lock_init_recursive>:
 8007694:	4770      	bx	lr

08007696 <__retarget_lock_acquire_recursive>:
 8007696:	4770      	bx	lr

08007698 <__retarget_lock_release_recursive>:
 8007698:	4770      	bx	lr

0800769a <memcpy>:
 800769a:	440a      	add	r2, r1
 800769c:	4291      	cmp	r1, r2
 800769e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076a2:	d100      	bne.n	80076a6 <memcpy+0xc>
 80076a4:	4770      	bx	lr
 80076a6:	b510      	push	{r4, lr}
 80076a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b0:	4291      	cmp	r1, r2
 80076b2:	d1f9      	bne.n	80076a8 <memcpy+0xe>
 80076b4:	bd10      	pop	{r4, pc}

080076b6 <memset>:
 80076b6:	4402      	add	r2, r0
 80076b8:	4603      	mov	r3, r0
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d100      	bne.n	80076c0 <memset+0xa>
 80076be:	4770      	bx	lr
 80076c0:	f803 1b01 	strb.w	r1, [r3], #1
 80076c4:	e7f9      	b.n	80076ba <memset+0x4>
	...

080076c8 <sbrk_aligned>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0e      	ldr	r6, [pc, #56]	; (8007704 <sbrk_aligned+0x3c>)
 80076cc:	460c      	mov	r4, r1
 80076ce:	6831      	ldr	r1, [r6, #0]
 80076d0:	4605      	mov	r5, r0
 80076d2:	b911      	cbnz	r1, 80076da <sbrk_aligned+0x12>
 80076d4:	f000 fca0 	bl	8008018 <_sbrk_r>
 80076d8:	6030      	str	r0, [r6, #0]
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fc9b 	bl	8008018 <_sbrk_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d00a      	beq.n	80076fc <sbrk_aligned+0x34>
 80076e6:	1cc4      	adds	r4, r0, #3
 80076e8:	f024 0403 	bic.w	r4, r4, #3
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d007      	beq.n	8007700 <sbrk_aligned+0x38>
 80076f0:	1a21      	subs	r1, r4, r0
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 fc90 	bl	8008018 <_sbrk_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d101      	bne.n	8007700 <sbrk_aligned+0x38>
 80076fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007700:	4620      	mov	r0, r4
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	20011004 	.word	0x20011004

08007708 <_malloc_r>:
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4607      	mov	r7, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d905      	bls.n	8007730 <_malloc_r+0x28>
 8007724:	230c      	movs	r3, #12
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	2600      	movs	r6, #0
 800772a:	4630      	mov	r0, r6
 800772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007730:	4e2e      	ldr	r6, [pc, #184]	; (80077ec <_malloc_r+0xe4>)
 8007732:	f000 ff41 	bl	80085b8 <__malloc_lock>
 8007736:	6833      	ldr	r3, [r6, #0]
 8007738:	461c      	mov	r4, r3
 800773a:	bb34      	cbnz	r4, 800778a <_malloc_r+0x82>
 800773c:	4629      	mov	r1, r5
 800773e:	4638      	mov	r0, r7
 8007740:	f7ff ffc2 	bl	80076c8 <sbrk_aligned>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	4604      	mov	r4, r0
 8007748:	d14d      	bne.n	80077e6 <_malloc_r+0xde>
 800774a:	6834      	ldr	r4, [r6, #0]
 800774c:	4626      	mov	r6, r4
 800774e:	2e00      	cmp	r6, #0
 8007750:	d140      	bne.n	80077d4 <_malloc_r+0xcc>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	4631      	mov	r1, r6
 8007756:	4638      	mov	r0, r7
 8007758:	eb04 0803 	add.w	r8, r4, r3
 800775c:	f000 fc5c 	bl	8008018 <_sbrk_r>
 8007760:	4580      	cmp	r8, r0
 8007762:	d13a      	bne.n	80077da <_malloc_r+0xd2>
 8007764:	6821      	ldr	r1, [r4, #0]
 8007766:	3503      	adds	r5, #3
 8007768:	1a6d      	subs	r5, r5, r1
 800776a:	f025 0503 	bic.w	r5, r5, #3
 800776e:	3508      	adds	r5, #8
 8007770:	2d0c      	cmp	r5, #12
 8007772:	bf38      	it	cc
 8007774:	250c      	movcc	r5, #12
 8007776:	4629      	mov	r1, r5
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff ffa5 	bl	80076c8 <sbrk_aligned>
 800777e:	3001      	adds	r0, #1
 8007780:	d02b      	beq.n	80077da <_malloc_r+0xd2>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	442b      	add	r3, r5
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	e00e      	b.n	80077a8 <_malloc_r+0xa0>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	1b52      	subs	r2, r2, r5
 800778e:	d41e      	bmi.n	80077ce <_malloc_r+0xc6>
 8007790:	2a0b      	cmp	r2, #11
 8007792:	d916      	bls.n	80077c2 <_malloc_r+0xba>
 8007794:	1961      	adds	r1, r4, r5
 8007796:	42a3      	cmp	r3, r4
 8007798:	6025      	str	r5, [r4, #0]
 800779a:	bf18      	it	ne
 800779c:	6059      	strne	r1, [r3, #4]
 800779e:	6863      	ldr	r3, [r4, #4]
 80077a0:	bf08      	it	eq
 80077a2:	6031      	streq	r1, [r6, #0]
 80077a4:	5162      	str	r2, [r4, r5]
 80077a6:	604b      	str	r3, [r1, #4]
 80077a8:	4638      	mov	r0, r7
 80077aa:	f104 060b 	add.w	r6, r4, #11
 80077ae:	f000 ff09 	bl	80085c4 <__malloc_unlock>
 80077b2:	f026 0607 	bic.w	r6, r6, #7
 80077b6:	1d23      	adds	r3, r4, #4
 80077b8:	1af2      	subs	r2, r6, r3
 80077ba:	d0b6      	beq.n	800772a <_malloc_r+0x22>
 80077bc:	1b9b      	subs	r3, r3, r6
 80077be:	50a3      	str	r3, [r4, r2]
 80077c0:	e7b3      	b.n	800772a <_malloc_r+0x22>
 80077c2:	6862      	ldr	r2, [r4, #4]
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	bf0c      	ite	eq
 80077c8:	6032      	streq	r2, [r6, #0]
 80077ca:	605a      	strne	r2, [r3, #4]
 80077cc:	e7ec      	b.n	80077a8 <_malloc_r+0xa0>
 80077ce:	4623      	mov	r3, r4
 80077d0:	6864      	ldr	r4, [r4, #4]
 80077d2:	e7b2      	b.n	800773a <_malloc_r+0x32>
 80077d4:	4634      	mov	r4, r6
 80077d6:	6876      	ldr	r6, [r6, #4]
 80077d8:	e7b9      	b.n	800774e <_malloc_r+0x46>
 80077da:	230c      	movs	r3, #12
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	4638      	mov	r0, r7
 80077e0:	f000 fef0 	bl	80085c4 <__malloc_unlock>
 80077e4:	e7a1      	b.n	800772a <_malloc_r+0x22>
 80077e6:	6025      	str	r5, [r4, #0]
 80077e8:	e7de      	b.n	80077a8 <_malloc_r+0xa0>
 80077ea:	bf00      	nop
 80077ec:	20011000 	.word	0x20011000

080077f0 <__sfputc_r>:
 80077f0:	6893      	ldr	r3, [r2, #8]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	b410      	push	{r4}
 80077f8:	6093      	str	r3, [r2, #8]
 80077fa:	da08      	bge.n	800780e <__sfputc_r+0x1e>
 80077fc:	6994      	ldr	r4, [r2, #24]
 80077fe:	42a3      	cmp	r3, r4
 8007800:	db01      	blt.n	8007806 <__sfputc_r+0x16>
 8007802:	290a      	cmp	r1, #10
 8007804:	d103      	bne.n	800780e <__sfputc_r+0x1e>
 8007806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800780a:	f000 bc85 	b.w	8008118 <__swbuf_r>
 800780e:	6813      	ldr	r3, [r2, #0]
 8007810:	1c58      	adds	r0, r3, #1
 8007812:	6010      	str	r0, [r2, #0]
 8007814:	7019      	strb	r1, [r3, #0]
 8007816:	4608      	mov	r0, r1
 8007818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781c:	4770      	bx	lr

0800781e <__sfputs_r>:
 800781e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007820:	4606      	mov	r6, r0
 8007822:	460f      	mov	r7, r1
 8007824:	4614      	mov	r4, r2
 8007826:	18d5      	adds	r5, r2, r3
 8007828:	42ac      	cmp	r4, r5
 800782a:	d101      	bne.n	8007830 <__sfputs_r+0x12>
 800782c:	2000      	movs	r0, #0
 800782e:	e007      	b.n	8007840 <__sfputs_r+0x22>
 8007830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007834:	463a      	mov	r2, r7
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff ffda 	bl	80077f0 <__sfputc_r>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d1f3      	bne.n	8007828 <__sfputs_r+0xa>
 8007840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007844 <_vfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	460d      	mov	r5, r1
 800784a:	b09d      	sub	sp, #116	; 0x74
 800784c:	4614      	mov	r4, r2
 800784e:	4698      	mov	r8, r3
 8007850:	4606      	mov	r6, r0
 8007852:	b118      	cbz	r0, 800785c <_vfiprintf_r+0x18>
 8007854:	6983      	ldr	r3, [r0, #24]
 8007856:	b90b      	cbnz	r3, 800785c <_vfiprintf_r+0x18>
 8007858:	f7ff fde8 	bl	800742c <__sinit>
 800785c:	4b89      	ldr	r3, [pc, #548]	; (8007a84 <_vfiprintf_r+0x240>)
 800785e:	429d      	cmp	r5, r3
 8007860:	d11b      	bne.n	800789a <_vfiprintf_r+0x56>
 8007862:	6875      	ldr	r5, [r6, #4]
 8007864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007866:	07d9      	lsls	r1, r3, #31
 8007868:	d405      	bmi.n	8007876 <_vfiprintf_r+0x32>
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	059a      	lsls	r2, r3, #22
 800786e:	d402      	bmi.n	8007876 <_vfiprintf_r+0x32>
 8007870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007872:	f7ff ff10 	bl	8007696 <__retarget_lock_acquire_recursive>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	071b      	lsls	r3, r3, #28
 800787a:	d501      	bpl.n	8007880 <_vfiprintf_r+0x3c>
 800787c:	692b      	ldr	r3, [r5, #16]
 800787e:	b9eb      	cbnz	r3, 80078bc <_vfiprintf_r+0x78>
 8007880:	4629      	mov	r1, r5
 8007882:	4630      	mov	r0, r6
 8007884:	f000 fcac 	bl	80081e0 <__swsetup_r>
 8007888:	b1c0      	cbz	r0, 80078bc <_vfiprintf_r+0x78>
 800788a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800788c:	07dc      	lsls	r4, r3, #31
 800788e:	d50e      	bpl.n	80078ae <_vfiprintf_r+0x6a>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007894:	b01d      	add	sp, #116	; 0x74
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	4b7b      	ldr	r3, [pc, #492]	; (8007a88 <_vfiprintf_r+0x244>)
 800789c:	429d      	cmp	r5, r3
 800789e:	d101      	bne.n	80078a4 <_vfiprintf_r+0x60>
 80078a0:	68b5      	ldr	r5, [r6, #8]
 80078a2:	e7df      	b.n	8007864 <_vfiprintf_r+0x20>
 80078a4:	4b79      	ldr	r3, [pc, #484]	; (8007a8c <_vfiprintf_r+0x248>)
 80078a6:	429d      	cmp	r5, r3
 80078a8:	bf08      	it	eq
 80078aa:	68f5      	ldreq	r5, [r6, #12]
 80078ac:	e7da      	b.n	8007864 <_vfiprintf_r+0x20>
 80078ae:	89ab      	ldrh	r3, [r5, #12]
 80078b0:	0598      	lsls	r0, r3, #22
 80078b2:	d4ed      	bmi.n	8007890 <_vfiprintf_r+0x4c>
 80078b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078b6:	f7ff feef 	bl	8007698 <__retarget_lock_release_recursive>
 80078ba:	e7e9      	b.n	8007890 <_vfiprintf_r+0x4c>
 80078bc:	2300      	movs	r3, #0
 80078be:	9309      	str	r3, [sp, #36]	; 0x24
 80078c0:	2320      	movs	r3, #32
 80078c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ca:	2330      	movs	r3, #48	; 0x30
 80078cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a90 <_vfiprintf_r+0x24c>
 80078d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078d4:	f04f 0901 	mov.w	r9, #1
 80078d8:	4623      	mov	r3, r4
 80078da:	469a      	mov	sl, r3
 80078dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e0:	b10a      	cbz	r2, 80078e6 <_vfiprintf_r+0xa2>
 80078e2:	2a25      	cmp	r2, #37	; 0x25
 80078e4:	d1f9      	bne.n	80078da <_vfiprintf_r+0x96>
 80078e6:	ebba 0b04 	subs.w	fp, sl, r4
 80078ea:	d00b      	beq.n	8007904 <_vfiprintf_r+0xc0>
 80078ec:	465b      	mov	r3, fp
 80078ee:	4622      	mov	r2, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ff93 	bl	800781e <__sfputs_r>
 80078f8:	3001      	adds	r0, #1
 80078fa:	f000 80aa 	beq.w	8007a52 <_vfiprintf_r+0x20e>
 80078fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007900:	445a      	add	r2, fp
 8007902:	9209      	str	r2, [sp, #36]	; 0x24
 8007904:	f89a 3000 	ldrb.w	r3, [sl]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80a2 	beq.w	8007a52 <_vfiprintf_r+0x20e>
 800790e:	2300      	movs	r3, #0
 8007910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007918:	f10a 0a01 	add.w	sl, sl, #1
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007924:	931a      	str	r3, [sp, #104]	; 0x68
 8007926:	4654      	mov	r4, sl
 8007928:	2205      	movs	r2, #5
 800792a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800792e:	4858      	ldr	r0, [pc, #352]	; (8007a90 <_vfiprintf_r+0x24c>)
 8007930:	f7f8 fcde 	bl	80002f0 <memchr>
 8007934:	9a04      	ldr	r2, [sp, #16]
 8007936:	b9d8      	cbnz	r0, 8007970 <_vfiprintf_r+0x12c>
 8007938:	06d1      	lsls	r1, r2, #27
 800793a:	bf44      	itt	mi
 800793c:	2320      	movmi	r3, #32
 800793e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007942:	0713      	lsls	r3, r2, #28
 8007944:	bf44      	itt	mi
 8007946:	232b      	movmi	r3, #43	; 0x2b
 8007948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794c:	f89a 3000 	ldrb.w	r3, [sl]
 8007950:	2b2a      	cmp	r3, #42	; 0x2a
 8007952:	d015      	beq.n	8007980 <_vfiprintf_r+0x13c>
 8007954:	9a07      	ldr	r2, [sp, #28]
 8007956:	4654      	mov	r4, sl
 8007958:	2000      	movs	r0, #0
 800795a:	f04f 0c0a 	mov.w	ip, #10
 800795e:	4621      	mov	r1, r4
 8007960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007964:	3b30      	subs	r3, #48	; 0x30
 8007966:	2b09      	cmp	r3, #9
 8007968:	d94e      	bls.n	8007a08 <_vfiprintf_r+0x1c4>
 800796a:	b1b0      	cbz	r0, 800799a <_vfiprintf_r+0x156>
 800796c:	9207      	str	r2, [sp, #28]
 800796e:	e014      	b.n	800799a <_vfiprintf_r+0x156>
 8007970:	eba0 0308 	sub.w	r3, r0, r8
 8007974:	fa09 f303 	lsl.w	r3, r9, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	46a2      	mov	sl, r4
 800797e:	e7d2      	b.n	8007926 <_vfiprintf_r+0xe2>
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	1d19      	adds	r1, r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	9103      	str	r1, [sp, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfbb      	ittet	lt
 800798c:	425b      	neglt	r3, r3
 800798e:	f042 0202 	orrlt.w	r2, r2, #2
 8007992:	9307      	strge	r3, [sp, #28]
 8007994:	9307      	strlt	r3, [sp, #28]
 8007996:	bfb8      	it	lt
 8007998:	9204      	strlt	r2, [sp, #16]
 800799a:	7823      	ldrb	r3, [r4, #0]
 800799c:	2b2e      	cmp	r3, #46	; 0x2e
 800799e:	d10c      	bne.n	80079ba <_vfiprintf_r+0x176>
 80079a0:	7863      	ldrb	r3, [r4, #1]
 80079a2:	2b2a      	cmp	r3, #42	; 0x2a
 80079a4:	d135      	bne.n	8007a12 <_vfiprintf_r+0x1ce>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	1d1a      	adds	r2, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9203      	str	r2, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfb8      	it	lt
 80079b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079b6:	3402      	adds	r4, #2
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007aa0 <_vfiprintf_r+0x25c>
 80079be:	7821      	ldrb	r1, [r4, #0]
 80079c0:	2203      	movs	r2, #3
 80079c2:	4650      	mov	r0, sl
 80079c4:	f7f8 fc94 	bl	80002f0 <memchr>
 80079c8:	b140      	cbz	r0, 80079dc <_vfiprintf_r+0x198>
 80079ca:	2340      	movs	r3, #64	; 0x40
 80079cc:	eba0 000a 	sub.w	r0, r0, sl
 80079d0:	fa03 f000 	lsl.w	r0, r3, r0
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	4303      	orrs	r3, r0
 80079d8:	3401      	adds	r4, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e0:	482c      	ldr	r0, [pc, #176]	; (8007a94 <_vfiprintf_r+0x250>)
 80079e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e6:	2206      	movs	r2, #6
 80079e8:	f7f8 fc82 	bl	80002f0 <memchr>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d03f      	beq.n	8007a70 <_vfiprintf_r+0x22c>
 80079f0:	4b29      	ldr	r3, [pc, #164]	; (8007a98 <_vfiprintf_r+0x254>)
 80079f2:	bb1b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x1f8>
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	3307      	adds	r3, #7
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	3308      	adds	r3, #8
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a02:	443b      	add	r3, r7
 8007a04:	9309      	str	r3, [sp, #36]	; 0x24
 8007a06:	e767      	b.n	80078d8 <_vfiprintf_r+0x94>
 8007a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7a5      	b.n	800795e <_vfiprintf_r+0x11a>
 8007a12:	2300      	movs	r3, #0
 8007a14:	3401      	adds	r4, #1
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f04f 0c0a 	mov.w	ip, #10
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a24:	3a30      	subs	r2, #48	; 0x30
 8007a26:	2a09      	cmp	r2, #9
 8007a28:	d903      	bls.n	8007a32 <_vfiprintf_r+0x1ee>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0c5      	beq.n	80079ba <_vfiprintf_r+0x176>
 8007a2e:	9105      	str	r1, [sp, #20]
 8007a30:	e7c3      	b.n	80079ba <_vfiprintf_r+0x176>
 8007a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a36:	4604      	mov	r4, r0
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7f0      	b.n	8007a1e <_vfiprintf_r+0x1da>
 8007a3c:	ab03      	add	r3, sp, #12
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	462a      	mov	r2, r5
 8007a42:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <_vfiprintf_r+0x258>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	4630      	mov	r0, r6
 8007a48:	f3af 8000 	nop.w
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	1c78      	adds	r0, r7, #1
 8007a50:	d1d6      	bne.n	8007a00 <_vfiprintf_r+0x1bc>
 8007a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a54:	07d9      	lsls	r1, r3, #31
 8007a56:	d405      	bmi.n	8007a64 <_vfiprintf_r+0x220>
 8007a58:	89ab      	ldrh	r3, [r5, #12]
 8007a5a:	059a      	lsls	r2, r3, #22
 8007a5c:	d402      	bmi.n	8007a64 <_vfiprintf_r+0x220>
 8007a5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a60:	f7ff fe1a 	bl	8007698 <__retarget_lock_release_recursive>
 8007a64:	89ab      	ldrh	r3, [r5, #12]
 8007a66:	065b      	lsls	r3, r3, #25
 8007a68:	f53f af12 	bmi.w	8007890 <_vfiprintf_r+0x4c>
 8007a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a6e:	e711      	b.n	8007894 <_vfiprintf_r+0x50>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	462a      	mov	r2, r5
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <_vfiprintf_r+0x258>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 f880 	bl	8007b80 <_printf_i>
 8007a80:	e7e4      	b.n	8007a4c <_vfiprintf_r+0x208>
 8007a82:	bf00      	nop
 8007a84:	0800923c 	.word	0x0800923c
 8007a88:	0800925c 	.word	0x0800925c
 8007a8c:	0800921c 	.word	0x0800921c
 8007a90:	08009280 	.word	0x08009280
 8007a94:	0800928a 	.word	0x0800928a
 8007a98:	00000000 	.word	0x00000000
 8007a9c:	0800781f 	.word	0x0800781f
 8007aa0:	08009286 	.word	0x08009286

08007aa4 <_printf_common>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	4616      	mov	r6, r2
 8007aaa:	4699      	mov	r9, r3
 8007aac:	688a      	ldr	r2, [r1, #8]
 8007aae:	690b      	ldr	r3, [r1, #16]
 8007ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bfb8      	it	lt
 8007ab8:	4613      	movlt	r3, r2
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	b10a      	cbz	r2, 8007aca <_printf_common+0x26>
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	0699      	lsls	r1, r3, #26
 8007ace:	bf42      	ittt	mi
 8007ad0:	6833      	ldrmi	r3, [r6, #0]
 8007ad2:	3302      	addmi	r3, #2
 8007ad4:	6033      	strmi	r3, [r6, #0]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	f015 0506 	ands.w	r5, r5, #6
 8007adc:	d106      	bne.n	8007aec <_printf_common+0x48>
 8007ade:	f104 0a19 	add.w	sl, r4, #25
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	6832      	ldr	r2, [r6, #0]
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dc26      	bgt.n	8007b3a <_printf_common+0x96>
 8007aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007af0:	1e13      	subs	r3, r2, #0
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	bf18      	it	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	0692      	lsls	r2, r2, #26
 8007afa:	d42b      	bmi.n	8007b54 <_printf_common+0xb0>
 8007afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b00:	4649      	mov	r1, r9
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c0      	blx	r8
 8007b06:	3001      	adds	r0, #1
 8007b08:	d01e      	beq.n	8007b48 <_printf_common+0xa4>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	68e5      	ldr	r5, [r4, #12]
 8007b0e:	6832      	ldr	r2, [r6, #0]
 8007b10:	f003 0306 	and.w	r3, r3, #6
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	bf08      	it	eq
 8007b18:	1aad      	subeq	r5, r5, r2
 8007b1a:	68a3      	ldr	r3, [r4, #8]
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	bf0c      	ite	eq
 8007b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b24:	2500      	movne	r5, #0
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bfc4      	itt	gt
 8007b2a:	1a9b      	subgt	r3, r3, r2
 8007b2c:	18ed      	addgt	r5, r5, r3
 8007b2e:	2600      	movs	r6, #0
 8007b30:	341a      	adds	r4, #26
 8007b32:	42b5      	cmp	r5, r6
 8007b34:	d11a      	bne.n	8007b6c <_printf_common+0xc8>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e008      	b.n	8007b4c <_printf_common+0xa8>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4638      	mov	r0, r7
 8007b42:	47c0      	blx	r8
 8007b44:	3001      	adds	r0, #1
 8007b46:	d103      	bne.n	8007b50 <_printf_common+0xac>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	3501      	adds	r5, #1
 8007b52:	e7c6      	b.n	8007ae2 <_printf_common+0x3e>
 8007b54:	18e1      	adds	r1, r4, r3
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	2030      	movs	r0, #48	; 0x30
 8007b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b5e:	4422      	add	r2, r4
 8007b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b68:	3302      	adds	r3, #2
 8007b6a:	e7c7      	b.n	8007afc <_printf_common+0x58>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4622      	mov	r2, r4
 8007b70:	4649      	mov	r1, r9
 8007b72:	4638      	mov	r0, r7
 8007b74:	47c0      	blx	r8
 8007b76:	3001      	adds	r0, #1
 8007b78:	d0e6      	beq.n	8007b48 <_printf_common+0xa4>
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7d9      	b.n	8007b32 <_printf_common+0x8e>
	...

08007b80 <_printf_i>:
 8007b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b84:	7e0f      	ldrb	r7, [r1, #24]
 8007b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b88:	2f78      	cmp	r7, #120	; 0x78
 8007b8a:	4691      	mov	r9, r2
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	469a      	mov	sl, r3
 8007b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b96:	d807      	bhi.n	8007ba8 <_printf_i+0x28>
 8007b98:	2f62      	cmp	r7, #98	; 0x62
 8007b9a:	d80a      	bhi.n	8007bb2 <_printf_i+0x32>
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	f000 80d8 	beq.w	8007d52 <_printf_i+0x1d2>
 8007ba2:	2f58      	cmp	r7, #88	; 0x58
 8007ba4:	f000 80a3 	beq.w	8007cee <_printf_i+0x16e>
 8007ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bb0:	e03a      	b.n	8007c28 <_printf_i+0xa8>
 8007bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bb6:	2b15      	cmp	r3, #21
 8007bb8:	d8f6      	bhi.n	8007ba8 <_printf_i+0x28>
 8007bba:	a101      	add	r1, pc, #4	; (adr r1, 8007bc0 <_printf_i+0x40>)
 8007bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007ba9 	.word	0x08007ba9
 8007bcc:	08007ba9 	.word	0x08007ba9
 8007bd0:	08007ba9 	.word	0x08007ba9
 8007bd4:	08007ba9 	.word	0x08007ba9
 8007bd8:	08007c2d 	.word	0x08007c2d
 8007bdc:	08007ba9 	.word	0x08007ba9
 8007be0:	08007ba9 	.word	0x08007ba9
 8007be4:	08007ba9 	.word	0x08007ba9
 8007be8:	08007ba9 	.word	0x08007ba9
 8007bec:	08007d39 	.word	0x08007d39
 8007bf0:	08007c5d 	.word	0x08007c5d
 8007bf4:	08007d1b 	.word	0x08007d1b
 8007bf8:	08007ba9 	.word	0x08007ba9
 8007bfc:	08007ba9 	.word	0x08007ba9
 8007c00:	08007d5b 	.word	0x08007d5b
 8007c04:	08007ba9 	.word	0x08007ba9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007ba9 	.word	0x08007ba9
 8007c10:	08007ba9 	.word	0x08007ba9
 8007c14:	08007d23 	.word	0x08007d23
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	1d1a      	adds	r2, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	602a      	str	r2, [r5, #0]
 8007c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0a3      	b.n	8007d74 <_printf_i+0x1f4>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	6829      	ldr	r1, [r5, #0]
 8007c30:	0606      	lsls	r6, r0, #24
 8007c32:	f101 0304 	add.w	r3, r1, #4
 8007c36:	d50a      	bpl.n	8007c4e <_printf_i+0xce>
 8007c38:	680e      	ldr	r6, [r1, #0]
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	da03      	bge.n	8007c48 <_printf_i+0xc8>
 8007c40:	232d      	movs	r3, #45	; 0x2d
 8007c42:	4276      	negs	r6, r6
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c48:	485e      	ldr	r0, [pc, #376]	; (8007dc4 <_printf_i+0x244>)
 8007c4a:	230a      	movs	r3, #10
 8007c4c:	e019      	b.n	8007c82 <_printf_i+0x102>
 8007c4e:	680e      	ldr	r6, [r1, #0]
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c56:	bf18      	it	ne
 8007c58:	b236      	sxthne	r6, r6
 8007c5a:	e7ef      	b.n	8007c3c <_printf_i+0xbc>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	6029      	str	r1, [r5, #0]
 8007c64:	0601      	lsls	r1, r0, #24
 8007c66:	d501      	bpl.n	8007c6c <_printf_i+0xec>
 8007c68:	681e      	ldr	r6, [r3, #0]
 8007c6a:	e002      	b.n	8007c72 <_printf_i+0xf2>
 8007c6c:	0646      	lsls	r6, r0, #25
 8007c6e:	d5fb      	bpl.n	8007c68 <_printf_i+0xe8>
 8007c70:	881e      	ldrh	r6, [r3, #0]
 8007c72:	4854      	ldr	r0, [pc, #336]	; (8007dc4 <_printf_i+0x244>)
 8007c74:	2f6f      	cmp	r7, #111	; 0x6f
 8007c76:	bf0c      	ite	eq
 8007c78:	2308      	moveq	r3, #8
 8007c7a:	230a      	movne	r3, #10
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c82:	6865      	ldr	r5, [r4, #4]
 8007c84:	60a5      	str	r5, [r4, #8]
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	bfa2      	ittt	ge
 8007c8a:	6821      	ldrge	r1, [r4, #0]
 8007c8c:	f021 0104 	bicge.w	r1, r1, #4
 8007c90:	6021      	strge	r1, [r4, #0]
 8007c92:	b90e      	cbnz	r6, 8007c98 <_printf_i+0x118>
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	d04d      	beq.n	8007d34 <_printf_i+0x1b4>
 8007c98:	4615      	mov	r5, r2
 8007c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8007ca2:	5dc7      	ldrb	r7, [r0, r7]
 8007ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ca8:	4637      	mov	r7, r6
 8007caa:	42bb      	cmp	r3, r7
 8007cac:	460e      	mov	r6, r1
 8007cae:	d9f4      	bls.n	8007c9a <_printf_i+0x11a>
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d10b      	bne.n	8007ccc <_printf_i+0x14c>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	07de      	lsls	r6, r3, #31
 8007cb8:	d508      	bpl.n	8007ccc <_printf_i+0x14c>
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	6861      	ldr	r1, [r4, #4]
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	bfde      	ittt	le
 8007cc2:	2330      	movle	r3, #48	; 0x30
 8007cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ccc:	1b52      	subs	r2, r2, r5
 8007cce:	6122      	str	r2, [r4, #16]
 8007cd0:	f8cd a000 	str.w	sl, [sp]
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	aa03      	add	r2, sp, #12
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7ff fee2 	bl	8007aa4 <_printf_common>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d14c      	bne.n	8007d7e <_printf_i+0x1fe>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce8:	b004      	add	sp, #16
 8007cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cee:	4835      	ldr	r0, [pc, #212]	; (8007dc4 <_printf_i+0x244>)
 8007cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cf4:	6829      	ldr	r1, [r5, #0]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cfc:	6029      	str	r1, [r5, #0]
 8007cfe:	061d      	lsls	r5, r3, #24
 8007d00:	d514      	bpl.n	8007d2c <_printf_i+0x1ac>
 8007d02:	07df      	lsls	r7, r3, #31
 8007d04:	bf44      	itt	mi
 8007d06:	f043 0320 	orrmi.w	r3, r3, #32
 8007d0a:	6023      	strmi	r3, [r4, #0]
 8007d0c:	b91e      	cbnz	r6, 8007d16 <_printf_i+0x196>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	f023 0320 	bic.w	r3, r3, #32
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	2310      	movs	r3, #16
 8007d18:	e7b0      	b.n	8007c7c <_printf_i+0xfc>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	f043 0320 	orr.w	r3, r3, #32
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	2378      	movs	r3, #120	; 0x78
 8007d24:	4828      	ldr	r0, [pc, #160]	; (8007dc8 <_printf_i+0x248>)
 8007d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d2a:	e7e3      	b.n	8007cf4 <_printf_i+0x174>
 8007d2c:	0659      	lsls	r1, r3, #25
 8007d2e:	bf48      	it	mi
 8007d30:	b2b6      	uxthmi	r6, r6
 8007d32:	e7e6      	b.n	8007d02 <_printf_i+0x182>
 8007d34:	4615      	mov	r5, r2
 8007d36:	e7bb      	b.n	8007cb0 <_printf_i+0x130>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	6826      	ldr	r6, [r4, #0]
 8007d3c:	6961      	ldr	r1, [r4, #20]
 8007d3e:	1d18      	adds	r0, r3, #4
 8007d40:	6028      	str	r0, [r5, #0]
 8007d42:	0635      	lsls	r5, r6, #24
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0x1cc>
 8007d48:	6019      	str	r1, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <_printf_i+0x1d2>
 8007d4c:	0670      	lsls	r0, r6, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0x1c8>
 8007d50:	8019      	strh	r1, [r3, #0]
 8007d52:	2300      	movs	r3, #0
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	4615      	mov	r5, r2
 8007d58:	e7ba      	b.n	8007cd0 <_printf_i+0x150>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	1d1a      	adds	r2, r3, #4
 8007d5e:	602a      	str	r2, [r5, #0]
 8007d60:	681d      	ldr	r5, [r3, #0]
 8007d62:	6862      	ldr	r2, [r4, #4]
 8007d64:	2100      	movs	r1, #0
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7f8 fac2 	bl	80002f0 <memchr>
 8007d6c:	b108      	cbz	r0, 8007d72 <_printf_i+0x1f2>
 8007d6e:	1b40      	subs	r0, r0, r5
 8007d70:	6060      	str	r0, [r4, #4]
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	6123      	str	r3, [r4, #16]
 8007d76:	2300      	movs	r3, #0
 8007d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d7c:	e7a8      	b.n	8007cd0 <_printf_i+0x150>
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	462a      	mov	r2, r5
 8007d82:	4649      	mov	r1, r9
 8007d84:	4640      	mov	r0, r8
 8007d86:	47d0      	blx	sl
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d0ab      	beq.n	8007ce4 <_printf_i+0x164>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	079b      	lsls	r3, r3, #30
 8007d90:	d413      	bmi.n	8007dba <_printf_i+0x23a>
 8007d92:	68e0      	ldr	r0, [r4, #12]
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	4298      	cmp	r0, r3
 8007d98:	bfb8      	it	lt
 8007d9a:	4618      	movlt	r0, r3
 8007d9c:	e7a4      	b.n	8007ce8 <_printf_i+0x168>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4632      	mov	r2, r6
 8007da2:	4649      	mov	r1, r9
 8007da4:	4640      	mov	r0, r8
 8007da6:	47d0      	blx	sl
 8007da8:	3001      	adds	r0, #1
 8007daa:	d09b      	beq.n	8007ce4 <_printf_i+0x164>
 8007dac:	3501      	adds	r5, #1
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	9903      	ldr	r1, [sp, #12]
 8007db2:	1a5b      	subs	r3, r3, r1
 8007db4:	42ab      	cmp	r3, r5
 8007db6:	dcf2      	bgt.n	8007d9e <_printf_i+0x21e>
 8007db8:	e7eb      	b.n	8007d92 <_printf_i+0x212>
 8007dba:	2500      	movs	r5, #0
 8007dbc:	f104 0619 	add.w	r6, r4, #25
 8007dc0:	e7f5      	b.n	8007dae <_printf_i+0x22e>
 8007dc2:	bf00      	nop
 8007dc4:	08009291 	.word	0x08009291
 8007dc8:	080092a2 	.word	0x080092a2

08007dcc <iprintf>:
 8007dcc:	b40f      	push	{r0, r1, r2, r3}
 8007dce:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <iprintf+0x2c>)
 8007dd0:	b513      	push	{r0, r1, r4, lr}
 8007dd2:	681c      	ldr	r4, [r3, #0]
 8007dd4:	b124      	cbz	r4, 8007de0 <iprintf+0x14>
 8007dd6:	69a3      	ldr	r3, [r4, #24]
 8007dd8:	b913      	cbnz	r3, 8007de0 <iprintf+0x14>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff fb26 	bl	800742c <__sinit>
 8007de0:	ab05      	add	r3, sp, #20
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	68a1      	ldr	r1, [r4, #8]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7ff fd2b 	bl	8007844 <_vfiprintf_r>
 8007dee:	b002      	add	sp, #8
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	b004      	add	sp, #16
 8007df6:	4770      	bx	lr
 8007df8:	20000008 	.word	0x20000008

08007dfc <_puts_r>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	460e      	mov	r6, r1
 8007e00:	4605      	mov	r5, r0
 8007e02:	b118      	cbz	r0, 8007e0c <_puts_r+0x10>
 8007e04:	6983      	ldr	r3, [r0, #24]
 8007e06:	b90b      	cbnz	r3, 8007e0c <_puts_r+0x10>
 8007e08:	f7ff fb10 	bl	800742c <__sinit>
 8007e0c:	69ab      	ldr	r3, [r5, #24]
 8007e0e:	68ac      	ldr	r4, [r5, #8]
 8007e10:	b913      	cbnz	r3, 8007e18 <_puts_r+0x1c>
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7ff fb0a 	bl	800742c <__sinit>
 8007e18:	4b2c      	ldr	r3, [pc, #176]	; (8007ecc <_puts_r+0xd0>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d120      	bne.n	8007e60 <_puts_r+0x64>
 8007e1e:	686c      	ldr	r4, [r5, #4]
 8007e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e22:	07db      	lsls	r3, r3, #31
 8007e24:	d405      	bmi.n	8007e32 <_puts_r+0x36>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	0598      	lsls	r0, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_puts_r+0x36>
 8007e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2e:	f7ff fc32 	bl	8007696 <__retarget_lock_acquire_recursive>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	0719      	lsls	r1, r3, #28
 8007e36:	d51d      	bpl.n	8007e74 <_puts_r+0x78>
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	b1db      	cbz	r3, 8007e74 <_puts_r+0x78>
 8007e3c:	3e01      	subs	r6, #1
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e44:	3b01      	subs	r3, #1
 8007e46:	60a3      	str	r3, [r4, #8]
 8007e48:	bb39      	cbnz	r1, 8007e9a <_puts_r+0x9e>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da38      	bge.n	8007ec0 <_puts_r+0xc4>
 8007e4e:	4622      	mov	r2, r4
 8007e50:	210a      	movs	r1, #10
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f960 	bl	8008118 <__swbuf_r>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d011      	beq.n	8007e80 <_puts_r+0x84>
 8007e5c:	250a      	movs	r5, #10
 8007e5e:	e011      	b.n	8007e84 <_puts_r+0x88>
 8007e60:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <_puts_r+0xd4>)
 8007e62:	429c      	cmp	r4, r3
 8007e64:	d101      	bne.n	8007e6a <_puts_r+0x6e>
 8007e66:	68ac      	ldr	r4, [r5, #8]
 8007e68:	e7da      	b.n	8007e20 <_puts_r+0x24>
 8007e6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <_puts_r+0xd8>)
 8007e6c:	429c      	cmp	r4, r3
 8007e6e:	bf08      	it	eq
 8007e70:	68ec      	ldreq	r4, [r5, #12]
 8007e72:	e7d5      	b.n	8007e20 <_puts_r+0x24>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 f9b2 	bl	80081e0 <__swsetup_r>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d0dd      	beq.n	8007e3c <_puts_r+0x40>
 8007e80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e86:	07da      	lsls	r2, r3, #31
 8007e88:	d405      	bmi.n	8007e96 <_puts_r+0x9a>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	059b      	lsls	r3, r3, #22
 8007e8e:	d402      	bmi.n	8007e96 <_puts_r+0x9a>
 8007e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e92:	f7ff fc01 	bl	8007698 <__retarget_lock_release_recursive>
 8007e96:	4628      	mov	r0, r5
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da04      	bge.n	8007ea8 <_puts_r+0xac>
 8007e9e:	69a2      	ldr	r2, [r4, #24]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	dc06      	bgt.n	8007eb2 <_puts_r+0xb6>
 8007ea4:	290a      	cmp	r1, #10
 8007ea6:	d004      	beq.n	8007eb2 <_puts_r+0xb6>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	6022      	str	r2, [r4, #0]
 8007eae:	7019      	strb	r1, [r3, #0]
 8007eb0:	e7c5      	b.n	8007e3e <_puts_r+0x42>
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 f92f 	bl	8008118 <__swbuf_r>
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d1bf      	bne.n	8007e3e <_puts_r+0x42>
 8007ebe:	e7df      	b.n	8007e80 <_puts_r+0x84>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	250a      	movs	r5, #10
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	701d      	strb	r5, [r3, #0]
 8007eca:	e7db      	b.n	8007e84 <_puts_r+0x88>
 8007ecc:	0800923c 	.word	0x0800923c
 8007ed0:	0800925c 	.word	0x0800925c
 8007ed4:	0800921c 	.word	0x0800921c

08007ed8 <puts>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <puts+0xc>)
 8007eda:	4601      	mov	r1, r0
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f7ff bf8d 	b.w	8007dfc <_puts_r>
 8007ee2:	bf00      	nop
 8007ee4:	20000008 	.word	0x20000008

08007ee8 <srand>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <srand+0x44>)
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	b9b3      	cbnz	r3, 8007f22 <srand+0x3a>
 8007ef4:	2018      	movs	r0, #24
 8007ef6:	f000 fb57 	bl	80085a8 <malloc>
 8007efa:	4602      	mov	r2, r0
 8007efc:	63a8      	str	r0, [r5, #56]	; 0x38
 8007efe:	b920      	cbnz	r0, 8007f0a <srand+0x22>
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <srand+0x48>)
 8007f02:	480c      	ldr	r0, [pc, #48]	; (8007f34 <srand+0x4c>)
 8007f04:	2142      	movs	r1, #66	; 0x42
 8007f06:	f7ff f96f 	bl	80071e8 <__assert_func>
 8007f0a:	490b      	ldr	r1, [pc, #44]	; (8007f38 <srand+0x50>)
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <srand+0x54>)
 8007f0e:	e9c0 1300 	strd	r1, r3, [r0]
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <srand+0x58>)
 8007f14:	6083      	str	r3, [r0, #8]
 8007f16:	230b      	movs	r3, #11
 8007f18:	8183      	strh	r3, [r0, #12]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007f24:	2200      	movs	r2, #0
 8007f26:	611c      	str	r4, [r3, #16]
 8007f28:	615a      	str	r2, [r3, #20]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20000008 	.word	0x20000008
 8007f30:	080092b3 	.word	0x080092b3
 8007f34:	080092ca 	.word	0x080092ca
 8007f38:	abcd330e 	.word	0xabcd330e
 8007f3c:	e66d1234 	.word	0xe66d1234
 8007f40:	0005deec 	.word	0x0005deec

08007f44 <rand>:
 8007f44:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <rand+0x5c>)
 8007f46:	b510      	push	{r4, lr}
 8007f48:	681c      	ldr	r4, [r3, #0]
 8007f4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f4c:	b9b3      	cbnz	r3, 8007f7c <rand+0x38>
 8007f4e:	2018      	movs	r0, #24
 8007f50:	f000 fb2a 	bl	80085a8 <malloc>
 8007f54:	63a0      	str	r0, [r4, #56]	; 0x38
 8007f56:	b928      	cbnz	r0, 8007f64 <rand+0x20>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <rand+0x60>)
 8007f5c:	4812      	ldr	r0, [pc, #72]	; (8007fa8 <rand+0x64>)
 8007f5e:	214e      	movs	r1, #78	; 0x4e
 8007f60:	f7ff f942 	bl	80071e8 <__assert_func>
 8007f64:	4a11      	ldr	r2, [pc, #68]	; (8007fac <rand+0x68>)
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <rand+0x6c>)
 8007f68:	e9c0 2300 	strd	r2, r3, [r0]
 8007f6c:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <rand+0x70>)
 8007f6e:	6083      	str	r3, [r0, #8]
 8007f70:	230b      	movs	r3, #11
 8007f72:	8183      	strh	r3, [r0, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	2300      	movs	r3, #0
 8007f78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007f7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007f7e:	4a0e      	ldr	r2, [pc, #56]	; (8007fb8 <rand+0x74>)
 8007f80:	6920      	ldr	r0, [r4, #16]
 8007f82:	6963      	ldr	r3, [r4, #20]
 8007f84:	490d      	ldr	r1, [pc, #52]	; (8007fbc <rand+0x78>)
 8007f86:	4342      	muls	r2, r0
 8007f88:	fb01 2203 	mla	r2, r1, r3, r2
 8007f8c:	fba0 0101 	umull	r0, r1, r0, r1
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	eb42 0001 	adc.w	r0, r2, r1
 8007f96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007f9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007f9e:	bd10      	pop	{r4, pc}
 8007fa0:	20000008 	.word	0x20000008
 8007fa4:	080092b3 	.word	0x080092b3
 8007fa8:	080092ca 	.word	0x080092ca
 8007fac:	abcd330e 	.word	0xabcd330e
 8007fb0:	e66d1234 	.word	0xe66d1234
 8007fb4:	0005deec 	.word	0x0005deec
 8007fb8:	5851f42d 	.word	0x5851f42d
 8007fbc:	4c957f2d 	.word	0x4c957f2d

08007fc0 <__srget_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	b118      	cbz	r0, 8007fd0 <__srget_r+0x10>
 8007fc8:	6983      	ldr	r3, [r0, #24]
 8007fca:	b90b      	cbnz	r3, 8007fd0 <__srget_r+0x10>
 8007fcc:	f7ff fa2e 	bl	800742c <__sinit>
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <__srget_r+0x4c>)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d10d      	bne.n	8007ff2 <__srget_r+0x32>
 8007fd6:	686c      	ldr	r4, [r5, #4]
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 fb60 	bl	80086a0 <__srefill_r>
 8007fe0:	b988      	cbnz	r0, 8008006 <__srget_r+0x46>
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	6063      	str	r3, [r4, #4]
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	6022      	str	r2, [r4, #0]
 8007fee:	7818      	ldrb	r0, [r3, #0]
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <__srget_r+0x50>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d101      	bne.n	8007ffc <__srget_r+0x3c>
 8007ff8:	68ac      	ldr	r4, [r5, #8]
 8007ffa:	e7ed      	b.n	8007fd8 <__srget_r+0x18>
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <__srget_r+0x54>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	bf08      	it	eq
 8008002:	68ec      	ldreq	r4, [r5, #12]
 8008004:	e7e8      	b.n	8007fd8 <__srget_r+0x18>
 8008006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800800a:	e7f1      	b.n	8007ff0 <__srget_r+0x30>
 800800c:	0800923c 	.word	0x0800923c
 8008010:	0800925c 	.word	0x0800925c
 8008014:	0800921c 	.word	0x0800921c

08008018 <_sbrk_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d06      	ldr	r5, [pc, #24]	; (8008034 <_sbrk_r+0x1c>)
 800801c:	2300      	movs	r3, #0
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	602b      	str	r3, [r5, #0]
 8008024:	f000 fc64 	bl	80088f0 <_sbrk>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_sbrk_r+0x1a>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_sbrk_r+0x1a>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	20011008 	.word	0x20011008

08008038 <__sread>:
 8008038:	b510      	push	{r4, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	f000 fb12 	bl	8008668 <_read_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	bfab      	itete	ge
 8008048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800804a:	89a3      	ldrhlt	r3, [r4, #12]
 800804c:	181b      	addge	r3, r3, r0
 800804e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008052:	bfac      	ite	ge
 8008054:	6563      	strge	r3, [r4, #84]	; 0x54
 8008056:	81a3      	strhlt	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__swrite>:
 800805a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805e:	461f      	mov	r7, r3
 8008060:	898b      	ldrh	r3, [r1, #12]
 8008062:	05db      	lsls	r3, r3, #23
 8008064:	4605      	mov	r5, r0
 8008066:	460c      	mov	r4, r1
 8008068:	4616      	mov	r6, r2
 800806a:	d505      	bpl.n	8008078 <__swrite+0x1e>
 800806c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008070:	2302      	movs	r3, #2
 8008072:	2200      	movs	r2, #0
 8008074:	f000 fa20 	bl	80084b8 <_lseek_r>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	4632      	mov	r2, r6
 8008086:	463b      	mov	r3, r7
 8008088:	4628      	mov	r0, r5
 800808a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	f000 b895 	b.w	80081bc <_write_r>

08008092 <__sseek>:
 8008092:	b510      	push	{r4, lr}
 8008094:	460c      	mov	r4, r1
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 fa0d 	bl	80084b8 <_lseek_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	bf15      	itete	ne
 80080a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ae:	81a3      	strheq	r3, [r4, #12]
 80080b0:	bf18      	it	ne
 80080b2:	81a3      	strhne	r3, [r4, #12]
 80080b4:	bd10      	pop	{r4, pc}

080080b6 <__sclose>:
 80080b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ba:	f000 b907 	b.w	80082cc <_close_r>

080080be <strncpy>:
 80080be:	b510      	push	{r4, lr}
 80080c0:	3901      	subs	r1, #1
 80080c2:	4603      	mov	r3, r0
 80080c4:	b132      	cbz	r2, 80080d4 <strncpy+0x16>
 80080c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080ca:	f803 4b01 	strb.w	r4, [r3], #1
 80080ce:	3a01      	subs	r2, #1
 80080d0:	2c00      	cmp	r4, #0
 80080d2:	d1f7      	bne.n	80080c4 <strncpy+0x6>
 80080d4:	441a      	add	r2, r3
 80080d6:	2100      	movs	r1, #0
 80080d8:	4293      	cmp	r3, r2
 80080da:	d100      	bne.n	80080de <strncpy+0x20>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	f803 1b01 	strb.w	r1, [r3], #1
 80080e2:	e7f9      	b.n	80080d8 <strncpy+0x1a>

080080e4 <time>:
 80080e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <time+0x30>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	4669      	mov	r1, sp
 80080ec:	4604      	mov	r4, r0
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	f000 f9d0 	bl	8008494 <_gettimeofday_r>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	bfbe      	ittt	lt
 80080f8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80080fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008100:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008108:	b10c      	cbz	r4, 800810e <time+0x2a>
 800810a:	e9c4 0100 	strd	r0, r1, [r4]
 800810e:	b004      	add	sp, #16
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	20000008 	.word	0x20000008

08008118 <__swbuf_r>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	460e      	mov	r6, r1
 800811c:	4614      	mov	r4, r2
 800811e:	4605      	mov	r5, r0
 8008120:	b118      	cbz	r0, 800812a <__swbuf_r+0x12>
 8008122:	6983      	ldr	r3, [r0, #24]
 8008124:	b90b      	cbnz	r3, 800812a <__swbuf_r+0x12>
 8008126:	f7ff f981 	bl	800742c <__sinit>
 800812a:	4b21      	ldr	r3, [pc, #132]	; (80081b0 <__swbuf_r+0x98>)
 800812c:	429c      	cmp	r4, r3
 800812e:	d12b      	bne.n	8008188 <__swbuf_r+0x70>
 8008130:	686c      	ldr	r4, [r5, #4]
 8008132:	69a3      	ldr	r3, [r4, #24]
 8008134:	60a3      	str	r3, [r4, #8]
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	071a      	lsls	r2, r3, #28
 800813a:	d52f      	bpl.n	800819c <__swbuf_r+0x84>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	b36b      	cbz	r3, 800819c <__swbuf_r+0x84>
 8008140:	6923      	ldr	r3, [r4, #16]
 8008142:	6820      	ldr	r0, [r4, #0]
 8008144:	1ac0      	subs	r0, r0, r3
 8008146:	6963      	ldr	r3, [r4, #20]
 8008148:	b2f6      	uxtb	r6, r6
 800814a:	4283      	cmp	r3, r0
 800814c:	4637      	mov	r7, r6
 800814e:	dc04      	bgt.n	800815a <__swbuf_r+0x42>
 8008150:	4621      	mov	r1, r4
 8008152:	4628      	mov	r0, r5
 8008154:	f000 f950 	bl	80083f8 <_fflush_r>
 8008158:	bb30      	cbnz	r0, 80081a8 <__swbuf_r+0x90>
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	3b01      	subs	r3, #1
 800815e:	60a3      	str	r3, [r4, #8]
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	6022      	str	r2, [r4, #0]
 8008166:	701e      	strb	r6, [r3, #0]
 8008168:	6963      	ldr	r3, [r4, #20]
 800816a:	3001      	adds	r0, #1
 800816c:	4283      	cmp	r3, r0
 800816e:	d004      	beq.n	800817a <__swbuf_r+0x62>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d506      	bpl.n	8008184 <__swbuf_r+0x6c>
 8008176:	2e0a      	cmp	r6, #10
 8008178:	d104      	bne.n	8008184 <__swbuf_r+0x6c>
 800817a:	4621      	mov	r1, r4
 800817c:	4628      	mov	r0, r5
 800817e:	f000 f93b 	bl	80083f8 <_fflush_r>
 8008182:	b988      	cbnz	r0, 80081a8 <__swbuf_r+0x90>
 8008184:	4638      	mov	r0, r7
 8008186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <__swbuf_r+0x9c>)
 800818a:	429c      	cmp	r4, r3
 800818c:	d101      	bne.n	8008192 <__swbuf_r+0x7a>
 800818e:	68ac      	ldr	r4, [r5, #8]
 8008190:	e7cf      	b.n	8008132 <__swbuf_r+0x1a>
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <__swbuf_r+0xa0>)
 8008194:	429c      	cmp	r4, r3
 8008196:	bf08      	it	eq
 8008198:	68ec      	ldreq	r4, [r5, #12]
 800819a:	e7ca      	b.n	8008132 <__swbuf_r+0x1a>
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f81e 	bl	80081e0 <__swsetup_r>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d0cb      	beq.n	8008140 <__swbuf_r+0x28>
 80081a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081ac:	e7ea      	b.n	8008184 <__swbuf_r+0x6c>
 80081ae:	bf00      	nop
 80081b0:	0800923c 	.word	0x0800923c
 80081b4:	0800925c 	.word	0x0800925c
 80081b8:	0800921c 	.word	0x0800921c

080081bc <_write_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	; (80081dc <_write_r+0x20>)
 80081c0:	4604      	mov	r4, r0
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7fc fa7a 	bl	80046c4 <_write>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_write_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_write_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20011008 	.word	0x20011008

080081e0 <__swsetup_r>:
 80081e0:	4b32      	ldr	r3, [pc, #200]	; (80082ac <__swsetup_r+0xcc>)
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	4606      	mov	r6, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	b125      	cbz	r5, 80081f6 <__swsetup_r+0x16>
 80081ec:	69ab      	ldr	r3, [r5, #24]
 80081ee:	b913      	cbnz	r3, 80081f6 <__swsetup_r+0x16>
 80081f0:	4628      	mov	r0, r5
 80081f2:	f7ff f91b 	bl	800742c <__sinit>
 80081f6:	4b2e      	ldr	r3, [pc, #184]	; (80082b0 <__swsetup_r+0xd0>)
 80081f8:	429c      	cmp	r4, r3
 80081fa:	d10f      	bne.n	800821c <__swsetup_r+0x3c>
 80081fc:	686c      	ldr	r4, [r5, #4]
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008204:	0719      	lsls	r1, r3, #28
 8008206:	d42c      	bmi.n	8008262 <__swsetup_r+0x82>
 8008208:	06dd      	lsls	r5, r3, #27
 800820a:	d411      	bmi.n	8008230 <__swsetup_r+0x50>
 800820c:	2309      	movs	r3, #9
 800820e:	6033      	str	r3, [r6, #0]
 8008210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800821a:	e03e      	b.n	800829a <__swsetup_r+0xba>
 800821c:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <__swsetup_r+0xd4>)
 800821e:	429c      	cmp	r4, r3
 8008220:	d101      	bne.n	8008226 <__swsetup_r+0x46>
 8008222:	68ac      	ldr	r4, [r5, #8]
 8008224:	e7eb      	b.n	80081fe <__swsetup_r+0x1e>
 8008226:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <__swsetup_r+0xd8>)
 8008228:	429c      	cmp	r4, r3
 800822a:	bf08      	it	eq
 800822c:	68ec      	ldreq	r4, [r5, #12]
 800822e:	e7e6      	b.n	80081fe <__swsetup_r+0x1e>
 8008230:	0758      	lsls	r0, r3, #29
 8008232:	d512      	bpl.n	800825a <__swsetup_r+0x7a>
 8008234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008236:	b141      	cbz	r1, 800824a <__swsetup_r+0x6a>
 8008238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800823c:	4299      	cmp	r1, r3
 800823e:	d002      	beq.n	8008246 <__swsetup_r+0x66>
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f9c5 	bl	80085d0 <_free_r>
 8008246:	2300      	movs	r3, #0
 8008248:	6363      	str	r3, [r4, #52]	; 0x34
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	2300      	movs	r3, #0
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	b94b      	cbnz	r3, 800827a <__swsetup_r+0x9a>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800826c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008270:	d003      	beq.n	800827a <__swsetup_r+0x9a>
 8008272:	4621      	mov	r1, r4
 8008274:	4630      	mov	r0, r6
 8008276:	f000 f957 	bl	8008528 <__smakebuf_r>
 800827a:	89a0      	ldrh	r0, [r4, #12]
 800827c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008280:	f010 0301 	ands.w	r3, r0, #1
 8008284:	d00a      	beq.n	800829c <__swsetup_r+0xbc>
 8008286:	2300      	movs	r3, #0
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	425b      	negs	r3, r3
 800828e:	61a3      	str	r3, [r4, #24]
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	b943      	cbnz	r3, 80082a6 <__swsetup_r+0xc6>
 8008294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008298:	d1ba      	bne.n	8008210 <__swsetup_r+0x30>
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	0781      	lsls	r1, r0, #30
 800829e:	bf58      	it	pl
 80082a0:	6963      	ldrpl	r3, [r4, #20]
 80082a2:	60a3      	str	r3, [r4, #8]
 80082a4:	e7f4      	b.n	8008290 <__swsetup_r+0xb0>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e7f7      	b.n	800829a <__swsetup_r+0xba>
 80082aa:	bf00      	nop
 80082ac:	20000008 	.word	0x20000008
 80082b0:	0800923c 	.word	0x0800923c
 80082b4:	0800925c 	.word	0x0800925c
 80082b8:	0800921c 	.word	0x0800921c

080082bc <abort>:
 80082bc:	b508      	push	{r3, lr}
 80082be:	2006      	movs	r0, #6
 80082c0:	f000 faa0 	bl	8008804 <raise>
 80082c4:	2001      	movs	r0, #1
 80082c6:	f000 fb21 	bl	800890c <_exit>
	...

080082cc <_close_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_close_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f000 fad2 	bl	8008880 <_close>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_close_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_close_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20011008 	.word	0x20011008

080082ec <__sflush_r>:
 80082ec:	898a      	ldrh	r2, [r1, #12]
 80082ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f2:	4605      	mov	r5, r0
 80082f4:	0710      	lsls	r0, r2, #28
 80082f6:	460c      	mov	r4, r1
 80082f8:	d458      	bmi.n	80083ac <__sflush_r+0xc0>
 80082fa:	684b      	ldr	r3, [r1, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dc05      	bgt.n	800830c <__sflush_r+0x20>
 8008300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	dc02      	bgt.n	800830c <__sflush_r+0x20>
 8008306:	2000      	movs	r0, #0
 8008308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800830c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800830e:	2e00      	cmp	r6, #0
 8008310:	d0f9      	beq.n	8008306 <__sflush_r+0x1a>
 8008312:	2300      	movs	r3, #0
 8008314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008318:	682f      	ldr	r7, [r5, #0]
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	d032      	beq.n	8008384 <__sflush_r+0x98>
 800831e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	075a      	lsls	r2, r3, #29
 8008324:	d505      	bpl.n	8008332 <__sflush_r+0x46>
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	1ac0      	subs	r0, r0, r3
 800832a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800832c:	b10b      	cbz	r3, 8008332 <__sflush_r+0x46>
 800832e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008330:	1ac0      	subs	r0, r0, r3
 8008332:	2300      	movs	r3, #0
 8008334:	4602      	mov	r2, r0
 8008336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008338:	6a21      	ldr	r1, [r4, #32]
 800833a:	4628      	mov	r0, r5
 800833c:	47b0      	blx	r6
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	d106      	bne.n	8008352 <__sflush_r+0x66>
 8008344:	6829      	ldr	r1, [r5, #0]
 8008346:	291d      	cmp	r1, #29
 8008348:	d82c      	bhi.n	80083a4 <__sflush_r+0xb8>
 800834a:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <__sflush_r+0x108>)
 800834c:	40ca      	lsrs	r2, r1
 800834e:	07d6      	lsls	r6, r2, #31
 8008350:	d528      	bpl.n	80083a4 <__sflush_r+0xb8>
 8008352:	2200      	movs	r2, #0
 8008354:	6062      	str	r2, [r4, #4]
 8008356:	04d9      	lsls	r1, r3, #19
 8008358:	6922      	ldr	r2, [r4, #16]
 800835a:	6022      	str	r2, [r4, #0]
 800835c:	d504      	bpl.n	8008368 <__sflush_r+0x7c>
 800835e:	1c42      	adds	r2, r0, #1
 8008360:	d101      	bne.n	8008366 <__sflush_r+0x7a>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b903      	cbnz	r3, 8008368 <__sflush_r+0x7c>
 8008366:	6560      	str	r0, [r4, #84]	; 0x54
 8008368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800836a:	602f      	str	r7, [r5, #0]
 800836c:	2900      	cmp	r1, #0
 800836e:	d0ca      	beq.n	8008306 <__sflush_r+0x1a>
 8008370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008374:	4299      	cmp	r1, r3
 8008376:	d002      	beq.n	800837e <__sflush_r+0x92>
 8008378:	4628      	mov	r0, r5
 800837a:	f000 f929 	bl	80085d0 <_free_r>
 800837e:	2000      	movs	r0, #0
 8008380:	6360      	str	r0, [r4, #52]	; 0x34
 8008382:	e7c1      	b.n	8008308 <__sflush_r+0x1c>
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	2301      	movs	r3, #1
 8008388:	4628      	mov	r0, r5
 800838a:	47b0      	blx	r6
 800838c:	1c41      	adds	r1, r0, #1
 800838e:	d1c7      	bne.n	8008320 <__sflush_r+0x34>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0c4      	beq.n	8008320 <__sflush_r+0x34>
 8008396:	2b1d      	cmp	r3, #29
 8008398:	d001      	beq.n	800839e <__sflush_r+0xb2>
 800839a:	2b16      	cmp	r3, #22
 800839c:	d101      	bne.n	80083a2 <__sflush_r+0xb6>
 800839e:	602f      	str	r7, [r5, #0]
 80083a0:	e7b1      	b.n	8008306 <__sflush_r+0x1a>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	e7ad      	b.n	8008308 <__sflush_r+0x1c>
 80083ac:	690f      	ldr	r7, [r1, #16]
 80083ae:	2f00      	cmp	r7, #0
 80083b0:	d0a9      	beq.n	8008306 <__sflush_r+0x1a>
 80083b2:	0793      	lsls	r3, r2, #30
 80083b4:	680e      	ldr	r6, [r1, #0]
 80083b6:	bf08      	it	eq
 80083b8:	694b      	ldreq	r3, [r1, #20]
 80083ba:	600f      	str	r7, [r1, #0]
 80083bc:	bf18      	it	ne
 80083be:	2300      	movne	r3, #0
 80083c0:	eba6 0807 	sub.w	r8, r6, r7
 80083c4:	608b      	str	r3, [r1, #8]
 80083c6:	f1b8 0f00 	cmp.w	r8, #0
 80083ca:	dd9c      	ble.n	8008306 <__sflush_r+0x1a>
 80083cc:	6a21      	ldr	r1, [r4, #32]
 80083ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083d0:	4643      	mov	r3, r8
 80083d2:	463a      	mov	r2, r7
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b0      	blx	r6
 80083d8:	2800      	cmp	r0, #0
 80083da:	dc06      	bgt.n	80083ea <__sflush_r+0xfe>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e8:	e78e      	b.n	8008308 <__sflush_r+0x1c>
 80083ea:	4407      	add	r7, r0
 80083ec:	eba8 0800 	sub.w	r8, r8, r0
 80083f0:	e7e9      	b.n	80083c6 <__sflush_r+0xda>
 80083f2:	bf00      	nop
 80083f4:	20400001 	.word	0x20400001

080083f8 <_fflush_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	690b      	ldr	r3, [r1, #16]
 80083fc:	4605      	mov	r5, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	b913      	cbnz	r3, 8008408 <_fflush_r+0x10>
 8008402:	2500      	movs	r5, #0
 8008404:	4628      	mov	r0, r5
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	b118      	cbz	r0, 8008412 <_fflush_r+0x1a>
 800840a:	6983      	ldr	r3, [r0, #24]
 800840c:	b90b      	cbnz	r3, 8008412 <_fflush_r+0x1a>
 800840e:	f7ff f80d 	bl	800742c <__sinit>
 8008412:	4b14      	ldr	r3, [pc, #80]	; (8008464 <_fflush_r+0x6c>)
 8008414:	429c      	cmp	r4, r3
 8008416:	d11b      	bne.n	8008450 <_fflush_r+0x58>
 8008418:	686c      	ldr	r4, [r5, #4]
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0ef      	beq.n	8008402 <_fflush_r+0xa>
 8008422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008424:	07d0      	lsls	r0, r2, #31
 8008426:	d404      	bmi.n	8008432 <_fflush_r+0x3a>
 8008428:	0599      	lsls	r1, r3, #22
 800842a:	d402      	bmi.n	8008432 <_fflush_r+0x3a>
 800842c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842e:	f7ff f932 	bl	8007696 <__retarget_lock_acquire_recursive>
 8008432:	4628      	mov	r0, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7ff ff59 	bl	80082ec <__sflush_r>
 800843a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843c:	07da      	lsls	r2, r3, #31
 800843e:	4605      	mov	r5, r0
 8008440:	d4e0      	bmi.n	8008404 <_fflush_r+0xc>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d4dd      	bmi.n	8008404 <_fflush_r+0xc>
 8008448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844a:	f7ff f925 	bl	8007698 <__retarget_lock_release_recursive>
 800844e:	e7d9      	b.n	8008404 <_fflush_r+0xc>
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <_fflush_r+0x70>)
 8008452:	429c      	cmp	r4, r3
 8008454:	d101      	bne.n	800845a <_fflush_r+0x62>
 8008456:	68ac      	ldr	r4, [r5, #8]
 8008458:	e7df      	b.n	800841a <_fflush_r+0x22>
 800845a:	4b04      	ldr	r3, [pc, #16]	; (800846c <_fflush_r+0x74>)
 800845c:	429c      	cmp	r4, r3
 800845e:	bf08      	it	eq
 8008460:	68ec      	ldreq	r4, [r5, #12]
 8008462:	e7da      	b.n	800841a <_fflush_r+0x22>
 8008464:	0800923c 	.word	0x0800923c
 8008468:	0800925c 	.word	0x0800925c
 800846c:	0800921c 	.word	0x0800921c

08008470 <fflush>:
 8008470:	4601      	mov	r1, r0
 8008472:	b920      	cbnz	r0, 800847e <fflush+0xe>
 8008474:	4b04      	ldr	r3, [pc, #16]	; (8008488 <fflush+0x18>)
 8008476:	4905      	ldr	r1, [pc, #20]	; (800848c <fflush+0x1c>)
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f7ff b884 	b.w	8007586 <_fwalk_reent>
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <fflush+0x20>)
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	f7ff bfb9 	b.w	80083f8 <_fflush_r>
 8008486:	bf00      	nop
 8008488:	0800927c 	.word	0x0800927c
 800848c:	080083f9 	.word	0x080083f9
 8008490:	20000008 	.word	0x20000008

08008494 <_gettimeofday_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	; (80084b4 <_gettimeofday_r+0x20>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	4611      	mov	r1, r2
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	f000 fa05 	bl	80088b0 <_gettimeofday>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d102      	bne.n	80084b0 <_gettimeofday_r+0x1c>
 80084aa:	682b      	ldr	r3, [r5, #0]
 80084ac:	b103      	cbz	r3, 80084b0 <_gettimeofday_r+0x1c>
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	bd38      	pop	{r3, r4, r5, pc}
 80084b2:	bf00      	nop
 80084b4:	20011008 	.word	0x20011008

080084b8 <_lseek_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d07      	ldr	r5, [pc, #28]	; (80084d8 <_lseek_r+0x20>)
 80084bc:	4604      	mov	r4, r0
 80084be:	4608      	mov	r0, r1
 80084c0:	4611      	mov	r1, r2
 80084c2:	2200      	movs	r2, #0
 80084c4:	602a      	str	r2, [r5, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f000 fa0a 	bl	80088e0 <_lseek>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d102      	bne.n	80084d6 <_lseek_r+0x1e>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b103      	cbz	r3, 80084d6 <_lseek_r+0x1e>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	20011008 	.word	0x20011008

080084dc <__swhatbuf_r>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	460e      	mov	r6, r1
 80084e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e4:	2900      	cmp	r1, #0
 80084e6:	b096      	sub	sp, #88	; 0x58
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	da08      	bge.n	8008500 <__swhatbuf_r+0x24>
 80084ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	602a      	str	r2, [r5, #0]
 80084f6:	061a      	lsls	r2, r3, #24
 80084f8:	d410      	bmi.n	800851c <__swhatbuf_r+0x40>
 80084fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084fe:	e00e      	b.n	800851e <__swhatbuf_r+0x42>
 8008500:	466a      	mov	r2, sp
 8008502:	f000 f99b 	bl	800883c <_fstat_r>
 8008506:	2800      	cmp	r0, #0
 8008508:	dbf1      	blt.n	80084ee <__swhatbuf_r+0x12>
 800850a:	9a01      	ldr	r2, [sp, #4]
 800850c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008514:	425a      	negs	r2, r3
 8008516:	415a      	adcs	r2, r3
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	e7ee      	b.n	80084fa <__swhatbuf_r+0x1e>
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	2000      	movs	r0, #0
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	b016      	add	sp, #88	; 0x58
 8008524:	bd70      	pop	{r4, r5, r6, pc}
	...

08008528 <__smakebuf_r>:
 8008528:	898b      	ldrh	r3, [r1, #12]
 800852a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800852c:	079d      	lsls	r5, r3, #30
 800852e:	4606      	mov	r6, r0
 8008530:	460c      	mov	r4, r1
 8008532:	d507      	bpl.n	8008544 <__smakebuf_r+0x1c>
 8008534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	6123      	str	r3, [r4, #16]
 800853c:	2301      	movs	r3, #1
 800853e:	6163      	str	r3, [r4, #20]
 8008540:	b002      	add	sp, #8
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	ab01      	add	r3, sp, #4
 8008546:	466a      	mov	r2, sp
 8008548:	f7ff ffc8 	bl	80084dc <__swhatbuf_r>
 800854c:	9900      	ldr	r1, [sp, #0]
 800854e:	4605      	mov	r5, r0
 8008550:	4630      	mov	r0, r6
 8008552:	f7ff f8d9 	bl	8007708 <_malloc_r>
 8008556:	b948      	cbnz	r0, 800856c <__smakebuf_r+0x44>
 8008558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855c:	059a      	lsls	r2, r3, #22
 800855e:	d4ef      	bmi.n	8008540 <__smakebuf_r+0x18>
 8008560:	f023 0303 	bic.w	r3, r3, #3
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	e7e3      	b.n	8008534 <__smakebuf_r+0xc>
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <__smakebuf_r+0x7c>)
 800856e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	6020      	str	r0, [r4, #0]
 8008574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008578:	81a3      	strh	r3, [r4, #12]
 800857a:	9b00      	ldr	r3, [sp, #0]
 800857c:	6163      	str	r3, [r4, #20]
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	6120      	str	r0, [r4, #16]
 8008582:	b15b      	cbz	r3, 800859c <__smakebuf_r+0x74>
 8008584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f969 	bl	8008860 <_isatty_r>
 800858e:	b128      	cbz	r0, 800859c <__smakebuf_r+0x74>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	89a0      	ldrh	r0, [r4, #12]
 800859e:	4305      	orrs	r5, r0
 80085a0:	81a5      	strh	r5, [r4, #12]
 80085a2:	e7cd      	b.n	8008540 <__smakebuf_r+0x18>
 80085a4:	080073c5 	.word	0x080073c5

080085a8 <malloc>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <malloc+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f7ff b8ab 	b.w	8007708 <_malloc_r>
 80085b2:	bf00      	nop
 80085b4:	20000008 	.word	0x20000008

080085b8 <__malloc_lock>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__malloc_lock+0x8>)
 80085ba:	f7ff b86c 	b.w	8007696 <__retarget_lock_acquire_recursive>
 80085be:	bf00      	nop
 80085c0:	20010ffc 	.word	0x20010ffc

080085c4 <__malloc_unlock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_unlock+0x8>)
 80085c6:	f7ff b867 	b.w	8007698 <__retarget_lock_release_recursive>
 80085ca:	bf00      	nop
 80085cc:	20010ffc 	.word	0x20010ffc

080085d0 <_free_r>:
 80085d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d044      	beq.n	8008660 <_free_r+0x90>
 80085d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085da:	9001      	str	r0, [sp, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f1a1 0404 	sub.w	r4, r1, #4
 80085e2:	bfb8      	it	lt
 80085e4:	18e4      	addlt	r4, r4, r3
 80085e6:	f7ff ffe7 	bl	80085b8 <__malloc_lock>
 80085ea:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <_free_r+0x94>)
 80085ec:	9801      	ldr	r0, [sp, #4]
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	b933      	cbnz	r3, 8008600 <_free_r+0x30>
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	6014      	str	r4, [r2, #0]
 80085f6:	b003      	add	sp, #12
 80085f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085fc:	f7ff bfe2 	b.w	80085c4 <__malloc_unlock>
 8008600:	42a3      	cmp	r3, r4
 8008602:	d908      	bls.n	8008616 <_free_r+0x46>
 8008604:	6825      	ldr	r5, [r4, #0]
 8008606:	1961      	adds	r1, r4, r5
 8008608:	428b      	cmp	r3, r1
 800860a:	bf01      	itttt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	1949      	addeq	r1, r1, r5
 8008612:	6021      	streq	r1, [r4, #0]
 8008614:	e7ed      	b.n	80085f2 <_free_r+0x22>
 8008616:	461a      	mov	r2, r3
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b10b      	cbz	r3, 8008620 <_free_r+0x50>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d9fa      	bls.n	8008616 <_free_r+0x46>
 8008620:	6811      	ldr	r1, [r2, #0]
 8008622:	1855      	adds	r5, r2, r1
 8008624:	42a5      	cmp	r5, r4
 8008626:	d10b      	bne.n	8008640 <_free_r+0x70>
 8008628:	6824      	ldr	r4, [r4, #0]
 800862a:	4421      	add	r1, r4
 800862c:	1854      	adds	r4, r2, r1
 800862e:	42a3      	cmp	r3, r4
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	d1e0      	bne.n	80085f6 <_free_r+0x26>
 8008634:	681c      	ldr	r4, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	6053      	str	r3, [r2, #4]
 800863a:	4421      	add	r1, r4
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	e7da      	b.n	80085f6 <_free_r+0x26>
 8008640:	d902      	bls.n	8008648 <_free_r+0x78>
 8008642:	230c      	movs	r3, #12
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	e7d6      	b.n	80085f6 <_free_r+0x26>
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	1961      	adds	r1, r4, r5
 800864c:	428b      	cmp	r3, r1
 800864e:	bf04      	itt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	bf04      	itt	eq
 8008658:	1949      	addeq	r1, r1, r5
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	6054      	str	r4, [r2, #4]
 800865e:	e7ca      	b.n	80085f6 <_free_r+0x26>
 8008660:	b003      	add	sp, #12
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	20011000 	.word	0x20011000

08008668 <_read_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d07      	ldr	r5, [pc, #28]	; (8008688 <_read_r+0x20>)
 800866c:	4604      	mov	r4, r0
 800866e:	4608      	mov	r0, r1
 8008670:	4611      	mov	r1, r2
 8008672:	2200      	movs	r2, #0
 8008674:	602a      	str	r2, [r5, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f7fb fff0 	bl	800465c <_read>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_read_r+0x1e>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_read_r+0x1e>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	20011008 	.word	0x20011008

0800868c <lflush>:
 800868c:	8983      	ldrh	r3, [r0, #12]
 800868e:	f003 0309 	and.w	r3, r3, #9
 8008692:	2b09      	cmp	r3, #9
 8008694:	d101      	bne.n	800869a <lflush+0xe>
 8008696:	f7ff beeb 	b.w	8008470 <fflush>
 800869a:	2000      	movs	r0, #0
 800869c:	4770      	bx	lr
	...

080086a0 <__srefill_r>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	4605      	mov	r5, r0
 80086a6:	b118      	cbz	r0, 80086b0 <__srefill_r+0x10>
 80086a8:	6983      	ldr	r3, [r0, #24]
 80086aa:	b90b      	cbnz	r3, 80086b0 <__srefill_r+0x10>
 80086ac:	f7fe febe 	bl	800742c <__sinit>
 80086b0:	4b3b      	ldr	r3, [pc, #236]	; (80087a0 <__srefill_r+0x100>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d10a      	bne.n	80086cc <__srefill_r+0x2c>
 80086b6:	686c      	ldr	r4, [r5, #4]
 80086b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086bc:	2300      	movs	r3, #0
 80086be:	6063      	str	r3, [r4, #4]
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	069e      	lsls	r6, r3, #26
 80086c4:	d50c      	bpl.n	80086e0 <__srefill_r+0x40>
 80086c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ca:	e066      	b.n	800879a <__srefill_r+0xfa>
 80086cc:	4b35      	ldr	r3, [pc, #212]	; (80087a4 <__srefill_r+0x104>)
 80086ce:	429c      	cmp	r4, r3
 80086d0:	d101      	bne.n	80086d6 <__srefill_r+0x36>
 80086d2:	68ac      	ldr	r4, [r5, #8]
 80086d4:	e7f0      	b.n	80086b8 <__srefill_r+0x18>
 80086d6:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <__srefill_r+0x108>)
 80086d8:	429c      	cmp	r4, r3
 80086da:	bf08      	it	eq
 80086dc:	68ec      	ldreq	r4, [r5, #12]
 80086de:	e7eb      	b.n	80086b8 <__srefill_r+0x18>
 80086e0:	0758      	lsls	r0, r3, #29
 80086e2:	d448      	bmi.n	8008776 <__srefill_r+0xd6>
 80086e4:	06d9      	lsls	r1, r3, #27
 80086e6:	d405      	bmi.n	80086f4 <__srefill_r+0x54>
 80086e8:	2309      	movs	r3, #9
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	e7e8      	b.n	80086c6 <__srefill_r+0x26>
 80086f4:	071a      	lsls	r2, r3, #28
 80086f6:	d50b      	bpl.n	8008710 <__srefill_r+0x70>
 80086f8:	4621      	mov	r1, r4
 80086fa:	4628      	mov	r0, r5
 80086fc:	f7ff fe7c 	bl	80083f8 <_fflush_r>
 8008700:	2800      	cmp	r0, #0
 8008702:	d1e0      	bne.n	80086c6 <__srefill_r+0x26>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	60a0      	str	r0, [r4, #8]
 8008708:	f023 0308 	bic.w	r3, r3, #8
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	61a0      	str	r0, [r4, #24]
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f043 0304 	orr.w	r3, r3, #4
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	b91b      	cbnz	r3, 8008724 <__srefill_r+0x84>
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f7ff ff02 	bl	8008528 <__smakebuf_r>
 8008724:	89a6      	ldrh	r6, [r4, #12]
 8008726:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800872a:	07b3      	lsls	r3, r6, #30
 800872c:	d00f      	beq.n	800874e <__srefill_r+0xae>
 800872e:	2301      	movs	r3, #1
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <__srefill_r+0x10c>)
 8008734:	491e      	ldr	r1, [pc, #120]	; (80087b0 <__srefill_r+0x110>)
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	f006 0609 	and.w	r6, r6, #9
 800873c:	f7fe ff06 	bl	800754c <_fwalk>
 8008740:	2e09      	cmp	r6, #9
 8008742:	81a7      	strh	r7, [r4, #12]
 8008744:	d103      	bne.n	800874e <__srefill_r+0xae>
 8008746:	4621      	mov	r1, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f7ff fdcf 	bl	80082ec <__sflush_r>
 800874e:	6922      	ldr	r2, [r4, #16]
 8008750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008752:	6963      	ldr	r3, [r4, #20]
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	6022      	str	r2, [r4, #0]
 8008758:	4628      	mov	r0, r5
 800875a:	47b0      	blx	r6
 800875c:	2800      	cmp	r0, #0
 800875e:	6060      	str	r0, [r4, #4]
 8008760:	dc1c      	bgt.n	800879c <__srefill_r+0xfc>
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	bf17      	itett	ne
 8008768:	2200      	movne	r2, #0
 800876a:	f043 0320 	orreq.w	r3, r3, #32
 800876e:	6062      	strne	r2, [r4, #4]
 8008770:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008774:	e7bc      	b.n	80086f0 <__srefill_r+0x50>
 8008776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008778:	2900      	cmp	r1, #0
 800877a:	d0cd      	beq.n	8008718 <__srefill_r+0x78>
 800877c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__srefill_r+0xea>
 8008784:	4628      	mov	r0, r5
 8008786:	f7ff ff23 	bl	80085d0 <_free_r>
 800878a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	2000      	movs	r0, #0
 8008790:	6360      	str	r0, [r4, #52]	; 0x34
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0c0      	beq.n	8008718 <__srefill_r+0x78>
 8008796:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879c:	2000      	movs	r0, #0
 800879e:	e7fc      	b.n	800879a <__srefill_r+0xfa>
 80087a0:	0800923c 	.word	0x0800923c
 80087a4:	0800925c 	.word	0x0800925c
 80087a8:	0800921c 	.word	0x0800921c
 80087ac:	0800927c 	.word	0x0800927c
 80087b0:	0800868d 	.word	0x0800868d

080087b4 <_raise_r>:
 80087b4:	291f      	cmp	r1, #31
 80087b6:	b538      	push	{r3, r4, r5, lr}
 80087b8:	4604      	mov	r4, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	d904      	bls.n	80087c8 <_raise_r+0x14>
 80087be:	2316      	movs	r3, #22
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087ca:	b112      	cbz	r2, 80087d2 <_raise_r+0x1e>
 80087cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087d0:	b94b      	cbnz	r3, 80087e6 <_raise_r+0x32>
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f830 	bl	8008838 <_getpid_r>
 80087d8:	462a      	mov	r2, r5
 80087da:	4601      	mov	r1, r0
 80087dc:	4620      	mov	r0, r4
 80087de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e2:	f000 b817 	b.w	8008814 <_kill_r>
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d00a      	beq.n	8008800 <_raise_r+0x4c>
 80087ea:	1c59      	adds	r1, r3, #1
 80087ec:	d103      	bne.n	80087f6 <_raise_r+0x42>
 80087ee:	2316      	movs	r3, #22
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	2001      	movs	r0, #1
 80087f4:	e7e7      	b.n	80087c6 <_raise_r+0x12>
 80087f6:	2400      	movs	r4, #0
 80087f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087fc:	4628      	mov	r0, r5
 80087fe:	4798      	blx	r3
 8008800:	2000      	movs	r0, #0
 8008802:	e7e0      	b.n	80087c6 <_raise_r+0x12>

08008804 <raise>:
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <raise+0xc>)
 8008806:	4601      	mov	r1, r0
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f7ff bfd3 	b.w	80087b4 <_raise_r>
 800880e:	bf00      	nop
 8008810:	20000008 	.word	0x20000008

08008814 <_kill_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d07      	ldr	r5, [pc, #28]	; (8008834 <_kill_r+0x20>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	4611      	mov	r1, r2
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	f000 f855 	bl	80088d0 <_kill>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d102      	bne.n	8008830 <_kill_r+0x1c>
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	b103      	cbz	r3, 8008830 <_kill_r+0x1c>
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	bd38      	pop	{r3, r4, r5, pc}
 8008832:	bf00      	nop
 8008834:	20011008 	.word	0x20011008

08008838 <_getpid_r>:
 8008838:	f000 b832 	b.w	80088a0 <_getpid>

0800883c <_fstat_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d07      	ldr	r5, [pc, #28]	; (800885c <_fstat_r+0x20>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f000 f821 	bl	8008890 <_fstat>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d102      	bne.n	8008858 <_fstat_r+0x1c>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	b103      	cbz	r3, 8008858 <_fstat_r+0x1c>
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	20011008 	.word	0x20011008

08008860 <_isatty_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d06      	ldr	r5, [pc, #24]	; (800887c <_isatty_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f000 f828 	bl	80088c0 <_isatty>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_isatty_r+0x1a>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_isatty_r+0x1a>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20011008 	.word	0x20011008

08008880 <_close>:
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <_close+0xc>)
 8008882:	2258      	movs	r2, #88	; 0x58
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800888a:	4770      	bx	lr
 800888c:	20011008 	.word	0x20011008

08008890 <_fstat>:
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <_fstat+0xc>)
 8008892:	2258      	movs	r2, #88	; 0x58
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800889a:	4770      	bx	lr
 800889c:	20011008 	.word	0x20011008

080088a0 <_getpid>:
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <_getpid+0xc>)
 80088a2:	2258      	movs	r2, #88	; 0x58
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088aa:	4770      	bx	lr
 80088ac:	20011008 	.word	0x20011008

080088b0 <_gettimeofday>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	; (80088bc <_gettimeofday+0xc>)
 80088b2:	2258      	movs	r2, #88	; 0x58
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ba:	4770      	bx	lr
 80088bc:	20011008 	.word	0x20011008

080088c0 <_isatty>:
 80088c0:	4b02      	ldr	r3, [pc, #8]	; (80088cc <_isatty+0xc>)
 80088c2:	2258      	movs	r2, #88	; 0x58
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	2000      	movs	r0, #0
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	20011008 	.word	0x20011008

080088d0 <_kill>:
 80088d0:	4b02      	ldr	r3, [pc, #8]	; (80088dc <_kill+0xc>)
 80088d2:	2258      	movs	r2, #88	; 0x58
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088da:	4770      	bx	lr
 80088dc:	20011008 	.word	0x20011008

080088e0 <_lseek>:
 80088e0:	4b02      	ldr	r3, [pc, #8]	; (80088ec <_lseek+0xc>)
 80088e2:	2258      	movs	r2, #88	; 0x58
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ea:	4770      	bx	lr
 80088ec:	20011008 	.word	0x20011008

080088f0 <_sbrk>:
 80088f0:	4a04      	ldr	r2, [pc, #16]	; (8008904 <_sbrk+0x14>)
 80088f2:	4905      	ldr	r1, [pc, #20]	; (8008908 <_sbrk+0x18>)
 80088f4:	6813      	ldr	r3, [r2, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bf08      	it	eq
 80088fa:	460b      	moveq	r3, r1
 80088fc:	4418      	add	r0, r3
 80088fe:	6010      	str	r0, [r2, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	4770      	bx	lr
 8008904:	2001100c 	.word	0x2001100c
 8008908:	20011010 	.word	0x20011010

0800890c <_exit>:
 800890c:	e7fe      	b.n	800890c <_exit>
 800890e:	bf00      	nop
 8008910:	00000020 	.word	0x00000020
	...
 800891c:	00000002 	.word	0x00000002
	...
 8008928:	00000020 	.word	0x00000020
 800892c:	00000064 	.word	0x00000064
 8008930:	00000020 	.word	0x00000020
 8008934:	00000020 	.word	0x00000020
 8008938:	00000020 	.word	0x00000020
 800893c:	00000000 	.word	0x00000000
 8008940:	00000200 	.word	0x00000200
 8008944:	00000000 	.word	0x00000000
 8008948:	74617453 	.word	0x74617453
 800894c:	00203a65 	.word	0x00203a65
 8008950:	454c4449 	.word	0x454c4449
 8008954:	00000000 	.word	0x00000000
 8008958:	4f434552 	.word	0x4f434552
 800895c:	00004452 	.word	0x00004452
 8008960:	59414c50 	.word	0x59414c50
 8008964:	00000000 	.word	0x00000000
 8008968:	504f5453 	.word	0x504f5453
 800896c:	00000000 	.word	0x00000000
 8008970:	45564153 	.word	0x45564153
 8008974:	00000000 	.word	0x00000000
 8008978:	53415245 	.word	0x53415245
 800897c:	00000045 	.word	0x00000045
 8008980:	49474542 	.word	0x49474542
 8008984:	52575f4e 	.word	0x52575f4e
 8008988:	00455449 	.word	0x00455449
 800898c:	54495257 	.word	0x54495257
 8008990:	00000045 	.word	0x00000045
 8008994:	4d4d4f43 	.word	0x4d4d4f43
 8008998:	00005449 	.word	0x00005449
 800899c:	4e415453 	.word	0x4e415453
 80089a0:	00594244 	.word	0x00594244
 80089a4:	656c6449 	.word	0x656c6449
 80089a8:	6d697420 	.word	0x6d697420
 80089ac:	74756f65 	.word	0x74756f65
 80089b0:	70786520 	.word	0x70786520
 80089b4:	64657269 	.word	0x64657269
 80089b8:	00000000 	.word	0x00000000
 80089bc:	74736574 	.word	0x74736574
 80089c0:	00000000 	.word	0x00000000
 80089c4:	6b6361ff 	.word	0x6b6361ff
 80089c8:	00000000 	.word	0x00000000
 80089cc:	0a7325ff 	.word	0x0a7325ff
 80089d0:	00000000 	.word	0x00000000
 80089d4:	73617245 	.word	0x73617245
 80089d8:	20676e69 	.word	0x20676e69
 80089dc:	65766173 	.word	0x65766173
 80089e0:	74616420 	.word	0x74616420
 80089e4:	2e2e2e61 	.word	0x2e2e2e61
 80089e8:	00000020 	.word	0x00000020
 80089ec:	656e6f64 	.word	0x656e6f64
 80089f0:	00000000 	.word	0x00000000

080089f4 <recorder::SynthEngine::kDiatonicMinorRatios>:
 80089f4:	3f800000 3f8facc5 3f983809 3faadc0a     ...?...?.8.?...?
 8008a04:	3fbfc89f 3fcb2fec 3fe41206 40000000     ...?./.?...?...@

08008a14 <recorder::SynthEngine::kDiatonicMajorRatios>:
 8008a14:	3f800000 3f8facc5 3fa1450f 3faadc0a     ...?...?.E.?...?
 8008a24:	3fbfc89f 3fd744e5 3ff1a1cb 40000000     ...?.D.?...?...@

08008a34 <recorder::FormantFilter::vowelData>:
 8008a34:	43870000 450f2000 453c2000 40900000     ...C. .E. <E...@
 8008a44:	41cb851f 41a08f5c 44048000 44e74000     ...A\..A...D.@.D
 8008a54:	451c4000 410d47ae 41a47ae1 41855c29     .@.E.G.A.z.A)\.A
 8008a64:	44368000 44884000 45188000 4142b852     ..6D.@.D...ER.BA
 8008a74:	4141c28f 418228f6 440e8000 44520000     ..AA.(.A...D..RD
 8008a84:	4516a000 41180000 411547ae 41808f5c     ...E...A.G.A\..A
 8008a94:	43960000 44598000 450c0000 40a00000     ...C..YD...E...@
 8008aa4:	411ab852 416ee148 43e10000 44820000     R..AH.nA...C...D
 8008ab4:	450c0000 40f00000 4138f5c3 416ee148     ...E...@..8AH.nA
	...
 8008ad0:	3f800000 3f800000 3f800000 00000000     ...?...?...?....
	...
 8008ae8:	3f800000 3f800000 3f800000 00000000     ...?...?...?....
	...
 8008b00:	3f800000 3f800000 3f800000 00000000     ...?...?...?....
	...
 8008b18:	3f800000 3f800000 3f800000              ...?...?...?

08008b24 <recorder::Adc::PotFilter::kPotCorrection>:
 8008b24:	00000000 3c805439 3d00a626 3d41709b     ....9T.<&..=.pA=
 8008b34:	3d8142f1 3da1f120 3dc2c0f0 3de3b06c     .B.= ..=...=l..=
 8008b44:	3e025ec9 3e12f32c 3e239452 3e34412e     .^.>,..>R.#>.A4>
 8008b54:	3e44f8aa 3e55b9af 3e668323 3e7753e8     ..D>..U>#.f>.Sw>
 8008b64:	3e84156f 3e8c8371 3e94f36b 3e9d64c9     o..>q..>k..>.d.>
 8008b74:	3ea5d6fa 3eae496d 3eb6bb8f 3ebf2cd1     ...>mI.>...>.,.>
 8008b84:	3ec79ca3 3ed00a76 3ed875bd 3ee0dded     ...>v..>.u.>...>
 8008b94:	3ee9427b 3ef1a2e0 3ef9fe97 3f012a8f     {B.>...>...>.*.?
 8008ba4:	3f0552f9 3f09784b 3f0d9a49 3f11b8b5     .R.?Kx.?I..?...?
 8008bb4:	3f15d358 3f19e9f6 3f1dfc5b 3f220a51     X..?...?[..?Q."?
 8008bc4:	3f2613a4 3f2a1825 3f2e17a2 3f3211ef     ..&?%.*?...?..2?
 8008bd4:	3f3606e0 3f39f64c 3f3de00a 3f41c3f6     ..6?L.9?..=?..A?
 8008be4:	3f45a1ea 3f4979c6 3f4d4b69 3f5116b5     ..E?.yI?iKM?..Q?
 8008bf4:	3f54db8e 3f5899da 3f5c5180 3f600268     ..T?..X?.Q\?h.`?
 8008c04:	3f63ac7f 3f674fb1 3f6aebed 3f6e8121     ..c?.Og?..j?!.n?
 8008c14:	3f720f41 3f75963e 3f79160e 3f7c8ea7     A.r?>.u?..y?..|?
 8008c24:	3f800000                                ...?

08008c28 <recorder::kADCRegRank>:
 8008c28:	00000006 0000000c 00000012 00000018     ................
 8008c38:	00000100 00000106 0000010c 00000112     ................
 8008c48:	00000118 00000200 00000206 0000020c     ................
 8008c58:	00000212 00000218 00000300 00000306     ................

08008c68 <recorder::kPotChannels>:
 8008c68:	0c900008 2a000400 1d500080 10c00010     .......*..P.....
 8008c78:	32601000 36902000 4b840000 47520000     ..`2. .6...K..RG
 8008c88:	6e717269 203d3e20 4d6e6f4e 616b7361     irqn >= NonMaska
 8008c98:	49656c62 495f746e 006e5152 64696f76     bleInt_IRQn.void
 8008ca8:	63657220 6564726f 693a3a72 3a3a7172      recorder::irq::
 8008cb8:	69676552 72657473 646e6148 2872656c     RegisterHandler(
 8008cc8:	6e515249 7079545f 72202c65 726f6365     IRQn_Type, recor
 8008cd8:	3a726564 7172693a 65563a3a 726f7463     der::irq::Vector
 8008ce8:	00000029 76697264 2f737265 2e717269     )...drivers/irq.
 8008cf8:	00707063 65637865 6f697470 756e5f6e     cpp.exception_nu
 8008d08:	203c206d 6d754e6b 74636556 0073726f     m < kNumVectors.
 8008d18:	6e717269 203d3e20 00000030 64696f76     irqn >= 0...void
 8008d28:	63657220 6564726f 693a3a72 3a3a7172      recorder::irq::
 8008d38:	62616e45 4928656c 5f6e5152 65707954     Enable(IRQn_Type
 8008d48:	00000029 65736552 6f732074 65637275     )...Reset source
 8008d58:	73617720 00000020 00524f50 5453524e      was ...POR.NRST
 8008d68:	00000000 00524f42 00544653 00555043     ....BOR.SFT.CPU.
 8008d78:	47445757 00000031 47445749 00000031     WWDG1...IWDG1...
 8008d88:	454b4157 00000000 5257504c 00000000     WAKE....LPWR....
 8008d98:	6e6b6e75 3a6e776f 25783020 586c3830     unknown: 0x%08lX
 8008da8:	0000000a 656b6157 65207075 746e6576     ....Wakeup event
 8008db8:	73617720 63657220 2064726f 74747562      was record butt
 8008dc8:	00006e6f 656b6157 65207075 746e6576     on..Wakeup event
 8008dd8:	73617720 616c7020 75622079 6e6f7474      was play button
 8008de8:	00000000                                ....

08008dec <D1CorePrescTable>:
 8008dec:	00000000 04030201 04030201 09080706     ................

08008dfc <LL_DMA_STR_OFFSET_TAB>:
 8008dfc:	58402810 b8a08870                       .(@Xp...

08008e04 <LL_RCC_PrescTable>:
 8008e04:	00000000 04030201 04030201 09080706     ................

08008e14 <USART_PRESCALER_TAB>:
 8008e14:	00020001 00060004 000a0008 0010000c     ................
 8008e24:	00400020 01000080 00000000               .@.........

08008e30 <__exp2f_data>:
 8008e30:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 8008e40:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 8008e50:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 8008e60:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 8008e70:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 8008e80:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 8008e90:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 8008ea0:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 8008eb0:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 8008ec0:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 8008ed0:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 8008ee0:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 8008ef0:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 8008f00:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 8008f10:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 8008f20:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 8008f30:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 8008f40:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 8008f50:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 8008f60:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 8008f70:	ff0c52d6 3f962e42                       .R..B..?

08008f78 <__inv_pio4>:
 8008f78:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 8008f88:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 8008f98:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 8008fa8:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 8008fb8:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 8008fc8:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

08008fd8 <__sincosf_table>:
 8008fd8:	00000000 3ff00000 00000000 bff00000     .......?........
 8008fe8:	00000000 bff00000 00000000 3ff00000     ...............?
 8008ff8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 8009008:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 8009018:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 8009028:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 8009038:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 8009048:	00000000 3ff00000 00000000 bff00000     .......?........
 8009058:	00000000 bff00000 00000000 3ff00000     ...............?
 8009068:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 8009078:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 8009088:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 8009098:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 80090a8:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

080090b8 <Zero>:
 80090b8:	00000000 80000000                       ........

080090c0 <__logf_data>:
 80090c0:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 80090d0:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 80090e0:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 80090f0:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 8009100:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 8009110:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 8009120:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 8009130:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 8009140:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 8009150:	00000000 3ff00000 00000000 00000000     .......?........
 8009160:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 8009170:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 8009180:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 8009190:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 80091a0:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 80091b0:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 80091c0:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 80091d0:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......
 80091e0:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
 80091f0:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
 8009200:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
 8009210:	20656e69 73256425 000a7325              ine %d%s%s..

0800921c <__sf_fake_stderr>:
	...

0800923c <__sf_fake_stdin>:
	...

0800925c <__sf_fake_stdout>:
	...

0800927c <_global_impure_ptr>:
 800927c:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
 800928c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
 800929c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
 80092ac:	64636261 52006665 544e4545 6c616d20     abcdef.REENT mal
 80092bc:	20636f6c 63637573 65646565 742f0064     loc succeeded./t
 80092cc:	6a2f706d 696b6e65 472d736e 312d4343     mp/jenkins-GCC-1
 80092dc:	69702d30 696c6570 332d656e 325f3833     0-pipeline-338_2
 80092ec:	31313230 5f383130 34333631 31363135     0211018_16345161
 80092fc:	732f3539 6e2f6372 696c7765 656e2f62     95/src/newlib/ne
 800930c:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
 800931c:	6e61722f 00632e64                       /rand.c.

08009324 <_init>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr

08009330 <_fini>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr
