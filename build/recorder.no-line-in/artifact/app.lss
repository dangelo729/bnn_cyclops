
build/recorder.no-line-in/artifact/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008dec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800908c  0800908c  0002006c  2**0
                  CONTENTS
  3 .exidx        00000000  0800908c  0800908c  0002006c  2**0
                  CONTENTS
  4 .ARM.attributes 00000030  0800908c  0800908c  0002006c  2**0
                  CONTENTS, READONLY
  5 .init_array   0000000c  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000006c  20000000  0800909c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010c10  20000400  08009108  00020400  2**10
                  ALLOC
  9 .dma          00000048  38000000  38000000  00030000  2**2
                  ALLOC
 10 .heap         00000000  20011010  20011010  0002009c  2**0
                  CONTENTS
 11 .reserved_for_stack 00000000  20011010  20011010  0002009c  2**0
                  CONTENTS
 12 .debug_info   00044cd2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c86  00000000  00000000  00064d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00013b02  00000000  00000000  0006b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0007f4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000074f8  00000000  00000000  0007ff76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0005298e  00000000  00000000  0008746e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023ffd  00000000  00000000  000d9dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001fdc6b  00000000  00000000  000fddf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  002fba64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e1c  00000000  00000000  002fbab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  002fe8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000193  00000000  00000000  002fe980  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
0800908c l    d  .ARM.extab	00000000 .ARM.extab
0800908c l    d  .exidx	00000000 .exidx
0800908c l    d  .ARM.attributes	00000000 .ARM.attributes
0800908c l    d  .init_array	00000000 .init_array
08009098 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
38000000 l    d  .dma	00000000 .dma
20011010 l    d  .heap	00000000 .heap
20011010 l    d  .reserved_for_stack	00000000 .reserved_for_stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32h750xx.c
00000000 l    df *ABS*	00000000 crtstuff.c
080002a0 l     F .text	00000000 __do_global_dtors_aux
20000400 l       .bss	00000001 completed.1
08009098 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080002c4 l     F .text	00000000 frame_dummy
20000404 l       .bss	00000018 object.0
0800908c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 main.cpp
080026ec l     F .text	000000b4 _GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE
20010a48 l     O .bss	00000004 recorder::StateMachine(bool)::synthReleaseCounter
00000000 l    df *ABS*	00000000 adc.cpp
08008978 l     O .text	00000040 recorder::kADCRegRank
080089b8 l     O .text	00000020 recorder::kPotChannels
00000000 l    df *ABS*	00000000 analog.cpp
00000000 l    df *ABS*	00000000 dac.cpp
00000000 l    df *ABS*	00000000 irq.cpp
20010c00 l     O .bss	00000298 recorder::irq::RAMVectorTable
00000000 l    df *ABS*	00000000 serial.cpp
00000000 l    df *ABS*	00000000 system.cpp
08003ca4 l     F .text	00000024 NVIC_SystemReset
08003ce4 l     F .text	000000e0 recorder::system::ConfigureClocks()
0800449c l     F .text	00000014 _GLOBAL__sub_I_TickHandler
20010e9c l     O .bss	00000004 recorder::system::wakeup_flags_
20010ea0 l     O .bss	00000004 recorder::system::ticks_
20010ea4 l     O .bss	00000150 recorder::system::serial_
20010ff4 l     O .bss	00000001 _read::prev_was_cr
20010ff5 l     O .bss	00000001 _write::prev
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
20010ff8 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
08004ebc l     F .text	000000f4 RCCEx_PLL2_Config
08004fb0 l     F .text	000000f4 RCCEx_PLL3_Config
00000000 l    df *ABS*	00000000 stm32h7xx_ll_adc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dac.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dma.c
08008b4c l     O .text	00000008 LL_DMA_STR_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_usart.c
08008b64 l     O .text	00000018 USART_PRESCALER_TAB
00000000 l    df *ABS*	00000000 cosf.c
00000000 l    df *ABS*	00000000 math_errf.c
0800686c l     F .text	00000018 with_errnof
08006884 l     F .text	0000001e xflowf
00000000 l    df *ABS*	00000000 sf_exp.c
00000000 l    df *ABS*	00000000 sinf.c
00000000 l    df *ABS*	00000000 wf_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 ef_fmod.c
08008e08 l     O .text	00000008 Zero
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 sf_log.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 clearerr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 feof.c
00000000 l    df *ABS*	00000000 ferror.c
00000000 l    df *ABS*	00000000 findfp.c
080070ec l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08007438 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08007560 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 refill.c
080083fc l     F .text	00000012 lflush
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 gettod.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
2001100c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 sf_exp2_data.c
00000000 l    df *ABS*	00000000 sincosf_data.c
00000000 l    df *ABS*	00000000 sf_log_data.c
00000000 l    df *ABS*	00000000 impure.c
2000000c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 reent.c
080044b0  w    F .text	00000002 RTC_Alarm_IRQHandler
080044b0  w    F .text	00000002 HASH_RNG_IRQHandler
080044b0  w    F .text	00000002 EXTI2_IRQHandler
08008b54 g     O .text	00000010 LL_RCC_PrescTable
08004338 g     F .text	00000006 recorder::system::Reset()
080044b0  w    F .text	00000002 TIM8_CC_IRQHandler
080085d0 g     F .text	00000020 _isatty_r
08003c00 g     F .text	00000098 recorder::Serial::InterruptService()
2000041c g     O .bss	00000004 recorder::play_button_
08008610 g     F .text	00000010 _getpid
08007b6c g     F .text	000000dc _puts_r
080044b0  w    F .text	00000002 HRTIM1_Master_IRQHandler
08006bfc g     F .text	00000048 fmodf
08008228 g     F .text	00000024 _lseek_r
080044b0  w    F .text	00000002 DebugMon_Handler
080044b0  w    F .text	00000002 UART8_IRQHandler
080044b0  w    F .text	00000002 SPI4_IRQHandler
08008204 g     F .text	00000024 _gettimeofday_r
08008e10 g     O .text	00000120 .hidden __logf_data
08003804 g     F .text	000000b8 recorder::Dac::Init()
080006ac g     F .text	0000005a .hidden __floatdidf
08008584 g     F .text	00000024 _kill_r
08007b3c g     F .text	00000030 printf
080044b0  w    F .text	00000002 TIM1_CC_IRQHandler
080044b0  w    F .text	00000002 BDMA_Channel6_IRQHandler
08007e02 g     F .text	00000024 __sseek
0800719c g     F .text	00000070 __sinit
080044b0  w    F .text	00000002 DMA2_Stream5_IRQHandler
08007e88 g     F .text	000000a4 __swbuf_r
08003dc8 g     F .text	00000010 recorder::system::ReloadWatchdog()
080044b0  w    F .text	00000002 HardFault_Handler
080044b0  w    F .text	00000002 HRTIM1_FLT_IRQHandler
080044b0  w    F .text	00000002 JPEG_IRQHandler
20010a54  w    O .bss	00000004 recorder::Analog::instance_
08007140 g     F .text	0000002c __sfmoreglue
080044b0  w    F .text	00000002 DMA1_Stream5_IRQHandler
08008334 g     F .text	0000000c __malloc_unlock
080044b0  w    F .text	00000002 SysTick_Handler
080044b0  w    F .text	00000002 BDMA_Channel1_IRQHandler
080044b0  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
08000b5c  w    F .text	00000654 recorder::SynthEngine::RenderOneSample()
080044b0  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800909c g       *ABS*	00000000 _sidata
080044b0  w    F .text	00000002 PendSV_Handler
080044b0  w    F .text	00000002 NMI_Handler
200106f8 g     O .bss	00000164 recorder::analog_
080044b0  w    F .text	00000002 EXTI3_IRQHandler
08004b48 g     F .text	00000140 HAL_RCC_GetSysClockFreq
080044b0  w    F .text	00000002 LPTIM4_IRQHandler
08007008 g     F .text	0000000c __errno
080068b0 g     F .text	0000000c .hidden __math_may_uflowf
2001085c g     O .bss	0000012c recorder::monitor_
080044b0  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
080044b0  w    F .text	00000002 LPTIM2_IRQHandler
080044b0  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
080041d0 g     F .text	0000002c recorder::system::Delay_ms(unsigned long)
08006e84 g     F .text	000000c8 logf
080085ac g     F .text	00000024 _fstat_r
08003dd8 g     F .text	000003f8 recorder::system::Init()
20011008 g     O .bss	00000004 errno
0800908c g       .text	00000000 _etext
080044b0  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20000400 g       .bss	00000000 _sbss
08003138 g     F .text	000000b4 recorder::Adc::Stop()
08004588 g     F .text	0000000c HAL_GetREVID
080044b0  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
080044b0  w    F .text	00000002 I2C3_ER_IRQHandler
080044b0  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08004340 g     F .text	0000008c fgets
080062a4 g     F .text	000001e8 LL_RCC_GetUSARTClockFreq
08002b38 g     F .text	000000d8 recorder::Adc::InitAudioSequence()
080044b0  w    F .text	00000002 MDMA_IRQHandler
08008b80 g     O .text	00000148 .hidden __exp2f_data
080044b0  w    F .text	00000002 LPTIM3_IRQHandler
08007334 g     F .text	00000088 getc
200106cc g     O .bss	00000028 recorder::io_
0800740a g     F .text	0000001c memcpy
08007134 g     F .text	0000000c _cleanup_r
080044b0  w    F .text	00000002 HSEM1_IRQHandler
08000634 g     F .text	00000022 .hidden __floatsidf
08001c14 g     F .text	000003cc recorder::StateMachine(bool)
080044b0  w    F .text	00000002 EXTI0_IRQHandler
080044b0  w    F .text	00000002 I2C2_EV_IRQHandler
08007c48 g     F .text	00000010 puts
080044b0  w    F .text	00000002 DMA1_Stream2_IRQHandler
080044b0  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
08007014 g     F .text	0000006c feof
080044b0  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
080044b0  w    F .text	00000002 FDCAN1_IT1_IRQHandler
08008318 g     F .text	00000010 malloc
08008524 g     F .text	00000050 _raise_r
08008600 g     F .text	00000010 _fstat
08006f58 g     F .text	0000003c __assert_func
080044b0  w    F .text	00000002 UsageFault_Handler
08002d20 g     F .text	000003ac recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
08003758 g     F .text	000000ac recorder::Dac::InitDMA()
080044b0  w    F .text	00000002 LTDC_ER_IRQHandler
080044b0  w    F .text	00000002 DMA2_Stream2_IRQHandler
080085a8 g     F .text	00000004 _getpid_r
20000400 g       .bss	00000000 __bss_start__
080044b0  w    F .text	00000002 HRTIM1_TIME_IRQHandler
200106f4 g     O .bss	00000001 recorder::state_
08000614 g     F .text	0000001e .hidden __aeabi_ui2d
08005bb8 g     F .text	00000072 LL_DAC_Init
20000000 g       .data	00000000 _sdata
080044b0  w    F .text	00000002 SPI1_IRQHandler
080038bc g     F .text	00000058 recorder::irq::Init()
08000390 g     F .text	00000000 .hidden __aeabi_drsub
08007d88 g     F .text	00000020 _sbrk_r
080068ec g     F .text	0000001e .hidden __math_invalidf
080044b0  w    F .text	00000002 TIM6_DAC_IRQHandler
080083d8 g     F .text	00000024 _read_r
080044b0  w    F .text	00000002 DCMI_IRQHandler
08003b48 g     F .text	00000022 recorder::Serial::GetByteBlocking()
080081e0 g     F .text	00000024 fflush
080044b0  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
20000004 g     O .data	00000004 SystemD2Clock
08000658 g     F .text	00000042 .hidden __extendsfdf2
08004208 g     F .text	00000120 recorder::system::Standby()
20010a50  w    O .bss	00000004 recorder::Analog::callback_
0800039c g     F .text	00000276 .hidden __adddf3
08003b6c g     F .text	00000058 recorder::Serial::Write(unsigned char, bool)
080044b0  w    F .text	00000002 DMA2_Stream3_IRQHandler
08006594 g     F .text	00000118 LL_USART_Init
08008630 g     F .text	00000010 _isatty
20010ffe g     O .bss	00000001 __lock___sinit_recursive_mutex
08008fcc g     O .text	00000004 _global_impure_ptr
08008b3c g     O .text	00000010 D1CorePrescTable
080073bc g     F .text	00000048 __libc_init_array
080044b0  w    F .text	00000002 SAI2_IRQHandler
0800802c g     F .text	0000000e abort
08000614 g     F .text	0000001e .hidden __floatunsidf
08002c10 g     F .text	00000110 recorder::Adc::InitPotSequence()
08008660 g     F .text	0000001c _sbrk
080044b0  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
080044b0  w    F .text	00000002 USART6_IRQHandler
08009074 g     F .text	00000000 _init
08008d28 g     O .text	000000e0 .hidden __sincosf_table
080066b0 g     F .text	000001bc cosf
08006dc4 g     F .text	000000c0 __ieee754_log10f
080044b0  w    F .text	00000002 TIM17_IRQHandler
080044b0  w    F .text	00000002 USART3_IRQHandler
080044b0  w    F .text	00000002 CRYP_IRQHandler
080044b0  w    F .text	00000002 BDMA_Channel7_IRQHandler
20011010 g       .bss	00000000 _ebss
080044b4 g     F .text	00000044 Reset_Handler
080044b0  w    F .text	00000002 LPTIM5_IRQHandler
080044b0  w    F .text	00000002 UART5_IRQHandler
20010ffc g     O .bss	00000001 __lock___malloc_recursive_mutex
080044b0  w    F .text	00000002 ADC3_IRQHandler
080044b0  w    F .text	00000002 DMA2_Stream0_IRQHandler
080027a0 g     F .text	0000038c recorder::Adc::DMAService()
0800648c g     F .text	00000108 LL_TIM_Init
080031ec  w    F .text	00000328 recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
08007298 g     F .text	00000024 fprintf
080044b0  w    F .text	00000002 TIM4_IRQHandler
0800039c g     F .text	00000276 .hidden __aeabi_dadd
0800398c g     F .text	00000060 recorder::irq::SetPriority(IRQn_Type, unsigned long)
080044b0  w    F .text	00000002 BDMA_Channel2_IRQHandler
08004594 g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
0800069c g     F .text	0000006a .hidden __aeabi_ul2d
08008784 g     O .text	000000f0 recorder::FormantFilter::vowelData
08008f6c g     O .text	00000020 __sf_fake_stderr
080044b0  w    F .text	00000002 QUADSPI_IRQHandler
080045a4 g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
20011010 g       .bss	00000000 end
080044b0  w    F .text	00000002 I2C1_EV_IRQHandler
080039ec g     F .text	00000150 recorder::Serial::Init(unsigned long)
08007408 g     F .text	00000002 __retarget_lock_release_recursive
080044b0  w    F .text	00000002 DMA1_Stream6_IRQHandler
08005ddc g     F .text	00000016 LL_GPIO_StructInit
08006c44 g     F .text	00000060 log10f
20010e98  w    O .bss	00000004 recorder::Serial::instance_
080068a4 g     F .text	0000000c .hidden __math_uflowf
08005df4 g     F .text	00000188 LL_RCC_GetPLL1ClockFreq
080044b0  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
080044b0  w    F .text	00000002 DMA1_Stream1_IRQHandler
080044b0  w    F .text	00000002 TIM16_IRQHandler
0800758e g     F .text	00000024 __sfputs_r
080044b0  w    F .text	00000002 UART4_IRQHandler
0800716c g     F .text	0000000c __sfp_lock_acquire
080002f0 g     F .text	00000000 memchr
20011010 g       .bss	00000000 __bss_end__
080044b0  w    F .text	00000002 BDMA_Channel5_IRQHandler
08008340 g     F .text	00000098 _free_r
080044b0  w    F .text	00000002 TIM3_IRQHandler
080044b0  w    F .text	00000002 RCC_IRQHandler
080044b0  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
080044b0  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
08007d30 g     F .text	00000058 __srget_r
08000398 g     F .text	0000027a .hidden __aeabi_dsub
080044b0 g     F .text	00000002 Default_Handler
080044b0  w    F .text	00000002 ECC_IRQHandler
08007080 g     F .text	0000006c ferror
0800069c g     F .text	0000006a .hidden __floatundidf
08007cb4 g     F .text	0000007c rand
08008650 g     F .text	00000010 _lseek
080044b0  w    F .text	00000002 CEC_IRQHandler
080044b0  w    F .text	00000002 EXTI15_10_IRQHandler
08003b3c g     F .text	0000000c recorder::Serial::BytesAvailable()
080044b0  w    F .text	00000002 BDMA_Channel0_IRQHandler
080044b0  w    F .text	00000002 ADC_IRQHandler
08003958 g     F .text	00000034 recorder::irq::Enable(IRQn_Type)
08004c88 g     F .text	00000234 HAL_RCC_ClockConfig
08007e2e g     F .text	00000026 strncpy
080044b0  w    F .text	00000002 DMA1_Stream7_IRQHandler
080044b0  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
08003658 g     F .text	00000014 recorder::Analog::StartTimer()
08005f7c g     F .text	00000188 LL_RCC_GetPLL2ClockFreq
080044b0  w    F .text	00000002 SPI5_IRQHandler
08003914 g     F .text	00000044 recorder::irq::RegisterHandler(IRQn_Type, void (*)())
080044b0  w    F .text	00000002 TIM7_IRQHandler
080044b0  w    F .text	00000002 SDMMC1_IRQHandler
0800803c g     F .text	00000020 _close_r
08000634 g     F .text	00000022 .hidden __aeabi_i2d
38000030  w    O .dma	00000018 recorder::Dac::dma_buffer_
080044b0  w    F .text	00000002 TIM5_IRQHandler
080044b0  w    F .text	00000002 DMA2_Stream7_IRQHandler
080044b0  w    F .text	00000002 TIM15_IRQHandler
080044b0  w    F .text	00000002 PVD_AVD_IRQHandler
080044b0  w    F .text	00000002 I2C3_EV_IRQHandler
08007f50 g     F .text	000000dc __swsetup_r
080044b0  w    F .text	00000002 EXTI9_5_IRQHandler
0800720c g     F .text	0000008c __sfp
080044b0  w    F .text	00000002 RTC_WKUP_IRQHandler
08000708  w    F .text	00000454 recorder::SynthEngine::Init()
08007190 g     F .text	0000000c __sinit_lock_release
080044b0  w    F .text	00000002 LTDC_IRQHandler
20000424 g     O .bss	00000004 recorder::idle_timeout_
08007da8 g     F .text	00000022 __sread
080044b0  w    F .text	00000002 SAI3_IRQHandler
080044b0  w    F .text	00000002 ETH_WKUP_IRQHandler
0800457c  w    F .text	0000000c HAL_GetTick
080044b0  w    F .text	00000002 SPDIF_RX_IRQHandler
08008328 g     F .text	0000000c __malloc_lock
08006ca4 g     F .text	00000120 __ieee754_fmodf
08006104 g     F .text	000001a0 LL_RCC_GetPLL3ClockFreq
08008168 g     F .text	00000078 _fflush_r
080044b0  w    F .text	00000002 SPI2_IRQHandler
08008f8c g     O .text	00000020 __sf_fake_stdin
08007406 g     F .text	00000002 __retarget_lock_acquire_recursive
080044b0  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08007426 g     F .text	00000010 memset
080044b0  w    F .text	00000002 MemManage_Handler
08001fe0 g     F .text	0000070c main
20000420 g     O .bss	00000004 recorder::tune_button_
080044b0  w    F .text	00000002 DMA1_Stream0_IRQHandler
08007404 g     F .text	00000002 __retarget_lock_init_recursive
08007c58 g     F .text	0000005c srand
08006f94 g     F .text	00000074 clearerr
080044b0  w    F .text	00000002 SVC_Handler
08007e26 g     F .text	00000008 __sclose
080044b0  w    F .text	00000002 CRS_IRQHandler
08009098 g       .init_array	00000000 __init_array_end
08007478 g     F .text	000000e8 _malloc_r
08007e54 g     F .text	00000034 time
080006ac g     F .text	0000005a .hidden __aeabi_l2d
080072bc g     F .text	0000003a _fwalk
080044b0  w    F .text	00000002 EXTI4_IRQHandler
08003bc4 g     F .text	0000003c recorder::Serial::FlushTx(bool)
080044f8 g     F .text	00000084 SystemInit
080044b0  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
08009080 g     F .text	00000000 _fini
08007b3c g     F .text	00000030 iprintf
080036f8 g     F .text	00000060 recorder::Dac::Stop()
08003680 g     F .text	00000078 recorder::Dac::Start()
080044b0  w    F .text	00000002 FDCAN2_IT1_IRQHandler
08007f2c g     F .text	00000024 _write_r
080045c4 g     F .text	0000001c HAL_PWR_EnterSLEEPMode
08003dc4 g     F .text	00000004 HAL_InitTick
080044b0  w    F .text	00000002 ETH_IRQHandler
08006f4c g     F .text	0000000c nanf
08007814 g     F .text	000000da _printf_common
20000008 g     O .data	00000004 _impure_ptr
080044b0  w    F .text	00000002 TIM1_UP_IRQHandler
08002b2c g     F .text	0000000c recorder::Adc::DMAHandler()
0800805c g     F .text	0000010c __sflush_r
080044b0  w    F .text	00000002 BDMA_Channel4_IRQHandler
080044b0  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
20010a4c  w    O .bss	00000004 recorder::Adc::instance_
0800908c g       .ARM.attributes	00000000 __preinit_array_end
08008410 g     F .text	00000114 __srefill_r
08008764  w    O .text	00000020 recorder::SynthEngine::kDiatonicRatios
080044b0  w    F .text	00000002 WWDG_IRQHandler
080044b0  w    F .text	00000002 SPI6_IRQHandler
20010988 g     O .bss	000000c0 recorder::switches_
080044b0  w    F .text	00000002 I2C4_EV_IRQHandler
080044b0  w    F .text	00000002 MDIOS_IRQHandler
080044b0  w    F .text	00000002 FDCAN2_IT0_IRQHandler
08005b20 g     F .text	00000038 LL_ADC_Init
080044b0  w    F .text	00000002 LPUART1_IRQHandler
080044b0  w    F .text	00000002 FDCAN1_IT0_IRQHandler
080044b0  w    F .text	00000002 TIM2_IRQHandler
080069f0 g     F .text	0000020c sinf
080030cc g     F .text	0000006c recorder::Adc::Start()
080044b0  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080044b0  w    F .text	00000002 OTG_HS_IRQHandler
080044b0  w    F .text	00000002 DMA2D_IRQHandler
080044b0  w    F .text	00000002 TIM1_BRK_IRQHandler
0800824c g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
080044b0  w    F .text	00000002 EXTI1_IRQHandler
080044b0  w    F .text	00000002 SDMMC2_IRQHandler
08005cd0 g     F .text	0000010a LL_GPIO_Init
08004434 g     F .text	00000068 _write
2000006c g       .data	00000000 _edata
080044b0  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
080011b0 g     F .text	00000a62 recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
20000428 g     O .bss	000102a4 recorder::synth_engine_
080044b0  w    F .text	00000002 BDMA_Channel3_IRQHandler
08003514 g     F .text	00000144 recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
08008874  w    O .text	00000104 recorder::Adc::PotFilter::kPotCorrection
080068c8 g     F .text	00000024 .hidden __math_divzerof
080044b0  w    F .text	00000002 UART7_IRQHandler
08005c2c g     F .text	000000a4 LL_DMA_Init
080044b0  w    F .text	00000002 MDIOS_WKUP_IRQHandler
080044b0  w    F .text	00000002 USART2_IRQHandler
08007dca g     F .text	00000038 __swrite
0800462c  w    F .text	0000051c HAL_RCC_OscConfig
080044b0  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
080044b0  w    F .text	00000002 SAI4_IRQHandler
08007298 g     F .text	00000024 fiprintf
080075b4 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000298 g_pfnVectors
080072f6 g     F .text	0000003e _fwalk_reent
080050a4 g     F .text	00000a7c HAL_RCCEx_PeriphCLKConfig
08008640 g     F .text	00000010 _kill
08003c98 g     F .text	0000000c recorder::Serial::InterruptHandler()
080044b0  w    F .text	00000002 I2C2_ER_IRQHandler
08007178 g     F .text	0000000c __sfp_lock_release
08008fac g     O .text	00000020 __sf_fake_stdout
08008620 g     F .text	00000010 _gettimeofday
080044b0  w    F .text	00000002 DMA2_Stream1_IRQHandler
08003cc8 g     F .text	0000001c TickHandler
38000000  w    O .dma	00000030 recorder::Adc::dma_buffer_
080043cc g     F .text	00000068 _read
0800908c g       .init_array	00000000 __init_array_start
080044b0  w    F .text	00000002 FLASH_IRQHandler
0800867c g     F .text	00000002 _exit
0800690c g     F .text	000000e4 expf
080041fc g     F .text	0000000c recorder::system::SerialFlushTx(bool)
080044b0  w    F .text	00000002 DMA2_Stream4_IRQHandler
080044b0  w    F .text	00000002 BusFault_Handler
080044b0  w    F .text	00000002 USART1_IRQHandler
08008298 g     F .text	00000080 __smakebuf_r
080002a0 g       .text	00000000 _stext
080068bc g     F .text	0000000c .hidden __math_oflowf
080002e0 g     F .text	00000010 strlen
080044b0  w    F .text	00000002 OTG_FS_IRQHandler
080078f0 g     F .text	0000024c _printf_i
080044b0  w    F .text	00000002 SPI3_IRQHandler
080044b0  w    F .text	00000002 WAKEUP_PIN_IRQHandler
080044b0  w    F .text	00000002 DMA1_Stream4_IRQHandler
20011004 g     O .bss	00000004 __malloc_sbrk_start
080044b0  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
080044b0  w    F .text	00000002 I2C1_ER_IRQHandler
080045b4 g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
080044b0  w    F .text	00000002 FMC_IRQHandler
08000658 g     F .text	00000042 .hidden __aeabi_f2d
08008cc8 g     O .text	00000060 .hidden __inv_pio4
080044b0  w    F .text	00000002 FDCAN_CAL_IRQHandler
20011000 g     O .bss	00000004 __malloc_free_list
080044b0  w    F .text	00000002 SWPMI1_IRQHandler
080044b0  w    F .text	00000002 COMP1_IRQHandler
080044b0  w    F .text	00000002 LPTIM1_IRQHandler
08004328 g     F .text	00000010 recorder::system::WakeupWasPlayButton()
08000398 g     F .text	0000027a .hidden __subdf3
080075b4 g     F .text	00000260 _vfprintf_r
0800908c g       .ARM.attributes	00000000 __preinit_array_start
080044b0  w    F .text	00000002 I2C4_ER_IRQHandler
080045e0 g     F .text	0000004c HAL_PWREx_ConfigSupply
080044b0  w    F .text	00000002 DMA2_Stream6_IRQHandler
0800366c g     F .text	00000014 recorder::Dac::DMAHandler()
08005b58 g     F .text	00000060 LL_ADC_REG_Init
080044b0  w    F .text	00000002 SAI1_IRQHandler
080044b0  w    F .text	00000002 DMA1_Stream3_IRQHandler
20010ffd g     O .bss	00000001 __lock___sfp_recursive_mutex
080085f0 g     F .text	00000010 _close
08008574 g     F .text	00000010 raise
08007184 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000400 	.word	0x20000400
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800908c 	.word	0x0800908c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000404 	.word	0x20000404
 80002dc:	0800908c 	.word	0x0800908c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <recorder::SynthEngine::Init()>:
              freq_wobbliness_(0.0f),
              previous_formant_pot_val_(0.0f) // track the last pot value
        {
        }

        void Init()
 8000708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800070c:	4604      	mov	r4, r0
        {
            // Seed random generator once at initialization
            std::srand(static_cast<unsigned>(std::time(nullptr)));
 800070e:	2000      	movs	r0, #0

            // Initial parameters
            is_note_on_ = false;
            phase_ = 0.0f;
 8000710:	2500      	movs	r5, #0
    void Init(float threshold_dB, float ratio, float softness,
        float attack_ms, float decay_ms, float hold_ms, float sample_rate)
    {
        pregain_ = std::pow(10.0, -threshold_dB / 20);
        ratio_ = 1 / ratio - 1;
        softness_ = softness;
 8000712:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
            is_note_on_ = false;
 8000716:	4680      	mov	r8, r0
            std::srand(static_cast<unsigned>(std::time(nullptr)));
 8000718:	f007 fb9c 	bl	8007e54 <time>
 800071c:	f007 fa9c 	bl	8007c58 <srand>
            currentFrequency_ = 130.81f; // Start at C3
 8000720:	4bd5      	ldr	r3, [pc, #852]	; (8000a78 <recorder::SynthEngine::Init()+0x370>)
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8000722:	f504 3680 	add.w	r6, r4, #65536	; 0x10000
            is_note_on_ = false;
 8000726:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
            currentFrequency_ = 130.81f; // Start at C3
 800072a:	6063      	str	r3, [r4, #4]

    void Reset(void)
    {
        for (uint32_t i = 0; i < kBufferSize; i++)
        {
            buffer_[i] = 0;
 800072c:	4641      	mov	r1, r8
            fundamentalFreq_ = 130.81f;  // Default fundamental is also C3
 800072e:	60a3      	str	r3, [r4, #8]
            targetFrequencyOffset_ = 0.0f;
            offsetCounter_ = 0;
            previousTargetIndex_ = -1;
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            offsetCounter_ = 0;
 8000734:	f8c4 8014 	str.w	r8, [r4, #20]
 8000738:	f44f 3280 	mov.w	r2, #65536	; 0x10000
            previousTargetIndex_ = -1;
 800073c:	64e3      	str	r3, [r4, #76]	; 0x4c
        t_scaler_ = 0.5 / softness;
 800073e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
            phase_ = 0.0f;
 8000742:	6025      	str	r5, [r4, #0]
 8000744:	f504 7008 	add.w	r0, r4, #544	; 0x220
            targetFrequencyOffset_ = 0.0f;
 8000748:	60e5      	str	r5, [r4, #12]
class SOSFilter
{
public:
    void Init(int num_sections, const SOSCoefficients* sections)
    {
        num_sections_ = num_sections;
 800074a:	f04f 0905 	mov.w	r9, #5
 800074e:	f8c6 3230 	str.w	r3, [r6, #560]	; 0x230
{
public:
    void Init(float attack_ms, float decay_ms, float hold_ms, float sample_rate)
    {
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8000752:	4bca      	ldr	r3, [pc, #808]	; (8000a7c <recorder::SynthEngine::Init()+0x374>)
        Reset();
    }

    void Reset(void)
    {
        hold_count_ = 0;
 8000754:	f8c6 8240 	str.w	r8, [r6, #576]	; 0x240
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8000758:	f8c6 324c 	str.w	r3, [r6, #588]	; 0x24c
class OnePoleLowpass
{
public:
    void Init(float cutoff, float sample_rate, float initial_value = 0)
    {
        factor_ = 1 - std::exp(-cutoff / sample_rate);
 800075c:	f8c6 325c 	str.w	r3, [r6, #604]	; 0x25c
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8000760:	4bc7      	ldr	r3, [pc, #796]	; (8000a80 <recorder::SynthEngine::Init()+0x378>)
        hold_count_ = 0;
 8000762:	f8c6 8254 	str.w	r8, [r6, #596]	; 0x254
 8000766:	f8c6 3224 	str.w	r3, [r6, #548]	; 0x224
        ratio_ = 1 / ratio - 1;
 800076a:	4bc6      	ldr	r3, [pc, #792]	; (8000a84 <recorder::SynthEngine::Init()+0x37c>)
        envelope_ = 0;
 800076c:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
 8000770:	f8c6 3228 	str.w	r3, [r6, #552]	; 0x228
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8000774:	4bc4      	ldr	r3, [pc, #784]	; (8000a88 <recorder::SynthEngine::Init()+0x380>)
        envelope_ = 0;
 8000776:	f8c6 5258 	str.w	r5, [r6, #600]	; 0x258
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800077a:	f8c6 3234 	str.w	r3, [r6, #564]	; 0x234
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 800077e:	4bc3      	ldr	r3, [pc, #780]	; (8000a8c <recorder::SynthEngine::Init()+0x384>)
        Reset(initial_value);
    }

    void Reset(float initial_value = 0)
    {
        history_ = initial_value;
 8000780:	f8c6 5260 	str.w	r5, [r6, #608]	; 0x260
 8000784:	f8c6 3238 	str.w	r3, [r6, #568]	; 0x238
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8000788:	f44f 63c8 	mov.w	r3, #1600	; 0x640
        softness_ = softness;
 800078c:	f8c6 722c 	str.w	r7, [r6, #556]	; 0x22c
 8000790:	f8c6 323c 	str.w	r3, [r6, #572]	; 0x23c
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8000794:	4bbe      	ldr	r3, [pc, #760]	; (8000a90 <recorder::SynthEngine::Init()+0x388>)
 8000796:	f8c6 3248 	str.w	r3, [r6, #584]	; 0x248
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 800079a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800079e:	f8c6 3250 	str.w	r3, [r6, #592]	; 0x250
 80007a2:	f006 fe40 	bl	8007426 <memset>
            delay_.Init();

            // Set a local sample rate variable
            sample_rate_ = 16000.0f;
 80007a6:	4bbb      	ldr	r3, [pc, #748]	; (8000a94 <recorder::SynthEngine::Init()+0x38c>)

    void SetCoefficients(const SOSCoefficients* sections)
    {
        for (int n = 0; n < num_sections_; n++)
        {
            sections_[n].b[0] = sections[n].b[0];
 80007a8:	eddf 6abb 	vldr	s13, [pc, #748]	; 8000a98 <recorder::SynthEngine::Init()+0x390>
            {
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;

                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80007ac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
        }

        write_head_ = 0;
 80007b0:	f8c6 8220 	str.w	r8, [r6, #544]	; 0x220
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80007b4:	f04f 4c82 	mov.w	ip, #1090519040	; 0x41000000
 80007b8:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
class FormantBiquad
{
public:
    void Init(BiquadType type, float sampleRate, float centerFrequency, float Q, float gainDB = 0.0f)
    {
        type_ = type;
 80007bc:	2002      	movs	r0, #2
        compressor_.Reset();
        follower_.Reset();
        delay_time_lpf_.Reset();
        interpolator_history_ = 0;
 80007be:	f8c6 5264 	str.w	r5, [r6, #612]	; 0x264
 80007c2:	edc4 6a16 	vstr	s13, [r4, #88]	; 0x58
            sections_[n].b[1] = sections[n].b[1];
            sections_[n].b[2] = sections[n].b[2];
 80007c6:	edc4 6a18 	vstr	s13, [r4, #96]	; 0x60
            sections_[n].b[1] = sections[n].b[1];
 80007ca:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8000a9c <recorder::SynthEngine::Init()+0x394>
            x_[n][0] = 0;
 80007ce:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
            sections_[n].b[1] = sections[n].b[1];
 80007d2:	edc4 6a17 	vstr	s13, [r4, #92]	; 0x5c

            sections_[n].a[0] = sections[n].a[0];
 80007d6:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8000aa0 <recorder::SynthEngine::Init()+0x398>
            x_[n][1] = 0;
 80007da:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
            sections_[n].a[0] = sections[n].a[0];
 80007de:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
            sections_[n].a[1] = sections[n].a[1];
 80007e2:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8000aa4 <recorder::SynthEngine::Init()+0x39c>
            x_[n][2] = 0;
 80007e6:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
            sections_[n].a[1] = sections[n].a[1];
 80007ea:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
            sections_[n].b[1] = sections[n].b[1];
 80007ee:	eddf 6aae 	vldr	s13, [pc, #696]	; 8000aa8 <recorder::SynthEngine::Init()+0x3a0>
            x_[n][0] = 0;
 80007f2:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
            sections_[n].b[1] = sections[n].b[1];
 80007f6:	edc4 6a1c 	vstr	s13, [r4, #112]	; 0x70
            sections_[n].a[0] = sections[n].a[0];
 80007fa:	eddf 6aac 	vldr	s13, [pc, #688]	; 8000aac <recorder::SynthEngine::Init()+0x3a4>
            x_[n][1] = 0;
 80007fe:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
            sections_[n].a[0] = sections[n].a[0];
 8000802:	edc4 6a1e 	vstr	s13, [r4, #120]	; 0x78
            sections_[n].a[1] = sections[n].a[1];
 8000806:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8000ab0 <recorder::SynthEngine::Init()+0x3a8>
            x_[n][2] = 0;
 800080a:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
            sections_[n].a[1] = sections[n].a[1];
 800080e:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
            sections_[n].b[1] = sections[n].b[1];
 8000812:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8000ab4 <recorder::SynthEngine::Init()+0x3ac>
            x_[n][0] = 0;
 8000816:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
            sections_[n].b[1] = sections[n].b[1];
 800081a:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
            sections_[n].a[0] = sections[n].a[0];
 800081e:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8000ab8 <recorder::SynthEngine::Init()+0x3b0>
            x_[n][1] = 0;
 8000822:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
            x_[n][2] = 0;
 8000826:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
            x_[n][0] = 0;
 800082a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
            x_[n][1] = 0;
 800082e:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            x_[n][2] = 0;
 8000832:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
            x_[n][0] = 0;
 8000836:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
            x_[n][1] = 0;
 800083a:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
            x_[n][2] = 0;
 800083e:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
            sections_[n].b[0] = sections[n].b[0];
 8000842:	66e7      	str	r7, [r4, #108]	; 0x6c
            sections_[n].b[2] = sections[n].b[2];
 8000844:	6767      	str	r7, [r4, #116]	; 0x74
            sections_[n].b[0] = sections[n].b[0];
 8000846:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
            sections_[n].b[2] = sections[n].b[2];
 800084a:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
        num_sections_ = num_sections;
 800084e:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
            sections_[n].a[0] = sections[n].a[0];
 8000852:	edc4 6a23 	vstr	s13, [r4, #140]	; 0x8c
            currentVoice_ = VOICE_NEUTRAL;
 8000856:	f8a4 81f8 	strh.w	r8, [r4, #504]	; 0x1f8
            sections_[n].a[1] = sections[n].a[1];
 800085a:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8000b3c <recorder::SynthEngine::Init()+0x434>
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 800085e:	4a97      	ldr	r2, [pc, #604]	; (8000abc <recorder::SynthEngine::Init()+0x3b4>)
 8000860:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
            sections_[n].b[1] = sections[n].b[1];
 8000864:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8000b40 <recorder::SynthEngine::Init()+0x438>
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8000868:	4995      	ldr	r1, [pc, #596]	; (8000ac0 <recorder::SynthEngine::Init()+0x3b8>)
 800086a:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
            sections_[n].a[0] = sections[n].a[0];
 800086e:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8000b44 <recorder::SynthEngine::Init()+0x43c>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8000872:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000ac4 <recorder::SynthEngine::Init()+0x3bc>
 8000876:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
            sections_[n].a[1] = sections[n].a[1];
 800087a:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8000b48 <recorder::SynthEngine::Init()+0x440>
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 800087e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8000b4c <recorder::SynthEngine::Init()+0x444>
 8000882:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4
            sections_[n].b[1] = sections[n].b[1];
 8000886:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8000b50 <recorder::SynthEngine::Init()+0x448>
            sampleRate_ = sampleRate;
 800088a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800088e:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
            sections_[n].a[0] = sections[n].a[0];
 8000892:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8000b54 <recorder::SynthEngine::Init()+0x44c>
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8000896:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
 800089a:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
            sections_[n].a[1] = sections[n].a[1];
 800089e:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8000b58 <recorder::SynthEngine::Init()+0x450>
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80008a2:	edc4 7a78 	vstr	s15, [r4, #480]	; 0x1e0
 80008a6:	f8c4 80b8 	str.w	r8, [r4, #184]	; 0xb8
            // Initialize filters
            aa_filter_.Init();
            aa_filter_.Reset();

            // Example delay parameters
            delay_time_ = 0.2f;
 80008aa:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8000b20 <recorder::SynthEngine::Init()+0x418>
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80008ae:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
 80008b2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
            delay_feedback_ = 0.1f;
 80008b6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8000b2c <recorder::SynthEngine::Init()+0x424>
                currentFormantQs_[i] = targetFormantQs_[i];
 80008ba:	edc4 7a75 	vstr	s15, [r4, #468]	; 0x1d4
        sampleRate_ = sampleRate;
        centerFrequency_ = centerFrequency;
        Q_ = Q;
 80008be:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
        sampleRate_ = sampleRate;
 80008c2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            sections_[n].b[0] = sections[n].b[0];
 80008c6:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
            sections_[n].b[2] = sections[n].b[2];
 80008ca:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
            sections_[n].b[0] = sections[n].b[0];
 80008ce:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
            sections_[n].b[2] = sections[n].b[2];
 80008d2:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
        x_[num_sections_][0] = 0;
 80008d6:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
        x_[num_sections_][1] = 0;
 80008da:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
        x_[num_sections_][2] = 0;
 80008de:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
            wahPosition_ = 0.0f;
 80008e2:	f8c4 51fc 	str.w	r5, [r4, #508]	; 0x1fc
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80008e6:	ed84 7a72 	vstr	s14, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80008ea:	f8c4 e1cc 	str.w	lr, [r4, #460]	; 0x1cc
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80008ee:	f8c4 c1e4 	str.w	ip, [r4, #484]	; 0x1e4
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 80008f2:	ed84 7a6f 	vstr	s14, [r4, #444]	; 0x1bc
        centerFrequency_ = centerFrequency;
 80008f6:	ed84 7a44 	vstr	s14, [r4, #272]	; 0x110
        type_ = type;
 80008fa:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80008fe:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
 8000902:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000906:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
                currentFormantQs_[i] = targetFormantQs_[i];
 800090a:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
        Q_ = Q;
 800090e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
            case BANDPASS:
            {
                b0_ = alpha;
                b1_ = 0.0f;
                b2_ = -alpha;
                a0_ = 1.0f + alpha;
 8000912:	4a6d      	ldr	r2, [pc, #436]	; (8000ac8 <recorder::SynthEngine::Init()+0x3c0>)
        sampleRate_ = sampleRate;
 8000914:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
                a0_ = 1.0f + alpha;
 8000918:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
                a2_ = 1.0f - alpha;
                break;
        }

        // Normalize coefficients
        b0_ /= a0_;
 800091c:	4a6b      	ldr	r2, [pc, #428]	; (8000acc <recorder::SynthEngine::Init()+0x3c4>)
        sampleRate_ = sampleRate;
 800091e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
        b0_ /= a0_;
 8000922:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
        b1_ /= a0_;
        b2_ /= a0_;
 8000926:	4a6a      	ldr	r2, [pc, #424]	; (8000ad0 <recorder::SynthEngine::Init()+0x3c8>)
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 8000928:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
 800092c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        a1_ /= a0_;
 8000930:	4a68      	ldr	r2, [pc, #416]	; (8000ad4 <recorder::SynthEngine::Init()+0x3cc>)
        centerFrequency_ = centerFrequency;
 8000932:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
            freq_mult_ = freqMult;
 8000936:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
        a1_ /= a0_;
 800093a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
        a2_ /= a0_;
 800093e:	4a66      	ldr	r2, [pc, #408]	; (8000ad8 <recorder::SynthEngine::Init()+0x3d0>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000940:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        a2_ /= a0_;
 8000944:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
                a0_ = 1.0f + alpha;
 8000948:	4a64      	ldr	r2, [pc, #400]	; (8000adc <recorder::SynthEngine::Init()+0x3d4>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 800094a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
                a0_ = 1.0f + alpha;
 800094e:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
        b0_ /= a0_;
 8000952:	4a63      	ldr	r2, [pc, #396]	; (8000ae0 <recorder::SynthEngine::Init()+0x3d8>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000954:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
        b0_ /= a0_;
 8000958:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
        b2_ /= a0_;
 800095c:	4a61      	ldr	r2, [pc, #388]	; (8000ae4 <recorder::SynthEngine::Init()+0x3dc>)
        b1_ /= a0_;
 800095e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
        b2_ /= a0_;
 8000962:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
        a1_ /= a0_;
 8000966:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <recorder::SynthEngine::Init()+0x3e0>)
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 8000968:	f8c4 e1c0 	str.w	lr, [r4, #448]	; 0x1c0
 800096c:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
        a2_ /= a0_;
 8000970:	4a5e      	ldr	r2, [pc, #376]	; (8000aec <recorder::SynthEngine::Init()+0x3e4>)
        centerFrequency_ = centerFrequency;
 8000972:	f8c4 e14c 	str.w	lr, [r4, #332]	; 0x14c
        a2_ /= a0_;
 8000976:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
                currentFormantQs_[i] = targetFormantQs_[i];
 800097a:	f8c4 c1d8 	str.w	ip, [r4, #472]	; 0x1d8
        b2_ /= a0_;
 800097e:	4a5c      	ldr	r2, [pc, #368]	; (8000af0 <recorder::SynthEngine::Init()+0x3e8>)
        Q_ = Q;
 8000980:	f8c4 c150 	str.w	ip, [r4, #336]	; 0x150
        type_ = type;
 8000984:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
 8000988:	f884 0180 	strb.w	r0, [r4, #384]	; 0x180
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 800098c:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000990:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 8000994:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 8000998:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 800099c:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
        b1_ /= a0_;
 80009a0:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80009a4:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
        float current_dutycycle;
        int randomizationcounter;
        const int randomizationperiod;
        void UpdateDutyCycle()
        {
            if (duty_cyclerandomization > 0.0f)
 80009a8:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
                a0_ = 1.0f + alpha;
 80009ac:	4b51      	ldr	r3, [pc, #324]	; (8000af4 <recorder::SynthEngine::Init()+0x3ec>)
 80009ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        b2_ /= a0_;
 80009b2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
        a1_ /= a0_;
 80009b6:	4a50      	ldr	r2, [pc, #320]	; (8000af8 <recorder::SynthEngine::Init()+0x3f0>)
                a0_ = 1.0f + alpha;
 80009b8:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
            freq_mult_ = freqMult;
 80009bc:	f8c4 11f4 	str.w	r1, [r4, #500]	; 0x1f4
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        b0_ /= a0_;
 80009c4:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <recorder::SynthEngine::Init()+0x3f4>)
            freq_mult_ = 1.0f;
            formant_filter_.SetVoice(FormantFilter::VOICE_NEUTRAL);
            formant_filter_.setQMult(1.0f);
            formant_filter_.setFreqMult(0.75f);
            formant_filter_.SetMode(FormantFilter::FILTER_MODE_NORMAL);
            attack_formant_rate_ = 0.001f;
 80009c6:	494e      	ldr	r1, [pc, #312]	; (8000b00 <recorder::SynthEngine::Init()+0x3f8>)
        a1_ /= a0_;
 80009c8:	f8c4 2198 	str.w	r2, [r4, #408]	; 0x198
        a2_ /= a0_;
 80009cc:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <recorder::SynthEngine::Init()+0x3fc>)
        b0_ /= a0_;
 80009ce:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 80009d2:	6221      	str	r1, [r4, #32]
            base_dutycycle = std::max(0.0f, std::min(1.0f, duty_cycle));
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <recorder::SynthEngine::Init()+0x400>)
        factor_ = 1 - std::exp(-cutoff / sample_rate);
 80009d6:	494d      	ldr	r1, [pc, #308]	; (8000b0c <recorder::SynthEngine::Init()+0x404>)
        a2_ /= a0_;
 80009d8:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
            formantRate_ = 0.002f;
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <recorder::SynthEngine::Init()+0x408>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 80009de:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
 80009e2:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
 80009e6:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
 80009ea:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
        b1_ /= a0_;
 80009ee:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
            freq_mult_ = 1.0f;
 80009f2:	61e7      	str	r7, [r4, #28]
            q_mult_ = qMult;
 80009f4:	f8c4 71f0 	str.w	r7, [r4, #496]	; 0x1f0
        history_ = initial_value;
 80009f8:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
        factor_ = 1 - std::exp(-cutoff / sample_rate);
 80009fc:	f8c4 1204 	str.w	r1, [r4, #516]	; 0x204
 8000a00:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
            formantRate_ = 0.002f;
 8000a04:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
            if (duty_cyclerandomization > 0.0f)
 8000a08:	dd03      	ble.n	8000a12 <recorder::SynthEngine::Init()+0x30a>
            {
                // Generate random value between -1 and 1
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8000a0a:	f007 f953 	bl	8007cb4 <rand>
                float offset = random_offset * max_offset;
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
            }
            else
            {
                current_dutycycle = base_dutycycle;
 8000a0e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8000a12:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8000a16:	2200      	movs	r2, #0
            lowpass_filter_.Init(20000.0f, sample_rate_, 0.0f);

            // Set up pulse generator
            pulse_generator_.SetBaseDutyCycle(0.0003f);
            duty_gain_ = 6.8f;
            freq_wobbliness_ = 0.03f;
 8000a18:	4b3e      	ldr	r3, [pc, #248]	; (8000b14 <recorder::SynthEngine::Init()+0x40c>)
            duty_gain_ = 6.8f;
 8000a1a:	483f      	ldr	r0, [pc, #252]	; (8000b18 <recorder::SynthEngine::Init()+0x410>)
            freq_wobbliness_ = 0.03f;
 8000a1c:	6463      	str	r3, [r4, #68]	; 0x44
            pulse_generator_.SetDutyCycleRandomization(0.0f);

            // ADSR parameters
            adsr_attack_time_ = 0.05f; // seconds
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <recorder::SynthEngine::Init()+0x414>)
            duty_gain_ = 6.8f;
 8000a20:	61a0      	str	r0, [r4, #24]
    void Init(float sampleRate)
    {
        sampleRate_   = sampleRate;
        phase_        = 0.0f;
        currentDepth_ = 0.0f;
        buildingUp_   = false;
 8000a22:	2000      	movs	r0, #0
 8000a24:	f8c4 2210 	str.w	r2, [r4, #528]	; 0x210
            adsr_attack_time_ = 0.05f; // seconds
 8000a28:	f8c6 3288 	str.w	r3, [r6, #648]	; 0x288
            adsr_decay_time_ = 0.2f;
 8000a2c:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <recorder::SynthEngine::Init()+0x418>)
     * @param depth       Maximum vibrato depth (0.0 -> 0.25 in typical usage).
     * @param buildupTime Time in seconds to ramp from 0 -> depth after `Trigger()`.
     */
    void SetParameters(float rate, float depth, float buildupTime)
    {
        rate_        = rate;
 8000a2e:	493d      	ldr	r1, [pc, #244]	; (8000b24 <recorder::SynthEngine::Init()+0x41c>)
 8000a30:	f8c6 328c 	str.w	r3, [r6, #652]	; 0x28c
            adsr_sustain_level_ = 0.8f;
 8000a34:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <recorder::SynthEngine::Init()+0x420>)
 8000a36:	f8c6 3290 	str.w	r3, [r6, #656]	; 0x290
            adsr_release_time_ = 0.1f;
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <recorder::SynthEngine::Init()+0x424>)
 8000a3c:	f8c6 3294 	str.w	r3, [r6, #660]	; 0x294
        }

        // Function to set the formant morphing rate
        void SetFormantRate(float rate)
        {
            formantRate_ = rate;
 8000a40:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <recorder::SynthEngine::Init()+0x428>)
 8000a42:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
        depth_        = targetDepth_;
 8000a46:	f8d6 3278 	ldr.w	r3, [r6, #632]	; 0x278
        sampleRate_   = sampleRate;
 8000a4a:	f8d6 42a0 	ldr.w	r4, [r6, #672]	; 0x2a0
        phase_        = 0.0f;
 8000a4e:	f8c6 226c 	str.w	r2, [r6, #620]	; 0x26c
        currentDepth_ = 0.0f;
 8000a52:	f8c6 2280 	str.w	r2, [r6, #640]	; 0x280
        depth_        = targetDepth_;
 8000a56:	f8c6 3274 	str.w	r3, [r6, #628]	; 0x274
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
 8000a5a:	4a36      	ldr	r2, [pc, #216]	; (8000b34 <recorder::SynthEngine::Init()+0x42c>)
        buildupTime_ = (buildupTime <= 0.0f) ? 0.01f : buildupTime;
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <recorder::SynthEngine::Init()+0x430>)
        sampleRate_   = sampleRate;
 8000a5e:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
        buildingUp_   = false;
 8000a62:	f886 0284 	strb.w	r0, [r6, #644]	; 0x284
        rate_        = rate;
 8000a66:	f8c6 1270 	str.w	r1, [r6, #624]	; 0x270
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
 8000a6a:	f8c6 2278 	str.w	r2, [r6, #632]	; 0x278
        buildupTime_ = (buildupTime <= 0.0f) ? 0.01f : buildupTime;
 8000a6e:	f8c6 327c 	str.w	r3, [r6, #636]	; 0x27c

            // Initialize and set default vibrato parameters
            vibrato_.Init(sample_rate_);
            // Example: vibrato rate = 5 Hz, depth = 0.12, buildup = 1.8 seconds
            vibrato_.SetParameters(6.0f, 0.12f, 1.8f);
        }
 8000a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a76:	bf00      	nop
 8000a78:	4302cf5c 	.word	0x4302cf5c
 8000a7c:	3a23c800 	.word	0x3a23c800
 8000a80:	3f642905 	.word	0x3f642905
 8000a84:	bd430c20 	.word	0xbd430c20
 8000a88:	3c4b8680 	.word	0x3c4b8680
 8000a8c:	39831000 	.word	0x39831000
 8000a90:	3bcc2980 	.word	0x3bcc2980
 8000a94:	467a0000 	.word	0x467a0000
 8000a98:	3a446737 	.word	0x3a446737
 8000a9c:	3a85b218 	.word	0x3a85b218
 8000aa0:	bfbc65fb 	.word	0xbfbc65fb
 8000aa4:	3f10296d 	.word	0x3f10296d
 8000aa8:	beade39b 	.word	0xbeade39b
 8000aac:	bfb80d8c 	.word	0xbfb80d8c
 8000ab0:	3f2d1db0 	.word	0x3f2d1db0
 8000ab4:	bf74e042 	.word	0xbf74e042
 8000ab8:	bfb33dc4 	.word	0xbfb33dc4
 8000abc:	41100000 	.word	0x41100000
 8000ac0:	45188000 	.word	0x45188000
 8000ac4:	44368000 	.word	0x44368000
 8000ac8:	3f81cf46 	.word	0x3f81cf46
 8000acc:	3c646865 	.word	0x3c646865
 8000ad0:	bc646865 	.word	0xbc646865
 8000ad4:	bff2212d 	.word	0xbff2212d
 8000ad8:	3f78dcbe 	.word	0x3f78dcbe
 8000adc:	3f83521b 	.word	0x3f83521b
 8000ae0:	3ccf26ed 	.word	0x3ccf26ed
 8000ae4:	bccf26ed 	.word	0xbccf26ed
 8000ae8:	bfe303a7 	.word	0xbfe303a7
 8000aec:	3f730d90 	.word	0x3f730d90
 8000af0:	bd32148d 	.word	0xbd32148d
 8000af4:	3f85d165 	.word	0x3f85d165
 8000af8:	bf8ccd30 	.word	0xbf8ccd30
 8000afc:	3d32148d 	.word	0x3d32148d
 8000b00:	3a83126f 	.word	0x3a83126f
 8000b04:	3f69bd6f 	.word	0x3f69bd6f
 8000b08:	399d4952 	.word	0x399d4952
 8000b0c:	3f36a79f 	.word	0x3f36a79f
 8000b10:	3b03126f 	.word	0x3b03126f
 8000b14:	3cf5c28f 	.word	0x3cf5c28f
 8000b18:	40d9999a 	.word	0x40d9999a
 8000b1c:	3d4ccccd 	.word	0x3d4ccccd
 8000b20:	3e4ccccd 	.word	0x3e4ccccd
 8000b24:	40c00000 	.word	0x40c00000
 8000b28:	3f4ccccd 	.word	0x3f4ccccd
 8000b2c:	3dcccccd 	.word	0x3dcccccd
 8000b30:	38d1b717 	.word	0x38d1b717
 8000b34:	3df5c28f 	.word	0x3df5c28f
 8000b38:	3fe66666 	.word	0x3fe66666
 8000b3c:	3f4f7eb1 	.word	0x3f4f7eb1
 8000b40:	bf954df0 	.word	0xbf954df0
 8000b44:	bfb0aec0 	.word	0xbfb0aec0
 8000b48:	3f68ba72 	.word	0x3f68ba72
 8000b4c:	44884000 	.word	0x44884000
 8000b50:	bf9e3e9d 	.word	0xbf9e3e9d
 8000b54:	bfb140a2 	.word	0xbfb140a2
 8000b58:	3f793977 	.word	0x3f793977

08000b5c <recorder::SynthEngine::RenderOneSample()>:
            freq_wobbliness_ = mapFloat(formant_pot_val, 0.0f, 1.0f, 0.03f, 0.0f);
            pulse_generator_.SetDutyCycleRandomization(mapFloat(formant_pot_val, 0.0f, 1.0f, 0.00f, 0.08f));
            formant_filter_.SetFormantRate(mapFloat(formant_pot_val, 0.0f, 1.0f, 0.000000001f, 0.008f));
            previous_formant_pot_val_ = formant_pot_val;
        }
        float RenderOneSample()
 8000b5c:	b570      	push	{r4, r5, r6, lr}
        {
            // If envelope is idle and the delay line is silent, output zero
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000b5e:	f500 3580 	add.w	r5, r0, #65536	; 0x10000
        float RenderOneSample()
 8000b62:	4604      	mov	r4, r0
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000b64:	f8d5 329c 	ldr.w	r3, [r5, #668]	; 0x29c
        float RenderOneSample()
 8000b68:	ed2d 8b06 	vpush	{d8-d10}
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f040 81ac 	bne.w	8000eca <recorder::SynthEngine::RenderOneSample()+0x36e>
 8000b72:	eddf 7aed 	vldr	s15, [pc, #948]	; 8000f28 <recorder::SynthEngine::RenderOneSample()+0x3cc>
 8000b76:	ed95 7a96 	vldr	s14, [r5, #600]	; 0x258
 8000b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	f240 81aa 	bls.w	8000eda <recorder::SynthEngine::RenderOneSample()+0x37e>
            break;

            case ADSRState::kIdle:
            default:
                // Envelope is zero (no note playing).
                adsr_value_ = 0.0f;
 8000b86:	2300      	movs	r3, #0
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000b88:	edd5 7aa8 	vldr	s15, [r5, #672]	; 0x2a0
                adsr_value_ = 0.0f;
 8000b8c:	f8c5 3298 	str.w	r3, [r5, #664]	; 0x298
            float phaseIncrement = currentFrequency_ / sample_rate_;
 8000b90:	edd4 6a01 	vldr	s13, [r4, #4]
            if (phase_ >= 1.0f)
 8000b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            phase_ += phaseIncrement;
 8000b98:	ed94 8a00 	vldr	s16, [r4]
            float phaseIncrement = currentFrequency_ / sample_rate_;
 8000b9c:	ee86 aaa7 	vdiv.f32	s20, s13, s15
            if (--randomizationcounter <= 0)
 8000ba0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
            phase_ += phaseIncrement;
 8000baa:	ee3a 8a08 	vadd.f32	s16, s20, s16
            if (phase_ >= 1.0f)
 8000bae:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8000bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                phase_ -= 1.0f;
 8000bb6:	bfa8      	it	ge
 8000bb8:	ee38 8a47 	vsubge.f32	s16, s16, s14
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	ed84 8a00 	vstr	s16, [r4]
 8000bc2:	f340 8284 	ble.w	80010ce <recorder::SynthEngine::RenderOneSample()+0x572>
            float sample = (phase < current_dutycycle) ? 1.0f : -1.0f;
 8000bc6:	edd4 9a85 	vldr	s19, [r4, #532]	; 0x214
 8000bca:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8000bce:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8000bd2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8000bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }
        }
        float PolyBlep(float t, float dt)
        {
            if (dt == 0.0f)
 8000bda:	eeb5 aa40 	vcmp.f32	s20, #0.0
            float sample = (phase < current_dutycycle) ? 1.0f : -1.0f;
 8000bde:	bf48      	it	mi
 8000be0:	eef0 8a49 	vmovmi.f32	s17, s18
            if (dt == 0.0f)
 8000be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be8:	d048      	beq.n	8000c7c <recorder::SynthEngine::RenderOneSample()+0x120>
                return 0.0f;
            // Normalize t to [0, 1)
            t = fmodf(t, 1.0f);
 8000bea:	eef0 0a49 	vmov.f32	s1, s18
 8000bee:	eeb0 0a48 	vmov.f32	s0, s16
 8000bf2:	f006 f803 	bl	8006bfc <fmodf>
            if (t < dt)
 8000bf6:	eeb4 aac0 	vcmpe.f32	s20, s0
 8000bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfe:	f300 8295 	bgt.w	800112c <recorder::SynthEngine::RenderOneSample()+0x5d0>
            {
                t /= dt;
                return t + t - t * t - 1.0f;
            }
            else if (t > 1.0f - dt)
 8000c02:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8000c06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd0b      	ble.n	8000c28 <recorder::SynthEngine::RenderOneSample()+0xcc>
            {
                t = (t - 1.0f) / dt;
 8000c10:	ee30 0a49 	vsub.f32	s0, s0, s18
                return t * t + t + t + 1.0f;
 8000c14:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            sample += PolyBlep(phase, phase_increment);
 8000c18:	ee78 8a89 	vadd.f32	s17, s17, s18
                t = (t - 1.0f) / dt;
 8000c1c:	ee80 7a0a 	vdiv.f32	s14, s0, s20
                return t * t + t + t + 1.0f;
 8000c20:	ee77 7a27 	vadd.f32	s15, s14, s15
            sample += PolyBlep(phase, phase_increment);
 8000c24:	eee7 8a27 	vfma.f32	s17, s14, s15
            float t = phase - current_dutycycle;
 8000c28:	ee38 0a69 	vsub.f32	s0, s16, s19
            if (t < 0.0f)
 8000c2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c34:	d503      	bpl.n	8000c3e <recorder::SynthEngine::RenderOneSample()+0xe2>
                t += 1.0f;
 8000c36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c3a:	ee30 0a27 	vadd.f32	s0, s0, s15
            t = fmodf(t, 1.0f);
 8000c3e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c42:	f005 ffdb 	bl	8006bfc <fmodf>
            if (t < dt)
 8000c46:	eeb4 aac0 	vcmpe.f32	s20, s0
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	f300 8260 	bgt.w	8001112 <recorder::SynthEngine::RenderOneSample()+0x5b6>
            else if (t > 1.0f - dt)
 8000c52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c56:	ee37 7aca 	vsub.f32	s14, s15, s20
 8000c5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8000c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c62:	dd0b      	ble.n	8000c7c <recorder::SynthEngine::RenderOneSample()+0x120>
                t = (t - 1.0f) / dt;
 8000c64:	ee30 0a67 	vsub.f32	s0, s0, s15
                return t * t + t + t + 1.0f;
 8000c68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
            sample -= PolyBlep(t, phase_increment);
 8000c6c:	ee78 8ae7 	vsub.f32	s17, s17, s15
                t = (t - 1.0f) / dt;
 8000c70:	eec0 6a0a 	vdiv.f32	s13, s0, s20
                return t * t + t + t + 1.0f;
 8000c74:	ee76 7a87 	vadd.f32	s15, s13, s14
            sample -= PolyBlep(t, phase_increment);
 8000c78:	eee6 8ae7 	vfms.f32	s17, s13, s15
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000c7c:	ed94 6a4e 	vldr	s12, [r4, #312]	; 0x138
 8000c80:	edd4 6a5d 	vldr	s13, [r4, #372]	; 0x174
 8000c84:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 8000c88:	ed94 7a5b 	vldr	s14, [r4, #364]	; 0x16c
 8000c8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c90:	edd4 4a4d 	vldr	s9, [r4, #308]	; 0x134
 8000c94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000c98:	edd4 5a5c 	vldr	s11, [r4, #368]	; 0x170
 8000c9c:	ed94 4a4b 	vldr	s8, [r4, #300]	; 0x12c
 8000ca0:	edd4 6a5a 	vldr	s13, [r4, #360]	; 0x168
 8000ca4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8000ca8:	ed94 5a4f 	vldr	s10, [r4, #316]	; 0x13c
 8000cac:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8000cb0:	ed94 6a5e 	vldr	s12, [r4, #376]	; 0x178
 8000cb4:	ed94 3a48 	vldr	s6, [r4, #288]	; 0x120
 8000cb8:	edd4 3a57 	vldr	s7, [r4, #348]	; 0x15c
 8000cbc:	ed94 4a6c 	vldr	s8, [r4, #432]	; 0x1b0
 8000cc0:	edd4 6a6a 	vldr	s13, [r4, #424]	; 0x1a8
 8000cc4:	eee3 7a45 	vfms.f32	s15, s6, s10
 8000cc8:	ed94 2a5f 	vldr	s4, [r4, #380]	; 0x17c
 8000ccc:	eea3 7ac6 	vfms.f32	s14, s7, s12
 8000cd0:	ed94 1a50 	vldr	s2, [r4, #320]	; 0x140
 8000cd4:	edd4 1a58 	vldr	s3, [r4, #352]	; 0x160
 8000cd8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8000cdc:	edd4 0a49 	vldr	s1, [r4, #292]	; 0x124
 8000ce0:	ed94 4a6b 	vldr	s8, [r4, #428]	; 0x1ac
 8000ce4:	edd4 2a69 	vldr	s5, [r4, #420]	; 0x1a4
 8000ce8:	eee0 7ac1 	vfms.f32	s15, s1, s2
 8000cec:	ed94 3a4a 	vldr	s6, [r4, #296]	; 0x128
 8000cf0:	eea1 7ac2 	vfms.f32	s14, s3, s4
 8000cf4:	edd4 3a59 	vldr	s7, [r4, #356]	; 0x164
 8000cf8:	eee2 6a84 	vfma.f32	s13, s5, s8
        x2_ = x1_;
 8000cfc:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 8000d00:	edd4 2a66 	vldr	s5, [r4, #408]	; 0x198
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d04:	edd4 4a6d 	vldr	s9, [r4, #436]	; 0x1b4
        y2_ = y1_;
 8000d08:	ed84 5a50 	vstr	s10, [r4, #320]	; 0x140
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d0c:	eee3 7a28 	vfma.f32	s15, s6, s17
        x2_ = x1_;
 8000d10:	edc4 5a5d 	vstr	s11, [r4, #372]	; 0x174
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d14:	eea3 7aa8 	vfma.f32	s14, s7, s17
        y2_ = y1_;
 8000d18:	ed84 6a5f 	vstr	s12, [r4, #380]	; 0x17c
 8000d1c:	eee2 6ae4 	vfms.f32	s13, s5, s9
        x1_ = input;
 8000d20:	edc4 8a4d 	vstr	s17, [r4, #308]	; 0x134
 8000d24:	edc4 8a5c 	vstr	s17, [r4, #368]	; 0x170
            float output1 = filters_[0].Process(input);
            float output2 = filters_[1].Process(input);
            float output3 = filters_[2].Process(input);

            // Sum the outputs and apply a gain factor
            float output = (output1 + output2 * 0.4f + output3 * 0.3f) * gainFactor_;
 8000d28:	eddf 5a80 	vldr	s11, [pc, #512]	; 8000f2c <recorder::SynthEngine::RenderOneSample()+0x3d0>
 8000d2c:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8000f30 <recorder::SynthEngine::RenderOneSample()+0x3d4>
        y1_ = y0;
 8000d30:	edc4 7a4f 	vstr	s15, [r4, #316]	; 0x13c
 8000d34:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d38:	edd4 3a67 	vldr	s7, [r4, #412]	; 0x19c
 8000d3c:	ed94 5a6e 	vldr	s10, [r4, #440]	; 0x1b8
 8000d40:	edd4 1a68 	vldr	s3, [r4, #416]	; 0x1a0
 8000d44:	eee3 6ac5 	vfms.f32	s13, s7, s10
            sample *= adsr_value_;
 8000d48:	edd5 3aa6 	vldr	s7, [r5, #664]	; 0x298
        x2_ = x1_;
 8000d4c:	ed84 4a6c 	vstr	s8, [r4, #432]	; 0x1b0
    }

    float Process(float input)
    {
        history_ += factor_ * (input - history_);
 8000d50:	ed95 4a97 	vldr	s8, [r5, #604]	; 0x25c
 8000d54:	ed94 8a82 	vldr	s16, [r4, #520]	; 0x208
 8000d58:	edd4 2a80 	vldr	s5, [r4, #512]	; 0x200
 8000d5c:	ed94 3a81 	vldr	s6, [r4, #516]	; 0x204
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d60:	eee1 6aa8 	vfma.f32	s13, s3, s17
            sample = delay_.Process(sample, delay_time_, delay_feedback_);
 8000d64:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38

    float Process(float input, float delay, float feedback)
    {
        delay *= delay;
        delay = delay_time_lpf_.Process(delay);
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8000d68:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8000f34 <recorder::SynthEngine::RenderOneSample()+0x3d8>
        y2_ = y1_;
 8000d6c:	edc4 4a6e 	vstr	s9, [r4, #440]	; 0x1b8
        x1_ = input;
 8000d70:	edc4 8a6b 	vstr	s17, [r4, #428]	; 0x1ac
 8000d74:	edd4 4a0f 	vldr	s9, [r4, #60]	; 0x3c
 8000d78:	ee66 5aa5 	vmul.f32	s11, s13, s11
        y1_ = y0;
 8000d7c:	edc4 6a6d 	vstr	s13, [r4, #436]	; 0x1b4
 8000d80:	eef0 6a65 	vmov.f32	s13, s11
 8000d84:	eee7 6a02 	vfma.f32	s13, s14, s4
 8000d88:	eeb0 7a48 	vmov.f32	s14, s16
 8000d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d90:	ee97 7aa2 	vfnms.f32	s14, s15, s5
 8000d94:	eea3 8a07 	vfma.f32	s16, s6, s14
 8000d98:	ed84 8a82 	vstr	s16, [r4, #520]	; 0x208
            sample *= adsr_value_;
 8000d9c:	ee28 8a23 	vmul.f32	s16, s16, s7
 8000da0:	edd5 7a98 	vldr	s15, [r5, #608]	; 0x260
 8000da4:	eeb0 7a67 	vmov.f32	s14, s15
 8000da8:	ee95 7a05 	vfnms.f32	s14, s10, s10
 8000dac:	eee4 7a07 	vfma.f32	s15, s8, s14
 8000db0:	ee27 7a86 	vmul.f32	s14, s15, s12
 8000db4:	edc5 7a98 	vstr	s15, [r5, #608]	; 0x260
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8000db8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	f2c0 8182 	blt.w	80010c8 <recorder::SynthEngine::RenderOneSample()+0x56c>
 8000dc4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8000dc8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd0:	f340 8139 	ble.w	8001046 <recorder::SynthEngine::RenderOneSample()+0x4ea>
 8000dd4:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    OnePoleLowpass delay_time_lpf_;
    float interpolator_history_;

    uint32_t ReadIndex(uint32_t offset)
    {
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8000dd8:	f8d5 6220 	ldr.w	r6, [r5, #544]	; 0x220
 8000ddc:	1af3      	subs	r3, r6, r3
 8000dde:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8000de2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000de6:	edd3 6a88 	vldr	s13, [r3, #544]	; 0x220
        output = std::clamp<float>(input + output * feedback, -2, 2);
 8000dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dee:	ed9f 5a52 	vldr	s10, [pc, #328]	; 8000f38 <recorder::SynthEngine::RenderOneSample()+0x3dc>
 8000df2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
        follower_.Reset();
    }

    float Process(float in)
    {
        float envelope = follower_.Process(in * pregain_);
 8000df6:	edd5 7a89 	vldr	s15, [r5, #548]	; 0x224
 8000dfa:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0

    float Process(float in)
    {
        in = std::abs(in);

        if (in >= envelope_)
 8000dfe:	ed95 0a91 	vldr	s0, [r5, #580]	; 0x244
 8000e02:	fe84 7ac7 	vminnm.f32	s14, s9, s14
 8000e06:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 8000e0a:	eea6 8a87 	vfma.f32	s16, s13, s14
 8000e0e:	edc5 6a99 	vstr	s13, [r5, #612]	; 0x264
 8000e12:	fe88 8a65 	vminnm.f32	s16, s16, s11
 8000e16:	fe88 8a06 	vmaxnm.f32	s16, s16, s12
 8000e1a:	ee68 7a27 	vmul.f32	s15, s16, s15
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000e1e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e22:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	f2c0 8145 	blt.w	80010b8 <recorder::SynthEngine::RenderOneSample()+0x55c>
        {
            envelope_ += attack_rate_ * (in - envelope_);
 8000e2e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000e32:	ed95 7a8d 	vldr	s14, [r5, #564]	; 0x234
            hold_count_ = 0;
 8000e36:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8000e38:	eea7 0a27 	vfma.f32	s0, s14, s15
            hold_count_ = 0;
 8000e3c:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
            envelope_ += attack_rate_ * (in - envelope_);
 8000e40:	ed85 0a91 	vstr	s0, [r5, #580]	; 0x244
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
 8000e44:	f005 fefe 	bl	8006c44 <log10f>
        float sense = 20 * std::log10(envelope);
 8000e48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
        // h11 = t^3 - t^2
        // We multiply h01 by A = ratio * softness to provide the step from 0
        // to A. We multiply h11 by 2A to make the ending slope equal to ratio.
        // Then, the sum of the terms reduces to A*t^2.

        if (db > softness_)
 8000e4c:	edd5 7a8b 	vldr	s15, [r5, #556]	; 0x22c
        float sense = 20 * std::log10(envelope);
 8000e50:	ee20 0a07 	vmul.f32	s0, s0, s14
        if (db > softness_)
 8000e54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5c:	f340 80da 	ble.w	8001014 <recorder::SynthEngine::RenderOneSample()+0x4b8>
        {
            return ratio_ * db;
 8000e60:	edd5 7a8a 	vldr	s15, [r5, #552]	; 0x228
 8000e64:	ee20 0a27 	vmul.f32	s0, s0, s15
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 8000e68:	eddf 7a34 	vldr	s15, [pc, #208]	; 8000f3c <recorder::SynthEngine::RenderOneSample()+0x3e0>
 8000e6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000e70:	f005 fd4c 	bl	800690c <expf>
        output *= 0.5;
 8000e74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        return in * std::pow(10.0, gain / 20);
 8000e78:	ee20 0a08 	vmul.f32	s0, s0, s16
        if (in >= envelope_)
 8000e7c:	edd5 7a96 	vldr	s15, [r5, #600]	; 0x258
        buffer_[write_head_] = compressor_.Process(output);
 8000e80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000e84:	3601      	adds	r6, #1
        output *= 0.5;
 8000e86:	ee28 8a07 	vmul.f32	s16, s16, s14
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000e8a:	f3c6 060d 	ubfx	r6, r6, #0, #14
        buffer_[write_head_] = compressor_.Process(output);
 8000e8e:	ed83 0a88 	vstr	s0, [r3, #544]	; 0x220
 8000e92:	eeb0 7ac8 	vabs.f32	s14, s16
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000e96:	f8c5 6220 	str.w	r6, [r5, #544]	; 0x220
 8000e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	f2c0 80af 	blt.w	8001004 <recorder::SynthEngine::RenderOneSample()+0x4a8>
            envelope_ += attack_rate_ * (in - envelope_);
 8000ea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eaa:	edd5 6a92 	vldr	s13, [r5, #584]	; 0x248
            hold_count_ = 0;
 8000eae:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8000eb0:	eee6 7a87 	vfma.f32	s15, s13, s14
            hold_count_ = 0;
 8000eb4:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
            envelope_ += attack_rate_ * (in - envelope_);
 8000eb8:	edc5 7a96 	vstr	s15, [r5, #600]	; 0x258
            sample *= duty_gain_;
 8000ebc:	ed94 0a06 	vldr	s0, [r4, #24]
 8000ec0:	ee28 0a00 	vmul.f32	s0, s16, s0
        }
 8000ec4:	ecbd 8b06 	vpop	{d8-d10}
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
            switch (adsr_state_)
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	f63f ae5a 	bhi.w	8000b86 <recorder::SynthEngine::RenderOneSample()+0x2a>
 8000ed2:	e8df f003 	tbb	[pc, r3]
 8000ed6:	3507      	.short	0x3507
 8000ed8:	5321      	.short	0x5321
        }
 8000eda:	ecbd 8b06 	vpop	{d8-d10}
                return 0.0f;
 8000ede:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000f38 <recorder::SynthEngine::RenderOneSample()+0x3dc>
        }
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000ee4:	edd5 7aa8 	vldr	s15, [r5, #672]	; 0x2a0
 8000ee8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000eec:	edd5 6aa2 	vldr	s13, [r5, #648]	; 0x288
                adsr_value_ += increment;
 8000ef0:	edd5 5aa6 	vldr	s11, [r5, #664]	; 0x298
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000ef4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000ef8:	ee86 7a26 	vdiv.f32	s14, s12, s13
                adsr_value_ += increment;
 8000efc:	ee37 7a25 	vadd.f32	s14, s14, s11
                if (adsr_value_ >= 1.0f)
 8000f00:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	f2c0 811b 	blt.w	8001142 <recorder::SynthEngine::RenderOneSample()+0x5e6>
                    adsr_state_ = ADSRState::kDecay;
 8000f0c:	2302      	movs	r3, #2
                    adsr_value_ = 1.0f;
 8000f0e:	ed85 6aa6 	vstr	s12, [r5, #664]	; 0x298
                    adsr_state_ = ADSRState::kDecay;
 8000f12:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 8000f16:	e63b      	b.n	8000b90 <recorder::SynthEngine::RenderOneSample()+0x34>
                adsr_value_ = adsr_sustain_level_;
 8000f18:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000f1c:	edd5 7aa8 	vldr	s15, [r5, #672]	; 0x2a0
                adsr_value_ = adsr_sustain_level_;
 8000f20:	f8c5 3298 	str.w	r3, [r5, #664]	; 0x298
                break;
 8000f24:	e634      	b.n	8000b90 <recorder::SynthEngine::RenderOneSample()+0x34>
 8000f26:	bf00      	nop
 8000f28:	3a83126f 	.word	0x3a83126f
 8000f2c:	3e99999a 	.word	0x3e99999a
 8000f30:	3ecccccd 	.word	0x3ecccccd
 8000f34:	3f666666 	.word	0x3f666666
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	3debc8e3 	.word	0x3debc8e3
                float decrement = (1.0f - adsr_sustain_level_) / (adsr_decay_time_ * sample_rate_);
 8000f40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000f44:	edd5 5aa4 	vldr	s11, [r5, #656]	; 0x290
 8000f48:	edd5 7aa8 	vldr	s15, [r5, #672]	; 0x2a0
 8000f4c:	edd5 6aa3 	vldr	s13, [r5, #652]	; 0x28c
 8000f50:	ee36 6a65 	vsub.f32	s12, s12, s11
                adsr_value_ -= decrement;
 8000f54:	ed95 7aa6 	vldr	s14, [r5, #664]	; 0x298
                float decrement = (1.0f - adsr_sustain_level_) / (adsr_decay_time_ * sample_rate_);
 8000f58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f5c:	ee86 5a26 	vdiv.f32	s10, s12, s13
                adsr_value_ -= decrement;
 8000f60:	ee37 7a45 	vsub.f32	s14, s14, s10
                if (adsr_value_ <= adsr_sustain_level_)
 8000f64:	eef4 5ac7 	vcmpe.f32	s11, s14
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	f2c0 80e9 	blt.w	8001142 <recorder::SynthEngine::RenderOneSample()+0x5e6>
                    adsr_state_ = ADSRState::kSustain;
 8000f70:	2303      	movs	r3, #3
                    adsr_value_ = adsr_sustain_level_;
 8000f72:	edc5 5aa6 	vstr	s11, [r5, #664]	; 0x298
                    adsr_state_ = ADSRState::kSustain;
 8000f76:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 8000f7a:	e609      	b.n	8000b90 <recorder::SynthEngine::RenderOneSample()+0x34>
                float decrement = adsr_sustain_level_ / (adsr_release_time_ * sample_rate_);
 8000f7c:	edd5 7aa8 	vldr	s15, [r5, #672]	; 0x2a0
 8000f80:	edd5 6aa5 	vldr	s13, [r5, #660]	; 0x294
 8000f84:	edd5 5aa4 	vldr	s11, [r5, #656]	; 0x290
 8000f88:	ee67 6aa6 	vmul.f32	s13, s15, s13
                adsr_value_ -= decrement;
 8000f8c:	ed95 7aa6 	vldr	s14, [r5, #664]	; 0x298
            if (filterMode_ == FILTER_MODE_NORMAL)
 8000f90:	f890 31f9 	ldrb.w	r3, [r0, #505]	; 0x1f9
                float decrement = adsr_sustain_level_ / (adsr_release_time_ * sample_rate_);
 8000f94:	ee85 6aa6 	vdiv.f32	s12, s11, s13
                adsr_value_ -= decrement;
 8000f98:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000f9c:	ed85 7aa6 	vstr	s14, [r5, #664]	; 0x298
 8000fa0:	b9f3      	cbnz	r3, 8000fe0 <recorder::SynthEngine::RenderOneSample()+0x484>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8000fa2:	f890 21f8 	ldrb.w	r2, [r0, #504]	; 0x1f8
 8000fa6:	4b7a      	ldr	r3, [pc, #488]	; (8001190 <recorder::SynthEngine::RenderOneSample()+0x634>)
 8000fa8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000fac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8000fb0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8000fb4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8000fb8:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8000fbc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8000fc0:	f8c0 11c8 	str.w	r1, [r0, #456]	; 0x1c8
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8000fc4:	f8c0 21e0 	str.w	r2, [r0, #480]	; 0x1e0
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8000fc8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8000fcc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8000fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8000fd4:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8000fd8:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8000fdc:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
                if (adsr_value_ <= 0.0f)
 8000fe0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
            formantRate_ = rate;
 8000fe4:	4b6b      	ldr	r3, [pc, #428]	; (8001194 <recorder::SynthEngine::RenderOneSample()+0x638>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	f63f adce 	bhi.w	8000b90 <recorder::SynthEngine::RenderOneSample()+0x34>
                    adsr_state_ = ADSRState::kIdle;
 8000ff4:	2300      	movs	r3, #0
                    adsr_value_ = 0.0f;
 8000ff6:	f8c5 2298 	str.w	r2, [r5, #664]	; 0x298
                    adsr_state_ = ADSRState::kIdle;
 8000ffa:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
                    is_note_on_ = false;
 8000ffe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001002:	e5c5      	b.n	8000b90 <recorder::SynthEngine::RenderOneSample()+0x34>
        }
        else if (hold_count_ < hold_samples_)
 8001004:	e9d5 2394 	ldrd	r2, r3, [r5, #592]	; 0x250
 8001008:	4293      	cmp	r3, r2
 800100a:	d279      	bcs.n	8001100 <recorder::SynthEngine::RenderOneSample()+0x5a4>
        {
            hold_count_++;
 800100c:	3301      	adds	r3, #1
 800100e:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
 8001012:	e753      	b.n	8000ebc <recorder::SynthEngine::RenderOneSample()+0x360>
        }
        else
        {
            float t = std::max<float>(db * t_scaler_ + 0.5, 0);
 8001014:	edd5 6a8c 	vldr	s13, [r5, #560]	; 0x230
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001018:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800101c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001020:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	f100 808e 	bmi.w	8001148 <recorder::SynthEngine::RenderOneSample()+0x5ec>
 800102c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001030:	ee30 0a07 	vadd.f32	s0, s0, s14
            return ratio_ * softness_ * t * t;
 8001034:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001038:	ed95 7a8a 	vldr	s14, [r5, #552]	; 0x228
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001044:	e710      	b.n	8000e68 <recorder::SynthEngine::RenderOneSample()+0x30c>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8001046:	eddf 7a54 	vldr	s15, [pc, #336]	; 8001198 <recorder::SynthEngine::RenderOneSample()+0x63c>
        float delay_samples = time * kAudioSampleRate;
 800104a:	eddf 6a54 	vldr	s13, [pc, #336]	; 800119c <recorder::SynthEngine::RenderOneSample()+0x640>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001052:	f8d5 6220 	ldr.w	r6, [r5, #544]	; 0x220
        float delay_samples = time * kAudioSampleRate;
 8001056:	ee67 7aa6 	vmul.f32	s15, s15, s13
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 800105a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 800105e:	ee77 6aa5 	vadd.f32	s13, s15, s11
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8001062:	eeb8 5a46 	vcvt.f32.u32	s10, s12
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001066:	ee16 2a10 	vmov	r2, s12
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 800106a:	eebc 7ae6 	vcvt.u32.f32	s14, s13
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 800106e:	1ab2      	subs	r2, r6, r2
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8001070:	ee17 3a10 	vmov	r3, s14
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8001074:	ee37 7ac5 	vsub.f32	s14, s15, s10
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001078:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800107c:	1af3      	subs	r3, r6, r3
    }

    float AllpassInterpolator(float a, float b, float t)
    {
        if (t == 0)
 800107e:	eeb5 7a40 	vcmp.f32	s14, #0.0
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8001082:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8001086:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 800108a:	edd2 6a88 	vldr	s13, [r2, #544]	; 0x220
        if (t == 0)
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8001092:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001096:	ed93 6a88 	vldr	s12, [r3, #544]	; 0x220
        if (t == 0)
 800109a:	f43f aea6 	beq.w	8000dea <recorder::SynthEngine::RenderOneSample()+0x28e>
        {
            interpolator_history_ = a;
        }
        else
        {
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 800109e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80010a2:	ed95 7a99 	vldr	s14, [r5, #612]	; 0x264
 80010a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80010aa:	ee75 5a85 	vadd.f32	s11, s11, s10
 80010ae:	eef0 6a46 	vmov.f32	s13, s12
 80010b2:	eee5 6a87 	vfma.f32	s13, s11, s14
 80010b6:	e698      	b.n	8000dea <recorder::SynthEngine::RenderOneSample()+0x28e>
        else if (hold_count_ < hold_samples_)
 80010b8:	e9d5 238f 	ldrd	r2, r3, [r5, #572]	; 0x23c
 80010bc:	4293      	cmp	r3, r2
 80010be:	d216      	bcs.n	80010ee <recorder::SynthEngine::RenderOneSample()+0x592>
            hold_count_++;
 80010c0:	3301      	adds	r3, #1
 80010c2:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
 80010c6:	e6bd      	b.n	8000e44 <recorder::SynthEngine::RenderOneSample()+0x2e8>
 80010c8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80010cc:	e684      	b.n	8000dd8 <recorder::SynthEngine::RenderOneSample()+0x27c>
            if (duty_cyclerandomization > 0.0f)
 80010ce:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
 80010d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	dc38      	bgt.n	800114e <recorder::SynthEngine::RenderOneSample()+0x5f2>
                current_dutycycle = base_dutycycle;
 80010dc:	edd4 9a83 	vldr	s19, [r4, #524]	; 0x20c
 80010e0:	edc4 9a85 	vstr	s19, [r4, #532]	; 0x214
                randomizationcounter = randomizationperiod;
 80010e4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80010e8:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 80010ec:	e56d      	b.n	8000bca <recorder::SynthEngine::RenderOneSample()+0x6e>
        }
        else
        {
            envelope_ += decay_rate_ * (in - envelope_);
 80010ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80010f2:	ed95 7a8e 	vldr	s14, [r5, #568]	; 0x238
 80010f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80010fa:	ed85 0a91 	vstr	s0, [r5, #580]	; 0x244
 80010fe:	e6a1      	b.n	8000e44 <recorder::SynthEngine::RenderOneSample()+0x2e8>
 8001100:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001104:	edd5 6a93 	vldr	s13, [r5, #588]	; 0x24c
 8001108:	eee6 7a87 	vfma.f32	s15, s13, s14
 800110c:	edc5 7a96 	vstr	s15, [r5, #600]	; 0x258
 8001110:	e6d4      	b.n	8000ebc <recorder::SynthEngine::RenderOneSample()+0x360>
                t /= dt;
 8001112:	eec0 6a0a 	vdiv.f32	s13, s0, s20
                return t + t - t * t - 1.0f;
 8001116:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800111a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800111e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001122:	eee6 7ac7 	vfms.f32	s15, s13, s14
            sample -= PolyBlep(t, phase_increment);
 8001126:	ee78 8aa7 	vadd.f32	s17, s17, s15
                return t + t - t * t - 1.0f;
 800112a:	e5a7      	b.n	8000c7c <recorder::SynthEngine::RenderOneSample()+0x120>
                t /= dt;
 800112c:	ee80 7a0a 	vdiv.f32	s14, s0, s20
                return t + t - t * t - 1.0f;
 8001130:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            sample += PolyBlep(phase, phase_increment);
 8001134:	ee78 8ac9 	vsub.f32	s17, s17, s18
                return t + t - t * t - 1.0f;
 8001138:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sample += PolyBlep(phase, phase_increment);
 800113c:	eee7 8a27 	vfma.f32	s17, s14, s15
                return t + t - t * t - 1.0f;
 8001140:	e572      	b.n	8000c28 <recorder::SynthEngine::RenderOneSample()+0xcc>
                adsr_value_ -= decrement;
 8001142:	ed85 7aa6 	vstr	s14, [r5, #664]	; 0x298
 8001146:	e523      	b.n	8000b90 <recorder::SynthEngine::RenderOneSample()+0x34>
 8001148:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80011a0 <recorder::SynthEngine::RenderOneSample()+0x644>
 800114c:	e774      	b.n	8001038 <recorder::SynthEngine::RenderOneSample()+0x4dc>
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 800114e:	f006 fdb1 	bl	8007cb4 <rand>
 8001152:	ee07 0a90 	vmov	s15, r0
 8001156:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800115a:	ed9f 5a12 	vldr	s10, [pc, #72]	; 80011a4 <recorder::SynthEngine::RenderOneSample()+0x648>
 800115e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 8001162:	eddf 5a11 	vldr	s11, [pc, #68]	; 80011a8 <recorder::SynthEngine::RenderOneSample()+0x64c>
 8001166:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 800116a:	ed94 0a83 	vldr	s0, [r4, #524]	; 0x20c
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 800116e:	eea6 7a85 	vfma.f32	s14, s13, s10
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001172:	eddf 9a09 	vldr	s19, [pc, #36]	; 8001198 <recorder::SynthEngine::RenderOneSample()+0x63c>
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 8001176:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800117a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80011ac <recorder::SynthEngine::RenderOneSample()+0x650>
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 800117e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001182:	fec0 9a29 	vmaxnm.f32	s19, s0, s19
 8001186:	fec9 9ac6 	vminnm.f32	s19, s19, s12
 800118a:	edc4 9a85 	vstr	s19, [r4, #532]	; 0x214
        }
 800118e:	e7a9      	b.n	80010e4 <recorder::SynthEngine::RenderOneSample()+0x588>
 8001190:	08008784 	.word	0x08008784
 8001194:	3a83126f 	.word	0x3a83126f
 8001198:	3dcccccd 	.word	0x3dcccccd
 800119c:	467a0000 	.word	0x467a0000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	30800000 	.word	0x30800000
 80011a8:	3e99999a 	.word	0x3e99999a
 80011ac:	3f666666 	.word	0x3f666666

080011b0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
            system::Standby();
        }
    }

    const AudioOutput Process(const AudioInput &audio_in, const PotInput &pot)
    {
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ScopedProfilingPin<PROFILE_PROCESS> profile;
        io_.human.in.pot = pot;
        AudioOutput audio_out = {};
 80011b4:	2300      	movs	r3, #0
        io_.human.in.pot = pot;
 80011b6:	4e14      	ldr	r6, [pc, #80]	; (8001208 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x58>)
 80011b8:	468c      	mov	ip, r1
    {
 80011ba:	468e      	mov	lr, r1
        io_.human.in.pot = pot;
 80011bc:	4634      	mov	r4, r6
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80011be:	4f13      	ldr	r7, [pc, #76]	; (800120c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5c>)
    {
 80011c0:	ed2d 8b10 	vpush	{d8-d15}
 80011c4:	b08a      	sub	sp, #40	; 0x28
        AudioOutput audio_out = {};
 80011c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80011ca:	9306      	str	r3, [sp, #24]
 80011cc:	ad04      	add	r5, sp, #16
        io_.human.in.pot = pot;
 80011ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80011d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011dc:	783b      	ldrb	r3, [r7, #0]
 80011de:	f3bf 8f5b 	dmb	ish
        State state = state_.load(std::memory_order_acquire);

        if (state == STATE_SYNTH)
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d014      	beq.n	8001210 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x60>
            float vib = pot[POT_3];
            float formant = pot[POT_2];
            synth_engine_.Process(audio_out[AUDIO_OUT_LINE], button_pressed, pot_value, hold, formant, vib, tune);
        }

        return audio_out;
 80011e6:	ab0a      	add	r3, sp, #40	; 0x28
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e903 0007 	stmdb	r3, {r0, r1, r2}
 80011f0:	ed9d 0a07 	vldr	s0, [sp, #28]
 80011f4:	eddd 0a08 	vldr	s1, [sp, #32]
 80011f8:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
    }
 80011fc:	b00a      	add	sp, #40	; 0x28
 80011fe:	ecbd 8b10 	vpop	{d8-d15}
 8001202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001206:	bf00      	nop
 8001208:	200106cc 	.word	0x200106cc
 800120c:	200106f4 	.word	0x200106f4
        return history_ == (1 << kShift);
    }

    bool level(void)
    {
        return history_ & 1;
 8001210:	4af0      	ldr	r2, [pc, #960]	; (80015d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x424>)
            if (filterMode_ == FILTER_MODE_WAH)
 8001212:	4cf1      	ldr	r4, [pc, #964]	; (80015d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x428>)
 8001214:	4bf1      	ldr	r3, [pc, #964]	; (80015dc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x42c>)
 8001216:	6817      	ldr	r7, [r2, #0]
 8001218:	f894 a1f9 	ldrb.w	sl, [r4, #505]	; 0x1f9
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f007 0701 	and.w	r7, r7, #1
 8001222:	f1ba 0f01 	cmp.w	sl, #1
            bool hold = io_.human.in.sw[SWITCH_LOOP];
 8001226:	f896 9022 	ldrb.w	r9, [r6, #34]	; 0x22
            float pot_value = pot[POT_1];
 800122a:	edde ba00 	vldr	s23, [lr]
 800122e:	f003 0801 	and.w	r8, r3, #1
            float vib = pot[POT_3];
 8001232:	ed9e ca02 	vldr	s24, [lr, #8]
        return level();
    }

    bool is_low(void)
    {
        return !level();
 8001236:	f087 0701 	eor.w	r7, r7, #1
            float formant = pot[POT_2];
 800123a:	ed9e 9a01 	vldr	s18, [lr, #4]
 800123e:	f000 840a 	beq.w	8001a56 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8a6>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 8001242:	ed94 7a6f 	vldr	s14, [r4, #444]	; 0x1bc
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8001246:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800124a:	ed94 6a72 	vldr	s12, [r4, #456]	; 0x1c8
        float alpha = sin_omega / (2.0f * Q_);
 800124e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001252:	edd4 da7b 	vldr	s27, [r4, #492]	; 0x1ec
                a1_ = -2.0f * cos_omega;
 8001256:	eeb8 ba00 	vmov.f32	s22, #128	; 0xc0000000 -2.0
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 800125a:	ee36 6a47 	vsub.f32	s12, s12, s14
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 800125e:	edd4 7a75 	vldr	s15, [r4, #468]	; 0x1d4
 8001262:	edd4 6a78 	vldr	s13, [r4, #480]	; 0x1e0
                    currentFormantFreqs_[i] * freq_mult_,
 8001266:	ed94 da7d 	vldr	s26, [r4, #500]	; 0x1f4
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 800126a:	eea6 7a2d 	vfma.f32	s14, s12, s27
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 800126e:	ed9f eadc 	vldr	s28, [pc, #880]	; 80015e0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x430>
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001272:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001276:	edd4 5a43 	vldr	s11, [r4, #268]	; 0x10c
                    currentFormantQs_[i] * q_mult_);
 800127a:	edd4 ca7c 	vldr	s25, [r4, #496]	; 0x1f0
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 800127e:	ed84 8a46 	vstr	s16, [r4, #280]	; 0x118
                currentFormantQs_[i] += qDiff * formantRate_;
 8001282:	eeed 7aa6 	vfma.f32	s15, s27, s13
        b1_ /= a0_;
 8001286:	eddf 9ade 	vldr	s19, [pc, #888]	; 8001600 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
     */
    void SetDepth(float newDepth)
    {
        // Map from [0,1] to [0,0.25]:
        float mapped = newDepth * 0.25f;
        targetDepth_ = mapped;
 800128a:	4ed6      	ldr	r6, [pc, #856]	; (80015e4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x434>)
                filters_[i].SetParameters(
 800128c:	ee6d 6a07 	vmul.f32	s13, s26, s14
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001290:	ed84 7a6f 	vstr	s14, [r4, #444]	; 0x1bc
                currentFormantQs_[i] += qDiff * formantRate_;
 8001294:	fe89 9a29 	vmaxnm.f32	s18, s18, s19
            wahPosition_ = pos;
 8001298:	fe89 9a48 	vminnm.f32	s18, s18, s16
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 800129c:	ee26 7a8e 	vmul.f32	s14, s13, s28
        centerFrequency_ = centerFrequency;
 80012a0:	edc4 6a44 	vstr	s13, [r4, #272]	; 0x110
                filters_[i].SetParameters(
 80012a4:	ee2c aaa7 	vmul.f32	s20, s25, s15
                currentFormantQs_[i] += qDiff * formantRate_;
 80012a8:	edc4 7a75 	vstr	s15, [r4, #468]	; 0x1d4
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80012ac:	eec7 ea25 	vdiv.f32	s29, s14, s11
        Q_ = Q;
 80012b0:	ed84 aa45 	vstr	s20, [r4, #276]	; 0x114
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80012b4:	eeb0 0a6e 	vmov.f32	s0, s29
 80012b8:	f005 fb9a 	bl	80069f0 <sinf>
 80012bc:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_cosf(__x); }
 80012c0:	eeb0 0a6e 	vmov.f32	s0, s29
 80012c4:	f005 f9f4 	bl	80066b0 <cosf>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 80012c8:	ed94 7a70 	vldr	s14, [r4, #448]	; 0x1c0
        float alpha = sin_omega / (2.0f * Q_);
 80012cc:	ee68 8aaa 	vmul.f32	s17, s17, s21
 80012d0:	edd4 6a73 	vldr	s13, [r4, #460]	; 0x1cc
                a1_ = -2.0f * cos_omega;
 80012d4:	ee20 6a0b 	vmul.f32	s12, s0, s22
        b1_ /= a0_;
 80012d8:	edc4 9a4b 	vstr	s19, [r4, #300]	; 0x12c
 80012dc:	ee76 6ac7 	vsub.f32	s13, s13, s14
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80012e0:	ed84 8a55 	vstr	s16, [r4, #340]	; 0x154
        float alpha = sin_omega / (2.0f * Q_);
 80012e4:	eec8 7a8a 	vdiv.f32	s15, s17, s20
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80012e8:	edd4 8a76 	vldr	s17, [r4, #472]	; 0x1d8
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80012ec:	eead 7aa6 	vfma.f32	s14, s27, s13
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80012f0:	edd4 6a79 	vldr	s13, [r4, #484]	; 0x1e4
 80012f4:	ee76 6ae8 	vsub.f32	s13, s13, s17
                currentFormantQs_[i] += qDiff * formantRate_;
 80012f8:	eeed 8aa6 	vfma.f32	s17, s27, s13
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80012fc:	ed84 7a70 	vstr	s14, [r4, #448]	; 0x1c0
                filters_[i].SetParameters(
 8001300:	ee6d 6a07 	vmul.f32	s13, s26, s14
        centerFrequency_ = centerFrequency;
 8001304:	edc4 6a53 	vstr	s13, [r4, #332]	; 0x14c
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001308:	ee66 6a8e 	vmul.f32	s13, s13, s28
                a0_ = 1.0f + alpha;
 800130c:	ee77 5a88 	vadd.f32	s11, s15, s16
                currentFormantQs_[i] += qDiff * formantRate_;
 8001310:	edc4 8a76 	vstr	s17, [r4, #472]	; 0x1d8
                filters_[i].SetParameters(
 8001314:	ee6c 8aa8 	vmul.f32	s17, s25, s17
 8001318:	ee88 7a25 	vdiv.f32	s14, s16, s11
 800131c:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
        Q_ = Q;
 8001320:	edc4 8a54 	vstr	s17, [r4, #336]	; 0x150
        a1_ /= a0_;
 8001324:	ee26 6a07 	vmul.f32	s12, s12, s14
        b0_ /= a0_;
 8001328:	ee67 5a27 	vmul.f32	s11, s14, s15
        a1_ /= a0_;
 800132c:	ed84 6a48 	vstr	s12, [r4, #288]	; 0x120
                a2_ = 1.0f - alpha;
 8001330:	ee38 6a67 	vsub.f32	s12, s16, s15
        b2_ /= a0_;
 8001334:	ee67 7ac7 	vnmul.f32	s15, s15, s14
        b0_ /= a0_;
 8001338:	edc4 5a4a 	vstr	s11, [r4, #296]	; 0x128
        a2_ /= a0_;
 800133c:	ee26 6a07 	vmul.f32	s12, s12, s14
        b2_ /= a0_;
 8001340:	edc4 7a4c 	vstr	s15, [r4, #304]	; 0x130
        a2_ /= a0_;
 8001344:	ed84 6a49 	vstr	s12, [r4, #292]	; 0x124
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001348:	ed94 6a52 	vldr	s12, [r4, #328]	; 0x148
 800134c:	eec6 ea86 	vdiv.f32	s29, s13, s12
  { return __builtin_sinf(__x); }
 8001350:	eeb0 0a6e 	vmov.f32	s0, s29
 8001354:	f005 fb4c 	bl	80069f0 <sinf>
 8001358:	eeb0 aa40 	vmov.f32	s20, s0
  { return __builtin_cosf(__x); }
 800135c:	eeb0 0a6e 	vmov.f32	s0, s29
 8001360:	f005 f9a6 	bl	80066b0 <cosf>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 8001364:	ed94 5a71 	vldr	s10, [r4, #452]	; 0x1c4
        float alpha = sin_omega / (2.0f * Q_);
 8001368:	ee2a aa2a 	vmul.f32	s20, s20, s21
 800136c:	ed94 7a74 	vldr	s14, [r4, #464]	; 0x1d0
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001370:	edd4 5a77 	vldr	s11, [r4, #476]	; 0x1dc
                a1_ = -2.0f * cos_omega;
 8001374:	ee20 6a0b 	vmul.f32	s12, s0, s22
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 8001378:	ee37 7a45 	vsub.f32	s14, s14, s10
        b1_ /= a0_;
 800137c:	edc4 9a5a 	vstr	s19, [r4, #360]	; 0x168
        float alpha = sin_omega / (2.0f * Q_);
 8001380:	eeca 7a28 	vdiv.f32	s15, s20, s17
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8001384:	ed84 8a64 	vstr	s16, [r4, #400]	; 0x190
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001388:	eea7 5a2d 	vfma.f32	s10, s14, s27
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 800138c:	ed94 7a7a 	vldr	s14, [r4, #488]	; 0x1e8
 8001390:	ee37 7a65 	vsub.f32	s14, s14, s11
                currentFormantQs_[i] += qDiff * formantRate_;
 8001394:	eeed 5a87 	vfma.f32	s11, s27, s14
                filters_[i].SetParameters(
 8001398:	ee25 7a0d 	vmul.f32	s14, s10, s26
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 800139c:	ed84 5a71 	vstr	s10, [r4, #452]	; 0x1c4
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80013a0:	ee67 6a0e 	vmul.f32	s13, s14, s28
        centerFrequency_ = centerFrequency;
 80013a4:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
                a0_ = 1.0f + alpha;
 80013a8:	ee37 7a88 	vadd.f32	s14, s15, s16
                currentFormantQs_[i] += qDiff * formantRate_;
 80013ac:	edc4 5a77 	vstr	s11, [r4, #476]	; 0x1dc
                filters_[i].SetParameters(
 80013b0:	ee65 8aac 	vmul.f32	s17, s11, s25
                a2_ = 1.0f - alpha;
 80013b4:	ee38 5a67 	vsub.f32	s10, s16, s15
 80013b8:	eec8 5a07 	vdiv.f32	s11, s16, s14
                a0_ = 1.0f + alpha;
 80013bc:	ed84 7a56 	vstr	s14, [r4, #344]	; 0x158
        Q_ = Q;
 80013c0:	edc4 8a63 	vstr	s17, [r4, #396]	; 0x18c
        a1_ /= a0_;
 80013c4:	ee26 7a25 	vmul.f32	s14, s12, s11
        b0_ /= a0_;
 80013c8:	ee65 4aa7 	vmul.f32	s9, s11, s15
        b2_ /= a0_;
 80013cc:	ee67 7ae5 	vnmul.f32	s15, s15, s11
        a2_ /= a0_;
 80013d0:	ee65 5a25 	vmul.f32	s11, s10, s11
        a1_ /= a0_;
 80013d4:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
        b0_ /= a0_;
 80013d8:	edc4 4a59 	vstr	s9, [r4, #356]	; 0x164
        b2_ /= a0_;
 80013dc:	edc4 7a5b 	vstr	s15, [r4, #364]	; 0x16c
        a2_ /= a0_;
 80013e0:	edc4 5a58 	vstr	s11, [r4, #352]	; 0x160
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80013e4:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 80013e8:	eec6 caa7 	vdiv.f32	s25, s13, s15
  { return __builtin_sinf(__x); }
 80013ec:	eeb0 0a6c 	vmov.f32	s0, s25
 80013f0:	f005 fafe 	bl	80069f0 <sinf>
 80013f4:	eeb0 aa40 	vmov.f32	s20, s0
  { return __builtin_cosf(__x); }
 80013f8:	eeb0 0a6c 	vmov.f32	s0, s25
 80013fc:	f005 f958 	bl	80066b0 <cosf>
        float mapped = newDepth * 0.25f;
 8001400:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
        float alpha = sin_omega / (2.0f * Q_);
 8001404:	ee2a aa2a 	vmul.f32	s20, s20, s21
            if (freq_select_button && !was_freq_select_button_pressed_)
 8001408:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
                a1_ = -2.0f * cos_omega;
 800140c:	ee20 7a0b 	vmul.f32	s14, s0, s22
        b1_ /= a0_;
 8001410:	edc4 9a69 	vstr	s19, [r4, #420]	; 0x1a4
 8001414:	ee2c ca26 	vmul.f32	s24, s24, s13
            wahPosition_ = pos;
 8001418:	ed84 9a7f 	vstr	s18, [r4, #508]	; 0x1fc
        float alpha = sin_omega / (2.0f * Q_);
 800141c:	eeca 7a28 	vdiv.f32	s15, s20, s17
        targetDepth_ = mapped;
 8001420:	ed86 ca9e 	vstr	s24, [r6, #632]	; 0x278
                a0_ = 1.0f + alpha;
 8001424:	ee77 5a88 	vadd.f32	s11, s15, s16
                a2_ = 1.0f - alpha;
 8001428:	ee38 6a67 	vsub.f32	s12, s16, s15
 800142c:	eec8 6a25 	vdiv.f32	s13, s16, s11
                a0_ = 1.0f + alpha;
 8001430:	edc4 5a65 	vstr	s11, [r4, #404]	; 0x194
        a1_ /= a0_;
 8001434:	ee27 7a26 	vmul.f32	s14, s14, s13
        b0_ /= a0_;
 8001438:	ee67 5aa6 	vmul.f32	s11, s15, s13
        b2_ /= a0_;
 800143c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
        a2_ /= a0_;
 8001440:	ee66 6a26 	vmul.f32	s13, s12, s13
        a1_ /= a0_;
 8001444:	ed84 7a66 	vstr	s14, [r4, #408]	; 0x198
        b0_ /= a0_;
 8001448:	edc4 5a68 	vstr	s11, [r4, #416]	; 0x1a0
        b2_ /= a0_;
 800144c:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8
        a2_ /= a0_;
 8001450:	edc4 6a67 	vstr	s13, [r4, #412]	; 0x19c
 8001454:	2f00      	cmp	r7, #0
 8001456:	f000 81a1 	beq.w	800179c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5ec>
 800145a:	b123      	cbz	r3, 8001466 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2b6>
                if (!is_note_on_)
 800145c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001460:	2b00      	cmp	r3, #0
 8001462:	f040 83d3 	bne.w	8001c0c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa5c>
            adsr_state_ = ADSRState::kAttack;
 8001466:	2301      	movs	r3, #1
            adsr_value_ = 0.0f; // Start from 0
 8001468:	edc6 9aa6 	vstr	s19, [r6, #664]	; 0x298
            adsr_state_ = ADSRState::kAttack;
 800146c:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
            is_note_on_ = true;
 8001470:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            if (filterMode_ == FILTER_MODE_NORMAL)
 8001474:	f1ba 0f00 	cmp.w	sl, #0
 8001478:	d118      	bne.n	80014ac <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2fc>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 800147a:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
 800147e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8001482:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x438>)
 8001484:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001488:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800148a:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 800148e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001490:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8001494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001496:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 800149a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800149c:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80014a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80014a4:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80014a8:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
     *        and begins ramping up to `depth_` with the specified buildup time.
     */
    void Trigger()
    {
        buildingUp_   = true;
        currentDepth_ = 0.0f;
 80014ac:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001600 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
        buildingUp_   = true;
 80014b0:	2301      	movs	r3, #1
        currentDepth_ = 0.0f;
 80014b2:	eef0 7a47 	vmov.f32	s15, s14
 80014b6:	ed86 7aa0 	vstr	s14, [r6, #640]	; 0x280
        buildingUp_   = true;
 80014ba:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    {
        //--------------------------------------------------
        // 1) Smooth "depth_" toward "targetDepth_"
        //--------------------------------------------------
        static constexpr float kDepthSmoothing = 0.02f;  // 2% approach each sample
        float dDiff = targetDepth_ - depth_;
 80014be:	ed96 8a9d 	vldr	s16, [r6, #628]	; 0x274
        depth_ += dDiff * kDepthSmoothing;
 80014c2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80015ec <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x43c>
        float dDiff = targetDepth_ - depth_;
 80014c6:	ee3c ca48 	vsub.f32	s24, s24, s16
            return formant_freq_mult_;
        }

        float mapFloat(float x, float in_min, float in_max, float out_min, float out_max)
        {
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80014ca:	eddf 6a49 	vldr	s13, [pc, #292]	; 80015f0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x440>
 80014ce:	eddf 8a49 	vldr	s17, [pc, #292]	; 80015f4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x444>

        // Keep "depth_" within [0, 0.25] or whatever your max
        if (depth_ < 0.0f)
 80014d2:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8001600 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
        depth_ += dDiff * kDepthSmoothing;
 80014d6:	eeac 8a07 	vfma.f32	s16, s24, s14
 80014da:	eeeb 8aa6 	vfma.f32	s17, s23, s13
        if (depth_ < 0.0f)
 80014de:	eeb4 8ac6 	vcmpe.f32	s16, s12
                fundamentalFreq_ = mapFloat(pot_value, 0.0f, 1.0f, kMinFundamental, kMaxFundamental);
 80014e2:	edc4 8a02 	vstr	s17, [r4, #8]
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	f100 8324 	bmi.w	8001b36 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x986>
            depth_ = 0.0f;
        if (depth_ > 0.25f)
 80014ee:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80014f2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	f340 8375 	ble.w	8001be8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa38>
            depth_ = 0.25f;
 80014fe:	eeb0 8a47 	vmov.f32	s16, s14
 8001502:	ed86 7a9d 	vstr	s14, [r6, #628]	; 0x274
        //    respecting "buildupTime_"
        //--------------------------------------------------
        // We'll compute a per-sample increment factor based on buildupTime_:
        // If buildupTime_ is X seconds, we want to fully go from 0 to 'depth_'
        // in X * sampleRate_ samples => each sample we move an incremental fraction.
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 8001506:	edd6 6a9a 	vldr	s13, [r6, #616]	; 0x268
 800150a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800150e:	ed96 7a9f 	vldr	s14, [r6, #636]	; 0x27c
        // We clamp alpha to something smaller if we want a minimum speed
        // but let's keep it as is for now.

        // If buildingUp_ is true, we definitely ramp up from currentDepth_ toward depth_.
        // But also if depth_ changes in the middle, we still approach it (up or down).
        float cdDiff = depth_ - currentDepth_;
 8001512:	ee38 6a67 	vsub.f32	s12, s16, s15

        // Move a fraction of that difference
        currentDepth_ += cdDiff * alpha;

        // If we're close enough, or we've gone past, we can consider we've "caught up"
        if (std::fabs(cdDiff) < 0.0001f)
 8001516:	eddf 5a38 	vldr	s11, [pc, #224]	; 80015f8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x448>
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 800151a:	ee26 7a87 	vmul.f32	s14, s13, s14
  { return __builtin_fabsf(__x); }
 800151e:	eeb0 5ac6 	vabs.f32	s10, s12
 8001522:	eec4 4a07 	vdiv.f32	s9, s8, s14
        if (std::fabs(cdDiff) < 0.0001f)
 8001526:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        currentDepth_ += cdDiff * alpha;
 800152e:	eee4 7a86 	vfma.f32	s15, s9, s12
 8001532:	edc6 7aa0 	vstr	s15, [r6, #640]	; 0x280
        if (std::fabs(cdDiff) < 0.0001f)
 8001536:	f100 833c 	bmi.w	8001bb2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa02>
            buildingUp_   = false; // We can consider the buildup complete
        }

        // Finally, clamp currentDepth_ so it never goes beyond depth_ in either direction
        // e.g. if depth_ decreased mid-buildup, we want currentDepth_ to smoothly go down.
        if (currentDepth_ < 0.0f)
 800153a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001600 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	f100 82f1 	bmi.w	8001b2c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x97c>
            currentDepth_ = 0.0f;
        if (currentDepth_ > depth_)
 800154a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentDepth_ = depth_;
 8001552:	bf54      	ite	pl
 8001554:	eeb0 8a67 	vmovpl.f32	s16, s15
 8001558:	ed86 8aa0 	vstrmi	s16, [r6, #640]	; 0x280

        //--------------------------------------------------
        // 3) Increment the LFO phase
        //--------------------------------------------------
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 800155c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015e0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x430>
 8001560:	edd6 7a9c 	vldr	s15, [r6, #624]	; 0x270
        phase_ += phaseIncrement;
 8001564:	ed96 6a9b 	vldr	s12, [r6, #620]	; 0x26c
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
        phase_ += phaseIncrement;
 8001570:	ee30 0a06 	vadd.f32	s0, s0, s12
        if (phase_ >= 2.0f * static_cast<float>(M_PI))
 8001574:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            phase_ -= 2.0f * static_cast<float>(M_PI);
 800157c:	bfa8      	it	ge
 800157e:	ee30 0a47 	vsubge.f32	s0, s0, s14
 8001582:	ed86 0a9b 	vstr	s0, [r6, #620]	; 0x26c
  { return __builtin_sinf(__x); }
 8001586:	f005 fa33 	bl	80069f0 <sinf>
        {
            vib *= 0.05f;  // scale down upward range
        }
*/

        float moddedFreq = inputFreq * (1.0f + vib);
 800158a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            float diff = targetFrequency - currentFrequency_;
 800158e:	edd4 7a01 	vldr	s15, [r4, #4]
            currentFrequency_ += diff * freq_rate_;
 8001592:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 8001596:	eea0 7a08 	vfma.f32	s14, s0, s16
            float diff = targetFrequency - currentFrequency_;
 800159a:	eeb0 6a67 	vmov.f32	s12, s15
 800159e:	ee98 6a87 	vfnms.f32	s12, s17, s14
            currentFrequency_ += diff * freq_rate_;
 80015a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80015a6:	edc4 7a01 	vstr	s15, [r4, #4]
            float sample = RenderOneSample();
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x428>)
 80015ac:	f7ff fad6 	bl	8000b5c <recorder::SynthEngine::RenderOneSample()>
        }
    }

    T Process(T in)
    {
        for (int n = 0; n < num_sections_; n++)
 80015b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
            out += sections_[n].b[1] * x_[n][1];
            out += sections_[n].b[2] * x_[n][2];

            // Subtract y state
            out -= sections_[n].a[0] * x_[n+1][0];
            out -= sections_[n].a[1] * x_[n+1][1];
 80015b2:	2101      	movs	r1, #1
            sample *= (kAudioOSFactor * kAudioOutputLevel);
 80015b4:	eddf 7a11 	vldr	s15, [pc, #68]	; 80015fc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x44c>
            out -= sections_[n].a[0] * x_[n+1][0];
 80015b8:	edd4 5a2d 	vldr	s11, [r4, #180]	; 0xb4
            in = out;
        }

        // Shift final section x state
        x_[num_sections_][2] = x_[num_sections_][1];
 80015bc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
            out -= sections_[n].a[1] * x_[n+1][1];
 80015c0:	ed94 6a2e 	vldr	s12, [r4, #184]	; 0xb8
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 80015c4:	2901      	cmp	r1, #1
            sample *= (kAudioOSFactor * kAudioOutputLevel);
 80015c6:	ee20 0a27 	vmul.f32	s0, s0, s15
            out += sections_[n].b[0] * x_[n][0];
 80015ca:	ed94 3a16 	vldr	s6, [r4, #88]	; 0x58
 80015ce:	eef1 5a65 	vneg.f32	s11, s11
 80015d2:	e017      	b.n	8001604 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x454>
 80015d4:	20000420 	.word	0x20000420
 80015d8:	20000428 	.word	0x20000428
 80015dc:	2000041c 	.word	0x2000041c
 80015e0:	40c90fdb 	.word	0x40c90fdb
 80015e4:	20010428 	.word	0x20010428
 80015e8:	08008784 	.word	0x08008784
 80015ec:	3ca3d70a 	.word	0x3ca3d70a
 80015f0:	447d7333 	.word	0x447d7333
 80015f4:	4202cccd 	.word	0x4202cccd
 80015f8:	38d1b717 	.word	0x38d1b717
 80015fc:	40866666 	.word	0x40866666
 8001600:	00000000 	.word	0x00000000
            out += sections_[n].b[1] * x_[n][1];
 8001604:	edd4 3a17 	vldr	s7, [r4, #92]	; 0x5c
 8001608:	eeb1 6a46 	vneg.f32	s12, s12
            out += sections_[n].b[2] * x_[n][2];
 800160c:	ed94 4a18 	vldr	s8, [r4, #96]	; 0x60
            out -= sections_[n].a[0] * x_[n+1][0];
 8001610:	edd4 4a19 	vldr	s9, [r4, #100]	; 0x64
        x_[num_sections_][2] = x_[num_sections_][1];
 8001614:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            out -= sections_[n].a[1] * x_[n+1][1];
 8001618:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 800161c:	4628      	mov	r0, r5
            out += sections_[n].b[0] * x_[n][0];
 800161e:	edd4 0a1b 	vldr	s1, [r4, #108]	; 0x6c
            out += sections_[n].b[1] * x_[n][1];
 8001622:	ed94 1a1c 	vldr	s2, [r4, #112]	; 0x70
            out += sections_[n].b[2] * x_[n][2];
 8001626:	edd4 1a1d 	vldr	s3, [r4, #116]	; 0x74
            out -= sections_[n].a[0] * x_[n+1][0];
 800162a:	ed94 2a1e 	vldr	s4, [r4, #120]	; 0x78
            out -= sections_[n].a[1] * x_[n+1][1];
 800162e:	edd4 2a1f 	vldr	s5, [r4, #124]	; 0x7c
            out += sections_[n].b[0] * x_[n][0];
 8001632:	ed94 aa20 	vldr	s20, [r4, #128]	; 0x80
            out += sections_[n].b[1] * x_[n][1];
 8001636:	edd4 9a21 	vldr	s19, [r4, #132]	; 0x84
            out += sections_[n].b[2] * x_[n][2];
 800163a:	ed94 9a22 	vldr	s18, [r4, #136]	; 0x88
            out -= sections_[n].a[0] * x_[n+1][0];
 800163e:	edd4 8a23 	vldr	s17, [r4, #140]	; 0x8c
            out -= sections_[n].a[1] * x_[n+1][1];
 8001642:	ed94 8a24 	vldr	s16, [r4, #144]	; 0x90
            out += sections_[n].b[0] * x_[n][0];
 8001646:	ed94 da25 	vldr	s26, [r4, #148]	; 0x94
            out += sections_[n].b[1] * x_[n][1];
 800164a:	edd4 ca26 	vldr	s25, [r4, #152]	; 0x98
            out += sections_[n].b[2] * x_[n][2];
 800164e:	ed94 ca27 	vldr	s24, [r4, #156]	; 0x9c
            out -= sections_[n].a[0] * x_[n+1][0];
 8001652:	edd4 ba28 	vldr	s23, [r4, #160]	; 0xa0
            out -= sections_[n].a[1] * x_[n+1][1];
 8001656:	ed94 ba29 	vldr	s22, [r4, #164]	; 0xa4
            out += sections_[n].b[0] * x_[n][0];
 800165a:	edd4 ea2a 	vldr	s29, [r4, #168]	; 0xa8
            out += sections_[n].b[1] * x_[n][1];
 800165e:	ed94 ea2b 	vldr	s28, [r4, #172]	; 0xac
            out += sections_[n].b[2] * x_[n][2];
 8001662:	edd4 da2c 	vldr	s27, [r4, #176]	; 0xb0
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001666:	ed5f aa1a 	vldr	s21, [pc, #-104]	; 8001600 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
 800166a:	f000 8091 	beq.w	8001790 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5e0>
        for (int n = 0; n < num_sections_; n++)
 800166e:	2a00      	cmp	r2, #0
 8001670:	f340 823e 	ble.w	8001af0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x940>
 8001674:	eef0 6a6a 	vmov.f32	s13, s21
 8001678:	edd4 7a30 	vldr	s15, [r4, #192]	; 0xc0
 800167c:	2a01      	cmp	r2, #1
 800167e:	ed94 7a2f 	vldr	s14, [r4, #188]	; 0xbc
            x_[n][2] = x_[n][1];
 8001682:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
            out += sections_[n].b[2] * x_[n][2];
 8001686:	ee64 7a27 	vmul.f32	s15, s8, s15
            out -= sections_[n].a[0] * x_[n+1][0];
 800168a:	ed94 fa32 	vldr	s30, [r4, #200]	; 0xc8
            x_[n][1] = x_[n][0];
 800168e:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8001692:	eee3 7a87 	vfma.f32	s15, s7, s14
            out -= sections_[n].a[1] * x_[n+1][1];
 8001696:	ed94 7a33 	vldr	s14, [r4, #204]	; 0xcc
            x_[n][0] = in;
 800169a:	edc4 6a2f 	vstr	s13, [r4, #188]	; 0xbc
 800169e:	eeef 7a64 	vfms.f32	s15, s30, s9
 80016a2:	eee7 7a45 	vfms.f32	s15, s14, s10
            out -= sections_[n].a[1] * x_[n+1][1];
 80016a6:	eee6 7a83 	vfma.f32	s15, s13, s6
        for (int n = 0; n < num_sections_; n++)
 80016aa:	d05d      	beq.n	8001768 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5b8>
            x_[n][2] = x_[n][1];
 80016ac:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
            out += sections_[n].b[2] * x_[n][2];
 80016b0:	ee21 7a87 	vmul.f32	s14, s3, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 80016b4:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
        for (int n = 0; n < num_sections_; n++)
 80016b8:	2a02      	cmp	r2, #2
            x_[n][1] = x_[n][0];
 80016ba:	ed84 fa33 	vstr	s30, [r4, #204]	; 0xcc
 80016be:	eea1 7a0f 	vfma.f32	s14, s2, s30
            out -= sections_[n].a[1] * x_[n+1][1];
 80016c2:	ed94 fa36 	vldr	s30, [r4, #216]	; 0xd8
            x_[n][0] = in;
 80016c6:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8
 80016ca:	eea6 7ac2 	vfms.f32	s14, s13, s4
 80016ce:	eeaf 7a62 	vfms.f32	s14, s30, s5
            out -= sections_[n].a[1] * x_[n+1][1];
 80016d2:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80016d6:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 80016da:	d045      	beq.n	8001768 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5b8>
            x_[n][2] = x_[n][1];
 80016dc:	ed84 fa37 	vstr	s30, [r4, #220]	; 0xdc
            out += sections_[n].b[2] * x_[n][2];
 80016e0:	ee29 fa0f 	vmul.f32	s30, s18, s30
            x_[n][0] = in;
 80016e4:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
        for (int n = 0; n < num_sections_; n++)
 80016e8:	2a03      	cmp	r2, #3
            out -= sections_[n].a[0] * x_[n+1][0];
 80016ea:	ed94 7a38 	vldr	s14, [r4, #224]	; 0xe0
 80016ee:	eea9 faa6 	vfma.f32	s30, s19, s13
            x_[n][1] = x_[n][0];
 80016f2:	edc4 6a36 	vstr	s13, [r4, #216]	; 0xd8
            out -= sections_[n].a[1] * x_[n+1][1];
 80016f6:	edd4 6a39 	vldr	s13, [r4, #228]	; 0xe4
 80016fa:	eea7 fa68 	vfms.f32	s30, s14, s17
 80016fe:	eea6 fac8 	vfms.f32	s30, s13, s16
 8001702:	eeaa fa27 	vfma.f32	s30, s20, s15
 8001706:	eef0 7a4f 	vmov.f32	s15, s30
        for (int n = 0; n < num_sections_; n++)
 800170a:	d02d      	beq.n	8001768 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5b8>
            x_[n][2] = x_[n][1];
 800170c:	edc4 6a3a 	vstr	s13, [r4, #232]	; 0xe8
            out += sections_[n].b[2] * x_[n][2];
 8001710:	ee6c 6a26 	vmul.f32	s13, s24, s13
            x_[n][1] = x_[n][0];
 8001714:	ed84 7a39 	vstr	s14, [r4, #228]	; 0xe4
        for (int n = 0; n < num_sections_; n++)
 8001718:	2a04      	cmp	r2, #4
            x_[n][0] = in;
 800171a:	ed84 fa38 	vstr	s30, [r4, #224]	; 0xe0
 800171e:	eeec 6a87 	vfma.f32	s13, s25, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8001722:	ed94 7a3b 	vldr	s14, [r4, #236]	; 0xec
            out -= sections_[n].a[1] * x_[n+1][1];
 8001726:	ed94 fa3c 	vldr	s30, [r4, #240]	; 0xf0
 800172a:	eee7 6a6b 	vfms.f32	s13, s14, s23
 800172e:	eeef 6a4b 	vfms.f32	s13, s30, s22
 8001732:	eeed 6a27 	vfma.f32	s13, s26, s15
 8001736:	eef0 7a66 	vmov.f32	s15, s13
        for (int n = 0; n < num_sections_; n++)
 800173a:	d015      	beq.n	8001768 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5b8>
            x_[n][2] = x_[n][1];
 800173c:	ed84 fa3d 	vstr	s30, [r4, #244]	; 0xf4
            out += sections_[n].b[2] * x_[n][2];
 8001740:	ee2d fa8f 	vmul.f32	s30, s27, s30
            x_[n][1] = x_[n][0];
 8001744:	ed84 7a3c 	vstr	s14, [r4, #240]	; 0xf0
            x_[n][0] = in;
 8001748:	edc4 6a3b 	vstr	s13, [r4, #236]	; 0xec
 800174c:	eeae fa07 	vfma.f32	s30, s28, s14
 8001750:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 8001754:	eea5 fa87 	vfma.f32	s30, s11, s14
 8001758:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
 800175c:	eea6 fa07 	vfma.f32	s30, s12, s14
            out -= sections_[n].a[1] * x_[n+1][1];
 8001760:	eeae faa6 	vfma.f32	s30, s29, s13
 8001764:	eef0 7a4f 	vmov.f32	s15, s30
        x_[num_sections_][2] = x_[num_sections_][1];
 8001768:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 800176c:	2903      	cmp	r1, #3
                block[i] = filtered;
 800176e:	edc0 7a00 	vstr	s15, [r0]
 8001772:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
        x_[num_sections_][1] = x_[num_sections_][0];
 8001776:	f8d3 60bc 	ldr.w	r6, [r3, #188]	; 0xbc
        x_[num_sections_][0] = in;
 800177a:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
        x_[num_sections_][1] = x_[num_sections_][0];
 800177e:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001782:	f000 81af 	beq.w	8001ae4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x934>
 8001786:	3101      	adds	r1, #1
 8001788:	3004      	adds	r0, #4
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 800178a:	2901      	cmp	r1, #1
 800178c:	f47f af6f 	bne.w	800166e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4be>
        for (int n = 0; n < num_sections_; n++)
 8001790:	2a00      	cmp	r2, #0
 8001792:	f340 8201 	ble.w	8001b98 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9e8>
 8001796:	eef0 6a40 	vmov.f32	s13, s0
 800179a:	e76d      	b.n	8001678 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4c8>
            else if (!freq_select_button && was_freq_select_button_pressed_)
 800179c:	b12b      	cbz	r3, 80017aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5fa>
            if (adsr_state_ != ADSRState::kIdle)
 800179e:	f8d6 329c 	ldr.w	r3, [r6, #668]	; 0x29c
 80017a2:	b113      	cbz	r3, 80017aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5fa>
                adsr_state_ = ADSRState::kRelease;
 80017a4:	2304      	movs	r3, #4
 80017a6:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
                if (button_pressed && !was_button_pressed_)
 80017aa:	f1b8 0f00 	cmp.w	r8, #0
 80017ae:	f000 81a2 	beq.w	8001af6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x946>
 80017b2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 81ae 	bne.w	8001b18 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x968>
                    if (hold)
 80017bc:	f1b9 0f00 	cmp.w	r9, #0
 80017c0:	d008      	beq.n	80017d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x624>
                        is_note_on_ = !is_note_on_;
 80017c2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80017c6:	f083 0301 	eor.w	r3, r3, #1
 80017ca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                        if (is_note_on_)
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8199 	beq.w	8001b06 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x956>
            adsr_state_ = ADSRState::kAttack;
 80017d4:	2301      	movs	r3, #1
 80017d6:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
            is_note_on_ = true;
 80017da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            adsr_value_ = 0.0f; // Start from 0
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c6 3298 	str.w	r3, [r6, #664]	; 0x298
            if (filterMode_ == FILTER_MODE_NORMAL)
 80017e4:	f1ba 0f00 	cmp.w	sl, #0
 80017e8:	d118      	bne.n	800181c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x66c>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80017ea:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
 80017ee:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 80017f2:	4be0      	ldr	r3, [pc, #896]	; (8001b74 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9c4>)
 80017f4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80017f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017fa:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80017fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001800:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8001804:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001806:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 800180a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800180c:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001810:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001814:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001818:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        buildingUp_   = true;
 800181c:	2301      	movs	r3, #1
 800181e:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
        currentDepth_ = 0.0f;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c6 3280 	str.w	r3, [r6, #640]	; 0x280
            if (pot_value < kThresholds[0])
 8001828:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 800182c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	f100 81c8 	bmi.w	8001bc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa18>
            else if (pot_value >= kThresholds[kNumThresholds - 1])
 8001838:	eef6 7a0c 	vmov.f32	s15, #108	; 0x3f600000  0.875
 800183c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	f280 81cb 	bge.w	8001bde <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa2e>
                if (pot_value < kThresholds[i])
 8001848:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800184c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001854:	f100 81d1 	bmi.w	8001bfa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa4a>
 8001858:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 800185c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	f100 81c6 	bmi.w	8001bf4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa44>
 8001868:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800186c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	f100 81c7 	bmi.w	8001c06 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa56>
 8001878:	eef6 7a04 	vmov.f32	s15, #100	; 0x3f200000  0.625
 800187c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	f100 81bc 	bmi.w	8001c00 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa50>
 8001888:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
            for (int i = 1; i < kNumThresholds; i++)
 800188c:	eef4 bae7 	vcmpe.f32	s23, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	bf4c      	ite	mi
 8001896:	f04f 0905 	movmi.w	r9, #5
 800189a:	f04f 0906 	movpl.w	r9, #6
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 800189e:	4bb6      	ldr	r3, [pc, #728]	; (8001b78 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9c8>)
 80018a0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80018a4:	ed93 8a00 	vldr	s16, [r3]
            if (targetIndex != previousTargetIndex_)
 80018a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018aa:	454b      	cmp	r3, r9
 80018ac:	d03d      	beq.n	800192a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x77a>
                int randomVoice = std::rand() % 3;
 80018ae:	f006 fa01 	bl	8007cb4 <rand>
 80018b2:	4bb2      	ldr	r3, [pc, #712]	; (8001b7c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9cc>)
 80018b4:	fb83 2300 	smull	r2, r3, r3, r0
 80018b8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80018bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018c0:	1ac0      	subs	r0, r0, r3
            if (voice < 0 || voice >= VOICE_COUNT)
 80018c2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
            currentVoice_ = voice;
 80018c6:	bf08      	it	eq
 80018c8:	f884 01f8 	strbeq.w	r0, [r4, #504]	; 0x1f8
            int randomIndex = std::rand() % numVowels;
 80018cc:	f006 f9f2 	bl	8007cb4 <rand>
            if (filterMode_ == FILTER_MODE_NORMAL)
 80018d0:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
 80018d4:	bb3b      	cbnz	r3, 8001926 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x776>
 80018d6:	4aaa      	ldr	r2, [pc, #680]	; (8001b80 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d0>)
 80018d8:	fb82 3200 	smull	r3, r2, r2, r0
 80018dc:	17c3      	asrs	r3, r0, #31
 80018de:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80018e2:	f894 21f8 	ldrb.w	r2, [r4, #504]	; 0x1f8
 80018e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018ea:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80018ee:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80018fe:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9c4>)
 8001900:	4413      	add	r3, r2
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800191a:	691a      	ldr	r2, [r3, #16]
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 800191c:	695b      	ldr	r3, [r3, #20]
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800191e:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001922:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
                previousTargetIndex_ = targetIndex;
 8001926:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 800192a:	edd4 8a02 	vldr	s17, [r4, #8]
 800192e:	edd4 7a07 	vldr	s15, [r4, #28]
            if (offsetCounter_ <= 0 ||
 8001932:	6963      	ldr	r3, [r4, #20]
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 8001934:	ee68 8aa7 	vmul.f32	s17, s17, s15
            if (offsetCounter_ <= 0 ||
 8001938:	2b00      	cmp	r3, #0
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 800193a:	ee68 8a88 	vmul.f32	s17, s17, s16
            if (offsetCounter_ <= 0 ||
 800193e:	f340 80ff 	ble.w	8001b40 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x990>
                std::abs(currentFrequency_ - (baseTargetFrequency + targetFrequencyOffset_)) < frequencyMargin_)
 8001942:	ed94 9a01 	vldr	s18, [r4, #4]
 8001946:	edd4 7a03 	vldr	s15, [r4, #12]
            if (offsetCounter_ <= 0 ||
 800194a:	edd4 6a04 	vldr	s13, [r4, #16]
                std::abs(currentFrequency_ - (baseTargetFrequency + targetFrequencyOffset_)) < frequencyMargin_)
 800194e:	ee39 7a67 	vsub.f32	s14, s18, s15
 8001952:	ee37 7a68 	vsub.f32	s14, s14, s17
 8001956:	eeb0 7ac7 	vabs.f32	s14, s14
            if (offsetCounter_ <= 0 ||
 800195a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	f100 80ed 	bmi.w	8001b40 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x990>
            offsetCounter_--;
 8001966:	3b01      	subs	r3, #1
        float dDiff = targetDepth_ - depth_;
 8001968:	ed96 8a9d 	vldr	s16, [r6, #628]	; 0x274
            float targetFrequency = baseTargetFrequency + targetFrequencyOffset_;
 800196c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8001970:	ed96 7a9e 	vldr	s14, [r6, #632]	; 0x278
        depth_ += dDiff * kDepthSmoothing;
 8001974:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001b84 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d4>
        float dDiff = targetDepth_ - depth_;
 8001978:	ee77 7a48 	vsub.f32	s15, s14, s16
        if (depth_ < 0.0f)
 800197c:	ed9f 6a82 	vldr	s12, [pc, #520]	; 8001b88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d8>
            offsetCounter_--;
 8001980:	6163      	str	r3, [r4, #20]
        depth_ += dDiff * kDepthSmoothing;
 8001982:	eea7 8aa6 	vfma.f32	s16, s15, s13
        if (depth_ < 0.0f)
 8001986:	eeb4 8ac6 	vcmpe.f32	s16, s12
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	f100 8116 	bmi.w	8001bbe <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa0e>
        if (depth_ > 0.25f)
 8001992:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8001996:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	f340 8126 	ble.w	8001bee <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa3e>
            depth_ = 0.25f;
 80019a2:	eeb0 8a67 	vmov.f32	s16, s15
 80019a6:	edc6 7a9d 	vstr	s15, [r6, #628]	; 0x274
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80019aa:	edd6 6a9a 	vldr	s13, [r6, #616]	; 0x268
 80019ae:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80019b2:	ed96 7a9f 	vldr	s14, [r6, #636]	; 0x27c
        float cdDiff = depth_ - currentDepth_;
 80019b6:	edd6 7aa0 	vldr	s15, [r6, #640]	; 0x280
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80019ba:	ee26 7a87 	vmul.f32	s14, s13, s14
        if (std::fabs(cdDiff) < 0.0001f)
 80019be:	eddf 5a73 	vldr	s11, [pc, #460]	; 8001b8c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9dc>
        float cdDiff = depth_ - currentDepth_;
 80019c2:	ee38 6a67 	vsub.f32	s12, s16, s15
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80019c6:	ee84 5a87 	vdiv.f32	s10, s9, s14
  { return __builtin_fabsf(__x); }
 80019ca:	eeb0 7ac6 	vabs.f32	s14, s12
        if (std::fabs(cdDiff) < 0.0001f)
 80019ce:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        currentDepth_ += cdDiff * alpha;
 80019d6:	eee5 7a06 	vfma.f32	s15, s10, s12
 80019da:	edc6 7aa0 	vstr	s15, [r6, #640]	; 0x280
        if (std::fabs(cdDiff) < 0.0001f)
 80019de:	f100 80f8 	bmi.w	8001bd2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa22>
        if (currentDepth_ < 0.0f)
 80019e2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d8>
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d503      	bpl.n	80019f8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x848>
            currentDepth_ = 0.0f;
 80019f0:	eef0 7a47 	vmov.f32	s15, s14
 80019f4:	ed86 7aa0 	vstr	s14, [r6, #640]	; 0x280
        if (currentDepth_ > depth_)
 80019f8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentDepth_ = depth_;
 8001a00:	bfd4      	ite	le
 8001a02:	eeb0 8a67 	vmovle.f32	s16, s15
 8001a06:	ed86 8aa0 	vstrgt	s16, [r6, #640]	; 0x280
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 8001a0a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001b90 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9e0>
 8001a0e:	edd6 7a9c 	vldr	s15, [r6, #624]	; 0x270
        phase_ += phaseIncrement;
 8001a12:	ed96 6a9b 	vldr	s12, [r6, #620]	; 0x26c
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 8001a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1a:	ee87 0aa6 	vdiv.f32	s0, s15, s13
        phase_ += phaseIncrement;
 8001a1e:	ee30 0a06 	vadd.f32	s0, s0, s12
        if (phase_ >= 2.0f * static_cast<float>(M_PI))
 8001a22:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            phase_ -= 2.0f * static_cast<float>(M_PI);
 8001a2a:	bfa8      	it	ge
 8001a2c:	ee30 0a47 	vsubge.f32	s0, s0, s14
 8001a30:	ed86 0a9b 	vstr	s0, [r6, #620]	; 0x26c
  { return __builtin_sinf(__x); }
 8001a34:	f004 ffdc 	bl	80069f0 <sinf>
        float moddedFreq = inputFreq * (1.0f + vib);
 8001a38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            float diff = targetFrequency - currentFrequency_;
 8001a3c:	eef0 6a49 	vmov.f32	s13, s18
            currentFrequency_ += diff * freq_rate_;
 8001a40:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8001a44:	eee0 7a08 	vfma.f32	s15, s0, s16
            float diff = targetFrequency - currentFrequency_;
 8001a48:	eed8 6aa7 	vfnms.f32	s13, s17, s15
            currentFrequency_ += diff * freq_rate_;
 8001a4c:	eea6 9a87 	vfma.f32	s18, s13, s14
 8001a50:	ed84 9a01 	vstr	s18, [r4, #4]
        }
 8001a54:	e5a9      	b.n	80015aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3fa>
                const auto &vowelA = vowelData[currentVoice_][VOWEL_A];
 8001a56:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001a5a:	edd4 7a7f 	vldr	s15, [r4, #508]	; 0x1fc
 8001a5e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9c4>)
 8001a64:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001a68:	edd3 4a18 	vldr	s9, [r3, #96]	; 0x60
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001a6c:	ed93 5a19 	vldr	s10, [r3, #100]	; 0x64
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001a70:	edd3 5a1a 	vldr	s11, [r3, #104]	; 0x68
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001a74:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001a78:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001a7c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001a80:	edd3 1a24 	vldr	s3, [r3, #144]	; 0x90
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001a84:	ed93 2a25 	vldr	s4, [r3, #148]	; 0x94
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001a88:	edd3 2a26 	vldr	s5, [r3, #152]	; 0x98
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001a8c:	ee71 1ae4 	vsub.f32	s3, s3, s9
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001a90:	ed93 3a27 	vldr	s6, [r3, #156]	; 0x9c
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001a94:	ee32 2a45 	vsub.f32	s4, s4, s10
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001a98:	edd3 3a28 	vldr	s7, [r3, #160]	; 0xa0
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001a9c:	ee72 2ae5 	vsub.f32	s5, s5, s11
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001aa0:	ed93 4a29 	vldr	s8, [r3, #164]	; 0xa4
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001aa4:	ee33 3a46 	vsub.f32	s6, s6, s12
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001aa8:	ee73 3ae6 	vsub.f32	s7, s7, s13
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001aac:	ee34 4a47 	vsub.f32	s8, s8, s14
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001ab0:	eee7 4aa1 	vfma.f32	s9, s15, s3
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001ab4:	eea7 5a82 	vfma.f32	s10, s15, s4
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001ab8:	eee7 5aa2 	vfma.f32	s11, s15, s5
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001abc:	eea7 6a83 	vfma.f32	s12, s15, s6
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001ac0:	eee7 6aa3 	vfma.f32	s13, s15, s7
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001ac4:	eea7 7a84 	vfma.f32	s14, s15, s8
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001ac8:	edc4 4a72 	vstr	s9, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001acc:	ed84 5a73 	vstr	s10, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001ad0:	edc4 5a74 	vstr	s11, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 8001ad4:	ed84 6a78 	vstr	s12, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001ad8:	edc4 6a79 	vstr	s13, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001adc:	ed84 7a7a 	vstr	s14, [r4, #488]	; 0x1e8
 8001ae0:	f7ff bbaf 	b.w	8001242 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x92>
            was_button_pressed_ = button_pressed;
 8001ae4:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
            was_freq_select_button_pressed_ = freq_select_button;
 8001ae8:	f884 7049 	strb.w	r7, [r4, #73]	; 0x49
        }
 8001aec:	f7ff bb7b 	b.w	80011e6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x36>
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001af0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001b88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d8>
 8001af4:	e638      	b.n	8001768 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5b8>
                else if (!hold && !button_pressed && was_button_pressed_)
 8001af6:	f1b9 0f00 	cmp.w	r9, #0
 8001afa:	d111      	bne.n	8001b20 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x970>
 8001afc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f43f ad52 	beq.w	80015aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3fa>
            if (adsr_state_ != ADSRState::kIdle)
 8001b06:	f8d6 329c 	ldr.w	r3, [r6, #668]	; 0x29c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f43f ad4d 	beq.w	80015aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3fa>
                adsr_state_ = ADSRState::kRelease;
 8001b10:	2304      	movs	r3, #4
 8001b12:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
 8001b16:	e548      	b.n	80015aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3fa>
                if ((hold && is_note_on_) || (!hold && button_pressed))
 8001b18:	f1b9 0f00 	cmp.w	r9, #0
 8001b1c:	f43f ae84 	beq.w	8001828 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x678>
 8001b20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f ae7f 	bne.w	8001828 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x678>
 8001b2a:	e53e      	b.n	80015aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3fa>
            currentDepth_ = 0.0f;
 8001b2c:	eef0 7a47 	vmov.f32	s15, s14
 8001b30:	ed86 7aa0 	vstr	s14, [r6, #640]	; 0x280
 8001b34:	e509      	b.n	800154a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x39a>
            depth_ = 0.0f;
 8001b36:	eeb0 8a46 	vmov.f32	s16, s12
 8001b3a:	ed86 6a9d 	vstr	s12, [r6, #628]	; 0x274
        if (depth_ > 0.25f)
 8001b3e:	e4e2      	b.n	8001506 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x356>
                float maxOffset = baseTargetFrequency * freq_wobbliness_;
 8001b40:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001b44:	ee28 8aa7 	vmul.f32	s16, s17, s15
                    ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f) * maxOffset;
 8001b48:	f006 f8b4 	bl	8007cb4 <rand>
 8001b4c:	ee07 0a90 	vmov	s15, r0
 8001b50:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001b94 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9e4>
            float diff = targetFrequency - currentFrequency_;
 8001b54:	ed94 9a01 	vldr	s18, [r4, #4]
 8001b58:	f240 33e7 	movw	r3, #999	; 0x3e7
                    ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f) * maxOffset;
 8001b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001b64:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001b68:	ee68 7a27 	vmul.f32	s15, s16, s15
                targetFrequencyOffset_ =
 8001b6c:	edc4 7a03 	vstr	s15, [r4, #12]
                offsetCounter_ = 1000;
 8001b70:	e6fa      	b.n	8001968 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7b8>
 8001b72:	bf00      	nop
 8001b74:	08008784 	.word	0x08008784
 8001b78:	08008764 	.word	0x08008764
 8001b7c:	55555556 	.word	0x55555556
 8001b80:	66666667 	.word	0x66666667
 8001b84:	3ca3d70a 	.word	0x3ca3d70a
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	38d1b717 	.word	0x38d1b717
 8001b90:	40c90fdb 	.word	0x40c90fdb
 8001b94:	30800000 	.word	0x30800000
        x_[num_sections_][2] = x_[num_sections_][1];
 8001b98:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
                block[i] = filtered;
 8001b9c:	ed80 0a00 	vstr	s0, [r0]
 8001ba0:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
        x_[num_sections_][1] = x_[num_sections_][0];
 8001ba4:	f8d3 60bc 	ldr.w	r6, [r3, #188]	; 0xbc
        x_[num_sections_][0] = in;
 8001ba8:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
        x_[num_sections_][1] = x_[num_sections_][0];
 8001bac:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
 8001bb0:	e5e9      	b.n	8001786 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x5d6>
            buildingUp_   = false; // We can consider the buildup complete
 8001bb2:	2300      	movs	r3, #0
            currentDepth_ = depth_;
 8001bb4:	ed86 8aa0 	vstr	s16, [r6, #640]	; 0x280
            buildingUp_   = false; // We can consider the buildup complete
 8001bb8:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
        if (currentDepth_ < 0.0f)
 8001bbc:	e4ce      	b.n	800155c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ac>
            depth_ = 0.0f;
 8001bbe:	eeb0 8a46 	vmov.f32	s16, s12
 8001bc2:	ed86 6a9d 	vstr	s12, [r6, #628]	; 0x274
        if (depth_ > 0.25f)
 8001bc6:	e6f0      	b.n	80019aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7fa>
 8001bc8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                return 0;
 8001bcc:	f04f 0900 	mov.w	r9, #0
 8001bd0:	e66a      	b.n	80018a8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6f8>
            buildingUp_   = false; // We can consider the buildup complete
 8001bd2:	2300      	movs	r3, #0
            currentDepth_ = depth_;
 8001bd4:	ed86 8aa0 	vstr	s16, [r6, #640]	; 0x280
            buildingUp_   = false; // We can consider the buildup complete
 8001bd8:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
        if (currentDepth_ < 0.0f)
 8001bdc:	e715      	b.n	8001a0a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x85a>
 8001bde:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
                return kNumNotes - 1;
 8001be2:	f04f 0907 	mov.w	r9, #7
 8001be6:	e65f      	b.n	80018a8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6f8>
        depth_ += dDiff * kDepthSmoothing;
 8001be8:	ed86 8a9d 	vstr	s16, [r6, #628]	; 0x274
 8001bec:	e48b      	b.n	8001506 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x356>
 8001bee:	ed86 8a9d 	vstr	s16, [r6, #628]	; 0x274
 8001bf2:	e6da      	b.n	80019aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7fa>
            for (int i = 1; i < kNumThresholds; i++)
 8001bf4:	f04f 0902 	mov.w	r9, #2
 8001bf8:	e651      	b.n	800189e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6ee>
 8001bfa:	f04f 0901 	mov.w	r9, #1
 8001bfe:	e64e      	b.n	800189e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6ee>
 8001c00:	f04f 0904 	mov.w	r9, #4
 8001c04:	e64b      	b.n	800189e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6ee>
 8001c06:	f04f 0903 	mov.w	r9, #3
 8001c0a:	e648      	b.n	800189e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6ee>
        float cdDiff = depth_ - currentDepth_;
 8001c0c:	edd6 7aa0 	vldr	s15, [r6, #640]	; 0x280
 8001c10:	e455      	b.n	80014be <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30e>
 8001c12:	bf00      	nop

08001c14 <recorder::StateMachine(bool)>:
        invert_ = invert;
    }

    uint32_t Read(void)
    {
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c14:	4bbd      	ldr	r3, [pc, #756]	; (8001f0c <recorder::StateMachine(bool)+0x2f8>)
    {
 8001c16:	b570      	push	{r4, r5, r6, lr}
 8001c18:	e9d3 1500 	ldrd	r1, r5, [r3]

        if (invert_)
 8001c1c:	7a1a      	ldrb	r2, [r3, #8]
 8001c1e:	4604      	mov	r4, r0
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c20:	6909      	ldr	r1, [r1, #16]
 8001c22:	40e9      	lsrs	r1, r5
 8001c24:	f001 0101 	and.w	r1, r1, #1
        if (invert_)
 8001c28:	b10a      	cbz	r2, 8001c2e <recorder::StateMachine(bool)+0x1a>
        {
            pin ^= 1;
 8001c2a:	f081 0101 	eor.w	r1, r1, #1
        state_ = initial_state;
    }

    T Process(T in)
    {
        if (in != history_)
 8001c2e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8001c32:	428a      	cmp	r2, r1
 8001c34:	f000 8184 	beq.w	8001f40 <recorder::StateMachine(bool)+0x32c>
        {
            count_ = 0;
 8001c38:	2200      	movs	r2, #0
 8001c3a:	665a      	str	r2, [r3, #100]	; 0x64
                state_ = in;
            }
        }

        history_ = in;
        return state_;
 8001c3c:	f893 c069 	ldrb.w	ip, [r3, #105]	; 0x69
        history_ = in;
 8001c40:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    {
        for (uint32_t i = 0; i < NUM_SWITCHES; i++)
        {
            if (kEnableReverse || i != SWITCH_REVERSE)
            {
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8001c44:	49b2      	ldr	r1, [pc, #712]	; (8001f10 <recorder::StateMachine(bool)+0x2fc>)
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c46:	e9d3 2003 	ldrd	r2, r0, [r3, #12]
 8001c4a:	6912      	ldr	r2, [r2, #16]
 8001c4c:	f881 c020 	strb.w	ip, [r1, #32]
 8001c50:	40c2      	lsrs	r2, r0
        if (invert_)
 8001c52:	7d18      	ldrb	r0, [r3, #20]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c54:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001c58:	b108      	cbz	r0, 8001c5e <recorder::StateMachine(bool)+0x4a>
            pin ^= 1;
 8001c5a:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001c5e:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8001c62:	4290      	cmp	r0, r2
 8001c64:	f000 8143 	beq.w	8001eee <recorder::StateMachine(bool)+0x2da>
            count_ = 0;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	6718      	str	r0, [r3, #112]	; 0x70
        history_ = in;
 8001c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001c70:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c74:	69d8      	ldr	r0, [r3, #28]
 8001c76:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001c7a:	699a      	ldr	r2, [r3, #24]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c7c:	6912      	ldr	r2, [r2, #16]
 8001c7e:	40c2      	lsrs	r2, r0
        if (invert_)
 8001c80:	f893 0020 	ldrb.w	r0, [r3, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001c84:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001c88:	b108      	cbz	r0, 8001c8e <recorder::StateMachine(bool)+0x7a>
            pin ^= 1;
 8001c8a:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001c8e:	f893 0080 	ldrb.w	r0, [r3, #128]	; 0x80
 8001c92:	4290      	cmp	r0, r2
 8001c94:	f000 811c 	beq.w	8001ed0 <recorder::StateMachine(bool)+0x2bc>
            count_ = 0;
 8001c98:	2000      	movs	r0, #0
 8001c9a:	67d8      	str	r0, [r3, #124]	; 0x7c
        history_ = in;
 8001c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001ca0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ca4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ca6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001cac:	6912      	ldr	r2, [r2, #16]
 8001cae:	40c2      	lsrs	r2, r0
        if (invert_)
 8001cb0:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001cb4:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001cb8:	b108      	cbz	r0, 8001cbe <recorder::StateMachine(bool)+0xaa>
            pin ^= 1;
 8001cba:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001cbe:	f893 008c 	ldrb.w	r0, [r3, #140]	; 0x8c
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	f000 80f2 	beq.w	8001eac <recorder::StateMachine(bool)+0x298>
            count_ = 0;
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
        history_ = in;
 8001cce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001cd4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001cd6:	6912      	ldr	r2, [r2, #16]
        return state_;
 8001cd8:	f893 e08d 	ldrb.w	lr, [r3, #141]	; 0x8d
 8001cdc:	40c2      	lsrs	r2, r0
        if (invert_)
 8001cde:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8001ce2:	f881 e023 	strb.w	lr, [r1, #35]	; 0x23
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ce6:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001cea:	b108      	cbz	r0, 8001cf0 <recorder::StateMachine(bool)+0xdc>
            pin ^= 1;
 8001cec:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001cf0:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8001cf4:	4290      	cmp	r0, r2
 8001cf6:	f000 80c7 	beq.w	8001e88 <recorder::StateMachine(bool)+0x274>
            count_ = 0;
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
        history_ = in;
 8001d00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001d06:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001d08:	6912      	ldr	r2, [r2, #16]
 8001d0a:	40c2      	lsrs	r2, r0
 8001d0c:	f893 0099 	ldrb.w	r0, [r3, #153]	; 0x99
 8001d10:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8001d14:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001d18:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8001d1c:	b108      	cbz	r0, 8001d22 <recorder::StateMachine(bool)+0x10e>
            pin ^= 1;
 8001d1e:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001d22:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
 8001d26:	4290      	cmp	r0, r2
 8001d28:	f000 809c 	beq.w	8001e64 <recorder::StateMachine(bool)+0x250>
            count_ = 0;
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
        history_ = in;
 8001d32:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001d38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d3a:	6912      	ldr	r2, [r2, #16]
 8001d3c:	40c2      	lsrs	r2, r0
 8001d3e:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 8001d42:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
 8001d46:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001d4a:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8001d4e:	b108      	cbz	r0, 8001d54 <recorder::StateMachine(bool)+0x140>
            pin ^= 1;
 8001d50:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001d54:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
 8001d58:	4290      	cmp	r0, r2
 8001d5a:	d073      	beq.n	8001e44 <recorder::StateMachine(bool)+0x230>
            count_ = 0;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
        history_ = in;
 8001d62:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
            }
        }

        for (uint32_t i = 0; i < NUM_DETECTS; i++)
        {
            in.detect[i] = kEnableLineIn &&
 8001d66:	2000      	movs	r0, #0
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8001d68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
        history_ = (history_ << kShift) | level;
 8001d6c:	4a69      	ldr	r2, [pc, #420]	; (8001f14 <recorder::StateMachine(bool)+0x300>)
 8001d6e:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8001d72:	6813      	ldr	r3, [r2, #0]
            in.detect[i] = kEnableLineIn &&
 8001d74:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
 8001d78:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8001d7c:	4966      	ldr	r1, [pc, #408]	; (8001f18 <recorder::StateMachine(bool)+0x304>)
 8001d7e:	4d67      	ldr	r5, [pc, #412]	; (8001f1c <recorder::StateMachine(bool)+0x308>)
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	680a      	ldr	r2, [r1, #0]
 8001d84:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8001d88:	600a      	str	r2, [r1, #0]
 8001d8a:	782a      	ldrb	r2, [r5, #0]
        if (state == STATE_IDLE)
 8001d8c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001d90:	bba2      	cbnz	r2, 8001dfc <recorder::StateMachine(bool)+0x1e8>
            if (play_button_.is_high())
 8001d92:	07db      	lsls	r3, r3, #31
 8001d94:	d543      	bpl.n	8001e1e <recorder::StateMachine(bool)+0x20a>
        return state_ == STATE_STOPPED;
    }

    void Start(bool enable_amplifier)
    {
        if (state_ == STATE_STOPPED)
 8001d96:	4e62      	ldr	r6, [pc, #392]	; (8001f20 <recorder::StateMachine(bool)+0x30c>)
 8001d98:	f896 3160 	ldrb.w	r3, [r6, #352]	; 0x160
 8001d9c:	b9bb      	cbnz	r3, 8001dce <recorder::StateMachine(bool)+0x1ba>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8001d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da2:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <recorder::StateMachine(bool)+0x310>)
        {
            state_ = STATE_STARTING;
            fade_position_ = 0;
 8001da4:	2300      	movs	r3, #0
            cue_stop_ = false;

            boost_enable_.Set();
            amp_enable_.Write(enable_amplifier);

            dac_.Start();
 8001da6:	f506 70aa 	add.w	r0, r6, #340	; 0x154
 8001daa:	6191      	str	r1, [r2, #24]
 8001dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            fade_position_ = 0;
 8001db0:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
            state_ = STATE_STARTING;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8a6 3160 	strh.w	r3, [r6, #352]	; 0x160
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <recorder::StateMachine(bool)+0x314>)
 8001dbc:	619a      	str	r2, [r3, #24]
            dac_.Start();
 8001dbe:	f001 fc5f 	bl	8003680 <recorder::Dac::Start()>
            adc_.Start();
 8001dc2:	1d30      	adds	r0, r6, #4
 8001dc4:	f001 f982 	bl	80030cc <recorder::Adc::Start()>
            StartTimer();
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f001 fc45 	bl	8003658 <recorder::Analog::StartTimer()>
        printf("State: ");
 8001dce:	4857      	ldr	r0, [pc, #348]	; (8001f2c <recorder::StateMachine(bool)+0x318>)
 8001dd0:	f005 feb4 	bl	8007b3c <iprintf>
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f3bf 8f5b 	dmb	ish
 8001dda:	702b      	strb	r3, [r5, #0]
 8001ddc:	f3bf 8f5b 	dmb	ish
            if (standby)
 8001de0:	b15c      	cbz	r4, 8001dfa <recorder::StateMachine(bool)+0x1e6>
        printf("State: ");
 8001de2:	4852      	ldr	r0, [pc, #328]	; (8001f2c <recorder::StateMachine(bool)+0x318>)
 8001de4:	f005 feaa 	bl	8007b3c <iprintf>
            printf("STANDBY\n");
 8001de8:	4851      	ldr	r0, [pc, #324]	; (8001f30 <recorder::StateMachine(bool)+0x31c>)
 8001dea:	f005 ff2d 	bl	8007c48 <puts>
 8001dee:	230a      	movs	r3, #10
 8001df0:	f3bf 8f5b 	dmb	ish
 8001df4:	702b      	strb	r3, [r5, #0]
 8001df6:	f3bf 8f5b 	dmb	ish
    }
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
        else if (state == STATE_SYNTH)
 8001dfc:	2901      	cmp	r1, #1
 8001dfe:	f000 80ae 	beq.w	8001f5e <recorder::StateMachine(bool)+0x34a>
        else if (state == STATE_STANDBY)
 8001e02:	290a      	cmp	r1, #10
 8001e04:	d1f9      	bne.n	8001dfa <recorder::StateMachine(bool)+0x1e6>
            system::SerialFlushTx();
 8001e06:	f002 f9f9 	bl	80041fc <recorder::system::SerialFlushTx(bool)>
        }
    }

    void Stop(void)
    {
        if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8001e0a:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <recorder::StateMachine(bool)+0x30c>)
 8001e0c:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
 8001e10:	2a02      	cmp	r2, #2
 8001e12:	f000 80b5 	beq.w	8001f80 <recorder::StateMachine(bool)+0x36c>
    }
 8001e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            system::Standby();
 8001e1a:	f002 b9f5 	b.w	8004208 <recorder::system::Standby()>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8001e1e:	4a45      	ldr	r2, [pc, #276]	; (8001f34 <recorder::StateMachine(bool)+0x320>)
            else if (kEnableIdleStandby &&
 8001e20:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001f38 <recorder::StateMachine(bool)+0x324>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	ee07 3a10 	vmov	s14, r3
            else if (kEnableIdleStandby &&
 8001e2c:	6013      	str	r3, [r2, #0]
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8001e2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            else if (kEnableIdleStandby &&
 8001e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	ddd1      	ble.n	8001de0 <recorder::StateMachine(bool)+0x1cc>
                printf("Idle timeout expired\n");
 8001e3c:	483f      	ldr	r0, [pc, #252]	; (8001f3c <recorder::StateMachine(bool)+0x328>)
 8001e3e:	f005 ff03 	bl	8007c48 <puts>
            if (standby)
 8001e42:	e7ce      	b.n	8001de2 <recorder::StateMachine(bool)+0x1ce>
        else if (in != state_)
 8001e44:	f893 00b1 	ldrb.w	r0, [r3, #177]	; 0xb1
 8001e48:	4290      	cmp	r0, r2
 8001e4a:	d08a      	beq.n	8001d62 <recorder::StateMachine(bool)+0x14e>
            if (++count_ == duration_)
 8001e4c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001e50:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 8001e54:	3001      	adds	r0, #1
 8001e56:	42a8      	cmp	r0, r5
 8001e58:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
                state_ = in;
 8001e5c:	bf08      	it	eq
 8001e5e:	f883 20b1 	strbeq.w	r2, [r3, #177]	; 0xb1
 8001e62:	e77e      	b.n	8001d62 <recorder::StateMachine(bool)+0x14e>
        else if (in != state_)
 8001e64:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 8001e68:	4290      	cmp	r0, r2
 8001e6a:	f43f af62 	beq.w	8001d32 <recorder::StateMachine(bool)+0x11e>
            if (++count_ == duration_)
 8001e6e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8001e72:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8001e76:	3001      	adds	r0, #1
 8001e78:	42a8      	cmp	r0, r5
 8001e7a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
 8001e7e:	f47f af58 	bne.w	8001d32 <recorder::StateMachine(bool)+0x11e>
                state_ = in;
 8001e82:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8001e86:	e754      	b.n	8001d32 <recorder::StateMachine(bool)+0x11e>
        else if (in != state_)
 8001e88:	f893 0099 	ldrb.w	r0, [r3, #153]	; 0x99
 8001e8c:	4290      	cmp	r0, r2
 8001e8e:	f43f af37 	beq.w	8001d00 <recorder::StateMachine(bool)+0xec>
            if (++count_ == duration_)
 8001e92:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8001e96:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8001e9a:	3001      	adds	r0, #1
 8001e9c:	42a8      	cmp	r0, r5
 8001e9e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8001ea2:	f47f af2d 	bne.w	8001d00 <recorder::StateMachine(bool)+0xec>
                state_ = in;
 8001ea6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8001eaa:	e729      	b.n	8001d00 <recorder::StateMachine(bool)+0xec>
        else if (in != state_)
 8001eac:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
 8001eb0:	4290      	cmp	r0, r2
 8001eb2:	f43f af0c 	beq.w	8001cce <recorder::StateMachine(bool)+0xba>
            if (++count_ == duration_)
 8001eb6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001eba:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	42a8      	cmp	r0, r5
 8001ec2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8001ec6:	f47f af02 	bne.w	8001cce <recorder::StateMachine(bool)+0xba>
                state_ = in;
 8001eca:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001ece:	e6fe      	b.n	8001cce <recorder::StateMachine(bool)+0xba>
        else if (in != state_)
 8001ed0:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	f43f aee1 	beq.w	8001c9c <recorder::StateMachine(bool)+0x88>
            if (++count_ == duration_)
 8001eda:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001edc:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8001ede:	3001      	adds	r0, #1
 8001ee0:	42a8      	cmp	r0, r5
 8001ee2:	67d8      	str	r0, [r3, #124]	; 0x7c
 8001ee4:	f47f aeda 	bne.w	8001c9c <recorder::StateMachine(bool)+0x88>
                state_ = in;
 8001ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001eec:	e6d6      	b.n	8001c9c <recorder::StateMachine(bool)+0x88>
        else if (in != state_)
 8001eee:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	f43f aeba 	beq.w	8001c6c <recorder::StateMachine(bool)+0x58>
            if (++count_ == duration_)
 8001ef8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8001efa:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8001efc:	3001      	adds	r0, #1
 8001efe:	4285      	cmp	r5, r0
 8001f00:	6718      	str	r0, [r3, #112]	; 0x70
 8001f02:	f47f aeb3 	bne.w	8001c6c <recorder::StateMachine(bool)+0x58>
                state_ = in;
 8001f06:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001f0a:	e6af      	b.n	8001c6c <recorder::StateMachine(bool)+0x58>
 8001f0c:	20010988 	.word	0x20010988
 8001f10:	200106cc 	.word	0x200106cc
 8001f14:	2000041c 	.word	0x2000041c
 8001f18:	20000420 	.word	0x20000420
 8001f1c:	200106f4 	.word	0x200106f4
 8001f20:	200106f8 	.word	0x200106f8
 8001f24:	58021800 	.word	0x58021800
 8001f28:	58020400 	.word	0x58020400
 8001f2c:	080086b8 	.word	0x080086b8
 8001f30:	0800870c 	.word	0x0800870c
 8001f34:	20000424 	.word	0x20000424
 8001f38:	476a6000 	.word	0x476a6000
 8001f3c:	08008714 	.word	0x08008714
        else if (in != state_)
 8001f40:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8001f44:	428a      	cmp	r2, r1
 8001f46:	f43f ae79 	beq.w	8001c3c <recorder::StateMachine(bool)+0x28>
            if (++count_ == duration_)
 8001f4a:	e9d3 0218 	ldrd	r0, r2, [r3, #96]	; 0x60
 8001f4e:	3201      	adds	r2, #1
 8001f50:	4290      	cmp	r0, r2
 8001f52:	665a      	str	r2, [r3, #100]	; 0x64
 8001f54:	f47f ae72 	bne.w	8001c3c <recorder::StateMachine(bool)+0x28>
                state_ = in;
 8001f58:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
 8001f5c:	e66e      	b.n	8001c3c <recorder::StateMachine(bool)+0x28>
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <recorder::StateMachine(bool)+0x3b0>)
 8001f60:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 8001f64:	b942      	cbnz	r2, 8001f78 <recorder::StateMachine(bool)+0x364>
 8001f66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001fc8 <recorder::StateMachine(bool)+0x3b4>
 8001f6a:	ed93 7a96 	vldr	s14, [r3, #600]	; 0x258
 8001f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f76:	d907      	bls.n	8001f88 <recorder::StateMachine(bool)+0x374>
                synthReleaseCounter = 0;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <recorder::StateMachine(bool)+0x3b8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
    }
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
        {
            cue_stop_ = true;
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8001f86:	e746      	b.n	8001e16 <recorder::StateMachine(bool)+0x202>
                if (++synthReleaseCounter >= 50) // 10 seconds @ ~1ms per loop
 8001f88:	4c10      	ldr	r4, [pc, #64]	; (8001fcc <recorder::StateMachine(bool)+0x3b8>)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	2b31      	cmp	r3, #49	; 0x31
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	f67f af32 	bls.w	8001dfa <recorder::StateMachine(bool)+0x1e6>
        if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <recorder::StateMachine(bool)+0x3bc>)
        printf("State: ");
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <recorder::StateMachine(bool)+0x3c0>)
 8001f9a:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
 8001f9e:	2a02      	cmp	r2, #2
            cue_stop_ = true;
 8001fa0:	bf08      	it	eq
 8001fa2:	f883 1161 	strbeq.w	r1, [r3, #353]	; 0x161
 8001fa6:	f005 fdc9 	bl	8007b3c <iprintf>
            printf("IDLE\n");
 8001faa:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <recorder::StateMachine(bool)+0x3c4>)
 8001fac:	f005 fe4c 	bl	8007c48 <puts>
            idle_timeout_ = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <recorder::StateMachine(bool)+0x3c8>)
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	f3bf 8f5b 	dmb	ish
 8001fba:	702b      	strb	r3, [r5, #0]
 8001fbc:	f3bf 8f5b 	dmb	ish
                    synthReleaseCounter = 0; // reset the counter
 8001fc0:	6023      	str	r3, [r4, #0]
    }
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	20010428 	.word	0x20010428
 8001fc8:	3a83126f 	.word	0x3a83126f
 8001fcc:	20010a48 	.word	0x20010a48
 8001fd0:	200106f8 	.word	0x200106f8
 8001fd4:	080086b8 	.word	0x080086b8
 8001fd8:	080086c0 	.word	0x080086c0
 8001fdc:	20000424 	.word	0x20000424

08001fe0 <main>:

    extern "C" int main(void)
    {
 8001fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

        system::Init();
        ProfilingPin<PROFILE_MAIN>::Set();

        analog_.Init(Process);
 8001fe4:	4fb7      	ldr	r7, [pc, #732]	; (80022c4 <main+0x2e4>)
    {
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
        system::Init();
 8001fe8:	f001 fef6 	bl	8003dd8 <recorder::system::Init()>
        analog_.Init(Process);
 8001fec:	49b6      	ldr	r1, [pc, #728]	; (80022c8 <main+0x2e8>)
 8001fee:	4638      	mov	r0, r7
        gpio_base_ = gpio_base;
 8001ff0:	4cb6      	ldr	r4, [pc, #728]	; (80022cc <main+0x2ec>)
 8001ff2:	f001 fa8f 	bl	8003514 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8001ff6:	4bb6      	ldr	r3, [pc, #728]	; (80022d0 <main+0x2f0>)
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001ff8:	49b6      	ldr	r1, [pc, #728]	; (80022d4 <main+0x2f4>)
        pin_number_ = pin_number;
 8001ffa:	2500      	movs	r5, #0
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8001ffc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002000:	2601      	movs	r6, #1
        gpio_base_ = gpio_base;
 8002002:	60e1      	str	r1, [r4, #12]
        pin_number_ = pin_number;
 8002004:	f04f 0c02 	mov.w	ip, #2
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002008:	f042 0201 	orr.w	r2, r2, #1
        duration_ = duration;
 800200c:	f04f 080a 	mov.w	r8, #10
 8002010:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002014:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002018:	f002 0201 	and.w	r2, r2, #1
 800201c:	9203      	str	r2, [sp, #12]
 800201e:	9a03      	ldr	r2, [sp, #12]
 8002020:	68ca      	ldr	r2, [r1, #12]
 8002022:	f022 0203 	bic.w	r2, r2, #3
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800202c:	680a      	ldr	r2, [r1, #0]
 800202e:	f022 0203 	bic.w	r2, r2, #3
 8002032:	600a      	str	r2, [r1, #0]
        pin_number_ = pin_number;
 8002034:	6125      	str	r5, [r4, #16]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002036:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002042:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002046:	f002 0201 	and.w	r2, r2, #1
 800204a:	9204      	str	r2, [sp, #16]
 800204c:	9a04      	ldr	r2, [sp, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800204e:	68ca      	ldr	r2, [r1, #12]
 8002050:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002054:	f042 0210 	orr.w	r2, r2, #16
 8002058:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800205a:	680a      	ldr	r2, [r1, #0]
 800205c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002060:	600a      	str	r2, [r1, #0]
        gpio_base_ = gpio_base;
 8002062:	6021      	str	r1, [r4, #0]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 8002064:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002068:	f042 0208 	orr.w	r2, r2, #8
 800206c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002070:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002074:	7526      	strb	r6, [r4, #20]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 8002076:	f002 0208 	and.w	r2, r2, #8
        invert_ = invert;
 800207a:	7226      	strb	r6, [r4, #8]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 800207c:	9205      	str	r2, [sp, #20]
 800207e:	9a05      	ldr	r2, [sp, #20]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002080:	4a95      	ldr	r2, [pc, #596]	; (80022d8 <main+0x2f8>)
 8002082:	68d0      	ldr	r0, [r2, #12]
 8002084:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 8002088:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800208c:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800208e:	6810      	ldr	r0, [r2, #0]
        pin_number_ = pin_number;
 8002090:	f8c4 c004 	str.w	ip, [r4, #4]
 8002094:	f04f 0c0b 	mov.w	ip, #11
 8002098:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 800209c:	6010      	str	r0, [r2, #0]
        gpio_base_ = gpio_base;
 800209e:	61a2      	str	r2, [r4, #24]
 80020a0:	63e1      	str	r1, [r4, #60]	; 0x3c
        pin_number_ = pin_number;
 80020a2:	6426      	str	r6, [r4, #64]	; 0x40
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80020a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 80020a8:	f884 6020 	strb.w	r6, [r4, #32]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80020ac:	f042 0204 	orr.w	r2, r2, #4
        invert_ = invert;
 80020b0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80020b4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80020b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80020bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80020c0:	f002 0204 	and.w	r2, r2, #4
 80020c4:	9206      	str	r2, [sp, #24]
 80020c6:	9a06      	ldr	r2, [sp, #24]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020c8:	4a84      	ldr	r2, [pc, #528]	; (80022dc <main+0x2fc>)
        gpio_base_ = gpio_base;
 80020ca:	6262      	str	r2, [r4, #36]	; 0x24
 80020cc:	68d0      	ldr	r0, [r2, #12]
 80020ce:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80020d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80020d6:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80020d8:	6810      	ldr	r0, [r2, #0]
 80020da:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80020de:	6010      	str	r0, [r2, #0]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80020e0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80020e4:	4330      	orrs	r0, r6
 80020e6:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 80020ea:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80020ee:	4030      	ands	r0, r6
 80020f0:	9007      	str	r0, [sp, #28]
 80020f2:	9807      	ldr	r0, [sp, #28]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020f4:	68c8      	ldr	r0, [r1, #12]
 80020f6:	f020 000c 	bic.w	r0, r0, #12
 80020fa:	f040 0004 	orr.w	r0, r0, #4
 80020fe:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002100:	6808      	ldr	r0, [r1, #0]
 8002102:	f020 000c 	bic.w	r0, r0, #12
 8002106:	6008      	str	r0, [r1, #0]
        pin_number_ = pin_number;
 8002108:	2004      	movs	r0, #4
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800210a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800210e:	f041 0104 	orr.w	r1, r1, #4
 8002112:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8002116:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
        pin_number_ = pin_number;
 800211a:	f8c4 c01c 	str.w	ip, [r4, #28]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800211e:	f001 0104 	and.w	r1, r1, #4
        pin_number_ = pin_number;
 8002122:	62a0      	str	r0, [r4, #40]	; 0x28
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002124:	9108      	str	r1, [sp, #32]
 8002126:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002128:	68d1      	ldr	r1, [r2, #12]
        gpio_base_ = gpio_base;
 800212a:	6562      	str	r2, [r4, #84]	; 0x54
 800212c:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8002130:	64a2      	str	r2, [r4, #72]	; 0x48
        pin_number_ = pin_number;
 8002132:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 8002136:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800213a:	64e0      	str	r0, [r4, #76]	; 0x4c
        invert_ = invert;
 800213c:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
 8002140:	60d1      	str	r1, [r2, #12]
        count_ = 0;
 8002142:	6725      	str	r5, [r4, #112]	; 0x70
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800214a:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
        history_ = initial_state;
 800214e:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
 8002152:	6011      	str	r1, [r2, #0]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002154:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002158:	4301      	orrs	r1, r0
 800215a:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002162:	4003      	ands	r3, r0
 8002164:	9309      	str	r3, [sp, #36]	; 0x24
 8002166:	9b09      	ldr	r3, [sp, #36]	; 0x24
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002168:	68d3      	ldr	r3, [r2, #12]
 800216a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217a:	6013      	str	r3, [r2, #0]
        duration_ = duration;
 800217c:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
        db_[SWITCH_PLAY].Init(kButtonDebounceDuration_ms,
 8002180:	f002 f8d2 	bl	8004328 <recorder::system::WakeupWasPlayButton()>
        history_ = initial_state;
 8002184:	462b      	mov	r3, r5
        history_ = initial_state ? ((1 << kShift) | 1) : 0;
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <main+0x300>)
 8002188:	f360 0307 	bfi	r3, r0, #0, #8
 800218c:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
 8002190:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
 8002194:	f360 230f 	bfi	r3, r0, #8, #8
 8002198:	f8a4 508c 	strh.w	r5, [r4, #140]	; 0x8c
        duration_ = duration;
 800219c:	f8c4 80a8 	str.w	r8, [r4, #168]	; 0xa8
        history_ = initial_state;
 80021a0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 80021a4:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <main+0x304>)
        duration_ = duration;
 80021a6:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
 80021aa:	601d      	str	r5, [r3, #0]
        if (state_ == STATE_STOPPED)
 80021ac:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
        count_ = 0;
 80021b0:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
        history_ = initial_state;
 80021b4:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        count_ = 0;
 80021b8:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        history_ = initial_state;
 80021bc:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 80021c0:	6015      	str	r5, [r2, #0]
        count_ = 0;
 80021c2:	e9c4 8518 	strd	r8, r5, [r4, #96]	; 0x60
 80021c6:	e9c4 851e 	strd	r8, r5, [r4, #120]	; 0x78
 80021ca:	e9c4 8527 	strd	r8, r5, [r4, #156]	; 0x9c
 80021ce:	e9c4 8521 	strd	r8, r5, [r4, #132]	; 0x84
 80021d2:	b9b3      	cbnz	r3, 8002202 <main+0x222>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80021d4:	4944      	ldr	r1, [pc, #272]	; (80022e8 <main+0x308>)
 80021d6:	f44f 7000 	mov.w	r0, #512	; 0x200
            fade_position_ = 0;
 80021da:	2200      	movs	r2, #0
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <main+0x30c>)
 80021de:	6188      	str	r0, [r1, #24]
            dac_.Start();
 80021e0:	f507 70aa 	add.w	r0, r7, #340	; 0x154
            fade_position_ = 0;
 80021e4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80021e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            state_ = STATE_STARTING;
 80021ec:	f8a7 6160 	strh.w	r6, [r7, #352]	; 0x160
 80021f0:	619a      	str	r2, [r3, #24]
            dac_.Start();
 80021f2:	f001 fa45 	bl	8003680 <recorder::Dac::Start()>
            adc_.Start();
 80021f6:	1d38      	adds	r0, r7, #4
 80021f8:	f000 ff68 	bl	80030cc <recorder::Adc::Start()>
            StartTimer();
 80021fc:	4638      	mov	r0, r7
 80021fe:	f001 fa2b 	bl	8003658 <recorder::Analog::StartTimer()>
class Monitor
{
public:
    void Init(void)
    {
        length_ = 0;
 8002202:	2500      	movs	r5, #0
 8002204:	4c3a      	ldr	r4, [pc, #232]	; (80022f0 <main+0x310>)
        play_button_.Init();
        tune_button_.Init();
        analog_.StartPlayback();
        //   recording_.Init();
        //  playback_.Init();
        synth_engine_.Init();
 8002206:	483b      	ldr	r0, [pc, #236]	; (80022f4 <main+0x314>)
 8002208:	f7fe fa7e 	bl	8000708 <recorder::SynthEngine::Init()>
    bool sw[NUM_SWITCHES];
    bool detect[NUM_DETECTS];

    void Init(void)
    {
        *this = {};
 800220c:	2228      	movs	r2, #40	; 0x28
 800220e:	4629      	mov	r1, r5
 8002210:	4839      	ldr	r0, [pc, #228]	; (80022f8 <main+0x318>)
 8002212:	f005 f908 	bl	8007426 <memset>
 8002216:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        io_.Init();
        monitor_.Init();
        system::ReloadWatchdog();
 800221a:	f001 fdd5 	bl	8003dc8 <recorder::system::ReloadWatchdog()>
        printf("State: ");
 800221e:	4837      	ldr	r0, [pc, #220]	; (80022fc <main+0x31c>)
 8002220:	f005 fc8c 	bl	8007b3c <iprintf>
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
 8002224:	4e34      	ldr	r6, [pc, #208]	; (80022f8 <main+0x318>)
        //  playback_.Reset();
        //  sample_memory_.Init();
        // ledPin.Init(GPIOPin::SPEED_LOW, GPIOPin::TYPE_PUSHPULL, GPIOPin::PULL_NONE);
        Transition(STATE_SYNTH);

        bool expire_watchdog = false;
 8002226:	9500      	str	r5, [sp, #0]
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }
 8002228:	2201      	movs	r2, #1
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <main+0x320>)
 800222c:	f204 1529 	addw	r5, r4, #297	; 0x129
 8002230:	f3bf 8f5b 	dmb	ish
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	f3bf 8f5b 	dmb	ish
            analog_.Start(false);
        }

        for (;;)
        {
            printf("test");
 800223a:	4832      	ldr	r0, [pc, #200]	; (8002304 <main+0x324>)
 800223c:	f005 fc7e 	bl	8007b3c <iprintf>
    }

    const Message& Receive(void)
    {
        char* result =
            std::fgets(line_ + length_, sizeof(line_) - length_, stdin);
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <main+0x328>)
      | __memory_order_modifier(__m & __memory_order_modifier_mask));
  }

  _GLIBCXX_ALWAYS_INLINE void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(int(__m)); }
 8002242:	f3bf 8f5b 	dmb	ish
 8002246:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 8002250:	4420      	add	r0, r4
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	f002 f874 	bl	8004340 <fgets>

        if (result != nullptr)
 8002258:	b1c0      	cbz	r0, 800228c <main+0x2ac>
        {
            length_ = std::strlen(line_);
 800225a:	4825      	ldr	r0, [pc, #148]	; (80022f0 <main+0x310>)
 800225c:	f7fe f840 	bl	80002e0 <strlen>
 8002260:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        }

        if (length_ == 0 || line_[length_ - 1] != '\n')
 8002264:	b118      	cbz	r0, 800226e <main+0x28e>
 8002266:	1e43      	subs	r3, r0, #1
 8002268:	5ce2      	ldrb	r2, [r4, r3]
 800226a:	2a0a      	cmp	r2, #10
 800226c:	d011      	beq.n	8002292 <main+0x2b2>
        {
            message_.payload.type = Message::TYPE_NONE;
 800226e:	2300      	movs	r3, #0
            ProfilingPin<PROFILE_MAIN_LOOP>::Set();
            std::atomic_thread_fence(std::memory_order_acq_rel);

            bool standby = false;
 8002270:	461f      	mov	r7, r3
 8002272:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
                printf("Erasing save data... ");
                // sample_memory_.Erase();
                printf("done\n");
            }

            if (!expire_watchdog)
 8002276:	9b00      	ldr	r3, [sp, #0]
 8002278:	b90b      	cbnz	r3, 800227e <main+0x29e>
            {
                system::ReloadWatchdog();
 800227a:	f001 fda5 	bl	8003dc8 <recorder::system::ReloadWatchdog()>
            }

            StateMachine(standby);
 800227e:	4638      	mov	r0, r7
 8002280:	f7ff fcc8 	bl	8001c14 <recorder::StateMachine(bool)>
            ProfilingPin<PROFILE_MAIN_LOOP>::Clear();

            system::Delay_ms(1);
 8002284:	2001      	movs	r0, #1
 8002286:	f001 ffa3 	bl	80041d0 <recorder::system::Delay_ms(unsigned long)>
        }
 800228a:	e7d6      	b.n	800223a <main+0x25a>
        if (length_ == 0 || line_[length_ - 1] != '\n')
 800228c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002290:	e7e8      	b.n	8002264 <main+0x284>
        }
        else
        {
            if (line_[0] == '\xff' && length_ > 1)
 8002292:	f894 c000 	ldrb.w	ip, [r4]
 8002296:	2801      	cmp	r0, #1
 8002298:	f1ac 07ff 	sub.w	r7, ip, #255	; 0xff
 800229c:	fab7 f787 	clz	r7, r7
 80022a0:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80022a4:	bf08      	it	eq
 80022a6:	2700      	moveq	r7, #0
 80022a8:	bb87      	cbnz	r7, 800230c <main+0x32c>
            }
            else
            {
                message_.payload.type = Message::TYPE_TEXT;
                line_[length_ - 1] = '\0';
                std::strncpy(message_.payload.text, line_,
 80022aa:	4911      	ldr	r1, [pc, #68]	; (80022f0 <main+0x310>)
                message_.payload.type = Message::TYPE_TEXT;
 80022ac:	2001      	movs	r0, #1
                std::strncpy(message_.payload.text, line_,
 80022ae:	2280      	movs	r2, #128	; 0x80
                line_[length_ - 1] = '\0';
 80022b0:	54e7      	strb	r7, [r4, r3]
                message_.payload.type = Message::TYPE_TEXT;
 80022b2:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
                std::strncpy(message_.payload.text, line_,
 80022b6:	f101 0087 	add.w	r0, r1, #135	; 0x87
 80022ba:	f005 fdb8 	bl	8007e2e <strncpy>
                    sizeof(message_.payload.text));
            }

            length_ = 0;
 80022be:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
            else if (message.type == Message::TYPE_RESET)
 80022c2:	e7d8      	b.n	8002276 <main+0x296>
 80022c4:	200106f8 	.word	0x200106f8
 80022c8:	080011b1 	.word	0x080011b1
 80022cc:	20010988 	.word	0x20010988
 80022d0:	58024400 	.word	0x58024400
 80022d4:	58020000 	.word	0x58020000
 80022d8:	58020c00 	.word	0x58020c00
 80022dc:	58020800 	.word	0x58020800
 80022e0:	2000041c 	.word	0x2000041c
 80022e4:	20000420 	.word	0x20000420
 80022e8:	58021800 	.word	0x58021800
 80022ec:	58020400 	.word	0x58020400
 80022f0:	2001085c 	.word	0x2001085c
 80022f4:	20000428 	.word	0x20000428
 80022f8:	200106cc 	.word	0x200106cc
 80022fc:	080086b8 	.word	0x080086b8
 8002300:	200106f4 	.word	0x200106f4
 8002304:	0800872c 	.word	0x0800872c
 8002308:	20000008 	.word	0x20000008
                line_[length_ - 1] = '\0';
 800230c:	f04f 0800 	mov.w	r8, #0
}

inline size_t Decode(void* data, size_t size, const char* str)
{
    auto bytes = reinterpret_cast<uint8_t*>(data);
    size_t length = std::strlen(str);
 8002310:	48bd      	ldr	r0, [pc, #756]	; (8002608 <main+0x628>)
 8002312:	f804 8003 	strb.w	r8, [r4, r3]
 8002316:	f7fd ffe3 	bl	80002e0 <strlen>
    size_t num_bytes = 0;

    while (length)
 800231a:	2800      	cmp	r0, #0
 800231c:	d051      	beq.n	80023c2 <main+0x3e2>
    size_t num_bytes = 0;
 800231e:	4642      	mov	r2, r8
        uint32_t word = 0;

        for (size_t i = 0; i < 5; i++)
        {
            word *= 85;
            word += group[i];
 8002320:	f04f 0b55 	mov.w	fp, #85	; 0x55
    while (length)
 8002324:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8002608 <main+0x628>
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8002328:	2804      	cmp	r0, #4
 800232a:	f200 8181 	bhi.w	8002630 <main+0x650>
            group[i] = length ? *str - 33 : 84;
 800232e:	f898 e000 	ldrb.w	lr, [r8]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8002332:	4241      	negs	r1, r0
            group[i] = length ? *str - 33 : 84;
 8002334:	2801      	cmp	r0, #1
 8002336:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 800233a:	fa5f f38e 	uxtb.w	r3, lr
 800233e:	9301      	str	r3, [sp, #4]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8002340:	4bb2      	ldr	r3, [pc, #712]	; (800260c <main+0x62c>)
 8002342:	fba3 ce01 	umull	ip, lr, r3, r1
 8002346:	f02e 0c03 	bic.w	ip, lr, #3
 800234a:	eb0c 0c9e 	add.w	ip, ip, lr, lsr #2
 800234e:	eba1 010c 	sub.w	r1, r1, ip
 8002352:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8002356:	fba3 3101 	umull	r3, r1, r3, r1
 800235a:	ea4f 0191 	mov.w	r1, r1, lsr #2
        }

        for (size_t i = 0; i < 4 - padding; i++)
 800235e:	f1c1 0104 	rsb	r1, r1, #4
            group[i] = length ? *str - 33 : 84;
 8002362:	f040 816d 	bne.w	8002640 <main+0x660>
                str++;
 8002366:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800236a:	f108 0801 	add.w	r8, r8, #1
 800236e:	2000      	movs	r0, #0
 8002370:	46d6      	mov	lr, sl
 8002372:	46d4      	mov	ip, sl
 8002374:	46d1      	mov	r9, sl
            word += group[i];
 8002376:	9b01      	ldr	r3, [sp, #4]
 8002378:	fb1b ee03 	smlabb	lr, fp, r3, lr
            word *= 85;
 800237c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8002380:	eb0e 130e 	add.w	r3, lr, lr, lsl #4
            word += group[i];
 8002384:	4453      	add	r3, sl
            word *= 85;
 8002386:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800238a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 800238e:	444b      	add	r3, r9
            word *= 85;
 8002390:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002394:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8002398:	4463      	add	r3, ip
        for (size_t i = 0; i < 4 - padding; i++)
 800239a:	f04f 0c00 	mov.w	ip, #0
        {
            if (num_bytes < size)
 800239e:	2a82      	cmp	r2, #130	; 0x82
            {
                bytes[num_bytes] = word >> 24;
 80023a0:	ea4f 6913 	mov.w	r9, r3, lsr #24
 80023a4:	eb04 0e02 	add.w	lr, r4, r2
        for (size_t i = 0; i < 4 - padding; i++)
 80023a8:	f10c 0c01 	add.w	ip, ip, #1
                num_bytes++;
                word <<= 8;
 80023ac:	ea4f 2303 	mov.w	r3, r3, lsl #8
            if (num_bytes < size)
 80023b0:	d805      	bhi.n	80023be <main+0x3de>
        for (size_t i = 0; i < 4 - padding; i++)
 80023b2:	4561      	cmp	r1, ip
                num_bytes++;
 80023b4:	f102 0201 	add.w	r2, r2, #1
                bytes[num_bytes] = word >> 24;
 80023b8:	f88e 9084 	strb.w	r9, [lr, #132]	; 0x84
        for (size_t i = 0; i < 4 - padding; i++)
 80023bc:	d8ef      	bhi.n	800239e <main+0x3be>
    while (length)
 80023be:	2800      	cmp	r0, #0
 80023c0:	d1b2      	bne.n	8002328 <main+0x348>
        checksum = 0;
    }

    bool Verify(void)
    {
        if (size > sizeof(T))
 80023c2:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80023c6:	2b81      	cmp	r3, #129	; 0x81
 80023c8:	d820      	bhi.n	800240c <main+0x42c>
 80023ca:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8002628 <main+0x648>
 80023ce:	2200      	movs	r2, #0
        auto bytes = reinterpret_cast<uint8_t*>(&payload);
        uint8_t sum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            sum += bytes[i];
 80023d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80023d4:	f003 317f 	and.w	r1, r3, #2139062143	; 0x7f7f7f7f
 80023d8:	4053      	eors	r3, r2
 80023da:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 80023de:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80023e2:	440a      	add	r2, r1
 80023e4:	405a      	eors	r2, r3
        for (uint32_t i = 0; i < sizeof(T); i++)
 80023e6:	4b8a      	ldr	r3, [pc, #552]	; (8002610 <main+0x630>)
 80023e8:	459c      	cmp	ip, r3
 80023ea:	d1f1      	bne.n	80023d0 <main+0x3f0>
            sum += bytes[i];
 80023ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80023f0:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 80023f4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80023f8:	4413      	add	r3, r2
 80023fa:	4403      	add	r3, r0
 80023fc:	440b      	add	r3, r1
                if (message_.Verify())
 80023fe:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
 8002402:	eb03 6312 	add.w	r3, r3, r2, lsr #24
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4299      	cmp	r1, r3
 800240a:	d006      	beq.n	800241a <main+0x43a>
                    message_.payload.type = Message::TYPE_NONE;
 800240c:	2300      	movs	r3, #0
            bool standby = false;
 800240e:	461f      	mov	r7, r3
 8002410:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
            length_ = 0;
 8002414:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            else if (message.type == Message::TYPE_ERASE)
 8002418:	e72d      	b.n	8002276 <main+0x296>

    Packet<State> state_;

    void Ack(void)
    {
        printf("\xff" "ack\n");
 800241a:	487e      	ldr	r0, [pc, #504]	; (8002614 <main+0x634>)
            length_ = 0;
 800241c:	f04f 0800 	mov.w	r8, #0
        printf("\xff" "ack\n");
 8002420:	f005 fc12 	bl	8007c48 <puts>
            auto message = monitor_.Receive();
 8002424:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
            length_ = 0;
 8002428:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
            if (message.type == Message::TYPE_QUERY)
 800242c:	2a71      	cmp	r2, #113	; 0x71
 800242e:	d008      	beq.n	8002442 <main+0x462>
            else if (message.type == Message::TYPE_STANDBY)
 8002430:	2a73      	cmp	r2, #115	; 0x73
 8002432:	f43f af20 	beq.w	8002276 <main+0x296>
            else if (message.type == Message::TYPE_WATCHDOG)
 8002436:	2a77      	cmp	r2, #119	; 0x77
 8002438:	f040 8124 	bne.w	8002684 <main+0x6a4>
                expire_watchdog = true;
 800243c:	9700      	str	r7, [sp, #0]
            bool standby = false;
 800243e:	4647      	mov	r7, r8
 8002440:	e71d      	b.n	800227e <main+0x29e>
        for (uint32_t i = 0; i < NUM_POTS; i++)
        {
            state.pot[i] = human.pot[i];
        }

        state.play = human.sw[SWITCH_PLAY];
 8002442:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
        return sum == checksum;
    }

    void Sign(void)
    {
        size = sizeof(T);
 8002446:	f04f 0c21 	mov.w	ip, #33	; 0x21
 800244a:	f896 2020 	ldrb.w	r2, [r6, #32]
 800244e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 8002452:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8002456:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
            state.pot[i] = human.pot[i];
 800245a:	6830      	ldr	r0, [r6, #0]
        state.play = human.sw[SWITCH_PLAY];
 800245c:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8002460:	f896 7027 	ldrb.w	r7, [r6, #39]	; 0x27
            state.pot[i] = human.pot[i];
 8002464:	f8c4 0109 	str.w	r0, [r4, #265]	; 0x109
 8002468:	4643      	mov	r3, r8
        state.play = human.sw[SWITCH_PLAY];
 800246a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
            state.pot[i] = human.pot[i];
 800246e:	6870      	ldr	r0, [r6, #4]
        state.play = human.sw[SWITCH_PLAY];
 8002470:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8002474:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
            state.pot[i] = human.pot[i];
 8002478:	f8c4 010d 	str.w	r0, [r4, #269]	; 0x10d
        state.play = human.sw[SWITCH_PLAY];
 800247c:	f021 011f 	bic.w	r1, r1, #31
            state.pot[i] = human.pot[i];
 8002480:	68f0      	ldr	r0, [r6, #12]
        state.play = human.sw[SWITCH_PLAY];
 8002482:	f002 021f 	and.w	r2, r2, #31
            state.pot[i] = human.pot[i];
 8002486:	68b7      	ldr	r7, [r6, #8]
 8002488:	f8c4 0115 	str.w	r0, [r4, #277]	; 0x115
        state.play = human.sw[SWITCH_PLAY];
 800248c:	430a      	orrs	r2, r1
            state.pot[i] = human.pot[i];
 800248e:	6930      	ldr	r0, [r6, #16]
 8002490:	f8c4 7111 	str.w	r7, [r4, #273]	; 0x111
        state.play = human.sw[SWITCH_PLAY];
 8002494:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
            state.pot[i] = human.pot[i];
 8002498:	6977      	ldr	r7, [r6, #20]
 800249a:	69f2      	ldr	r2, [r6, #28]
 800249c:	f8c4 0119 	str.w	r0, [r4, #281]	; 0x119
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80024a0:	495d      	ldr	r1, [pc, #372]	; (8002618 <main+0x638>)
 80024a2:	69b0      	ldr	r0, [r6, #24]
 80024a4:	f8a4 c107 	strh.w	ip, [r4, #263]	; 0x107
 80024a8:	f8c4 711d 	str.w	r7, [r4, #285]	; 0x11d
 80024ac:	f8c4 0121 	str.w	r0, [r4, #289]	; 0x121
 80024b0:	f8c4 2125 	str.w	r2, [r4, #293]	; 0x125
        auto bytes = reinterpret_cast<uint8_t*>(&(payload));
        checksum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            checksum += bytes[i];
 80024b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80024b8:	4413      	add	r3, r2
        for (uint32_t i = 0; i < sizeof(T); i++)
 80024ba:	42a9      	cmp	r1, r5
            checksum += bytes[i];
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
        for (uint32_t i = 0; i < sizeof(T); i++)
 80024c2:	d1f7      	bne.n	80024b4 <main+0x4d4>
 80024c4:	f04f 0c23 	mov.w	ip, #35	; 0x23
    size_t num_chars = 0;
 80024c8:	f04f 0800 	mov.w	r8, #0
 80024cc:	2321      	movs	r3, #33	; 0x21
    auto bytes = reinterpret_cast<const uint8_t*>(data);
 80024ce:	4853      	ldr	r0, [pc, #332]	; (800261c <main+0x63c>)
            group[4 - i] = (word % 85);
 80024d0:	4662      	mov	r2, ip
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 80024d2:	46c1      	mov	r9, r8
            group[4 - i] = (word % 85);
 80024d4:	f8df a154 	ldr.w	sl, [pc, #340]	; 800262c <main+0x64c>
            if (data_size)
 80024d8:	2a01      	cmp	r2, #1
 80024da:	d07e      	beq.n	80025da <main+0x5fa>
                word |= *bytes++;
 80024dc:	8803      	ldrh	r3, [r0, #0]
            if (data_size)
 80024de:	2a02      	cmp	r2, #2
 80024e0:	ba5b      	rev16	r3, r3
 80024e2:	b29b      	uxth	r3, r3
            word <<= 8;
 80024e4:	ea4f 2303 	mov.w	r3, r3, lsl #8
            if (data_size)
 80024e8:	f000 80df 	beq.w	80026aa <main+0x6ca>
 80024ec:	2a03      	cmp	r2, #3
                word |= *bytes++;
 80024ee:	7881      	ldrb	r1, [r0, #2]
            if (data_size)
 80024f0:	f000 80f4 	beq.w	80026dc <main+0x6fc>
                word |= *bytes++;
 80024f4:	f850 3b04 	ldr.w	r3, [r0], #4
                data_size--;
 80024f8:	3a04      	subs	r2, #4
 80024fa:	ba1b      	rev	r3, r3
            group[4 - i] = (word % 85);
 80024fc:	fbaa 1c03 	umull	r1, ip, sl, r3
            if (num_chars < buf_size - 1)
 8002500:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
        for (size_t i = 0; i < 5 - padding; i++)
 8002504:	f1c9 0905 	rsb	r9, r9, #5
            group[4 - i] = (word % 85);
 8002508:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800250c:	fbaa 170c 	umull	r1, r7, sl, ip
 8002510:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002514:	ea4f 1797 	mov.w	r7, r7, lsr #6
 8002518:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800251c:	eba3 0301 	sub.w	r3, r3, r1
 8002520:	fbaa e107 	umull	lr, r1, sl, r7
 8002524:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
 8002528:	ea4f 1191 	mov.w	r1, r1, lsr #6
 800252c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8002530:	b2db      	uxtb	r3, r3
 8002532:	ebac 0c0e 	sub.w	ip, ip, lr
 8002536:	fbaa be01 	umull	fp, lr, sl, r1
 800253a:	eb01 0b81 	add.w	fp, r1, r1, lsl #2
 800253e:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 8002542:	eb0b 1b0b 	add.w	fp, fp, fp, lsl #4
 8002546:	fa5f fc8c 	uxtb.w	ip, ip
 800254a:	eba7 070b 	sub.w	r7, r7, fp
 800254e:	eb0e 0b8e 	add.w	fp, lr, lr, lsl #2
 8002552:	fa5f fe8e 	uxtb.w	lr, lr
 8002556:	eb0b 1b0b 	add.w	fp, fp, fp, lsl #4
 800255a:	b2ff      	uxtb	r7, r7
 800255c:	eba1 010b 	sub.w	r1, r1, fp
 8002560:	b2c9      	uxtb	r1, r1
            if (num_chars < buf_size - 1)
 8002562:	d843      	bhi.n	80025ec <main+0x60c>
                buf[num_chars] = group[i] + 33;
 8002564:	f10e 0e21 	add.w	lr, lr, #33	; 0x21
 8002568:	f804 e008 	strb.w	lr, [r4, r8]
                num_chars++;
 800256c:	f108 0e01 	add.w	lr, r8, #1
            if (num_chars < buf_size - 1)
 8002570:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8002574:	d836      	bhi.n	80025e4 <main+0x604>
                buf[num_chars] = group[i] + 33;
 8002576:	3121      	adds	r1, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 8002578:	f1b9 0f02 	cmp.w	r9, #2
                buf[num_chars] = group[i] + 33;
 800257c:	f804 100e 	strb.w	r1, [r4, lr]
                num_chars++;
 8002580:	f108 0e02 	add.w	lr, r8, #2
        for (size_t i = 0; i < 5 - padding; i++)
 8002584:	d01e      	beq.n	80025c4 <main+0x5e4>
            if (num_chars < buf_size - 1)
 8002586:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 800258a:	d01b      	beq.n	80025c4 <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 800258c:	3721      	adds	r7, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 800258e:	f1b9 0f03 	cmp.w	r9, #3
                buf[num_chars] = group[i] + 33;
 8002592:	f804 700e 	strb.w	r7, [r4, lr]
                num_chars++;
 8002596:	f108 0e03 	add.w	lr, r8, #3
        for (size_t i = 0; i < 5 - padding; i++)
 800259a:	d013      	beq.n	80025c4 <main+0x5e4>
            if (num_chars < buf_size - 1)
 800259c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 80025a0:	d010      	beq.n	80025c4 <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 80025a2:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 80025a6:	f1b9 0f05 	cmp.w	r9, #5
                buf[num_chars] = group[i] + 33;
 80025aa:	f804 c00e 	strb.w	ip, [r4, lr]
                num_chars++;
 80025ae:	f108 0e04 	add.w	lr, r8, #4
        for (size_t i = 0; i < 5 - padding; i++)
 80025b2:	d107      	bne.n	80025c4 <main+0x5e4>
            if (num_chars < buf_size - 1)
 80025b4:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 80025b8:	d004      	beq.n	80025c4 <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 80025ba:	3321      	adds	r3, #33	; 0x21
 80025bc:	f804 300e 	strb.w	r3, [r4, lr]
                num_chars++;
 80025c0:	f108 0e05 	add.w	lr, r8, #5
    while (data_size)
 80025c4:	b1aa      	cbz	r2, 80025f2 <main+0x612>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 80025c6:	2a03      	cmp	r2, #3
 80025c8:	d81b      	bhi.n	8002602 <main+0x622>
 80025ca:	f1c2 0900 	rsb	r9, r2, #0
 80025ce:	f009 0903 	and.w	r9, r9, #3
            if (data_size)
 80025d2:	2a01      	cmp	r2, #1
                word |= *bytes++;
 80025d4:	46f0      	mov	r8, lr
 80025d6:	7803      	ldrb	r3, [r0, #0]
            if (data_size)
 80025d8:	d180      	bne.n	80024dc <main+0x4fc>
                word |= *bytes++;
 80025da:	3001      	adds	r0, #1
            word <<= 8;
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	2200      	movs	r2, #0
 80025e2:	e78b      	b.n	80024fc <main+0x51c>
        for (size_t i = 0; i < 5 - padding; i++)
 80025e4:	f1b9 0f02 	cmp.w	r9, #2
 80025e8:	d0ec      	beq.n	80025c4 <main+0x5e4>
 80025ea:	46f0      	mov	r8, lr
 80025ec:	46c6      	mov	lr, r8
    while (data_size)
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d1e9      	bne.n	80025c6 <main+0x5e6>
        printf("\xff%s\n", line_);
 80025f2:	490b      	ldr	r1, [pc, #44]	; (8002620 <main+0x640>)
 80025f4:	4617      	mov	r7, r2
    buf[num_chars] = '\0';
 80025f6:	f804 200e 	strb.w	r2, [r4, lr]
 80025fa:	480a      	ldr	r0, [pc, #40]	; (8002624 <main+0x644>)
 80025fc:	f005 fa9e 	bl	8007b3c <iprintf>
    }
 8002600:	e639      	b.n	8002276 <main+0x296>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8002602:	f04f 0900 	mov.w	r9, #0
 8002606:	e7e4      	b.n	80025d2 <main+0x5f2>
 8002608:	2001085d 	.word	0x2001085d
 800260c:	cccccccd 	.word	0xcccccccd
 8002610:	20010962 	.word	0x20010962
 8002614:	08008734 	.word	0x08008734
 8002618:	20010964 	.word	0x20010964
 800261c:	20010963 	.word	0x20010963
 8002620:	2001085c 	.word	0x2001085c
 8002624:	0800873c 	.word	0x0800873c
 8002628:	200108e2 	.word	0x200108e2
 800262c:	c0c0c0c1 	.word	0xc0c0c0c1
            group[i] = length ? *str - 33 : 84;
 8002630:	f898 e000 	ldrb.w	lr, [r8]
 8002634:	2104      	movs	r1, #4
 8002636:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 800263a:	fa5f f38e 	uxtb.w	r3, lr
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	f898 e001 	ldrb.w	lr, [r8, #1]
 8002644:	2802      	cmp	r0, #2
 8002646:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 800264a:	fa5f fe8e 	uxtb.w	lr, lr
 800264e:	d03d      	beq.n	80026cc <main+0x6ec>
 8002650:	f898 a002 	ldrb.w	sl, [r8, #2]
 8002654:	2803      	cmp	r0, #3
 8002656:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
 800265a:	fa5f fa8a 	uxtb.w	sl, sl
 800265e:	d02e      	beq.n	80026be <main+0x6de>
 8002660:	f898 9003 	ldrb.w	r9, [r8, #3]
 8002664:	2804      	cmp	r0, #4
 8002666:	f1a9 0921 	sub.w	r9, r9, #33	; 0x21
 800266a:	fa5f f989 	uxtb.w	r9, r9
 800266e:	d020      	beq.n	80026b2 <main+0x6d2>
 8002670:	f898 c004 	ldrb.w	ip, [r8, #4]
                length--;
 8002674:	3805      	subs	r0, #5
                str++;
 8002676:	f108 0805 	add.w	r8, r8, #5
            group[i] = length ? *str - 33 : 84;
 800267a:	f1ac 0c21 	sub.w	ip, ip, #33	; 0x21
            word += group[i];
 800267e:	fa5f fc8c 	uxtb.w	ip, ip
 8002682:	e678      	b.n	8002376 <main+0x396>
            else if (message.type == Message::TYPE_RESET)
 8002684:	2a72      	cmp	r2, #114	; 0x72
 8002686:	d106      	bne.n	8002696 <main+0x6b6>
                system::SerialFlushTx();
 8002688:	4640      	mov	r0, r8
            bool standby = false;
 800268a:	4647      	mov	r7, r8
                system::SerialFlushTx();
 800268c:	f001 fdb6 	bl	80041fc <recorder::system::SerialFlushTx(bool)>
                system::Reset();
 8002690:	f001 fe52 	bl	8004338 <recorder::system::Reset()>
 8002694:	e5ef      	b.n	8002276 <main+0x296>
            else if (message.type == Message::TYPE_ERASE)
 8002696:	2a65      	cmp	r2, #101	; 0x65
 8002698:	d109      	bne.n	80026ae <main+0x6ce>
                printf("Erasing save data... ");
 800269a:	4812      	ldr	r0, [pc, #72]	; (80026e4 <main+0x704>)
            bool standby = false;
 800269c:	4647      	mov	r7, r8
                printf("Erasing save data... ");
 800269e:	f005 fa4d 	bl	8007b3c <iprintf>
                printf("done\n");
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <main+0x708>)
 80026a4:	f005 fad0 	bl	8007c48 <puts>
 80026a8:	e5e5      	b.n	8002276 <main+0x296>
                word |= *bytes++;
 80026aa:	3002      	adds	r0, #2
            word <<= 8;
 80026ac:	e797      	b.n	80025de <main+0x5fe>
            bool standby = false;
 80026ae:	4647      	mov	r7, r8
 80026b0:	e5e1      	b.n	8002276 <main+0x296>
                str++;
 80026b2:	f108 0804 	add.w	r8, r8, #4
            word += group[i];
 80026b6:	f04f 0c54 	mov.w	ip, #84	; 0x54
 80026ba:	2000      	movs	r0, #0
 80026bc:	e65b      	b.n	8002376 <main+0x396>
 80026be:	f04f 0c54 	mov.w	ip, #84	; 0x54
                str++;
 80026c2:	f108 0803 	add.w	r8, r8, #3
            word += group[i];
 80026c6:	2000      	movs	r0, #0
 80026c8:	46e1      	mov	r9, ip
 80026ca:	e654      	b.n	8002376 <main+0x396>
 80026cc:	f04f 0a54 	mov.w	sl, #84	; 0x54
                str++;
 80026d0:	f108 0802 	add.w	r8, r8, #2
            word += group[i];
 80026d4:	2000      	movs	r0, #0
 80026d6:	46d4      	mov	ip, sl
 80026d8:	46d1      	mov	r9, sl
 80026da:	e64c      	b.n	8002376 <main+0x396>
                word |= *bytes++;
 80026dc:	430b      	orrs	r3, r1
 80026de:	3003      	adds	r0, #3
 80026e0:	e77d      	b.n	80025de <main+0x5fe>
 80026e2:	bf00      	nop
 80026e4:	08008744 	.word	0x08008744
 80026e8:	0800875c 	.word	0x0800875c

080026ec <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE>:
    }

} // namespace recorder
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
              previous_formant_pot_val_(0.0f) // track the last pot value
 80026ee:	4c24      	ldr	r4, [pc, #144]	; (8002780 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x94>)
                           randomizationperiod(5) // Change random variation every 2 samples
 80026f0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80026f4:	2600      	movs	r6, #0
 80026f6:	2500      	movs	r5, #0
 80026f8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    class FormantFilter
 80026fc:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8002700:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 8002704:	2305      	movs	r3, #5
 8002706:	6166      	str	r6, [r4, #20]
            std::srand(static_cast<unsigned>(std::time(0)));
 8002708:	4630      	mov	r0, r6
 800270a:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
 800270e:	6025      	str	r5, [r4, #0]
 8002710:	60e5      	str	r5, [r4, #12]
 8002712:	6465      	str	r5, [r4, #68]	; 0x44
 8002714:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
 8002718:	6525      	str	r5, [r4, #80]	; 0x50
 800271a:	f8c4 71f0 	str.w	r7, [r4, #496]	; 0x1f0
 800271e:	f8c4 71f4 	str.w	r7, [r4, #500]	; 0x1f4
                           randomizationperiod(5) // Change random variation every 2 samples
 8002722:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
 8002726:	e9c4 6386 	strd	r6, r3, [r4, #536]	; 0x218
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x98>)
 800272c:	6063      	str	r3, [r4, #4]
 800272e:	60a3      	str	r3, [r4, #8]
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x9c>)
 8002732:	6123      	str	r3, [r4, #16]
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa0>)
 8002736:	6423      	str	r3, [r4, #64]	; 0x40
 8002738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800273c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa4>)
 8002740:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
          buildingUp_(false)
 8002744:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            std::srand(static_cast<unsigned>(std::time(0)));
 8002748:	f005 fb84 	bl	8007e54 <time>
 800274c:	f005 fa84 	bl	8007c58 <srand>
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa8>)
 8002752:	4a11      	ldr	r2, [pc, #68]	; (8002798 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xac>)
 8002754:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8002758:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xb0>)
 800275e:	f8c4 727c 	str.w	r7, [r4, #636]	; 0x27c
 8002762:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
 8002766:	f8c4 5280 	str.w	r5, [r4, #640]	; 0x280
 800276a:	f884 6284 	strb.w	r6, [r4, #644]	; 0x284
 800276e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8002772:	f8c4 629c 	str.w	r6, [r4, #668]	; 0x29c
 8002776:	f8c4 2270 	str.w	r2, [r4, #624]	; 0x270
 800277a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
 800277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002780:	20000428 	.word	0x20000428
 8002784:	4302cf5c 	.word	0x4302cf5c
 8002788:	3d4ccccd 	.word	0x3d4ccccd
 800278c:	3a83126f 	.word	0x3a83126f
 8002790:	3fd9999a 	.word	0x3fd9999a
 8002794:	3ca3d70a 	.word	0x3ca3d70a
 8002798:	40a00000 	.word	0x40a00000
 800279c:	467a0000 	.word	0x467a0000

080027a0 <recorder::Adc::DMAService()>:
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_STREAM_1);
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
}

void Adc::DMAService(void)
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80027a2:	49d4      	ldr	r1, [pc, #848]	; (8002af4 <recorder::Adc::DMAService()+0x354>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80027a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80027a8:	f44f 6400 	mov.w	r4, #2048	; 0x800
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ac:	4ad2      	ldr	r2, [pc, #840]	; (8002af8 <recorder::Adc::DMAService()+0x358>)
 80027ae:	b08e      	sub	sp, #56	; 0x38
 80027b0:	608c      	str	r4, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80027b2:	608b      	str	r3, [r1, #8]
 80027b4:	4603      	mov	r3, r0
 80027b6:	6891      	ldr	r1, [r2, #8]
 80027b8:	0749      	lsls	r1, r1, #29
 80027ba:	f100 808a 	bmi.w	80028d2 <recorder::Adc::DMAService()+0x132>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80027be:	6c10      	ldr	r0, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80027c0:	49ce      	ldr	r1, [pc, #824]	; (8002afc <recorder::Adc::DMAService()+0x35c>)
 80027c2:	6894      	ldr	r4, [r2, #8]
 80027c4:	4021      	ands	r1, r4
 80027c6:	f041 0104 	orr.w	r1, r1, #4
 80027ca:	6091      	str	r1, [r2, #8]
    {
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
        LL_ADC_REG_StartConversion(ADC1);
        ProfilingPin<PROFILE_POT_SAMPLING>::Set();

        if (kEnableReverse && current_pot_ == POT_7)
 80027cc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80027d0:	2a06      	cmp	r2, #6
 80027d2:	f000 8177 	beq.w	8002ac4 <recorder::Adc::DMAService()+0x324>
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
 80027d6:	b280      	uxth	r0, r0
        }

        void Sample(float sample)
        {
            // Expand range a little bit to compensate for resistive losses
            sample = hyst_.Process(0.5 + 1.0025f * (sample - 0.5f));
 80027d8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80027dc:	eddf 5ac8 	vldr	s11, [pc, #800]	; 8002b00 <recorder::Adc::DMAService()+0x360>
 80027e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027e4:	ee07 0a90 	vmov	s15, r0
 80027e8:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8002b04 <recorder::Adc::DMAService()+0x364>
 80027ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f0:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80027f4:	eea6 7a86 	vfma.f32	s14, s13, s12
        {
            pot = 0;
        }

        pot_filter_[current_pot_].Sample(pot / 0xFFFF);
 80027f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80027fc:	0090      	lsls	r0, r2, #2
 80027fe:	00c9      	lsls	r1, r1, #3
 8002800:	f101 0408 	add.w	r4, r1, #8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
    }

    float Process(float input)
    {
        float delta = input - position_;
 8002804:	4419      	add	r1, r3
 8002806:	edd1 7a08 	vldr	s15, [r1, #32]
 800280a:	441c      	add	r4, r3

        if (delta >= threshold_)
 800280c:	edd1 6a07 	vldr	s13, [r1, #28]
        float delta = input - position_;
 8002810:	ee37 6a67 	vsub.f32	s12, s14, s15
        if (delta >= threshold_)
 8002814:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	f2c0 8145 	blt.w	8002aaa <recorder::Adc::DMAService()+0x30a>
        {
            position_ = input - threshold_;
 8002820:	ee77 7a66 	vsub.f32	s15, s14, s13
 8002824:	edc1 7a08 	vstr	s15, [r1, #32]
            position_ = input + threshold_;
        }

        // Rescale to full range
        float x = position_;
        x = out_min_ + out_range_ * (x - in_min_) * in_range_inv_;
 8002828:	4410      	add	r0, r2
 800282a:	3201      	adds	r2, #1
 800282c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002830:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002834:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8002838:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800283c:	edd0 6a05 	vldr	s13, [r0, #20]
 8002840:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002844:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8002848:	ed95 6a01 	vldr	s12, [r5, #4]
 800284c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002850:	eeb0 6a66 	vmov.f32	s12, s13
 8002854:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002858:	eef4 6ac6 	vcmpe.f32	s13, s12
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	d80a      	bhi.n	8002878 <recorder::Adc::DMAService()+0xd8>
 8002862:	edd1 7a06 	vldr	s15, [r1, #24]
 8002866:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	bfd4      	ite	le
 8002870:	eef0 6a46 	vmovle.f32	s13, s12
        return std::clamp(x, out_min_, out_max_);
 8002874:	edd0 6a06 	vldrgt	s13, [r0, #24]
        }

        float Position(float sample)
        {
            // Correct for error caused by ADC input impedance
            sample = std::clamp(sample * 64, 0.f, 64.f);
 8002878:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8002b08 <recorder::Adc::DMAService()+0x368>
 800287c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	f2c0 810c 	blt.w	8002aa4 <recorder::Adc::DMAService()+0x304>
 800288c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002890:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	f340 80f5 	ble.w	8002a86 <recorder::Adc::DMAService()+0x2e6>
        increment_ = 0;
    }

    void Sample(float sample)
    {
        increment_ = (sample - history_) * step_;
 800289c:	edd4 7a00 	vldr	s15, [r4]
 80028a0:	ed94 6a01 	vldr	s12, [r4, #4]
 80028a4:	ee77 7a67 	vsub.f32	s15, s14, s15

        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 80028a8:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002b0c <recorder::Adc::DMAService()+0x36c>
        increment_ = (sample - history_) * step_;
 80028ac:	ee67 7a86 	vmul.f32	s15, s15, s12
  { return __builtin_fabsf(__x); }
 80028b0:	eeb0 6ae7 	vabs.f32	s12, s15
 80028b4:	edc4 7a02 	vstr	s15, [r4, #8]
        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 80028b8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80028bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c0:	d803      	bhi.n	80028ca <recorder::Adc::DMAService()+0x12a>
        {
            history_ = sample;
            increment_ = 0.f;
 80028c2:	2100      	movs	r1, #0
            history_ = sample;
 80028c4:	ed84 7a00 	vstr	s14, [r4]
            increment_ = 0.f;
 80028c8:	60a1      	str	r1, [r4, #8]
        current_pot_ = (current_pot_ + 1) % NUM_POTS;
 80028ca:	f002 0207 	and.w	r2, r2, #7
 80028ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        }
    }

    float Next(void)
    {
        history_ += increment_;
 80028d2:	ed93 0a02 	vldr	s0, [r3, #8]
 80028d6:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 80028da:	ed93 1a16 	vldr	s2, [r3, #88]	; 0x58
 80028de:	edd3 1a20 	vldr	s3, [r3, #128]	; 0x80
 80028e2:	ed93 2a2a 	vldr	s4, [r3, #168]	; 0xa8
 80028e6:	edd3 2a34 	vldr	s5, [r3, #208]	; 0xd0
 80028ea:	ed93 3a3e 	vldr	s6, [r3, #248]	; 0xf8
 80028ee:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 80028f2:	ed93 4a04 	vldr	s8, [r3, #16]
 80028f6:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 80028fa:	ed93 5a18 	vldr	s10, [r3, #96]	; 0x60
 80028fe:	ee34 4a00 	vadd.f32	s8, s8, s0
 8002902:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002906:	ee74 4aa0 	vadd.f32	s9, s9, s1
 800290a:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 800290e:	ee35 5a01 	vadd.f32	s10, s10, s2
 8002912:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002916:	ee75 5aa1 	vadd.f32	s11, s11, s3
 800291a:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 800291e:	ee36 6a02 	vadd.f32	s12, s12, s4
 8002922:	edd3 3a4a 	vldr	s7, [r3, #296]	; 0x128
 8002926:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800292a:	ee37 7a03 	vadd.f32	s14, s14, s6

        for (uint32_t idx = 0; idx < kAudioOSFactor; idx++)
        {
            for (uint32_t ch = 0; ch < NUM_AUDIO_INS; ch++)
            {
                float sample = dma_buffer_[read_index_];
 800292e:	4e78      	ldr	r6, [pc, #480]	; (8002b10 <recorder::Adc::DMAService()+0x370>)
 8002930:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8002934:	ed83 6a2a 	vstr	s12, [r3, #168]	; 0xa8
 8002938:	edc3 6a34 	vstr	s13, [r3, #208]	; 0xd0
 800293c:	ed83 7a3e 	vstr	s14, [r3, #248]	; 0xf8
 8002940:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
 8002944:	ed83 4a02 	vstr	s8, [r3, #8]
            pot[i] = pot_filter_[i].Next();
 8002948:	ed8d 4a06 	vstr	s8, [sp, #24]
 800294c:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8002950:	edcd 4a07 	vstr	s9, [sp, #28]
 8002954:	ed83 5a16 	vstr	s10, [r3, #88]	; 0x58
 8002958:	ed8d 5a08 	vstr	s10, [sp, #32]
 800295c:	edc3 5a20 	vstr	s11, [r3, #128]	; 0x80
 8002960:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8002964:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8002968:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800296c:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 8002970:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
                read_index_ = (read_index_ + 1) % kDMABufferSize;
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002974:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002978:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800297c:	4c65      	ldr	r4, [pc, #404]	; (8002b14 <recorder::Adc::DMAService()+0x374>)
 800297e:	1c51      	adds	r1, r2, #1
                float sample = dma_buffer_[read_index_];
 8002980:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002984:	eeb0 6a67 	vmov.f32	s12, s15
 8002988:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002b18 <recorder::Adc::DMAService()+0x378>
                float sample = dma_buffer_[read_index_];
 800298c:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002990:	fba4 0201 	umull	r0, r2, r4, r1
            }
        }

        callback_(audio, pot);
 8002994:	681d      	ldr	r5, [r3, #0]
 8002996:	4668      	mov	r0, sp
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002998:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 800299a:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800299e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80029a2:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029a6:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
        callback_(audio, pot);
 80029aa:	a906      	add	r1, sp, #24
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029ac:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 80029b0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80029b4:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029b8:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80029bc:	ed8d 6a00 	vstr	s12, [sp]
 80029c0:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029c4:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 80029c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80029ce:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029d2:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 80029d6:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 80029da:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80029de:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029e2:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80029e6:	ed8d 6a03 	vstr	s12, [sp, #12]
 80029ea:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029ee:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 80029f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80029f8:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80029fc:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002a00:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002a04:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002a08:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a0c:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a10:	ed8d 6a01 	vstr	s12, [sp, #4]
 8002a14:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a18:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002a1a:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a22:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a26:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002a2a:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002a2e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002a32:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a36:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a3a:	ed8d 6a04 	vstr	s12, [sp, #16]
 8002a3e:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a42:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002a44:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a4c:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a50:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
                float sample = dma_buffer_[read_index_];
 8002a54:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a58:	3201      	adds	r2, #1
                float sample = dma_buffer_[read_index_];
 8002a5a:	edd6 6a00 	vldr	s13, [r6]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a5e:	fba4 6402 	umull	r6, r4, r4, r2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a62:	ed8d 6a02 	vstr	s12, [sp, #8]
                float sample = dma_buffer_[read_index_];
 8002a66:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a6a:	08e4      	lsrs	r4, r4, #3
 8002a6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a70:	eee6 7a87 	vfma.f32	s15, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002a74:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 8002a78:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002a7c:	edcd 7a05 	vstr	s15, [sp, #20]
        callback_(audio, pot);
 8002a80:	47a8      	blx	r5
    }

    PerformCallback();
}
 8002a82:	b00e      	add	sp, #56	; 0x38
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8002a86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a8e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002a92:	ee17 1a10 	vmov	r1, s14
 8002a96:	2900      	cmp	r1, #0
 8002a98:	da17      	bge.n	8002aca <recorder::Adc::DMAService()+0x32a>
            return a + (b - a) * frac;
 8002a9a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002b1c <recorder::Adc::DMAService()+0x37c>
 8002a9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aa2:	e6fb      	b.n	800289c <recorder::Adc::DMAService()+0xfc>
 8002aa4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002b20 <recorder::Adc::DMAService()+0x380>
 8002aa8:	e6f8      	b.n	800289c <recorder::Adc::DMAService()+0xfc>
        else if (delta <= -threshold_)
 8002aaa:	eef1 5a66 	vneg.f32	s11, s13
 8002aae:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	f63f aeb7 	bhi.w	8002828 <recorder::Adc::DMAService()+0x88>
            position_ = input + threshold_;
 8002aba:	ee76 7a87 	vadd.f32	s15, s13, s14
 8002abe:	edc1 7a08 	vstr	s15, [r1, #32]
 8002ac2:	e6b1      	b.n	8002828 <recorder::Adc::DMAService()+0x88>
 8002ac4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002b24 <recorder::Adc::DMAService()+0x384>
 8002ac8:	e696      	b.n	80027f8 <recorder::Adc::DMAService()+0x58>
 8002aca:	293f      	cmp	r1, #63	; 0x3f
            float a = kPotCorrection[index];
 8002acc:	4816      	ldr	r0, [pc, #88]	; (8002b28 <recorder::Adc::DMAService()+0x388>)
 8002ace:	bfa8      	it	ge
 8002ad0:	213f      	movge	r1, #63	; 0x3f
            float frac = sample - index;
 8002ad2:	ee07 1a10 	vmov	s14, r1
            float a = kPotCorrection[index];
 8002ad6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            float frac = sample - index;
 8002ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            return a + (b - a) * frac;
 8002ade:	edd5 6a01 	vldr	s13, [r5, #4]
            float frac = sample - index;
 8002ae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
            float a = kPotCorrection[index];
 8002ae6:	ed95 7a00 	vldr	s14, [r5]
            return a + (b - a) * frac;
 8002aea:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002aee:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002af2:	e6d3      	b.n	800289c <recorder::Adc::DMAService()+0xfc>
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40022000 	.word	0x40022000
 8002afc:	7fffffc0 	.word	0x7fffffc0
 8002b00:	37800080 	.word	0x37800080
 8002b04:	3f8051ec 	.word	0x3f8051ec
 8002b08:	42800000 	.word	0x42800000
 8002b0c:	34000000 	.word	0x34000000
 8002b10:	38000000 	.word	0x38000000
 8002b14:	aaaaaaab 	.word	0xaaaaaaab
 8002b18:	38000080 	.word	0x38000080
 8002b1c:	3c805439 	.word	0x3c805439
 8002b20:	00000000 	.word	0x00000000
 8002b24:	baa3d800 	.word	0xbaa3d800
 8002b28:	08008874 	.word	0x08008874

08002b2c <recorder::Adc::DMAHandler()>:

void Adc::DMAHandler(void)
{
    instance_->DMAService();
 8002b2c:	4b01      	ldr	r3, [pc, #4]	; (8002b34 <recorder::Adc::DMAHandler()+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f7ff be36 	b.w	80027a0 <recorder::Adc::DMAService()>
 8002b34:	20010a4c 	.word	0x20010a4c

08002b38 <recorder::Adc::InitAudioSequence()>:
    while (LL_ADC_IsCalibrationOnGoing(adc));
    system::Delay_ms(1);
}

void Adc::InitAudioSequence(void)
{
 8002b38:	b530      	push	{r4, r5, lr}
    auto adc = ADC2;
    auto trigger = LL_ADC_REG_TRIG_EXT_TIM15_TRGO;

    LL_ADC_REG_InitTypeDef reg_init =
 8002b3a:	2300      	movs	r3, #0
{
 8002b3c:	b087      	sub	sp, #28
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8002b3e:	4c2c      	ldr	r4, [pc, #176]	; (8002bf0 <recorder::Adc::InitAudioSequence()+0xb8>)
    };
 8002b40:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
    LL_ADC_REG_Init(adc, &reg_init);
 8002b44:	4669      	mov	r1, sp
 8002b46:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8002b48:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8002be8 <recorder::Adc::InitAudioSequence()+0xb0>
 8002b4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    };
 8002b50:	2301      	movs	r3, #1
    LL_ADC_REG_InitTypeDef reg_init =
 8002b52:	ed8d 7b04 	vstr	d7, [sp, #16]
    };
 8002b56:	e9cd 2300 	strd	r2, r3, [sp]
    LL_ADC_REG_Init(adc, &reg_init);
 8002b5a:	f002 fffd 	bl	8005b58 <LL_ADC_REG_Init>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <recorder::Adc::InitAudioSequence()+0xbc>)
 8002b60:	fa93 f3a3 	rbit	r3, r3

    for (uint32_t i = 0; i < NUM_AUDIO_INS; i++)
    {
        uint32_t channel = kAudioChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002b64:	2201      	movs	r2, #1
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	69e1      	ldr	r1, [r4, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
  MODIFY_REG(*preg,
 8002b70:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <recorder::Adc::InitAudioSequence()+0xc0>)
 8002b72:	430b      	orrs	r3, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b74:	4921      	ldr	r1, [pc, #132]	; (8002bfc <recorder::Adc::InitAudioSequence()+0xc4>)
 8002b76:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(*preg,
 8002b78:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8002b7c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8002b80:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 8002b84:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  MODIFY_REG(*preg,
 8002b88:	684b      	ldr	r3, [r1, #4]
 8002b8a:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8002b8e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <recorder::Adc::InitAudioSequence()+0xc8>)
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	69e5      	ldr	r5, [r4, #28]
 8002ba0:	409a      	lsls	r2, r3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <recorder::Adc::InitAudioSequence()+0xcc>)
 8002ba4:	432a      	orrs	r2, r5
 8002ba6:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8002ba8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 8002bac:	f422 32f8 	bic.w	r2, r2, #126976	; 0x1f000
 8002bb0:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
 8002bb4:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
  MODIFY_REG(*preg,
 8002bb8:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002bba:	4813      	ldr	r0, [pc, #76]	; (8002c08 <recorder::Adc::InitAudioSequence()+0xd0>)
  MODIFY_REG(*preg,
 8002bbc:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002bc0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002bc4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002bc6:	6922      	ldr	r2, [r4, #16]
 8002bc8:	4013      	ands	r3, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <recorder::Adc::InitAudioSequence()+0xd4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002bcc:	f043 0303 	orr.w	r3, r3, #3
 8002bd0:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bd8:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	4018      	ands	r0, r3
 8002bde:	4302      	orrs	r2, r0
 8002be0:	6122      	str	r2, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 2, LL_ADC_OVS_SHIFT_RIGHT_1);
}
 8002be2:	b007      	add	sp, #28
 8002be4:	bd30      	pop	{r4, r5, pc}
 8002be6:	bf00      	nop
 8002be8:	00000003 	.word	0x00000003
 8002bec:	00001000 	.word	0x00001000
 8002bf0:	40022100 	.word	0x40022100
 8002bf4:	3ef08000 	.word	0x3ef08000
 8002bf8:	40022000 	.word	0x40022000
 8002bfc:	40022114 	.word	0x40022114
 8002c00:	2e300800 	.word	0x2e300800
 8002c04:	fffffbfc 	.word	0xfffffbfc
 8002c08:	fc00fe1f 	.word	0xfc00fe1f
 8002c0c:	00010020 	.word	0x00010020

08002c10 <recorder::Adc::InitPotSequence()>:

void Adc::InitPotSequence(void)
{
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    auto adc = ADC1;
    auto trigger = LL_ADC_REG_TRIG_SOFTWARE;

    LL_ADC_REG_InitTypeDef reg_init =
 8002c14:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8002c18:	b087      	sub	sp, #28
    LL_ADC_REG_InitTypeDef reg_init =
 8002c1a:	f04f 0807 	mov.w	r8, #7
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c24:	4c35      	ldr	r4, [pc, #212]	; (8002cfc <recorder::Adc::InitPotSequence()+0xec>)
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DR_TRANSFER,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8002c26:	4669      	mov	r1, sp
    LL_ADC_REG_InitTypeDef reg_init =
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	9205      	str	r2, [sp, #20]
    LL_ADC_REG_Init(adc, &reg_init);
 8002c2c:	f104 0a1c 	add.w	sl, r4, #28
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c30:	4f33      	ldr	r7, [pc, #204]	; (8002d00 <recorder::Adc::InitPotSequence()+0xf0>)

    for (uint32_t i = 0; i < NUM_POTS; i++)
    {
        uint32_t channel = kPotChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002c32:	f04f 0901 	mov.w	r9, #1
 8002c36:	4e33      	ldr	r6, [pc, #204]	; (8002d04 <recorder::Adc::InitPotSequence()+0xf4>)
 8002c38:	4d33      	ldr	r5, [pc, #204]	; (8002d08 <recorder::Adc::InitPotSequence()+0xf8>)
    LL_ADC_REG_InitTypeDef reg_init =
 8002c3a:	e9cd 8001 	strd	r8, r0, [sp, #4]
    LL_ADC_REG_Init(adc, &reg_init);
 8002c3e:	4832      	ldr	r0, [pc, #200]	; (8002d08 <recorder::Adc::InitPotSequence()+0xf8>)
    LL_ADC_REG_InitTypeDef reg_init =
 8002c40:	e9cd 3303 	strd	r3, r3, [sp, #12]
    LL_ADC_REG_Init(adc, &reg_init);
 8002c44:	f002 ff88 	bl	8005b58 <LL_ADC_REG_Init>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c48:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8002d1c <recorder::Adc::InitPotSequence()+0x10c>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <recorder::Adc::InitPotSequence()+0xfc>)
  MODIFY_REG(*preg,
 8002c4e:	f04f 0e1f 	mov.w	lr, #31
 8002c52:	e030      	b.n	8002cb6 <recorder::Adc::InitPotSequence()+0xa6>
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002c54:	fa09 f100 	lsl.w	r1, r9, r0
 8002c58:	69ea      	ldr	r2, [r5, #28]
    for (uint32_t i = 0; i < NUM_POTS; i++)
 8002c5a:	45a2      	cmp	sl, r4
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002c5c:	ea42 0201 	orr.w	r2, r2, r1
 8002c60:	61ea      	str	r2, [r5, #28]
        LL_ADC_REG_SetSequencerRanks(adc, kADCRegRank[i], channel);
 8002c62:	f856 2f04 	ldr.w	r2, [r6, #4]!
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c66:	ea4f 1192 	mov.w	r1, r2, lsr #6
  MODIFY_REG(*preg,
 8002c6a:	f002 021f 	and.w	r2, r2, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c6e:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 8002c72:	fa00 f002 	lsl.w	r0, r0, r2
 8002c76:	fa0e f202 	lsl.w	r2, lr, r2
 8002c7a:	f851 b007 	ldr.w	fp, [r1, r7]
 8002c7e:	ea2b 0202 	bic.w	r2, fp, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c82:	ea4f 5bd3 	mov.w	fp, r3, lsr #23
  MODIFY_REG(*preg,
 8002c86:	f3c3 5304 	ubfx	r3, r3, #20, #5
  MODIFY_REG(*preg,
 8002c8a:	ea42 0200 	orr.w	r2, r2, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c8e:	f00b 0b04 	and.w	fp, fp, #4
  MODIFY_REG(*preg,
 8002c92:	f04f 0005 	mov.w	r0, #5
  MODIFY_REG(*preg,
 8002c96:	51ca      	str	r2, [r1, r7]
  MODIFY_REG(*preg,
 8002c98:	fa08 f103 	lsl.w	r1, r8, r3
 8002c9c:	f85b 200c 	ldr.w	r2, [fp, ip]
 8002ca0:	fa00 f303 	lsl.w	r3, r0, r3
 8002ca4:	ea22 0201 	bic.w	r2, r2, r1
 8002ca8:	ea43 0302 	orr.w	r3, r3, r2
 8002cac:	f84b 300c 	str.w	r3, [fp, ip]
    for (uint32_t i = 0; i < NUM_POTS; i++)
 8002cb0:	d010      	beq.n	8002cd4 <recorder::Adc::InitPotSequence()+0xc4>
        uint32_t channel = kPotChannels[i];
 8002cb2:	f854 3b04 	ldr.w	r3, [r4], #4
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002cb6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8002cba:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d0c8      	beq.n	8002c54 <recorder::Adc::InitPotSequence()+0x44>
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	fab2 f282 	clz	r2, r2
 8002cca:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8002cce:	fa09 f102 	lsl.w	r1, r9, r2
 8002cd2:	e7c1      	b.n	8002c58 <recorder::Adc::InitPotSequence()+0x48>
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002cd4:	6928      	ldr	r0, [r5, #16]
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <recorder::Adc::InitPotSequence()+0x100>)
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002cd8:	490e      	ldr	r1, [pc, #56]	; (8002d14 <recorder::Adc::InitPotSequence()+0x104>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002cda:	4003      	ands	r3, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <recorder::Adc::InitPotSequence()+0x108>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002cde:	f043 0303 	orr.w	r3, r3, #3
 8002ce2:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8002ce4:	692b      	ldr	r3, [r5, #16]
 8002ce6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cea:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002cec:	692b      	ldr	r3, [r5, #16]
 8002cee:	4019      	ands	r1, r3
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	612a      	str	r2, [r5, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 16, LL_ADC_OVS_SHIFT_RIGHT_4);
}
 8002cf4:	b007      	add	sp, #28
 8002cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	080089bc 	.word	0x080089bc
 8002d00:	40022030 	.word	0x40022030
 8002d04:	08008974 	.word	0x08008974
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	0c900008 	.word	0x0c900008
 8002d10:	fffffbfc 	.word	0xfffffbfc
 8002d14:	fc00fe1f 	.word	0xfc00fe1f
 8002d18:	000f0080 	.word	0x000f0080
 8002d1c:	40022014 	.word	0x40022014

08002d20 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:
// PUBLIC //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Adc::Init(Callback callback)
{
    instance_ = this;
 8002d20:	4ac1      	ldr	r2, [pc, #772]	; (8003028 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x308>)
        history_ = 0;
 8002d22:	2300      	movs	r3, #0
        out_max_ = max;
 8002d24:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
{
 8002d28:	b570      	push	{r4, r5, r6, lr}
        step_ = 1.f / period;
 8002d2a:	f04f 5e78 	mov.w	lr, #1040187392	; 0x3e000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4dbf      	ldr	r5, [pc, #764]	; (800302c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x30c>)
    instance_ = this;
 8002d30:	6010      	str	r0, [r2, #0]
    callback_ = callback;
    started_ = false;
 8002d32:	2600      	movs	r6, #0
        threshold_ = threshold;
 8002d34:	4abe      	ldr	r2, [pc, #760]	; (8003030 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x310>)
{
 8002d36:	b094      	sub	sp, #80	; 0x50
    callback_ = callback;
 8002d38:	6001      	str	r1, [r0, #0]
{
 8002d3a:	4604      	mov	r4, r0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002d3c:	49bd      	ldr	r1, [pc, #756]	; (8003034 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x314>)
 8002d3e:	f8c0 e00c 	str.w	lr, [r0, #12]
        out_max_ = max;
 8002d42:	f8c0 c018 	str.w	ip, [r0, #24]
        out_range_ = out_max_ - out_min_;
 8002d46:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8002d4a:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
        out_max_ = max;
 8002d4e:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
        out_range_ = out_max_ - out_min_;
 8002d52:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
 8002d56:	f8c0 e05c 	str.w	lr, [r0, #92]	; 0x5c
        out_max_ = max;
 8002d5a:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
        out_range_ = out_max_ - out_min_;
 8002d5e:	f8c0 c074 	str.w	ip, [r0, #116]	; 0x74
        threshold_ = threshold;
 8002d62:	61c2      	str	r2, [r0, #28]
        in_min_ = out_min_ + threshold_;
 8002d64:	6282      	str	r2, [r0, #40]	; 0x28
        threshold_ = threshold;
 8002d66:	6442      	str	r2, [r0, #68]	; 0x44
        in_min_ = out_min_ + threshold_;
 8002d68:	6502      	str	r2, [r0, #80]	; 0x50
        threshold_ = threshold;
 8002d6a:	66c2      	str	r2, [r0, #108]	; 0x6c
        in_min_ = out_min_ + threshold_;
 8002d6c:	6782      	str	r2, [r0, #120]	; 0x78
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002d6e:	62c1      	str	r1, [r0, #44]	; 0x2c
        history_ = 0;
 8002d70:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8002d72:	6103      	str	r3, [r0, #16]
        out_min_ = min;
 8002d74:	6143      	str	r3, [r0, #20]
        position_ = initial_value;
 8002d76:	6203      	str	r3, [r0, #32]
        history_ = 0;
 8002d78:	6303      	str	r3, [r0, #48]	; 0x30
        increment_ = 0;
 8002d7a:	6383      	str	r3, [r0, #56]	; 0x38
        out_min_ = min;
 8002d7c:	63c3      	str	r3, [r0, #60]	; 0x3c
        position_ = initial_value;
 8002d7e:	6483      	str	r3, [r0, #72]	; 0x48
        history_ = 0;
 8002d80:	6583      	str	r3, [r0, #88]	; 0x58
        increment_ = 0;
 8002d82:	6603      	str	r3, [r0, #96]	; 0x60
        out_min_ = min;
 8002d84:	6643      	str	r3, [r0, #100]	; 0x64
        position_ = initial_value;
 8002d86:	6703      	str	r3, [r0, #112]	; 0x70
    started_ = false;
 8002d88:	7106      	strb	r6, [r0, #4]
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002d8a:	6541      	str	r1, [r0, #84]	; 0x54
        step_ = 1.f / period;
 8002d8c:	f8c0 e084 	str.w	lr, [r0, #132]	; 0x84
        out_max_ = max;
 8002d90:	f8c0 c090 	str.w	ip, [r0, #144]	; 0x90
        out_range_ = out_max_ - out_min_;
 8002d94:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
 8002d98:	f8c0 e0ac 	str.w	lr, [r0, #172]	; 0xac
        out_max_ = max;
 8002d9c:	f8c0 c0b8 	str.w	ip, [r0, #184]	; 0xb8
        out_range_ = out_max_ - out_min_;
 8002da0:	f8c0 c0c4 	str.w	ip, [r0, #196]	; 0xc4
 8002da4:	f8c0 e0d4 	str.w	lr, [r0, #212]	; 0xd4
        out_max_ = max;
 8002da8:	f8c0 c0e0 	str.w	ip, [r0, #224]	; 0xe0
        out_range_ = out_max_ - out_min_;
 8002dac:	f8c0 c0ec 	str.w	ip, [r0, #236]	; 0xec
 8002db0:	f8c0 e0fc 	str.w	lr, [r0, #252]	; 0xfc
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002db4:	67c1      	str	r1, [r0, #124]	; 0x7c
        threshold_ = threshold;
 8002db6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
        in_min_ = out_min_ + threshold_;
 8002dba:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002dbe:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
        threshold_ = threshold;
 8002dc2:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
        in_min_ = out_min_ + threshold_;
 8002dc6:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002dca:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
        threshold_ = threshold;
 8002dce:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
        in_min_ = out_min_ + threshold_;
 8002dd2:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002dd6:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
        history_ = 0;
 8002dda:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        increment_ = 0;
 8002dde:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        out_min_ = min;
 8002de2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        position_ = initial_value;
 8002de6:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
        history_ = 0;
 8002dea:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
        increment_ = 0;
 8002dee:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        out_min_ = min;
 8002df2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        position_ = initial_value;
 8002df6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
        history_ = 0;
 8002dfa:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        increment_ = 0;
 8002dfe:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        out_min_ = min;
 8002e02:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
        position_ = initial_value;
 8002e06:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
        history_ = 0;
 8002e0a:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        increment_ = 0;
 8002e0e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
        out_min_ = min;
 8002e12:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
        position_ = initial_value;
 8002e16:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
        history_ = 0;
 8002e1a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        increment_ = 0;
 8002e1e:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
        out_min_ = min;
 8002e22:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        position_ = initial_value;
 8002e26:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
        step_ = 1.f / period;
 8002e2a:	f8c0 e124 	str.w	lr, [r0, #292]	; 0x124
        out_max_ = max;
 8002e2e:	f8c0 c108 	str.w	ip, [r0, #264]	; 0x108
        out_range_ = out_max_ - out_min_;
 8002e32:	f8c0 c114 	str.w	ip, [r0, #276]	; 0x114
        out_max_ = max;
 8002e36:	f8c0 c130 	str.w	ip, [r0, #304]	; 0x130
        out_range_ = out_max_ - out_min_;
 8002e3a:	f8c0 c13c 	str.w	ip, [r0, #316]	; 0x13c
        threshold_ = threshold;
 8002e3e:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
        in_min_ = out_min_ + threshold_;
 8002e42:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002e46:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
 8002e4a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
        threshold_ = threshold;
 8002e4e:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
}

void Adc::Reset(void)
{
    read_index_ = 0;
    current_pot_ = 0;
 8002e52:	e9c0 6652 	strd	r6, r6, [r0, #328]	; 0x148
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        in_min_ = out_min_ + threshold_;
 8002e5a:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    LL_GPIO_StructInit(&gpio_init);
 8002e5e:	a804      	add	r0, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002e68:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e74:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002e80:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	9b02      	ldr	r3, [sp, #8]
    LL_GPIO_StructInit(&gpio_init);
 8002e8c:	f002 ffa6 	bl	8005ddc <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_6 |
 8002e90:	22ca      	movs	r2, #202	; 0xca
 8002e92:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8002e94:	a904      	add	r1, sp, #16
 8002e96:	4868      	ldr	r0, [pc, #416]	; (8003038 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x318>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8002e98:	9608      	str	r6, [sp, #32]
    gpio_init.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_6 |
 8002e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8002e9e:	f002 ff17 	bl	8005cd0 <LL_GPIO_Init>
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8002ea2:	231f      	movs	r3, #31
    LL_GPIO_Init(GPIOC, &gpio_init);
 8002ea4:	a904      	add	r1, sp, #16
 8002ea6:	4865      	ldr	r0, [pc, #404]	; (800303c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x31c>)
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8002ea8:	9304      	str	r3, [sp, #16]
    LL_GPIO_Init(GPIOC, &gpio_init);
 8002eaa:	f002 ff11 	bl	8005cd0 <LL_GPIO_Init>
  *         performance is the same on the full voltage range
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableAnalogBooster(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 8002eae:	4a64      	ldr	r2, [pc, #400]	; (8003040 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x320>)
  MODIFY_REG(ADCx->CR,
 8002eb0:	4964      	ldr	r1, [pc, #400]	; (8003044 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
 8002eb2:	6853      	ldr	r3, [r2, #4]
 8002eb4:	4864      	ldr	r0, [pc, #400]	; (8003048 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x328>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	6053      	str	r3, [r2, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ebc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ec0:	4a62      	ldr	r2, [pc, #392]	; (800304c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x32c>)
 8002ec2:	f043 0320 	orr.w	r3, r3, #32
 8002ec6:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002eca:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8002ece:	4d60      	ldr	r5, [pc, #384]	; (8003050 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x330>)
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ed8:	6893      	ldr	r3, [r2, #8]
 8002eda:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8002ee4:	688a      	ldr	r2, [r1, #8]
 8002ee6:	4002      	ands	r2, r0
 8002ee8:	f042 0202 	orr.w	r2, r2, #2
 8002eec:	608a      	str	r2, [r1, #8]
 8002eee:	4a59      	ldr	r2, [pc, #356]	; (8003054 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 8002ef0:	6893      	ldr	r3, [r2, #8]
 8002ef2:	4003      	ands	r3, r0
    system::Delay_ms(1);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6093      	str	r3, [r2, #8]
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8002efc:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002efe:	4d51      	ldr	r5, [pc, #324]	; (8003044 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8002f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x338>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 8002f0a:	688b      	ldr	r3, [r1, #8]
 8002f0c:	bf0c      	ite	eq
 8002f0e:	f443 73e0 	orreq.w	r3, r3, #448	; 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 8002f12:	f443 7340 	orrne.w	r3, r3, #768	; 0x300
 8002f16:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f18:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x33c>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8002f20:	68aa      	ldr	r2, [r5, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	60ab      	str	r3, [r5, #8]
 8002f2a:	f001 f951 	bl	80041d0 <recorder::system::Delay_ms(unsigned long)>
    LL_ADC_InitTypeDef adc_init =
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2300      	movs	r3, #0
    LL_ADC_Init(adc, &adc_init);
 8002f32:	a904      	add	r1, sp, #16
 8002f34:	4628      	mov	r0, r5
    LL_ADC_InitTypeDef adc_init =
 8002f36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9306      	str	r3, [sp, #24]
    LL_ADC_Init(adc, &adc_init);
 8002f3e:	f002 fdef 	bl	8005b20 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8002f42:	68ab      	ldr	r3, [r5, #8]
 8002f44:	4a46      	ldr	r2, [pc, #280]	; (8003060 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x340>)
 8002f46:	401a      	ands	r2, r3
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x344>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f4e:	68ab      	ldr	r3, [r5, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dbfc      	blt.n	8002f4e <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x22e>
    system::Delay_ms(1);
 8002f54:	2001      	movs	r0, #1
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f56:	4d3f      	ldr	r5, [pc, #252]	; (8003054 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 8002f58:	f001 f93a 	bl	80041d0 <recorder::system::Delay_ms(unsigned long)>
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8002f5c:	4b3c      	ldr	r3, [pc, #240]	; (8003050 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x330>)
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 8002f5e:	4a3d      	ldr	r2, [pc, #244]	; (8003054 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
    system::Delay_ms(1);
 8002f60:	2001      	movs	r0, #1
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 8002f6c:	6893      	ldr	r3, [r2, #8]
 8002f6e:	bf0c      	ite	eq
 8002f70:	f443 73e0 	orreq.w	r3, r3, #448	; 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 8002f74:	f443 7340 	orrne.w	r3, r3, #768	; 0x300
 8002f78:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f7a:	4a37      	ldr	r2, [pc, #220]	; (8003058 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x338>)
 8002f7c:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x33c>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f80:	400a      	ands	r2, r1
 8002f82:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8002f84:	68aa      	ldr	r2, [r5, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60ab      	str	r3, [r5, #8]
 8002f8e:	f001 f91f 	bl	80041d0 <recorder::system::Delay_ms(unsigned long)>
    LL_ADC_InitTypeDef adc_init =
 8002f92:	2200      	movs	r2, #0
 8002f94:	2300      	movs	r3, #0
    LL_ADC_Init(adc, &adc_init);
 8002f96:	a904      	add	r1, sp, #16
 8002f98:	4628      	mov	r0, r5
    LL_ADC_InitTypeDef adc_init =
 8002f9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9306      	str	r3, [sp, #24]
    LL_ADC_Init(adc, &adc_init);
 8002fa2:	f002 fdbd 	bl	8005b20 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8002fa6:	68ab      	ldr	r3, [r5, #8]
 8002fa8:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x340>)
 8002faa:	401a      	ands	r2, r3
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x344>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fb2:	68ab      	ldr	r3, [r5, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dbfc      	blt.n	8002fb2 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x292>
    system::Delay_ms(1);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f001 f909 	bl	80041d0 <recorder::system::Delay_ms(unsigned long)>
    InitAudioSequence();
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff fdba 	bl	8002b38 <recorder::Adc::InitAudioSequence()>
    InitPotSequence();
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f7ff fe23 	bl	8002c10 <recorder::Adc::InitPotSequence()>
  MODIFY_REG(ADCx->CR,
 8002fca:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
 8002fcc:	481e      	ldr	r0, [pc, #120]	; (8003048 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x328>)
 8002fce:	6891      	ldr	r1, [r2, #8]
 8002fd0:	4001      	ands	r1, r0
 8002fd2:	f041 0101 	orr.w	r1, r1, #1
 8002fd6:	6091      	str	r1, [r2, #8]
 8002fd8:	68ab      	ldr	r3, [r5, #8]
 8002fda:	4003      	ands	r3, r0
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002fe2:	6813      	ldr	r3, [r2, #0]
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 8002fe4:	07d9      	lsls	r1, r3, #31
 8002fe6:	d5fc      	bpl.n	8002fe2 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c2>
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 8002fea:	6813      	ldr	r3, [r2, #0]
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC2));
 8002fec:	07db      	lsls	r3, r3, #31
 8002fee:	d5fc      	bpl.n	8002fea <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2ca>
    LL_DMA_InitTypeDef dma_init =
 8002ff0:	2234      	movs	r2, #52	; 0x34
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	a806      	add	r0, sp, #24
 8002ff6:	250c      	movs	r5, #12
 8002ff8:	f004 fa15 	bl	8007426 <memset>
 8002ffc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003000:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x30c>)
    LL_DMA_InitTypeDef dma_init =
 8003006:	9007      	str	r0, [sp, #28]
 8003008:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800300c:	9109      	str	r1, [sp, #36]	; 0x24
 800300e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003012:	950c      	str	r5, [sp, #48]	; 0x30
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003014:	aa04      	add	r2, sp, #16
 8003016:	4c14      	ldr	r4, [pc, #80]	; (8003068 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x348>)
    LL_DMA_InitTypeDef dma_init =
 8003018:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800301c:	200a      	movs	r0, #10
 800301e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003022:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
 8003026:	e021      	b.n	800306c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x34c>
 8003028:	20010a4c 	.word	0x20010a4c
 800302c:	58024400 	.word	0x58024400
 8003030:	3a83126f 	.word	0x3a83126f
 8003034:	3f8041ab 	.word	0x3f8041ab
 8003038:	58020000 	.word	0x58020000
 800303c:	58020800 	.word	0x58020800
 8003040:	58000400 	.word	0x58000400
 8003044:	40022000 	.word	0x40022000
 8003048:	7fffffc0 	.word	0x7fffffc0
 800304c:	40022300 	.word	0x40022300
 8003050:	5c001000 	.word	0x5c001000
 8003054:	40022100 	.word	0x40022100
 8003058:	5fffffc0 	.word	0x5fffffc0
 800305c:	6fffffc0 	.word	0x6fffffc0
 8003060:	3ffeffc0 	.word	0x3ffeffc0
 8003064:	80010000 	.word	0x80010000
 8003068:	40020000 	.word	0x40020000
    };
 800306c:	4814      	ldr	r0, [pc, #80]	; (80030c0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a0>)
 800306e:	4915      	ldr	r1, [pc, #84]	; (80030c4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a4>)
 8003070:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003074:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003078:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 800307a:	f041 0101 	orr.w	r1, r1, #1
 800307e:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003082:	2101      	movs	r1, #1
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	9b03      	ldr	r3, [sp, #12]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003090:	f002 fdcc 	bl	8005c2c <LL_DMA_Init>
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  register uint32_t dma_base_addr = (uint32_t)DMAx;

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    irq::RegisterHandler(DMA1_Stream1_IRQn, DMAHandler);
 8003096:	4628      	mov	r0, r5
 8003098:	490b      	ldr	r1, [pc, #44]	; (80030c8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a8>)
 800309a:	f023 0310 	bic.w	r3, r3, #16
 800309e:	62a3      	str	r3, [r4, #40]	; 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80030a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030a2:	f023 0308 	bic.w	r3, r3, #8
 80030a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80030a8:	f000 fc34 	bl	8003914 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream1_IRQn, kADCIRQPriority);
 80030ac:	4628      	mov	r0, r5
 80030ae:	2101      	movs	r1, #1
 80030b0:	f000 fc6c 	bl	800398c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream1_IRQn);
 80030b4:	4628      	mov	r0, r5
}
 80030b6:	b014      	add	sp, #80	; 0x50
 80030b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    irq::Enable(DMA1_Stream1_IRQn);
 80030bc:	f000 bc4c 	b.w	8003958 <recorder::irq::Enable(IRQn_Type)>
 80030c0:	40022140 	.word	0x40022140
 80030c4:	38000000 	.word	0x38000000
 80030c8:	08002b2d 	.word	0x08002b2d

080030cc <recorder::Adc::Start()>:
    }
}

void Adc::Start(void)
{
    if (!started_)
 80030cc:	7903      	ldrb	r3, [r0, #4]
 80030ce:	bb53      	cbnz	r3, 8003126 <recorder::Adc::Start()+0x5a>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <recorder::Adc::Start()+0x5c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80030d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030d6:	4915      	ldr	r1, [pc, #84]	; (800312c <recorder::Adc::Start()+0x60>)
{
 80030d8:	b430      	push	{r4, r5}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80030da:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80030de:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80030e0:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80030e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e4:	f042 0210 	orr.w	r2, r2, #16
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	f042 0208 	orr.w	r2, r2, #8
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
 80030f2:	688b      	ldr	r3, [r1, #8]
 80030f4:	075b      	lsls	r3, r3, #29
 80030f6:	d4fc      	bmi.n	80030f2 <recorder::Adc::Start()+0x26>
  MODIFY_REG(ADCx->CR,
 80030f8:	688a      	ldr	r2, [r1, #8]
 80030fa:	4d0d      	ldr	r5, [pc, #52]	; (8003130 <recorder::Adc::Start()+0x64>)
 80030fc:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <recorder::Adc::Start()+0x68>)
 80030fe:	402a      	ands	r2, r5
 8003100:	f042 0204 	orr.w	r2, r2, #4
 8003104:	608a      	str	r2, [r1, #8]
        LL_ADC_REG_StartConversion(ADC2);

        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);

        started_ = true;
 8003106:	2101      	movs	r1, #1
 8003108:	68a3      	ldr	r3, [r4, #8]
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <recorder::Adc::Start()+0x5c>)
 800310c:	402b      	ands	r3, r5
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	60a3      	str	r3, [r4, #8]
 8003114:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003118:	6093      	str	r3, [r2, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800311a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800311c:	430b      	orrs	r3, r1
    }
}
 800311e:	bc30      	pop	{r4, r5}
 8003120:	6293      	str	r3, [r2, #40]	; 0x28
        started_ = true;
 8003122:	7101      	strb	r1, [r0, #4]
}
 8003124:	4770      	bx	lr
 8003126:	4770      	bx	lr
 8003128:	40020000 	.word	0x40020000
 800312c:	40022000 	.word	0x40022000
 8003130:	7fffffc0 	.word	0x7fffffc0
 8003134:	40022100 	.word	0x40022100

08003138 <recorder::Adc::Stop()>:

void Adc::Stop(void)
{
    if (started_)
 8003138:	7903      	ldrb	r3, [r0, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04c      	beq.n	80031d8 <recorder::Adc::Stop()+0xa0>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800313e:	4a27      	ldr	r2, [pc, #156]	; (80031dc <recorder::Adc::Stop()+0xa4>)
 8003140:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003142:	f023 0301 	bic.w	r3, r3, #1
{
 8003146:	b430      	push	{r4, r5}
 8003148:	6293      	str	r3, [r2, #40]	; 0x28
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 800314a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    {
        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
        while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_1));
 800314c:	07d9      	lsls	r1, r3, #31
 800314e:	d4fc      	bmi.n	800314a <recorder::Adc::Stop()+0x12>
  MODIFY_REG(ADCx->CR,
 8003150:	4923      	ldr	r1, [pc, #140]	; (80031e0 <recorder::Adc::Stop()+0xa8>)
 8003152:	4d24      	ldr	r5, [pc, #144]	; (80031e4 <recorder::Adc::Stop()+0xac>)
 8003154:	688a      	ldr	r2, [r1, #8]
 8003156:	4c24      	ldr	r4, [pc, #144]	; (80031e8 <recorder::Adc::Stop()+0xb0>)
 8003158:	402a      	ands	r2, r5
 800315a:	f042 0210 	orr.w	r2, r2, #16
 800315e:	608a      	str	r2, [r1, #8]
 8003160:	68a3      	ldr	r3, [r4, #8]
 8003162:	402b      	ands	r3, r5
 8003164:	f043 0310 	orr.w	r3, r3, #16
 8003168:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316a:	688b      	ldr	r3, [r1, #8]
 800316c:	075b      	lsls	r3, r3, #29
 800316e:	d4fc      	bmi.n	800316a <recorder::Adc::Stop()+0x32>
 8003170:	491d      	ldr	r1, [pc, #116]	; (80031e8 <recorder::Adc::Stop()+0xb0>)
 8003172:	688a      	ldr	r2, [r1, #8]
 8003174:	f012 0204 	ands.w	r2, r2, #4
 8003178:	d1fb      	bne.n	8003172 <recorder::Adc::Stop()+0x3a>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800317a:	4918      	ldr	r1, [pc, #96]	; (80031dc <recorder::Adc::Stop()+0xa4>)
        history_ = 0;
 800317c:	2300      	movs	r3, #0
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800317e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003182:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003184:	f024 0410 	bic.w	r4, r4, #16
 8003188:	628c      	str	r4, [r1, #40]	; 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800318a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800318c:	f024 0408 	bic.w	r4, r4, #8
 8003190:	628c      	str	r4, [r1, #40]	; 0x28
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003192:	f44f 6480 	mov.w	r4, #1024	; 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8003196:	608d      	str	r5, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003198:	608c      	str	r4, [r1, #8]
 800319a:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 800319c:	6103      	str	r3, [r0, #16]
        history_ = 0;
 800319e:	6303      	str	r3, [r0, #48]	; 0x30
        increment_ = 0;
 80031a0:	6383      	str	r3, [r0, #56]	; 0x38
        history_ = 0;
 80031a2:	6583      	str	r3, [r0, #88]	; 0x58
        increment_ = 0;
 80031a4:	6603      	str	r3, [r0, #96]	; 0x60
        history_ = 0;
 80031a6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        increment_ = 0;
 80031aa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        history_ = 0;
 80031ae:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
        increment_ = 0;
 80031b2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        history_ = 0;
 80031b6:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        increment_ = 0;
 80031ba:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        history_ = 0;
 80031be:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        increment_ = 0;
 80031c2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
        history_ = 0;
 80031c6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        increment_ = 0;
 80031ca:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
        LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
        LL_DMA_ClearFlag_TC1(DMA1);
        LL_DMA_ClearFlag_HT1(DMA1);

        Reset();
        started_ = false;
 80031ce:	7102      	strb	r2, [r0, #4]
    }
}
 80031d0:	bc30      	pop	{r4, r5}
    current_pot_ = 0;
 80031d2:	e9c0 2252 	strd	r2, r2, [r0, #328]	; 0x148
}
 80031d6:	4770      	bx	lr
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40022000 	.word	0x40022000
 80031e4:	7fffffc0 	.word	0x7fffffc0
 80031e8:	40022100 	.word	0x40022100

080031ec <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
    static void TimerHandler(void);

    static inline
    void AdcCallback(const AudioInput& in, const PotInput& pot)
    {
        instance_->Service(in, pot);
 80031ec:	4bbb      	ldr	r3, [pc, #748]	; (80034dc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f0>)
    void AdcCallback(const AudioInput& in, const PotInput& pot)
 80031ee:	b530      	push	{r4, r5, lr}
        instance_->Service(in, pot);
 80031f0:	681c      	ldr	r4, [r3, #0]

    void Service(const AudioInput& in, const PotInput& pot)
    {
        AudioOutput out;

        if (state_ == STATE_STARTING)
 80031f2:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 80031f6:	2b01      	cmp	r3, #1
    void AdcCallback(const AudioInput& in, const PotInput& pot)
 80031f8:	ed2d 8b08 	vpush	{d8-d11}
 80031fc:	b085      	sub	sp, #20
        if (state_ == STATE_STARTING)
 80031fe:	f000 80a8 	beq.w	8003352 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x166>
            if (fade_position_ >= 1)
            {
                state_ = STATE_RUNNING;
            }
        }
        else if (state_ == STATE_RUNNING)
 8003202:	2b02      	cmp	r3, #2
 8003204:	f000 8085 	beq.w	8003312 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x126>
                // Disable the amplifier at the start of the soft-off curve
                // instead of the end, otherwise the speaker will pop.
                amp_enable_.Clear();
            }
        }
        else if (state_ == STATE_STOPPING)
 8003208:	2b03      	cmp	r3, #3
 800320a:	f000 80ff 	beq.w	800340c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x220>
    void Process(const AudioOutput& audio)
    {
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            float sample = audio[AUDIO_OUT_LINE][i];
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800320e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 8003212:	ed9d 6a01 	vldr	s12, [sp, #4]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003216:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800321a:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 800321e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8003222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003226:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	f2c0 808e 	blt.w	800334e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x162>
 8003232:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	f300 80e4 	bgt.w	8003406 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x21a>
            uint32_t code = 0.5 + 0xFFF * sample;
 800323e:	eddf 6aa8 	vldr	s13, [pc, #672]	; 80034e0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 8003242:	eee7 7a26 	vfma.f32	s15, s14, s13
 8003246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800324a:	ee17 2a90 	vmov	r2, s15
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800324e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 8003252:	ed9d 6a02 	vldr	s12, [sp, #8]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003256:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            dma_buffer_[write_index_] = code;
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800325a:	1c69      	adds	r1, r5, #1
 800325c:	4ba1      	ldr	r3, [pc, #644]	; (80034e4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800325e:	ee36 7a26 	vadd.f32	s14, s12, s13
            dma_buffer_[write_index_] = code;
 8003262:	48a1      	ldr	r0, [pc, #644]	; (80034e8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2fc>)
 8003264:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003268:	ee27 7a27 	vmul.f32	s14, s14, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800326c:	fba3 2301 	umull	r2, r3, r3, r1
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8003282:	db62      	blt.n	800334a <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x15e>
 8003284:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	f300 80b8 	bgt.w	8003400 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x214>
            uint32_t code = 0.5 + 0xFFF * sample;
 8003290:	eddf 6a93 	vldr	s13, [pc, #588]	; 80034e0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 8003294:	eee7 7a26 	vfma.f32	s15, s14, s13
 8003298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800329c:	ee17 2a90 	vmov	r2, s15
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80032a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 80032a4:	ed9d 6a03 	vldr	s12, [sp, #12]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80032a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80032ac:	1c59      	adds	r1, r3, #1
            dma_buffer_[write_index_] = code;
 80032ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80032b2:	ee36 7a26 	vadd.f32	s14, s12, s13
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80032b6:	4b8b      	ldr	r3, [pc, #556]	; (80034e4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
 80032b8:	fba3 2301 	umull	r2, r3, r3, r1
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80032bc:	ee27 7a27 	vmul.f32	s14, s14, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80032c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032ca:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	db38      	blt.n	8003346 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x15a>
 80032d4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	f300 808d 	bgt.w	80033fa <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20e>
            uint32_t code = 0.5 + 0xFFF * sample;
 80032e0:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80034e0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 80032e4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80032e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ec:	ee17 1a90 	vmov	r1, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80032f0:	1c5a      	adds	r2, r3, #1
            dma_buffer_[write_index_] = code;
 80032f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80032f6:	4b7b      	ldr	r3, [pc, #492]	; (80034e4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003302:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8003306:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    }
 800330a:	b005      	add	sp, #20
 800330c:	ecbd 8b08 	vpop	{d8-d11}
 8003310:	bd30      	pop	{r4, r5, pc}
            out = callback_(in, pot);
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x300>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4798      	blx	r3
            if (cue_stop_)
 8003318:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
            out = callback_(in, pot);
 800331c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003320:	edcd 0a02 	vstr	s1, [sp, #8]
 8003324:	ed8d 1a03 	vstr	s2, [sp, #12]
            if (cue_stop_)
 8003328:	2b00      	cmp	r3, #0
 800332a:	f43f af70 	beq.w	800320e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
                fade_position_ = 1;
 800332e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
                state_ = STATE_STOPPING;
 8003332:	2003      	movs	r0, #3
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8003334:	4b6e      	ldr	r3, [pc, #440]	; (80034f0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x304>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333a:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
                fade_position_ = 1;
 800333e:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
 8003342:	619a      	str	r2, [r3, #24]
    }
 8003344:	e763      	b.n	800320e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 8003346:	2100      	movs	r1, #0
 8003348:	e7d2      	b.n	80032f0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x104>
 800334a:	2200      	movs	r2, #0
 800334c:	e7a8      	b.n	80032a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4>
 800334e:	2200      	movs	r2, #0
 8003350:	e77d      	b.n	800324e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x62>
 8003352:	ed94 9a57 	vldr	s18, [r4, #348]	; 0x15c
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003356:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                fade_position_ += 1 / kFadeDuration;
 800335a:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80034f4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x308>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800335e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8003362:	ed9f ba65 	vldr	s22, [pc, #404]	; 80034f8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30c>
 8003366:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
                fade_position_ += 1 / kFadeDuration;
 800336a:	ee39 0a00 	vadd.f32	s0, s18, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800336e:	eddf aa63 	vldr	s21, [pc, #396]	; 80034fc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x310>
                fade_position_ += 1 / kFadeDuration;
 8003372:	eddf 9a63 	vldr	s19, [pc, #396]	; 8003500 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x314>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003376:	fe80 0a48 	vminnm.f32	s0, s0, s16
 800337a:	fe80 0a0b 	vmaxnm.f32	s0, s0, s22
  { return __builtin_cosf(__x); }
 800337e:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8003382:	f003 f995 	bl	80066b0 <cosf>
 8003386:	eeb0 7a68 	vmov.f32	s14, s17
 800338a:	ee38 0a40 	vsub.f32	s0, s16, s0
                fade_position_ += 1 / kFadeDuration;
 800338e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003504 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x318>
 8003392:	ee79 9a29 	vadd.f32	s19, s18, s19
 8003396:	ee79 7a27 	vadd.f32	s15, s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800339a:	eea0 7a0a 	vfma.f32	s14, s0, s20
 800339e:	fec7 7ac8 	vminnm.f32	s15, s15, s16
 80033a2:	fec7 7a8b 	vmaxnm.f32	s15, s15, s22
 80033a6:	ee27 0aaa 	vmul.f32	s0, s15, s21
                    out[ch][i] = FadeCurve(fade_position_);
 80033aa:	ed8d 7a01 	vstr	s14, [sp, #4]
 80033ae:	f003 f97f 	bl	80066b0 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80033b2:	eef0 7a68 	vmov.f32	s15, s17
 80033b6:	ee38 0a40 	vsub.f32	s0, s16, s0
 80033ba:	eee0 7a0a 	vfma.f32	s15, s0, s20
 80033be:	fe89 0ac8 	vminnm.f32	s0, s19, s16
 80033c2:	fe80 0a0b 	vmaxnm.f32	s0, s0, s22
 80033c6:	ee20 0a2a 	vmul.f32	s0, s0, s21
                    out[ch][i] = FadeCurve(fade_position_);
 80033ca:	edcd 7a02 	vstr	s15, [sp, #8]
 80033ce:	f003 f96f 	bl	80066b0 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80033d2:	ee38 0a40 	vsub.f32	s0, s16, s0
            if (fade_position_ >= 1)
 80033d6:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003508 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31c>
 80033da:	edc4 9a57 	vstr	s19, [r4, #348]	; 0x15c
 80033de:	eeb4 9ae7 	vcmpe.f32	s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80033e2:	eee0 8a0a 	vfma.f32	s17, s0, s20
            if (fade_position_ >= 1)
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    out[ch][i] = FadeCurve(fade_position_);
 80033ea:	edcd 8a03 	vstr	s17, [sp, #12]
            if (fade_position_ >= 1)
 80033ee:	f6ff af0e 	blt.w	800320e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
                state_ = STATE_RUNNING;
 80033f2:	2302      	movs	r3, #2
 80033f4:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 80033f8:	e709      	b.n	800320e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 80033fa:	f640 71ff 	movw	r1, #4095	; 0xfff
 80033fe:	e777      	b.n	80032f0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x104>
 8003400:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003404:	e74c      	b.n	80032a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4>
 8003406:	f640 72ff 	movw	r2, #4095	; 0xfff
 800340a:	e720      	b.n	800324e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x62>
 800340c:	ed94 9a57 	vldr	s18, [r4, #348]	; 0x15c
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003410:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
        {
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
            {
                fade_position_ -= 1 / kFadeDuration;
 8003414:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80034f4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x308>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003418:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800341c:	eddf aa36 	vldr	s21, [pc, #216]	; 80034f8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30c>
 8003420:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
                fade_position_ -= 1 / kFadeDuration;
 8003424:	ee39 0a40 	vsub.f32	s0, s18, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003428:	ed9f aa34 	vldr	s20, [pc, #208]	; 80034fc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x310>
                fade_position_ -= 1 / kFadeDuration;
 800342c:	ed9f ba34 	vldr	s22, [pc, #208]	; 8003500 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x314>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003430:	fe80 0a48 	vminnm.f32	s0, s0, s16
 8003434:	fe80 0a2a 	vmaxnm.f32	s0, s0, s21
 8003438:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800343c:	f003 f938 	bl	80066b0 <cosf>
 8003440:	eeb0 7a68 	vmov.f32	s14, s17
 8003444:	ee38 0a40 	vsub.f32	s0, s16, s0
                fade_position_ -= 1 / kFadeDuration;
 8003448:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003504 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x318>
 800344c:	ee79 ba4b 	vsub.f32	s23, s18, s22
 8003450:	ee79 7a67 	vsub.f32	s15, s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003454:	eea0 7a29 	vfma.f32	s14, s0, s19
 8003458:	fec7 7ac8 	vminnm.f32	s15, s15, s16
 800345c:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
 8003460:	ee27 0a8a 	vmul.f32	s0, s15, s20

                for (uint32_t ch = 0; ch < NUM_AUDIO_OUTS; ch++)
                {
                    out[ch][i] = FadeCurve(fade_position_);
 8003464:	ed8d 7a01 	vstr	s14, [sp, #4]
 8003468:	f003 f922 	bl	80066b0 <cosf>
 800346c:	eef0 7a40 	vmov.f32	s15, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003470:	fe8b 0ac8 	vminnm.f32	s0, s23, s16
 8003474:	eeb0 7a68 	vmov.f32	s14, s17
 8003478:	fe80 0a2a 	vmaxnm.f32	s0, s0, s21
 800347c:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8003480:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003484:	eea7 7aa9 	vfma.f32	s14, s15, s19
                    out[ch][i] = FadeCurve(fade_position_);
 8003488:	ed8d 7a02 	vstr	s14, [sp, #8]
 800348c:	f003 f910 	bl	80066b0 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003490:	ee38 0a40 	vsub.f32	s0, s16, s0
 8003494:	edc4 ba57 	vstr	s23, [r4, #348]	; 0x15c
                }
            }

            if (fade_position_ <= 0)
 8003498:	eeb4 9acb 	vcmpe.f32	s18, s22
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800349c:	eee0 8a29 	vfma.f32	s17, s0, s19
            if (fade_position_ <= 0)
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    out[ch][i] = FadeCurve(fade_position_);
 80034a4:	edcd 8a03 	vstr	s17, [sp, #12]
            if (fade_position_ <= 0)
 80034a8:	f63f aeb1 	bhi.w	800320e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x320>)
            {
                state_ = STATE_STOPPED;
 80034ae:	2100      	movs	r1, #0
                StopTimer();
                adc_.Stop();
 80034b0:	1d20      	adds	r0, r4, #4
 80034b2:	6813      	ldr	r3, [r2, #0]
                state_ = STATE_STOPPED;
 80034b4:	f884 1160 	strb.w	r1, [r4, #352]	; 0x160
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6013      	str	r3, [r2, #0]
                adc_.Stop();
 80034be:	f7ff fe3b 	bl	8003138 <recorder::Adc::Stop()>
                dac_.Stop();
 80034c2:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 80034c6:	f000 f917 	bl	80036f8 <recorder::Dac::Stop()>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 80034ca:	4909      	ldr	r1, [pc, #36]	; (80034f0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x304>)
 80034cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x324>)
 80034d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d6:	6188      	str	r0, [r1, #24]
 80034d8:	619a      	str	r2, [r3, #24]
    }
 80034da:	e698      	b.n	800320e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 80034dc:	20010a54 	.word	0x20010a54
 80034e0:	457ff000 	.word	0x457ff000
 80034e4:	aaaaaaab 	.word	0xaaaaaaab
 80034e8:	38000030 	.word	0x38000030
 80034ec:	20010a50 	.word	0x20010a50
 80034f0:	58020400 	.word	0x58020400
 80034f4:	39da740e 	.word	0x39da740e
 80034f8:	00000000 	.word	0x00000000
 80034fc:	40490fdb 	.word	0x40490fdb
 8003500:	3aa3d70a 	.word	0x3aa3d70a
 8003504:	3a5a740e 	.word	0x3a5a740e
 8003508:	3f7fae14 	.word	0x3f7fae14
 800350c:	40014000 	.word	0x40014000
 8003510:	58021800 	.word	0x58021800

08003514 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:

namespace recorder
{

void Analog::Init(Callback callback)
{
 8003514:	b570      	push	{r4, r5, r6, lr}
    instance_ = this;
 8003516:	4a49      	ldr	r2, [pc, #292]	; (800363c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x128>)
{
 8003518:	b08a      	sub	sp, #40	; 0x28
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 800351a:	4c49      	ldr	r4, [pc, #292]	; (8003640 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x12c>)
 800351c:	4605      	mov	r5, r0
    instance_ = this;
 800351e:	6010      	str	r0, [r2, #0]
    adc_enable_.Init();
    adc_enable_.Set();
    boost_enable_.Init();
    amp_enable_.Init();

    adc_.Init(AdcCallback);
 8003520:	3004      	adds	r0, #4
 8003522:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0

void Analog::InitTimer(void)
{
    float period = system::kSystemClock / kAudioOSRate;

    LL_TIM_InitTypeDef timer_init =
 8003526:	2600      	movs	r6, #0
    callback_ = callback;
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x130>)
 800352a:	f042 0202 	orr.w	r2, r2, #2
 800352e:	6019      	str	r1, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003530:	2102      	movs	r1, #2
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8003532:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8003536:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800353a:	4b43      	ldr	r3, [pc, #268]	; (8003648 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x134>)
 800353c:	f002 0202 	and.w	r2, r2, #2
 8003540:	9204      	str	r2, [sp, #16]
 8003542:	9a04      	ldr	r2, [sp, #16]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	f022 020c 	bic.w	r2, r2, #12
 800354a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	f022 020c 	bic.w	r2, r2, #12
 8003552:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	f022 0202 	bic.w	r2, r2, #2
 800355a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	f022 020c 	bic.w	r2, r2, #12
 8003562:	f042 0204 	orr.w	r2, r2, #4
 8003566:	601a      	str	r2, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003568:	6199      	str	r1, [r3, #24]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 800356a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800356e:	4a37      	ldr	r2, [pc, #220]	; (800364c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x138>)
 8003570:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003574:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8003578:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800357c:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8003580:	9103      	str	r1, [sp, #12]
 8003582:	9903      	ldr	r1, [sp, #12]
 8003584:	6891      	ldr	r1, [r2, #8]
 8003586:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 800358a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800358c:	68d1      	ldr	r1, [r2, #12]
 800358e:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003592:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003594:	6851      	ldr	r1, [r2, #4]
 8003596:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800359a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800359c:	6811      	ldr	r1, [r2, #0]
 800359e:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 80035a2:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80035a6:	6011      	str	r1, [r2, #0]
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 80035a8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    adc_.Init(AdcCallback);
 80035ac:	4928      	ldr	r1, [pc, #160]	; (8003650 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x13c>)
 80035ae:	f042 0202 	orr.w	r2, r2, #2
 80035b2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 80035b6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80035ba:	f002 0202 	and.w	r2, r2, #2
 80035be:	9202      	str	r2, [sp, #8]
 80035c0:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035c8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035d0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035d8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f7ff fb9b 	bl	8002d20 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
    dac_.Init();
 80035ea:	f505 70aa 	add.w	r0, r5, #340	; 0x154
 80035ee:	f000 f909 	bl	8003804 <recorder::Dac::Init()>
        .Prescaler         = 0,
        .CounterMode       = LL_TIM_COUNTERMODE_UP,
        .Autoreload        = static_cast<uint32_t>(period + 0.5) - 1,
        .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0,
    };
 80035f2:	f240 5334 	movw	r3, #1332	; 0x534
    LL_TIM_InitTypeDef timer_init =
 80035f6:	9609      	str	r6, [sp, #36]	; 0x24

    __HAL_RCC_TIM15_CLK_ENABLE();
    LL_TIM_Init(TIM15, &timer_init);
 80035f8:	a905      	add	r1, sp, #20
    LL_TIM_InitTypeDef timer_init =
 80035fa:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80035fe:	e9cd 3607 	strd	r3, r6, [sp, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003602:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8003606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800360e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    LL_TIM_Init(TIM15, &timer_init);
 8003612:	4c10      	ldr	r4, [pc, #64]	; (8003654 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x140>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    LL_TIM_Init(TIM15, &timer_init);
 8003618:	4620      	mov	r0, r4
    __HAL_RCC_TIM15_CLK_ENABLE();
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM15, &timer_init);
 800361e:	f002 ff35 	bl	800648c <LL_TIM_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003622:	6863      	ldr	r3, [r4, #4]
    fade_position_ = 0;
 8003624:	2200      	movs	r2, #0
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	6063      	str	r3, [r4, #4]
 8003630:	f8c5 215c 	str.w	r2, [r5, #348]	; 0x15c
    state_ = STATE_STOPPED;
 8003634:	f8a5 6160 	strh.w	r6, [r5, #352]	; 0x160
}
 8003638:	b00a      	add	sp, #40	; 0x28
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	20010a54 	.word	0x20010a54
 8003640:	58024400 	.word	0x58024400
 8003644:	20010a50 	.word	0x20010a50
 8003648:	58020400 	.word	0x58020400
 800364c:	58021800 	.word	0x58021800
 8003650:	080031ed 	.word	0x080031ed
 8003654:	40014000 	.word	0x40014000

08003658 <recorder::Analog::StartTimer()>:
  WRITE_REG(TIMx->CNT, Counter);
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <recorder::Analog::StartTimer()+0x10>)
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM15);
    }

    LL_TIM_SetCounter(TIM15, 0);
    LL_TIM_EnableCounter(TIM15);
}
 8003666:	4770      	bx	lr
 8003668:	40014000 	.word	0x40014000

0800366c <recorder::Dac::DMAHandler()>:
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <recorder::Dac::DMAHandler()+0x10>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 800366e:	2210      	movs	r2, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003670:	2120      	movs	r1, #32
 8003672:	6099      	str	r1, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003674:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8003676:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8003678:	681b      	ldr	r3, [r3, #0]
    ScopedProfilingPin<PROFILE_DAC_DMA_SERVICE> profile;
    LL_DMA_ClearFlag_TC0(DMA1);
    LL_DMA_ClearFlag_HT0(DMA1);
    LL_DMA_IsActiveFlag_TC0(DMA1);
    LL_DMA_IsActiveFlag_HT0(DMA1);
}
 800367a:	4770      	bx	lr
 800367c:	40020000 	.word	0x40020000

08003680 <recorder::Dac::Start()>:
    if (!started_)
 8003680:	7903      	ldrb	r3, [r0, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d12e      	bne.n	80036e4 <recorder::Dac::Start()+0x64>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <recorder::Dac::Start()+0x68>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003688:	2110      	movs	r1, #16
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <recorder::Dac::Start()+0x6c>)
{
 800368c:	b430      	push	{r4, r5}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800368e:	2420      	movs	r4, #32
 8003690:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003692:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003694:	6919      	ldr	r1, [r3, #16]
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8003696:	4c16      	ldr	r4, [pc, #88]	; (80036f0 <recorder::Dac::Start()+0x70>)
 8003698:	f041 0110 	orr.w	r1, r1, #16
 800369c:	6119      	str	r1, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800369e:	6919      	ldr	r1, [r3, #16]
 80036a0:	f041 0108 	orr.w	r1, r1, #8
 80036a4:	6119      	str	r1, [r3, #16]
  SET_BIT(DACx->CR,
 80036a6:	6811      	ldr	r1, [r2, #0]
 80036a8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80036ac:	6011      	str	r1, [r2, #0]
  MODIFY_REG(DACx->CR,
 80036ae:	6811      	ldr	r1, [r2, #0]
 80036b0:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 80036b4:	6011      	str	r1, [r2, #0]

  MODIFY_REG(*preg,
 80036b6:	490f      	ldr	r1, [pc, #60]	; (80036f4 <recorder::Dac::Start()+0x74>)
 80036b8:	68e5      	ldr	r5, [r4, #12]
 80036ba:	4029      	ands	r1, r5
 80036bc:	60e1      	str	r1, [r4, #12]
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 80036be:	247d      	movs	r4, #125	; 0x7d
  SET_BIT(DACx->SWTRIGR,
 80036c0:	6851      	ldr	r1, [r2, #4]
 80036c2:	f041 0102 	orr.w	r1, r1, #2
 80036c6:	6051      	str	r1, [r2, #4]
  MODIFY_REG(DACx->CR,
 80036c8:	6811      	ldr	r1, [r2, #0]
 80036ca:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 80036ce:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80036d2:	6011      	str	r1, [r2, #0]
        started_ = true;
 80036d4:	2101      	movs	r1, #1
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 80036d6:	609c      	str	r4, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	430a      	orrs	r2, r1
}
 80036dc:	bc30      	pop	{r4, r5}
 80036de:	611a      	str	r2, [r3, #16]
        started_ = true;
 80036e0:	7101      	strb	r1, [r0, #4]
}
 80036e2:	4770      	bx	lr
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40007400 	.word	0x40007400
 80036f0:	40007408 	.word	0x40007408
 80036f4:	fffff000 	.word	0xfffff000

080036f8 <recorder::Dac::Stop()>:
    if (started_)
 80036f8:	7903      	ldrb	r3, [r0, #4]
 80036fa:	b32b      	cbz	r3, 8003748 <recorder::Dac::Stop()+0x50>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <recorder::Dac::Stop()+0x54>)
 80036fe:	6913      	ldr	r3, [r2, #16]
 8003700:	f023 0301 	bic.w	r3, r3, #1
{
 8003704:	b430      	push	{r4, r5}
 8003706:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 8003708:	6913      	ldr	r3, [r2, #16]
        while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_0));
 800370a:	f013 0301 	ands.w	r3, r3, #1
 800370e:	d1fb      	bne.n	8003708 <recorder::Dac::Stop()+0x10>
  CLEAR_BIT(DACx->CR,
 8003710:	4c0f      	ldr	r4, [pc, #60]	; (8003750 <recorder::Dac::Stop()+0x58>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003712:	2520      	movs	r5, #32
 8003714:	6821      	ldr	r1, [r4, #0]
 8003716:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800371a:	6021      	str	r1, [r4, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800371c:	6914      	ldr	r4, [r2, #16]
        dma_buffer_[i] = 0;
 800371e:	490d      	ldr	r1, [pc, #52]	; (8003754 <recorder::Dac::Stop()+0x5c>)
 8003720:	f024 0410 	bic.w	r4, r4, #16
 8003724:	6114      	str	r4, [r2, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003726:	6914      	ldr	r4, [r2, #16]
 8003728:	f024 0408 	bic.w	r4, r4, #8
 800372c:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 800372e:	2410      	movs	r4, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003730:	6095      	str	r5, [r2, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003732:	6094      	str	r4, [r2, #8]
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8003734:	6003      	str	r3, [r0, #0]
        dma_buffer_[i] = 0;
 8003736:	614b      	str	r3, [r1, #20]
 8003738:	600b      	str	r3, [r1, #0]
 800373a:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800373e:	e9c1 3303 	strd	r3, r3, [r1, #12]
}
 8003742:	bc30      	pop	{r4, r5}
        started_ = false;
 8003744:	7103      	strb	r3, [r0, #4]
}
 8003746:	4770      	bx	lr
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40020000 	.word	0x40020000
 8003750:	40007400 	.word	0x40007400
 8003754:	38000030 	.word	0x38000030

08003758 <recorder::Dac::InitDMA()>:
{
 8003758:	b510      	push	{r4, lr}
 800375a:	b092      	sub	sp, #72	; 0x48
    LL_DMA_InitTypeDef dma_init =
 800375c:	222c      	movs	r2, #44	; 0x2c
 800375e:	2100      	movs	r1, #0
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003760:	4c23      	ldr	r4, [pc, #140]	; (80037f0 <recorder::Dac::InitDMA()+0x98>)
    LL_DMA_InitTypeDef dma_init =
 8003762:	a806      	add	r0, sp, #24
 8003764:	f003 fe5f 	bl	8007426 <memset>
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <recorder::Dac::InitDMA()+0x9c>)
 800376a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800376e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003772:	9203      	str	r2, [sp, #12]
 8003774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003778:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <recorder::Dac::InitDMA()+0xa0>)
    LL_DMA_InitTypeDef dma_init =
 800377a:	e9cd 0207 	strd	r0, r2, [sp, #28]
 800377e:	2206      	movs	r2, #6
 8003780:	2044      	movs	r0, #68	; 0x44
 8003782:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80037e8 <recorder::Dac::InitDMA()+0x90>
 8003786:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 800378a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, ((DAC_Channel >> (Register & 0x1FUL)) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0))));
 800378e:	491b      	ldr	r1, [pc, #108]	; (80037fc <recorder::Dac::InitDMA()+0xa4>)
 8003790:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003794:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
    };
 8003798:	9102      	str	r1, [sp, #8]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 800379a:	aa02      	add	r2, sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 800379c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80037a0:	2100      	movs	r1, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 80037a2:	f040 0001 	orr.w	r0, r0, #1
 80037a6:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80037aa:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 80037ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	9b01      	ldr	r3, [sp, #4]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80037b8:	f002 fa38 	bl	8005c2c <LL_DMA_Init>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80037bc:	6923      	ldr	r3, [r4, #16]
    irq::RegisterHandler(DMA1_Stream0_IRQn, DMAHandler);
 80037be:	200b      	movs	r0, #11
 80037c0:	490f      	ldr	r1, [pc, #60]	; (8003800 <recorder::Dac::InitDMA()+0xa8>)
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	f023 0308 	bic.w	r3, r3, #8
 80037ce:	6123      	str	r3, [r4, #16]
 80037d0:	f000 f8a0 	bl	8003914 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream0_IRQn, kProfileIRQPriority);
 80037d4:	2100      	movs	r1, #0
 80037d6:	200b      	movs	r0, #11
 80037d8:	f000 f8d8 	bl	800398c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream0_IRQn);
 80037dc:	200b      	movs	r0, #11
 80037de:	f000 f8bb 	bl	8003958 <recorder::irq::Enable(IRQn_Type)>
}
 80037e2:	b012      	add	sp, #72	; 0x48
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	bf00      	nop
 80037e8:	00000040 	.word	0x00000040
 80037ec:	00000100 	.word	0x00000100
 80037f0:	40020000 	.word	0x40020000
 80037f4:	38000030 	.word	0x38000030
 80037f8:	58024400 	.word	0x58024400
 80037fc:	40007414 	.word	0x40007414
 8003800:	0800366d 	.word	0x0800366d

08003804 <recorder::Dac::Init()>:
{
 8003804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        dma_buffer_[i] = 0;
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <recorder::Dac::Init()+0xa0>)
    started_ = false;
 800380a:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380c:	4e26      	ldr	r6, [pc, #152]	; (80038a8 <recorder::Dac::Init()+0xa4>)
{
 800380e:	b088      	sub	sp, #32
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8003810:	6004      	str	r4, [r0, #0]
{
 8003812:	4680      	mov	r8, r0
        dma_buffer_[i] = 0;
 8003814:	601c      	str	r4, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003816:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    started_ = false;
 800381a:	7104      	strb	r4, [r0, #4]
    LL_GPIO_StructInit(&gpio_init);
 800381c:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	f042 0201 	orr.w	r2, r2, #1
        dma_buffer_[i] = 0;
 8003822:	615c      	str	r4, [r3, #20]
    LL_DAC_InitTypeDef dac_init =
 8003824:	4d21      	ldr	r5, [pc, #132]	; (80038ac <recorder::Dac::Init()+0xa8>)
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003826:	4f22      	ldr	r7, [pc, #136]	; (80038b0 <recorder::Dac::Init()+0xac>)
        dma_buffer_[i] = 0;
 8003828:	e9c3 4401 	strd	r4, r4, [r3, #4]
 800382c:	e9c3 4403 	strd	r4, r4, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 8003834:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	9b01      	ldr	r3, [sp, #4]
    LL_GPIO_StructInit(&gpio_init);
 8003840:	f002 facc 	bl	8005ddc <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_5;
 8003844:	2220      	movs	r2, #32
 8003846:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003848:	a902      	add	r1, sp, #8
 800384a:	481a      	ldr	r0, [pc, #104]	; (80038b4 <recorder::Dac::Init()+0xb0>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 800384c:	9406      	str	r4, [sp, #24]
    LL_DAC_InitTypeDef dac_init =
 800384e:	ac02      	add	r4, sp, #8
    gpio_init.Pin = LL_GPIO_PIN_5;
 8003850:	e9cd 2302 	strd	r2, r3, [sp, #8]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003854:	f002 fa3c 	bl	8005cd0 <LL_GPIO_Init>
    LL_DAC_InitTypeDef dac_init =
 8003858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800385a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800385c:	e895 0003 	ldmia.w	r5, {r0, r1}
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003860:	aa02      	add	r2, sp, #8
    LL_DAC_InitTypeDef dac_init =
 8003862:	e884 0003 	stmia.w	r4, {r0, r1}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003866:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 800386a:	4638      	mov	r0, r7
 800386c:	4912      	ldr	r1, [pc, #72]	; (80038b8 <recorder::Dac::Init()+0xb4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800386e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003872:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 8003876:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
 800387a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	9b00      	ldr	r3, [sp, #0]
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003882:	f002 f999 	bl	8005bb8 <LL_DAC_Init>
  SET_BIT(DACx->CR,
 8003886:	683b      	ldr	r3, [r7, #0]
    InitDMA();
 8003888:	4640      	mov	r0, r8
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388e:	603b      	str	r3, [r7, #0]
  SET_BIT(DACx->CR,
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003896:	603b      	str	r3, [r7, #0]
}
 8003898:	b008      	add	sp, #32
 800389a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    InitDMA();
 800389e:	f7ff bf5b 	b.w	8003758 <recorder::Dac::InitDMA()>
 80038a2:	bf00      	nop
 80038a4:	38000030 	.word	0x38000030
 80038a8:	58024400 	.word	0x58024400
 80038ac:	08008680 	.word	0x08008680
 80038b0:	40007400 	.word	0x40007400
 80038b4:	58020000 	.word	0x58020000
 80038b8:	35400072 	.word	0x35400072

080038bc <recorder::irq::Init()>:
static Vector RAMVectorTable[kNumVectors]
    __attribute__ ((aligned(kAlignment)));

void Init(void)
{
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <recorder::irq::Init()+0x4c>)
 80038be:	689a      	ldr	r2, [r3, #8]

    for (uint32_t i = 0; i < kNumVectors; i++)
 80038c0:	0753      	lsls	r3, r2, #29
 80038c2:	f102 0104 	add.w	r1, r2, #4
{
 80038c6:	b510      	push	{r4, lr}
 80038c8:	4c10      	ldr	r4, [pc, #64]	; (800390c <recorder::irq::Init()+0x50>)
 80038ca:	d111      	bne.n	80038f0 <recorder::irq::Init()+0x34>
 80038cc:	428c      	cmp	r4, r1
 80038ce:	d00f      	beq.n	80038f0 <recorder::irq::Init()+0x34>
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 80038d0:	4623      	mov	r3, r4
 80038d2:	f504 7e26 	add.w	lr, r4, #664	; 0x298
    {
        RAMVectorTable[i] = src[i];
 80038d6:	eba2 0c04 	sub.w	ip, r2, r4
 80038da:	eb03 020c 	add.w	r2, r3, ip
 80038de:	e9d2 0100 	ldrd	r0, r1, [r2]
 80038e2:	e8e3 0102 	strd	r0, r1, [r3], #8
    for (uint32_t i = 0; i < kNumVectors; i++)
 80038e6:	4573      	cmp	r3, lr
 80038e8:	d1f7      	bne.n	80038da <recorder::irq::Init()+0x1e>
    }

    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <recorder::irq::Init()+0x4c>)
 80038ec:	609c      	str	r4, [r3, #8]
}
 80038ee:	bd10      	pop	{r4, pc}
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <recorder::irq::Init()+0x54>)
        RAMVectorTable[i] = src[i];
 80038f2:	1b09      	subs	r1, r1, r4
 80038f4:	f503 7026 	add.w	r0, r3, #664	; 0x298
 80038f8:	58ca      	ldr	r2, [r1, r3]
 80038fa:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < kNumVectors; i++)
 80038fe:	4283      	cmp	r3, r0
 8003900:	d1fa      	bne.n	80038f8 <recorder::irq::Init()+0x3c>
    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8003902:	4b01      	ldr	r3, [pc, #4]	; (8003908 <recorder::irq::Init()+0x4c>)
 8003904:	609c      	str	r4, [r3, #8]
}
 8003906:	bd10      	pop	{r4, pc}
 8003908:	e000ed00 	.word	0xe000ed00
 800390c:	20010c00 	.word	0x20010c00
 8003910:	20010bfc 	.word	0x20010bfc

08003914 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>:

void RegisterHandler(IRQn_Type irqn, Vector handler)
{
    assert(irqn >= NonMaskableInt_IRQn);
 8003914:	f110 0f0e 	cmn.w	r0, #14
{
 8003918:	b508      	push	{r3, lr}
    assert(irqn >= NonMaskableInt_IRQn);
 800391a:	db06      	blt.n	800392a <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x16>

    uint32_t exception_num = irqn + 16;
 800391c:	3010      	adds	r0, #16
    assert(exception_num < kNumVectors);
 800391e:	28a5      	cmp	r0, #165	; 0xa5
 8003920:	dc09      	bgt.n	8003936 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x22>

    RAMVectorTable[exception_num] = handler;
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x30>)
 8003924:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8003928:	bd08      	pop	{r3, pc}
    assert(irqn >= NonMaskableInt_IRQn);
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x34>)
 800392c:	211c      	movs	r1, #28
 800392e:	4a07      	ldr	r2, [pc, #28]	; (800394c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8003930:	4807      	ldr	r0, [pc, #28]	; (8003950 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8003932:	f003 fb11 	bl	8006f58 <__assert_func>
    assert(exception_num < kNumVectors);
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x40>)
 8003938:	211f      	movs	r1, #31
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 800393c:	4804      	ldr	r0, [pc, #16]	; (8003950 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 800393e:	f003 fb0b 	bl	8006f58 <__assert_func>
 8003942:	bf00      	nop
 8003944:	20010c00 	.word	0x20010c00
 8003948:	080089d8 	.word	0x080089d8
 800394c:	080089f4 	.word	0x080089f4
 8003950:	08008a3c 	.word	0x08008a3c
 8003954:	08008a4c 	.word	0x08008a4c

08003958 <recorder::irq::Enable(IRQn_Type)>:

void Enable(IRQn_Type irqn)
{
    assert(irqn >= 0);
 8003958:	2800      	cmp	r0, #0
{
 800395a:	b508      	push	{r3, lr}
    assert(irqn >= 0);
 800395c:	db08      	blt.n	8003970 <recorder::irq::Enable(IRQn_Type)+0x18>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800395e:	f000 011f 	and.w	r1, r0, #31
 8003962:	2301      	movs	r3, #1
 8003964:	0940      	lsrs	r0, r0, #5
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <recorder::irq::Enable(IRQn_Type)+0x24>)
 8003968:	408b      	lsls	r3, r1
 800396a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC_EnableIRQ(irqn);
}
 800396e:	bd08      	pop	{r3, pc}
    assert(irqn >= 0);
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <recorder::irq::Enable(IRQn_Type)+0x28>)
 8003972:	2126      	movs	r1, #38	; 0x26
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <recorder::irq::Enable(IRQn_Type)+0x2c>)
 8003976:	4804      	ldr	r0, [pc, #16]	; (8003988 <recorder::irq::Enable(IRQn_Type)+0x30>)
 8003978:	f003 faee 	bl	8006f58 <__assert_func>
 800397c:	e000e100 	.word	0xe000e100
 8003980:	08008a68 	.word	0x08008a68
 8003984:	08008a74 	.word	0x08008a74
 8003988:	08008a3c 	.word	0x08008a3c

0800398c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x54>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003994:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003998:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800399a:	f1bc 0f04 	cmp.w	ip, #4
 800399e:	bf28      	it	cs
 80039a0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a4:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039aa:	bf8c      	ite	hi
 80039ac:	3b03      	subhi	r3, #3
 80039ae:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	fa02 f20c 	lsl.w	r2, r2, ip
  if ((int32_t)(IRQn) >= 0)
 80039b4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b6:	ea21 0102 	bic.w	r1, r1, r2
 80039ba:	fa01 f103 	lsl.w	r1, r1, r3
  if ((int32_t)(IRQn) >= 0)
 80039be:	db06      	blt.n	80039ce <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	0109      	lsls	r1, r1, #4
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x58>)
 80039c4:	b2c9      	uxtb	r1, r1
 80039c6:	4403      	add	r3, r0
 80039c8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 80039cc:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	f000 000f 	and.w	r0, r0, #15
 80039d2:	0109      	lsls	r1, r1, #4
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x5c>)
 80039d6:	b2c9      	uxtb	r1, r1
 80039d8:	4403      	add	r3, r0
 80039da:	7619      	strb	r1, [r3, #24]
void SetPriority(IRQn_Type irqn, uint32_t priority)
{
    uint32_t group = NVIC_GetPriorityGrouping();
    priority = NVIC_EncodePriority(group, priority, 0);
    NVIC_SetPriority(irqn, priority);
}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ecfc 	.word	0xe000ecfc

080039ec <recorder::Serial::Init(unsigned long)>:

void Serial::Init(uint32_t baud)
{
    instance_ = this;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ec:	4b4e      	ldr	r3, [pc, #312]	; (8003b28 <recorder::Serial::Init(unsigned long)+0x13c>)
    instance_ = this;
 80039ee:	4a4f      	ldr	r2, [pc, #316]	; (8003b2c <recorder::Serial::Init(unsigned long)+0x140>)
{
 80039f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    instance_ = this;
 80039f4:	6010      	str	r0, [r2, #0]
{
 80039f6:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    __HAL_RCC_USART1_CLK_ENABLE();

    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 80039fc:	26c0      	movs	r6, #192	; 0xc0
{
 80039fe:	460d      	mov	r5, r1

    while (pins != 0)
    {
        uint32_t pin = 1 << POSITION_VAL(pins);
 8003a00:	2701      	movs	r7, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a02:	f042 0202 	orr.w	r2, r2, #2
 8003a06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a0e:	f002 0202 	and.w	r2, r2, #2
 8003a12:	9200      	str	r2, [sp, #0]
 8003a14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a16:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003a1a:	f042 0210 	orr.w	r2, r2, #16
 8003a1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <recorder::Serial::Init(unsigned long)+0x144>)
 8003a30:	e01f      	b.n	8003a72 <recorder::Serial::Init(unsigned long)+0x86>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8003a38:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8003a3c:	ea22 0204 	bic.w	r2, r2, r4
 8003a40:	ea42 0208 	orr.w	r2, r2, r8
 8003a44:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003a46:	681c      	ldr	r4, [r3, #0]
 8003a48:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8003a4c:	ea24 040c 	bic.w	r4, r4, ip
 8003a50:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 8003a54:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	ea22 020c 	bic.w	r2, r2, ip
 8003a5c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	ea22 020c 	bic.w	r2, r2, ip
 8003a64:	ea42 020e 	orr.w	r2, r2, lr
 8003a68:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	4011      	ands	r1, r2
 8003a6e:	6059      	str	r1, [r3, #4]
    while (pins != 0)
 8003a70:	b33e      	cbz	r6, 8003ac2 <recorder::Serial::Init(unsigned long)+0xd6>
 8003a72:	fa96 fca6 	rbit	ip, r6
        uint32_t pin = 1 << POSITION_VAL(pins);
 8003a76:	fabc fc8c 	clz	ip, ip
 8003a7a:	fa07 f40c 	lsl.w	r4, r7, ip
        CLEAR_BIT(pins, pin);
 8003a7e:	43e1      	mvns	r1, r4
 8003a80:	ea26 0604 	bic.w	r6, r6, r4
 8003a84:	fa94 f9a4 	rbit	r9, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003a88:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003a8c:	0a22      	lsrs	r2, r4, #8

        // Set alternate function first to avoid spurious events
        if (POSITION_VAL(pin) < 8)
 8003a8e:	fab9 f989 	clz	r9, r9
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003a92:	fa0e f80c 	lsl.w	r8, lr, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003a96:	fb02 f202 	mul.w	r2, r2, r2
 8003a9a:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003a9e:	fa08 f80c 	lsl.w	r8, r8, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003aa2:	fb02 f202 	mul.w	r2, r2, r2
 8003aa6:	ddc4      	ble.n	8003a32 <recorder::Serial::Init(unsigned long)+0x46>
 8003aa8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8003aac:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003ab0:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003ab4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003ab8:	ea28 0409 	bic.w	r4, r8, r9
 8003abc:	4322      	orrs	r2, r4
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8003ac0:	e7c1      	b.n	8003a46 <recorder::Serial::Init(unsigned long)+0x5a>
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    LL_USART_Init(USART1, &uart_init);
 8003ac2:	4c1c      	ldr	r4, [pc, #112]	; (8003b34 <recorder::Serial::Init(unsigned long)+0x148>)
    LL_USART_InitTypeDef uart_init =
 8003ac4:	2220      	movs	r2, #32
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 8003ac6:	6006      	str	r6, [r0, #0]
 8003ac8:	4631      	mov	r1, r6
 8003aca:	6046      	str	r6, [r0, #4]
 8003acc:	6486      	str	r6, [r0, #72]	; 0x48
 8003ace:	64c6      	str	r6, [r0, #76]	; 0x4c
 8003ad0:	a802      	add	r0, sp, #8
 8003ad2:	f003 fca8 	bl	8007426 <memset>
 8003ad6:	230c      	movs	r3, #12
    LL_USART_Init(USART1, &uart_init);
 8003ad8:	a902      	add	r1, sp, #8
 8003ada:	4620      	mov	r0, r4
    LL_USART_InitTypeDef uart_init =
 8003adc:	9307      	str	r3, [sp, #28]
    };
 8003ade:	9503      	str	r5, [sp, #12]
    LL_USART_Init(USART1, &uart_init);
 8003ae0:	f002 fd58 	bl	8006594 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8003ae4:	68a3      	ldr	r3, [r4, #8]

    LL_USART_RequestRxDataFlush(USART1);
    LL_USART_EnableIT_RXNE(USART1);
    LL_USART_DisableIT_TXE(USART1);

    irq::RegisterHandler(USART1_IRQn, InterruptHandler);
 8003ae6:	2025      	movs	r0, #37	; 0x25
 8003ae8:	4913      	ldr	r1, [pc, #76]	; (8003b38 <recorder::Serial::Init(unsigned long)+0x14c>)
 8003aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aee:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8003af8:	69a3      	ldr	r3, [r4, #24]
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	61a3      	str	r3, [r4, #24]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f043 0320 	orr.w	r3, r3, #32
 8003b06:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	f7ff ff00 	bl	8003914 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(USART1_IRQn, kSerialIRQPriority);
 8003b14:	210b      	movs	r1, #11
 8003b16:	2025      	movs	r0, #37	; 0x25
 8003b18:	f7ff ff38 	bl	800398c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(USART1_IRQn);
 8003b1c:	2025      	movs	r0, #37	; 0x25
 8003b1e:	f7ff ff1b 	bl	8003958 <recorder::irq::Enable(IRQn_Type)>
}
 8003b22:	b00b      	add	sp, #44	; 0x2c
 8003b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	20010e98 	.word	0x20010e98
 8003b30:	58020400 	.word	0x58020400
 8003b34:	40011000 	.word	0x40011000
 8003b38:	08003c99 	.word	0x08003c99

08003b3c <recorder::Serial::BytesAvailable()>:
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8003b3c:	6803      	ldr	r3, [r0, #0]
 8003b3e:	6840      	ldr	r0, [r0, #4]
 8003b40:	f3bf 8f5b 	dmb	ish

uint32_t Serial::BytesAvailable(void)
{
    return rx_fifo_.available();
}
 8003b44:	1ac0      	subs	r0, r0, r3
 8003b46:	4770      	bx	lr

08003b48 <recorder::Serial::GetByteBlocking()>:

uint8_t Serial::GetByteBlocking(void)
{
 8003b48:	4602      	mov	r2, r0
 8003b4a:	3004      	adds	r0, #4
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	6801      	ldr	r1, [r0, #0]
 8003b50:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d0f9      	beq.n	8003b4c <recorder::Serial::GetByteBlocking()+0x4>
        {
            return false;
        }

        item = data_[head % size];
 8003b58:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        head_.store(head + 1, std::memory_order_release);
 8003b5c:	3301      	adds	r3, #1
        item = data_[head % size];
 8003b5e:	4411      	add	r1, r2
 8003b60:	7a08      	ldrb	r0, [r1, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8003b62:	f3bf 8f5b 	dmb	ish
 8003b66:	6013      	str	r3, [r2, #0]
    uint8_t byte = 0;
    while (!rx_fifo_.Pop(byte));
    return byte;
}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop

08003b6c <recorder::Serial::Write(unsigned char, bool)>:

uint32_t Serial::Write(uint8_t byte, bool blocking)
{
 8003b6c:	4684      	mov	ip, r0

uint32_t Serial::Write(const uint8_t* buffer, uint32_t length, bool blocking)
{
    uint32_t i = 0;

    while (i < length && (!tx_fifo_.full() || blocking))
 8003b6e:	3048      	adds	r0, #72	; 0x48
{
 8003b70:	b510      	push	{r4, lr}
	return __atomic_load_n(&_M_i, int(__m));
 8003b72:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
 8003b76:	f10c 0e4c 	add.w	lr, ip, #76	; 0x4c
 8003b7a:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8003b7e:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8003b82:	1b1b      	subs	r3, r3, r4
    while (i < length && (!tx_fifo_.full() || blocking))
 8003b84:	2bff      	cmp	r3, #255	; 0xff
 8003b86:	d900      	bls.n	8003b8a <recorder::Serial::Write(unsigned char, bool)+0x1e>
 8003b88:	b1ba      	cbz	r2, 8003bba <recorder::Serial::Write(unsigned char, bool)+0x4e>
 8003b8a:	f8de 3000 	ldr.w	r3, [lr]
 8003b8e:	6802      	ldr	r2, [r0, #0]
 8003b90:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8003b94:	1a9a      	subs	r2, r3, r2
 8003b96:	2aff      	cmp	r2, #255	; 0xff
 8003b98:	d8f7      	bhi.n	8003b8a <recorder::Serial::Write(unsigned char, bool)+0x1e>
            data_[(tail + i) % size] = buffer[i];
 8003b9a:	fa5c f283 	uxtab	r2, ip, r3
 8003b9e:	2001      	movs	r0, #1
        tail_.store(tail + length, std::memory_order_release);
 8003ba0:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8003ba2:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
	__atomic_store_n(&_M_i, __i, int(__m));
 8003ba6:	f3bf 8f5b 	dmb	ish
 8003baa:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003bae:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <recorder::Serial::Write(unsigned char, bool)+0x54>)
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	4610      	mov	r0, r2
 8003bbc:	e7f7      	b.n	8003bae <recorder::Serial::Write(unsigned char, bool)+0x42>
 8003bbe:	bf00      	nop
 8003bc0:	40011000 	.word	0x40011000

08003bc4 <recorder::Serial::FlushTx(bool)>:
    return i;
}

void Serial::FlushTx(bool discard)
{
    if (discard)
 8003bc4:	b989      	cbnz	r1, 8003bea <recorder::Serial::FlushTx(bool)+0x26>
 8003bc6:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8003bca:	304c      	adds	r0, #76	; 0x4c
	return __atomic_load_n(&_M_i, int(__m));
 8003bcc:	680a      	ldr	r2, [r1, #0]
 8003bce:	6803      	ldr	r3, [r0, #0]
 8003bd0:	f3bf 8f5b 	dmb	ish
        LL_USART_DisableIT_TXE(USART1);
        tx_fifo_.Init();
    }
    else
    {
        while (tx_fifo_.available());
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1f9      	bne.n	8003bcc <recorder::Serial::FlushTx(bool)+0x8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <recorder::Serial::FlushTx(bool)+0x38>)
 8003bda:	69d3      	ldr	r3, [r2, #28]
 8003bdc:	0619      	lsls	r1, r3, #24
 8003bde:	d5fc      	bpl.n	8003bda <recorder::Serial::FlushTx(bool)+0x16>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003be0:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <recorder::Serial::FlushTx(bool)+0x38>)
 8003be2:	69d3      	ldr	r3, [r2, #28]
 8003be4:	065b      	lsls	r3, r3, #25
 8003be6:	d5fc      	bpl.n	8003be2 <recorder::Serial::FlushTx(bool)+0x1e>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
}
 8003be8:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003bea:	4904      	ldr	r1, [pc, #16]	; (8003bfc <recorder::Serial::FlushTx(bool)+0x38>)
	__atomic_store_n(&_M_i, __i, int(__m));
 8003bec:	2200      	movs	r2, #0
 8003bee:	680b      	ldr	r3, [r1, #0]
 8003bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf4:	600b      	str	r3, [r1, #0]
 8003bf6:	6482      	str	r2, [r0, #72]	; 0x48
 8003bf8:	64c2      	str	r2, [r0, #76]	; 0x4c
    }
 8003bfa:	4770      	bx	lr
 8003bfc:	40011000 	.word	0x40011000

08003c00 <recorder::Serial::InterruptService()>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <recorder::Serial::InterruptService()+0x94>)
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	0692      	lsls	r2, r2, #26
 8003c06:	d516      	bpl.n	8003c36 <recorder::Serial::InterruptService()+0x36>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8003c08:	6a59      	ldr	r1, [r3, #36]	; 0x24
	return __atomic_load_n(&_M_i, int(__m));
 8003c0a:	6843      	ldr	r3, [r0, #4]
 8003c0c:	6802      	ldr	r2, [r0, #0]
 8003c0e:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8003c12:	1a9b      	subs	r3, r3, r2
    if (LL_USART_IsActiveFlag_RXNE(USART1))
    {
        ScopedProfilingPin<PROFILE_SERIAL_RX> profile;
        uint8_t byte = LL_USART_ReceiveData8(USART1);

        if (rx_fifo_.full())
 8003c14:	2b3f      	cmp	r3, #63	; 0x3f
 8003c16:	d82c      	bhi.n	8003c72 <recorder::Serial::InterruptService()+0x72>
 8003c18:	6843      	ldr	r3, [r0, #4]
 8003c1a:	6802      	ldr	r2, [r0, #0]
 8003c1c:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8003c20:	1a9a      	subs	r2, r3, r2
 8003c22:	2a3f      	cmp	r2, #63	; 0x3f
 8003c24:	d807      	bhi.n	8003c36 <recorder::Serial::InterruptService()+0x36>
            data_[(tail + i) % size] = buffer[i];
 8003c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        tail_.store(tail + length, std::memory_order_release);
 8003c2a:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8003c2c:	4402      	add	r2, r0
 8003c2e:	7211      	strb	r1, [r2, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8003c30:	f3bf 8f5b 	dmb	ish
 8003c34:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <recorder::Serial::InterruptService()+0x94>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	0611      	lsls	r1, r2, #24
 8003c3c:	d518      	bpl.n	8003c70 <recorder::Serial::InterruptService()+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	0612      	lsls	r2, r2, #24
 8003c42:	d515      	bpl.n	8003c70 <recorder::Serial::InterruptService()+0x70>
	return __atomic_load_n(&_M_i, int(__m));
 8003c44:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003c46:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003c48:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003c4c:	428a      	cmp	r2, r1
 8003c4e:	d01b      	beq.n	8003c88 <recorder::Serial::InterruptService()+0x88>
        item = data_[head % size];
 8003c50:	fa50 f282 	uxtab	r2, r0, r2
  USARTx->TDR = Value;
 8003c54:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
 8003c5a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003c5c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003c5e:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <recorder::Serial::InterruptService()+0x70>
        head_.store(head + 1, std::memory_order_release);
 8003c66:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003c68:	f3bf 8f5b 	dmb	ish
 8003c6c:	6483      	str	r3, [r0, #72]	; 0x48
        else
        {
            LL_USART_DisableIT_TXE(USART1);
        }
    }
}
 8003c6e:	4770      	bx	lr
 8003c70:	4770      	bx	lr
	return __atomic_load_n(&_M_i, int(__m));
 8003c72:	6803      	ldr	r3, [r0, #0]
 8003c74:	6842      	ldr	r2, [r0, #4]
 8003c76:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d0cc      	beq.n	8003c18 <recorder::Serial::InterruptService()+0x18>
        head_.store(head + 1, std::memory_order_release);
 8003c7e:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003c80:	f3bf 8f5b 	dmb	ish
 8003c84:	6003      	str	r3, [r0, #0]
        return true;
 8003c86:	e7c7      	b.n	8003c18 <recorder::Serial::InterruptService()+0x18>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c8e:	601a      	str	r2, [r3, #0]
}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40011000 	.word	0x40011000

08003c98 <recorder::Serial::InterruptHandler()>:

void Serial::InterruptHandler(void)
{
    ScopedProfilingPin<PROFILE_SERIAL_IRQ> profile;
    instance_->InterruptService();
 8003c98:	4b01      	ldr	r3, [pc, #4]	; (8003ca0 <recorder::Serial::InterruptHandler()+0x8>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	f7ff bfb0 	b.w	8003c00 <recorder::Serial::InterruptService()>
 8003ca0:	20010e98 	.word	0x20010e98

08003ca4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003ca4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ca8:	4905      	ldr	r1, [pc, #20]	; (8003cc0 <NVIC_SystemReset+0x1c>)
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <NVIC_SystemReset+0x20>)
 8003cac:	68ca      	ldr	r2, [r1, #12]
 8003cae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003cb2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003cb4:	60cb      	str	r3, [r1, #12]
 8003cb6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003cba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003cbc:	e7fd      	b.n	8003cba <NVIC_SystemReset+0x16>
 8003cbe:	bf00      	nop
 8003cc0:	e000ed00 	.word	0xe000ed00
 8003cc4:	05fa0004 	.word	0x05fa0004

08003cc8 <TickHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <TickHandler+0x14>)
 8003cca:	f06f 0101 	mvn.w	r1, #1
	return __atomic_load_n(&_M_i, int(__m));
 8003cce:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <TickHandler+0x18>)
 8003cd0:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	6813      	ldr	r3, [r2, #0]
{
    ScopedProfilingPin<PROFILE_TICK> profile;
    LL_TIM_ClearFlag_UPDATE(TIM7);
    LL_TIM_IsActiveFlag_UPDATE(TIM7);
    uint32_t ticks = ticks_.load(std::memory_order_relaxed);
    ticks_.store(ticks + 1, std::memory_order_relaxed);
 8003cd6:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003cd8:	6013      	str	r3, [r2, #0]
}
 8003cda:	4770      	bx	lr
 8003cdc:	40001400 	.word	0x40001400
 8003ce0:	20010ea0 	.word	0x20010ea0

08003ce4 <recorder::system::ConfigureClocks()>:
{
 8003ce4:	b510      	push	{r4, lr}
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003ce6:	2002      	movs	r0, #2
{
 8003ce8:	b0cc      	sub	sp, #304	; 0x130
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003cea:	f000 fc79 	bl	80045e0 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(power_scaling);
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <recorder::system::ConfigureClocks()+0xcc>)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4a30      	ldr	r2, [pc, #192]	; (8003db4 <recorder::system::ConfigureClocks()+0xd0>)
 8003cf4:	9101      	str	r1, [sp, #4]
 8003cf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf8:	f021 0101 	bic.w	r1, r1, #1
 8003cfc:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	6993      	ldr	r3, [r2, #24]
 8003d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d10:	6193      	str	r3, [r2, #24]
 8003d12:	6993      	ldr	r3, [r2, #24]
 8003d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	9b01      	ldr	r3, [sp, #4]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY));
 8003d1c:	6993      	ldr	r3, [r2, #24]
 8003d1e:	049b      	lsls	r3, r3, #18
 8003d20:	d5fc      	bpl.n	8003d1c <recorder::system::ConfigureClocks()+0x38>
    RCC_OscInitTypeDef osc_init = {};
 8003d22:	2248      	movs	r2, #72	; 0x48
 8003d24:	2100      	movs	r1, #0
 8003d26:	a80b      	add	r0, sp, #44	; 0x2c
 8003d28:	f003 fb7d 	bl	8007426 <memset>
    osc_init.HSIState = RCC_HSI_DIV1;
 8003d2c:	2301      	movs	r3, #1
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d2e:	2202      	movs	r2, #2
    osc_init.HSIState = RCC_HSI_DIV1;
 8003d30:	930d      	str	r3, [sp, #52]	; 0x34
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d32:	920a      	str	r2, [sp, #40]	; 0x28
    if (HAL_GetREVID() <= REV_ID_Y)
 8003d34:	f000 fc28 	bl	8004588 <HAL_GetREVID>
 8003d38:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d3c:	4298      	cmp	r0, r3
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <recorder::system::ConfigureClocks()+0xd4>)
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003d40:	a80a      	add	r0, sp, #40	; 0x28
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8003d42:	685b      	ldr	r3, [r3, #4]
                >> HAL_RCC_REV_Y_HSITRIM_Pos;
 8003d44:	bf94      	ite	ls
 8003d46:	f3c3 3305 	ubfxls	r3, r3, #12, #6
                >> RCC_HSICFGR_HSITRIM_Pos;
 8003d4a:	f3c3 6306 	ubfxhi	r3, r3, #24, #7
 8003d4e:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003d50:	f000 fc6c 	bl	800462c <HAL_RCC_OscConfig>
 8003d54:	b100      	cbz	r0, 8003d58 <recorder::system::ConfigureClocks()+0x74>
        while (1);
 8003d56:	e7fe      	b.n	8003d56 <recorder::system::ConfigureClocks()+0x72>
    clk_init.ClockType =
 8003d58:	233f      	movs	r3, #63	; 0x3f
    RCC_ClkInitTypeDef clk_init = {};
 8003d5a:	9009      	str	r0, [sp, #36]	; 0x24
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8003d5c:	2101      	movs	r1, #1
    clk_init.ClockType =
 8003d5e:	9302      	str	r3, [sp, #8]
    RCC_ClkInitTypeDef clk_init = {};
 8003d60:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003d64:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8003d68:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8003d6c:	a802      	add	r0, sp, #8
 8003d6e:	f000 ff8b 	bl	8004c88 <HAL_RCC_ClockConfig>
 8003d72:	b100      	cbz	r0, 8003d76 <recorder::system::ConfigureClocks()+0x92>
        while (1);
 8003d74:	e7fe      	b.n	8003d74 <recorder::system::ConfigureClocks()+0x90>
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8003d76:	4601      	mov	r1, r0
 8003d78:	22b8      	movs	r2, #184	; 0xb8
 8003d7a:	a81e      	add	r0, sp, #120	; 0x78
    periph_clk_init.PLL3 =
 8003d7c:	4c0f      	ldr	r4, [pc, #60]	; (8003dbc <recorder::system::ConfigureClocks()+0xd8>)
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8003d7e:	f003 fb52 	bl	8007426 <memset>
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8003d82:	490f      	ldr	r1, [pc, #60]	; (8003dc0 <recorder::system::ConfigureClocks()+0xdc>)
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8003d84:	2210      	movs	r2, #16
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8003d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    periph_clk_init.PLL3 =
 8003d8a:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8003d8e:	911d      	str	r1, [sp, #116]	; 0x74
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8003d90:	923b      	str	r2, [sp, #236]	; 0xec
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8003d92:	9345      	str	r3, [sp, #276]	; 0x114
    periph_clk_init.PLL3 =
 8003d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003d9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HAL_RCCEx_PeriphCLKConfig(&periph_clk_init) != HAL_OK)
 8003da2:	a81d      	add	r0, sp, #116	; 0x74
 8003da4:	f001 f97e 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8003da8:	b908      	cbnz	r0, 8003dae <recorder::system::ConfigureClocks()+0xca>
}
 8003daa:	b04c      	add	sp, #304	; 0x130
 8003dac:	bd10      	pop	{r4, pc}
        while (1);
 8003dae:	e7fe      	b.n	8003dae <recorder::system::ConfigureClocks()+0xca>
 8003db0:	58000400 	.word	0x58000400
 8003db4:	58024800 	.word	0x58024800
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	08008698 	.word	0x08008698
 8003dc0:	02080001 	.word	0x02080001

08003dc4 <HAL_InitTick>:
HAL_StatusTypeDef HAL_InitTick(uint32_t)
{
    // This is called from HAL_RCC_ClockConfig() but we don't want to use
    // SysTick, so override it and do nothing.
    return HAL_OK;
}
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4770      	bx	lr

08003dc8 <recorder::system::ReloadWatchdog()>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8003dc8:	4b02      	ldr	r3, [pc, #8]	; (8003dd4 <recorder::system::ReloadWatchdog()+0xc>)
 8003dca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003dce:	601a      	str	r2, [r3, #0]

void ReloadWatchdog(void)
{
    ScopedProfilingPin<PROFILE_WATCHDOG> profile;
    LL_IWDG_ReloadCounter(IWDG1);
}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58004800 	.word	0x58004800

08003dd8 <recorder::system::Init()>:

void Init(void)
{
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8003ddc:	b672      	cpsid	i
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8003dde:	4cb6      	ldr	r4, [pc, #728]	; (80040b8 <recorder::system::Init()+0x2e0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de0:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8003de4:	4bb5      	ldr	r3, [pc, #724]	; (80040bc <recorder::system::Init()+0x2e4>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8003de6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  reg_value  =  (reg_value                                   |
 8003dea:	4ab5      	ldr	r2, [pc, #724]	; (80040c0 <recorder::system::Init()+0x2e8>)
 8003dec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    __disable_irq();

    InitFPU();

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    SystemCoreClock = kSystemClock;
 8003df0:	4db4      	ldr	r5, [pc, #720]	; (80040c4 <recorder::system::Init()+0x2ec>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8003df2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8003df6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003df8:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 8003dfc:	6359      	str	r1, [r3, #52]	; 0x34
    FPU->FPDSCR |= FPU_FPDSCR_FZ_Msk;
 8003dfe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e00:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003e04:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR |= FPU_FPDSCR_AHP_Msk;
 8003e06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e08:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8003e0c:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR &= ~FPU_FPDSCR_RMode_Msk;
 8003e0e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e10:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8003e14:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR |= (2 << FPU_FPDSCR_RMode_Pos);
 8003e16:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e18:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003e1c:	63d9      	str	r1, [r3, #60]	; 0x3c
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e1e:	68e3      	ldr	r3, [r4, #12]
    SystemCoreClock = kSystemClock;
 8003e20:	49a9      	ldr	r1, [pc, #676]	; (80040c8 <recorder::system::Init()+0x2f0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e22:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 8003e24:	431a      	orrs	r2, r3
    SystemD2Clock = kSystemClock;
 8003e26:	4ba9      	ldr	r3, [pc, #676]	; (80040cc <recorder::system::Init()+0x2f4>)
  SCB->AIRCR =  reg_value;
 8003e28:	60e2      	str	r2, [r4, #12]
    SystemCoreClock = kSystemClock;
 8003e2a:	6029      	str	r1, [r5, #0]
    SystemD2Clock = kSystemClock;
 8003e2c:	6019      	str	r1, [r3, #0]

    ConfigureClocks();
 8003e2e:	f7ff ff59 	bl	8003ce4 <recorder::system::ConfigureClocks()>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e36:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003e3a:	2600      	movs	r6, #0
 8003e3c:	f8c4 6250 	str.w	r6, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003e48:	6963      	ldr	r3, [r4, #20]
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	4c9d      	ldr	r4, [pc, #628]	; (80040d0 <recorder::system::Init()+0x2f8>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <recorder::system::Init()+0x2fc>)
 8003e5c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003e60:	4a9d      	ldr	r2, [pc, #628]	; (80040d8 <recorder::system::Init()+0x300>)
 8003e62:	f041 0102 	orr.w	r1, r1, #2
    LL_TIM_Init(TIM7, &timer_init);
 8003e66:	4d9d      	ldr	r5, [pc, #628]	; (80040dc <recorder::system::Init()+0x304>)
 8003e68:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8003e6c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003e70:	f001 0102 	and.w	r1, r1, #2
 8003e74:	9106      	str	r1, [sp, #24]
 8003e76:	9906      	ldr	r1, [sp, #24]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003e7e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e82:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003e84:	68d9      	ldr	r1, [r3, #12]
 8003e86:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003e8a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003e92:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003e9a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003ea4:	f041 0102 	orr.w	r1, r1, #2
 8003ea8:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8003eac:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003eb0:	f001 0102 	and.w	r1, r1, #2
 8003eb4:	9105      	str	r1, [sp, #20]
 8003eb6:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003eb8:	6899      	ldr	r1, [r3, #8]
 8003eba:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003ebe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003ec2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003eca:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003ed2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003eda:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003ede:	6019      	str	r1, [r3, #0]
 8003ee0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003ee4:	f041 0102 	orr.w	r1, r1, #2
 8003ee8:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8003eec:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003ef0:	f001 0102 	and.w	r1, r1, #2
 8003ef4:	9104      	str	r1, [sp, #16]
 8003ef6:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003ef8:	6899      	ldr	r1, [r3, #8]
 8003efa:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003efe:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8003f02:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003f04:	68d9      	ldr	r1, [r3, #12]
 8003f06:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003f0a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003f12:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003f1a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8003f1e:	6019      	str	r1, [r3, #0]
 8003f20:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003f24:	f041 0102 	orr.w	r1, r1, #2
 8003f28:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8003f2c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8003f30:	f001 0102 	and.w	r1, r1, #2
 8003f34:	9103      	str	r1, [sp, #12]
 8003f36:	9903      	ldr	r1, [sp, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003f3e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003f42:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003f44:	68d9      	ldr	r1, [r3, #12]
 8003f46:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003f4a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f52:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003f5a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003f5e:	6019      	str	r1, [r3, #0]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 8003f60:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f68:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003f6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	9302      	str	r3, [sp, #8]
 8003f76:	9b02      	ldr	r3, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003f78:	6893      	ldr	r3, [r2, #8]
 8003f7a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f82:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003f84:	68d3      	ldr	r3, [r2, #12]
 8003f86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f8a:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f8c:	6853      	ldr	r3, [r2, #4]
 8003f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f92:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003f94:	6813      	ldr	r3, [r2, #0]
 8003f96:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9e:	6013      	str	r3, [r2, #0]
    // Leave DCache disabled or else DMA won't work
    SCB_EnableICache();

    profiling::Init();
    ScopedProfilingPin<PROFILE_SYSTEM_INIT> profile;
    irq::Init();
 8003fa0:	f7ff fc8c 	bl	80038bc <recorder::irq::Init()>
    serial_.Init(115200);
 8003fa4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003fa8:	484d      	ldr	r0, [pc, #308]	; (80040e0 <recorder::system::Init()+0x308>)
 8003faa:	f7ff fd1f 	bl	80039ec <recorder::Serial::Init(unsigned long)>
 8003fae:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <recorder::system::Init()+0x30c>)
    LL_TIM_Init(TIM7, &timer_init);
 8003fb0:	a907      	add	r1, sp, #28
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	601e      	str	r6, [r3, #0]
    LL_TIM_InitTypeDef timer_init =
 8003fb6:	2310      	movs	r3, #16
 8003fb8:	9607      	str	r6, [sp, #28]
 8003fba:	9308      	str	r3, [sp, #32]
    };
 8003fbc:	f641 03ff 	movw	r3, #6399	; 0x18ff
    LL_TIM_InitTypeDef timer_init =
 8003fc0:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    };
 8003fc4:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003fc6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003fca:	f043 0320 	orr.w	r3, r3, #32
 8003fce:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003fd2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM7, &timer_init);
 8003fde:	f002 fa55 	bl	800648c <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003fe2:	68eb      	ldr	r3, [r5, #12]
    irq::RegisterHandler(TIM7_IRQn, TickHandler);
 8003fe4:	2037      	movs	r0, #55	; 0x37
 8003fe6:	4940      	ldr	r1, [pc, #256]	; (80040e8 <recorder::system::Init()+0x310>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003fee:	682b      	ldr	r3, [r5, #0]
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	f7ff fc8d 	bl	8003914 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(TIM7_IRQn, kTickIRQPriority);
 8003ffa:	210a      	movs	r1, #10
 8003ffc:	2037      	movs	r0, #55	; 0x37
 8003ffe:	f7ff fcc5 	bl	800398c <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(TIM7_IRQn);
 8004002:	2037      	movs	r0, #55	; 0x37
 8004004:	f7ff fca8 	bl	8003958 <recorder::irq::Enable(IRQn_Type)>
    if ((FLASH->OPTSR_CUR & mask) != value)
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <recorder::system::Init()+0x314>)
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <recorder::system::Init()+0x318>)
 800400c:	69d1      	ldr	r1, [r2, #28]
 800400e:	400b      	ands	r3, r1
 8004010:	2b10      	cmp	r3, #16
 8004012:	d010      	beq.n	8004036 <recorder::system::Init()+0x25e>
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8004014:	4937      	ldr	r1, [pc, #220]	; (80040f4 <recorder::system::Init()+0x31c>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8004016:	4838      	ldr	r0, [pc, #224]	; (80040f8 <recorder::system::Init()+0x320>)
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 8004018:	4b38      	ldr	r3, [pc, #224]	; (80040fc <recorder::system::Init()+0x324>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800401a:	6090      	str	r0, [r2, #8]
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800401c:	6091      	str	r1, [r2, #8]
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 800401e:	6a11      	ldr	r1, [r2, #32]
 8004020:	400b      	ands	r3, r1
 8004022:	f043 0310 	orr.w	r3, r3, #16
 8004026:	6213      	str	r3, [r2, #32]
        FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004028:	6993      	ldr	r3, [r2, #24]
 800402a:	f043 0302 	orr.w	r3, r3, #2
 800402e:	6193      	str	r3, [r2, #24]
        while (FLASH->OPTSR_CUR & FLASH_OPTSR_OPT_BUSY);
 8004030:	69d3      	ldr	r3, [r2, #28]
 8004032:	07d8      	lsls	r0, r3, #31
 8004034:	d4fc      	bmi.n	8004030 <recorder::system::Init()+0x258>
    __HAL_DBGMCU_FREEZE_IWDG1();
 8004036:	4932      	ldr	r1, [pc, #200]	; (8004100 <recorder::system::Init()+0x328>)
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8004038:	f64c 44cc 	movw	r4, #52428	; 0xcccc
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <recorder::system::Init()+0x32c>)
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800403e:	f245 5055 	movw	r0, #21845	; 0x5555
 8004042:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004044:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004048:	654a      	str	r2, [r1, #84]	; 0x54
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800404a:	2103      	movs	r1, #3
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 800404c:	2264      	movs	r2, #100	; 0x64
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 800404e:	601c      	str	r4, [r3, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8004050:	6018      	str	r0, [r3, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8004052:	6059      	str	r1, [r3, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8004054:	609a      	str	r2, [r3, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	0751      	lsls	r1, r2, #29
 800405a:	d1fc      	bne.n	8004056 <recorder::system::Init()+0x27e>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800405c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004062:	b662      	cpsie	i
    InitTimer(kSystemClock / 10000);

    InitWatchdog(100);
    __enable_irq();

    uint32_t reset_flags = RCC->RSR;
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <recorder::system::Init()+0x2f8>)
    LL_RCC_ClearResetFlags();
    printf("Reset source was ");
 8004066:	4828      	ldr	r0, [pc, #160]	; (8004108 <recorder::system::Init()+0x330>)
    uint32_t reset_flags = RCC->RSR;
 8004068:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 800406c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004070:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004074:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    printf("Reset source was ");
 8004078:	f003 fd60 	bl	8007b3c <iprintf>

    switch (reset_flags >> 16)
 800407c:	0c23      	lsrs	r3, r4, #16
 800407e:	2bfe      	cmp	r3, #254	; 0xfe
 8004080:	f000 808b 	beq.w	800419a <recorder::system::Init()+0x3c2>
 8004084:	d94e      	bls.n	8004124 <recorder::system::Init()+0x34c>
 8004086:	f241 0246 	movw	r2, #4166	; 0x1046
 800408a:	4293      	cmp	r3, r2
 800408c:	d070      	beq.n	8004170 <recorder::system::Init()+0x398>
 800408e:	d952      	bls.n	8004136 <recorder::system::Init()+0x35e>
 8004090:	f244 0246 	movw	r2, #16454	; 0x4046
 8004094:	4293      	cmp	r3, r2
 8004096:	d17b      	bne.n	8004190 <recorder::system::Init()+0x3b8>
        case 0x0146: printf("SFT\n");   break;
        case 0x0006: printf("CPU\n");   break;
        case 0x1046: printf("WWDG1\n"); break;
        case 0x0446: printf("IWDG1\n"); break;
        case 0x001E: printf("WAKE\n");  break;
        case 0x4046: printf("LPWR\n");  break;
 8004098:	481c      	ldr	r0, [pc, #112]	; (800410c <recorder::system::Init()+0x334>)
 800409a:	f003 fdd5 	bl	8007c48 <puts>
        default: printf("unknown: 0x%08lX\n", reset_flags);
    }

    wakeup_flags_ = PWR->WKUPFR;
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <recorder::system::Init()+0x338>)
 80040a0:	4c1c      	ldr	r4, [pc, #112]	; (8004114 <recorder::system::Init()+0x33c>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 80040a4:	07da      	lsls	r2, r3, #31
    wakeup_flags_ = PWR->WKUPFR;
 80040a6:	6023      	str	r3, [r4, #0]
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 80040a8:	d458      	bmi.n	800415c <recorder::system::Init()+0x384>
    {
        printf("Wakeup event was record button\n");
    }

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 80040aa:	079b      	lsls	r3, r3, #30
 80040ac:	d45c      	bmi.n	8004168 <recorder::system::Init()+0x390>
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <recorder::system::Init()+0x2f8>)
 80040b0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
 80040b4:	e030      	b.n	8004118 <recorder::system::Init()+0x340>
 80040b6:	bf00      	nop
 80040b8:	e000ed00 	.word	0xe000ed00
 80040bc:	e000ef00 	.word	0xe000ef00
 80040c0:	05fa0300 	.word	0x05fa0300
 80040c4:	20000000 	.word	0x20000000
 80040c8:	03d09000 	.word	0x03d09000
 80040cc:	20000004 	.word	0x20000004
 80040d0:	58024400 	.word	0x58024400
 80040d4:	58020400 	.word	0x58020400
 80040d8:	58021800 	.word	0x58021800
 80040dc:	40001400 	.word	0x40001400
 80040e0:	20010ea4 	.word	0x20010ea4
 80040e4:	20010ea0 	.word	0x20010ea0
 80040e8:	08003cc9 	.word	0x08003cc9
 80040ec:	52002000 	.word	0x52002000
 80040f0:	00060010 	.word	0x00060010
 80040f4:	4c5d6e7f 	.word	0x4c5d6e7f
 80040f8:	08192a3b 	.word	0x08192a3b
 80040fc:	fff9ffef 	.word	0xfff9ffef
 8004100:	5c001000 	.word	0x5c001000
 8004104:	58004800 	.word	0x58004800
 8004108:	08008a9c 	.word	0x08008a9c
 800410c:	08008ae0 	.word	0x08008ae0
 8004110:	58024800 	.word	0x58024800
 8004114:	20010e9c 	.word	0x20010e9c
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    {
        printf("Wakeup event was play button\n");
    }

    LL_RCC_ClearResetFlags();
}
 8004120:	b00c      	add	sp, #48	; 0x30
 8004122:	bd70      	pop	{r4, r5, r6, pc}
    switch (reset_flags >> 16)
 8004124:	2b46      	cmp	r3, #70	; 0x46
 8004126:	d02f      	beq.n	8004188 <recorder::system::Init()+0x3b0>
 8004128:	d910      	bls.n	800414c <recorder::system::Init()+0x374>
 800412a:	2b66      	cmp	r3, #102	; 0x66
 800412c:	d130      	bne.n	8004190 <recorder::system::Init()+0x3b8>
        case 0x0066: printf("BOR\n");   break;
 800412e:	481d      	ldr	r0, [pc, #116]	; (80041a4 <recorder::system::Init()+0x3cc>)
 8004130:	f003 fd8a 	bl	8007c48 <puts>
 8004134:	e7b3      	b.n	800409e <recorder::system::Init()+0x2c6>
    switch (reset_flags >> 16)
 8004136:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 800413a:	d01d      	beq.n	8004178 <recorder::system::Init()+0x3a0>
 800413c:	f240 4246 	movw	r2, #1094	; 0x446
 8004140:	4293      	cmp	r3, r2
 8004142:	d125      	bne.n	8004190 <recorder::system::Init()+0x3b8>
        case 0x0446: printf("IWDG1\n"); break;
 8004144:	4818      	ldr	r0, [pc, #96]	; (80041a8 <recorder::system::Init()+0x3d0>)
 8004146:	f003 fd7f 	bl	8007c48 <puts>
 800414a:	e7a8      	b.n	800409e <recorder::system::Init()+0x2c6>
    switch (reset_flags >> 16)
 800414c:	2b06      	cmp	r3, #6
 800414e:	d017      	beq.n	8004180 <recorder::system::Init()+0x3a8>
 8004150:	2b1e      	cmp	r3, #30
 8004152:	d11d      	bne.n	8004190 <recorder::system::Init()+0x3b8>
        case 0x001E: printf("WAKE\n");  break;
 8004154:	4815      	ldr	r0, [pc, #84]	; (80041ac <recorder::system::Init()+0x3d4>)
 8004156:	f003 fd77 	bl	8007c48 <puts>
 800415a:	e7a0      	b.n	800409e <recorder::system::Init()+0x2c6>
        printf("Wakeup event was record button\n");
 800415c:	4814      	ldr	r0, [pc, #80]	; (80041b0 <recorder::system::Init()+0x3d8>)
 800415e:	f003 fd73 	bl	8007c48 <puts>
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	079b      	lsls	r3, r3, #30
 8004166:	d5a2      	bpl.n	80040ae <recorder::system::Init()+0x2d6>
        printf("Wakeup event was play button\n");
 8004168:	4812      	ldr	r0, [pc, #72]	; (80041b4 <recorder::system::Init()+0x3dc>)
 800416a:	f003 fd6d 	bl	8007c48 <puts>
 800416e:	e79e      	b.n	80040ae <recorder::system::Init()+0x2d6>
        case 0x1046: printf("WWDG1\n"); break;
 8004170:	4811      	ldr	r0, [pc, #68]	; (80041b8 <recorder::system::Init()+0x3e0>)
 8004172:	f003 fd69 	bl	8007c48 <puts>
 8004176:	e792      	b.n	800409e <recorder::system::Init()+0x2c6>
        case 0x0146: printf("SFT\n");   break;
 8004178:	4810      	ldr	r0, [pc, #64]	; (80041bc <recorder::system::Init()+0x3e4>)
 800417a:	f003 fd65 	bl	8007c48 <puts>
 800417e:	e78e      	b.n	800409e <recorder::system::Init()+0x2c6>
        case 0x0006: printf("CPU\n");   break;
 8004180:	480f      	ldr	r0, [pc, #60]	; (80041c0 <recorder::system::Init()+0x3e8>)
 8004182:	f003 fd61 	bl	8007c48 <puts>
 8004186:	e78a      	b.n	800409e <recorder::system::Init()+0x2c6>
        case 0x0046: printf("NRST\n");  break;
 8004188:	480e      	ldr	r0, [pc, #56]	; (80041c4 <recorder::system::Init()+0x3ec>)
 800418a:	f003 fd5d 	bl	8007c48 <puts>
 800418e:	e786      	b.n	800409e <recorder::system::Init()+0x2c6>
        default: printf("unknown: 0x%08lX\n", reset_flags);
 8004190:	4621      	mov	r1, r4
 8004192:	480d      	ldr	r0, [pc, #52]	; (80041c8 <recorder::system::Init()+0x3f0>)
 8004194:	f003 fcd2 	bl	8007b3c <iprintf>
 8004198:	e781      	b.n	800409e <recorder::system::Init()+0x2c6>
        case 0x00FE: printf("POR\n");   break;
 800419a:	480c      	ldr	r0, [pc, #48]	; (80041cc <recorder::system::Init()+0x3f4>)
 800419c:	f003 fd54 	bl	8007c48 <puts>
 80041a0:	e77d      	b.n	800409e <recorder::system::Init()+0x2c6>
 80041a2:	bf00      	nop
 80041a4:	08008abc 	.word	0x08008abc
 80041a8:	08008ad0 	.word	0x08008ad0
 80041ac:	08008ad8 	.word	0x08008ad8
 80041b0:	08008afc 	.word	0x08008afc
 80041b4:	08008b1c 	.word	0x08008b1c
 80041b8:	08008ac8 	.word	0x08008ac8
 80041bc:	08008ac0 	.word	0x08008ac0
 80041c0:	08008ac4 	.word	0x08008ac4
 80041c4:	08008ab4 	.word	0x08008ab4
 80041c8:	08008ae8 	.word	0x08008ae8
 80041cc:	08008ab0 	.word	0x08008ab0

080041d0 <recorder::system::Delay_ms(unsigned long)>:
{
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
}

void Delay_ms(uint32_t ms)
{
 80041d0:	b570      	push	{r4, r5, r6, lr}
    uint32_t start = ticks_.load(std::memory_order_acquire);

    while (TickDelta(start) < ms * 10)
 80041d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return __atomic_load_n(&_M_i, int(__m));
 80041d6:	4d08      	ldr	r5, [pc, #32]	; (80041f8 <recorder::system::Delay_ms(unsigned long)+0x28>)
 80041d8:	0044      	lsls	r4, r0, #1
 80041da:	682e      	ldr	r6, [r5, #0]
 80041dc:	f3bf 8f5b 	dmb	ish
 80041e0:	e001      	b.n	80041e6 <recorder::system::Delay_ms(unsigned long)+0x16>
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
}

void Sleep(void)
{
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80041e2:	f000 f9ef 	bl	80045c4 <HAL_PWR_EnterSLEEPMode>
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	2000      	movs	r0, #0
 80041ec:	f3bf 8f5b 	dmb	ish
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
 80041f0:	1b9b      	subs	r3, r3, r6
    while (TickDelta(start) < ms * 10)
 80041f2:	429c      	cmp	r4, r3
 80041f4:	d8f5      	bhi.n	80041e2 <recorder::system::Delay_ms(unsigned long)+0x12>
}
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	20010ea0 	.word	0x20010ea0

080041fc <recorder::system::SerialFlushTx(bool)>:
{
 80041fc:	4601      	mov	r1, r0
    serial_.FlushTx(discard);
 80041fe:	4801      	ldr	r0, [pc, #4]	; (8004204 <recorder::system::SerialFlushTx(bool)+0x8>)
 8004200:	f7ff bce0 	b.w	8003bc4 <recorder::Serial::FlushTx(bool)>
 8004204:	20010ea4 	.word	0x20010ea4

08004208 <recorder::system::Standby()>:
{
 8004208:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid f" : : : "memory");
 800420a:	b671      	cpsid	f
        NVIC->ICER[i] = 0xFFFFFFFF;
 800420c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004210:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  * @rmtoll CPUCR     RUN_D3       LL_PWR_CPU_DisableD3RunInLowPowerMode\n
  * @retval None
  */
__STATIC_INLINE void LL_PWR_CPU_DisableD3RunInLowPowerMode(void)
{
  CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_RUN_D3);
 8004214:	4c41      	ldr	r4, [pc, #260]	; (800431c <recorder::system::Standby()+0x114>)
 8004216:	4a42      	ldr	r2, [pc, #264]	; (8004320 <recorder::system::Standby()+0x118>)
 8004218:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800421c:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004220:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8004224:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004228:	f8c3 5188 	str.w	r5, [r3, #392]	; 0x188
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800422c:	f8c3 5288 	str.w	r5, [r3, #648]	; 0x288
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004230:	f8c3 518c 	str.w	r5, [r3, #396]	; 0x18c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8004234:	f8c3 528c 	str.w	r5, [r3, #652]	; 0x28c
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004238:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800423c:	f8c3 5290 	str.w	r5, [r3, #656]	; 0x290
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004240:	f8c3 5194 	str.w	r5, [r3, #404]	; 0x194
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8004244:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004248:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800424c:	f8c3 5298 	str.w	r5, [r3, #664]	; 0x298
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004250:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8004254:	f8c3 529c 	str.w	r5, [r3, #668]	; 0x29c
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425e:	6123      	str	r3, [r4, #16]
    HAL_DisableDBGSleepMode();
 8004260:	f000 f998 	bl	8004594 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DisableDBGStopMode();
 8004264:	f000 f99e 	bl	80045a4 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DisableDBGStandbyMode();
 8004268:	f000 f9a4 	bl	80045b4 <HAL_DBGMCU_DisableDBGStandbyMode>
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 800426c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	2201      	movs	r2, #1
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	62a3      	str	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPullUp(uint32_t WakeUpPin)
{
  MODIFY_REG(PWR->WKUPEPR, \
 8004276:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004278:	fa92 f1a2 	rbit	r1, r2
 800427c:	fab1 f181 	clz	r1, r1
 8004280:	fa92 f3a2 	rbit	r3, r2
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	4091      	lsls	r1, r2
 800428a:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 800428e:	3308      	adds	r3, #8
 8004290:	f001 011e 	and.w	r1, r1, #30
 8004294:	4093      	lsls	r3, r2
 8004296:	fa0c f101 	lsl.w	r1, ip, r1
 800429a:	f003 031e 	and.w	r3, r3, #30
 800429e:	ea20 0101 	bic.w	r1, r0, r1
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	430b      	orrs	r3, r1
 80042a8:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 80042aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042ac:	4313      	orrs	r3, r2
 80042ae:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 80042b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80042b8:	2302      	movs	r3, #2
  MODIFY_REG(PWR->WKUPEPR, \
 80042ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80042bc:	fa93 f1a3 	rbit	r1, r3
 80042c0:	fab1 f181 	clz	r1, r1
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	4091      	lsls	r1, r2
 80042ce:	3308      	adds	r3, #8
 80042d0:	f001 011e 	and.w	r1, r1, #30
 80042d4:	4093      	lsls	r3, r2
 80042d6:	fa0c f101 	lsl.w	r1, ip, r1
 80042da:	f003 031e 	and.w	r3, r3, #30
 80042de:	ea20 0101 	bic.w	r1, r0, r1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <recorder::system::Standby()+0x11c>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 80042ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	62a3      	str	r3, [r4, #40]	; 0x28
    PWR->WKUPCR = 0xFFFFFFFF;
 80042f4:	6225      	str	r5, [r4, #32]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D1, PDMode);
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6123      	str	r3, [r4, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D2, PDMode);
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6123      	str	r3, [r4, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D3 , PDMode);
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	f043 0304 	orr.w	r3, r3, #4
 800430c:	6123      	str	r3, [r4, #16]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800430e:	6913      	ldr	r3, [r2, #16]
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6113      	str	r3, [r2, #16]
    __WFI();
 8004316:	bf30      	wfi
}

void Reset(void)
{
    NVIC_SystemReset();
 8004318:	f7ff fcc4 	bl	8003ca4 <NVIC_SystemReset>
 800431c:	58024800 	.word	0x58024800
 8004320:	e000e100 	.word	0xe000e100
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <recorder::system::WakeupWasPlayButton()>:
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
 8004328:	4b02      	ldr	r3, [pc, #8]	; (8004334 <recorder::system::WakeupWasPlayButton()+0xc>)
 800432a:	6818      	ldr	r0, [r3, #0]
}
 800432c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20010e9c 	.word	0x20010e9c

08004338 <recorder::system::Reset()>:
{
 8004338:	b508      	push	{r3, lr}
    NVIC_SystemReset();
 800433a:	f7ff fcb3 	bl	8003ca4 <NVIC_SystemReset>
 800433e:	bf00      	nop

08004340 <fgets>:
}

extern "C"
char* fgets(char* str, int count, std::FILE* stream)
{
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (count < 2)
 8004344:	2901      	cmp	r1, #1
{
 8004346:	b083      	sub	sp, #12
 8004348:	9001      	str	r0, [sp, #4]
    if (count < 2)
 800434a:	dd33      	ble.n	80043b4 <fgets+0x74>
 800434c:	4616      	mov	r6, r2
        return nullptr;
    }

    int i;

    for (i = 0; i < count - 1; i++)
 800434e:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 8004352:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8004356:	f04f 0a00 	mov.w	sl, #0
    {
        char byte = std::getc(stream);
 800435a:	4630      	mov	r0, r6
 800435c:	f002 ffea 	bl	8007334 <getc>
 8004360:	4605      	mov	r5, r0
        bool error = std::ferror(stream);
 8004362:	4630      	mov	r0, r6
 8004364:	f002 fe8c 	bl	8007080 <ferror>
 8004368:	4607      	mov	r7, r0
        bool eof = std::feof(stream);
 800436a:	4630      	mov	r0, r6
        char byte = std::getc(stream);
 800436c:	b2ed      	uxtb	r5, r5
        bool eof = std::feof(stream);
 800436e:	f002 fe51 	bl	8007014 <feof>
 8004372:	4604      	mov	r4, r0
        std::clearerr(stream);
 8004374:	4630      	mov	r0, r6
        bool eof = std::feof(stream);
 8004376:	f1b4 0b00 	subs.w	fp, r4, #0
 800437a:	bf18      	it	ne
 800437c:	f04f 0b01 	movne.w	fp, #1
        std::clearerr(stream);
 8004380:	f002 fe08 	bl	8006f94 <clearerr>

        if (error || (eof && i == 0))
 8004384:	b9b7      	cbnz	r7, 80043b4 <fgets+0x74>
 8004386:	f1ba 0f00 	cmp.w	sl, #0
 800438a:	d102      	bne.n	8004392 <fgets+0x52>
 800438c:	f1bb 0f00 	cmp.w	fp, #0
 8004390:	d110      	bne.n	80043b4 <fgets+0x74>
        {
            return nullptr;
        }
        else if (eof)
 8004392:	b99c      	cbnz	r4, 80043bc <fgets+0x7c>
        }
        else
        {
            str[i] = byte;

            if (byte == '\n')
 8004394:	2d0a      	cmp	r5, #10
            str[i] = byte;
 8004396:	f808 5f01 	strb.w	r5, [r8, #1]!
            if (byte == '\n')
 800439a:	d003      	beq.n	80043a4 <fgets+0x64>
    for (i = 0; i < count - 1; i++)
 800439c:	f10a 0a01 	add.w	sl, sl, #1
 80043a0:	45ca      	cmp	sl, r9
 80043a2:	d1da      	bne.n	800435a <fgets+0x1a>
                break;
            }
        }
    }

    str[i + 1] = '\0';
 80043a4:	9801      	ldr	r0, [sp, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	eb00 030a 	add.w	r3, r0, sl
 80043ac:	705a      	strb	r2, [r3, #1]
    return str;
}
 80043ae:	b003      	add	sp, #12
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nullptr;
 80043b4:	2000      	movs	r0, #0
}
 80043b6:	b003      	add	sp, #12
 80043b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return str;
 80043bc:	9b01      	ldr	r3, [sp, #4]
            str[i] = '\0';
 80043be:	2200      	movs	r2, #0
            return str;
 80043c0:	4618      	mov	r0, r3
            str[i] = '\0';
 80043c2:	f803 200a 	strb.w	r2, [r3, sl]
}
 80043c6:	b003      	add	sp, #12
 80043c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080043cc <_read>:

extern "C"
int _read(int file, char* ptr, int len)
{
 80043cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool prev_was_cr = false;

    if (file == STDIN_FILENO)
 80043d0:	bb18      	cbnz	r0, 800441a <_read+0x4e>
    {
        int i = 0;

        while (i < len && serial_.BytesAvailable())
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	4604      	mov	r4, r0
 80043d6:	4616      	mov	r6, r2
 80043d8:	dd1c      	ble.n	8004414 <_read+0x48>
 80043da:	4688      	mov	r8, r1
 80043dc:	4d13      	ldr	r5, [pc, #76]	; (800442c <_read+0x60>)
 80043de:	4f14      	ldr	r7, [pc, #80]	; (8004430 <_read+0x64>)
 80043e0:	e009      	b.n	80043f6 <_read+0x2a>
            if (is_cr)
            {
                ch = '\n';
            }

            if (!(is_lf && prev_was_cr))
 80043e2:	280a      	cmp	r0, #10
 80043e4:	d101      	bne.n	80043ea <_read+0x1e>
 80043e6:	783a      	ldrb	r2, [r7, #0]
 80043e8:	b912      	cbnz	r2, 80043f0 <_read+0x24>
            {
                ptr[i++] = ch;
 80043ea:	f808 0004 	strb.w	r0, [r8, r4]
 80043ee:	3401      	adds	r4, #1
        while (i < len && serial_.BytesAvailable())
 80043f0:	42b4      	cmp	r4, r6
            }

            prev_was_cr = is_cr;
 80043f2:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 80043f4:	da0e      	bge.n	8004414 <_read+0x48>
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7ff fba0 	bl	8003b3c <recorder::Serial::BytesAvailable()>
 80043fc:	4603      	mov	r3, r0
            char ch = serial_.GetByteBlocking();
 80043fe:	4628      	mov	r0, r5
        while (i < len && serial_.BytesAvailable())
 8004400:	b143      	cbz	r3, 8004414 <_read+0x48>
            char ch = serial_.GetByteBlocking();
 8004402:	f7ff fba1 	bl	8003b48 <recorder::Serial::GetByteBlocking()>
            bool is_cr = (ch == '\r');
 8004406:	280d      	cmp	r0, #13
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
            if (is_cr)
 800440e:	d1e8      	bne.n	80043e2 <_read+0x16>
                ch = '\n';
 8004410:	200a      	movs	r0, #10
 8004412:	e7ea      	b.n	80043ea <_read+0x1e>
 8004414:	4620      	mov	r0, r4
        return i;
    }

    errno = ENOENT;
    return -1;
}
 8004416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 800441a:	f002 fdf5 	bl	8007008 <__errno>
 800441e:	2202      	movs	r2, #2
 8004420:	4603      	mov	r3, r0
    return -1;
 8004422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOENT;
 8004426:	601a      	str	r2, [r3, #0]
    return -1;
 8004428:	e7f5      	b.n	8004416 <_read+0x4a>
 800442a:	bf00      	nop
 800442c:	20010ea4 	.word	0x20010ea4
 8004430:	20010ff4 	.word	0x20010ff4

08004434 <_write>:
extern "C"
int _write(int file, char* ptr, int len)
{
    static char prev = '\0';

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8004434:	1e43      	subs	r3, r0, #1
 8004436:	2b01      	cmp	r3, #1
{
 8004438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 800443c:	d822      	bhi.n	8004484 <_write+0x50>
    {
        for (int i = 0; i < len; i++)
 800443e:	2a00      	cmp	r2, #0
 8004440:	4690      	mov	r8, r2
 8004442:	dd1c      	ble.n	800447e <_write+0x4a>
 8004444:	1e4c      	subs	r4, r1, #1
 8004446:	4e13      	ldr	r6, [pc, #76]	; (8004494 <_write+0x60>)
        {
            if (ptr[i] == '\n' && prev != '\r')
            {
                serial_.Write('\r', true);
 8004448:	4d13      	ldr	r5, [pc, #76]	; (8004498 <_write+0x64>)
 800444a:	18a7      	adds	r7, r4, r2
 800444c:	e008      	b.n	8004460 <_write+0x2c>
            }

            serial_.Write(ptr[i], true);
 800444e:	4619      	mov	r1, r3
 8004450:	2201      	movs	r2, #1
 8004452:	4628      	mov	r0, r5
 8004454:	f7ff fb8a 	bl	8003b6c <recorder::Serial::Write(unsigned char, bool)>
            prev = ptr[i];
 8004458:	7823      	ldrb	r3, [r4, #0]
        for (int i = 0; i < len; i++)
 800445a:	42bc      	cmp	r4, r7
            prev = ptr[i];
 800445c:	7033      	strb	r3, [r6, #0]
        for (int i = 0; i < len; i++)
 800445e:	d00e      	beq.n	800447e <_write+0x4a>
            if (ptr[i] == '\n' && prev != '\r')
 8004460:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004464:	2b0a      	cmp	r3, #10
 8004466:	d1f2      	bne.n	800444e <_write+0x1a>
 8004468:	f896 c000 	ldrb.w	ip, [r6]
                serial_.Write('\r', true);
 800446c:	210d      	movs	r1, #13
 800446e:	2201      	movs	r2, #1
 8004470:	4628      	mov	r0, r5
            if (ptr[i] == '\n' && prev != '\r')
 8004472:	458c      	cmp	ip, r1
 8004474:	d0eb      	beq.n	800444e <_write+0x1a>
                serial_.Write('\r', true);
 8004476:	f7ff fb79 	bl	8003b6c <recorder::Serial::Write(unsigned char, bool)>
            serial_.Write(ptr[i], true);
 800447a:	7823      	ldrb	r3, [r4, #0]
 800447c:	e7e7      	b.n	800444e <_write+0x1a>

        return len;
    }

    errno = ENOENT;
    return -1;
 800447e:	4640      	mov	r0, r8
}
 8004480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8004484:	f002 fdc0 	bl	8007008 <__errno>
 8004488:	2202      	movs	r2, #2
 800448a:	4603      	mov	r3, r0
    return -1;
 800448c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOENT;
 8004490:	601a      	str	r2, [r3, #0]
    return -1;
 8004492:	e7f5      	b.n	8004480 <_write+0x4c>
 8004494:	20010ff5 	.word	0x20010ff5
 8004498:	20010ea4 	.word	0x20010ea4

0800449c <_GLOBAL__sub_I_TickHandler>:
      __atomic_base() noexcept = default;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <_GLOBAL__sub_I_TickHandler+0x10>)
 800449e:	2200      	movs	r2, #0
 80044a0:	e9c3 2200 	strd	r2, r2, [r3]
 80044a4:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48

}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20010ea4 	.word	0x20010ea4

080044b0 <Default_Handler>:
 80044b0:	e7fe      	b.n	80044b0 <Default_Handler>
 80044b2:	bf00      	nop

080044b4 <Reset_Handler>:
 80044b4:	480b      	ldr	r0, [pc, #44]	; (80044e4 <Reset_Handler+0x30>)
 80044b6:	4a0c      	ldr	r2, [pc, #48]	; (80044e8 <Reset_Handler+0x34>)
 80044b8:	4290      	cmp	r0, r2
 80044ba:	d003      	beq.n	80044c4 <Reset_Handler+0x10>
 80044bc:	1a12      	subs	r2, r2, r0
 80044be:	490b      	ldr	r1, [pc, #44]	; (80044ec <Reset_Handler+0x38>)
 80044c0:	f002 ffa3 	bl	800740a <memcpy>
 80044c4:	480a      	ldr	r0, [pc, #40]	; (80044f0 <Reset_Handler+0x3c>)
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <Reset_Handler+0x40>)
 80044c8:	4290      	cmp	r0, r2
 80044ca:	d003      	beq.n	80044d4 <Reset_Handler+0x20>
 80044cc:	1a12      	subs	r2, r2, r0
 80044ce:	2100      	movs	r1, #0
 80044d0:	f002 ffa9 	bl	8007426 <memset>
 80044d4:	f000 f810 	bl	80044f8 <SystemInit>
 80044d8:	f002 ff70 	bl	80073bc <__libc_init_array>
 80044dc:	f7fd fd80 	bl	8001fe0 <main>
 80044e0:	e7fe      	b.n	80044e0 <Reset_Handler+0x2c>
 80044e2:	bf00      	nop
 80044e4:	20000000 	.word	0x20000000
 80044e8:	2000006c 	.word	0x2000006c
 80044ec:	0800909c 	.word	0x0800909c
 80044f0:	20000400 	.word	0x20000400
 80044f4:	20011010 	.word	0x20011010

080044f8 <SystemInit>:
 80044f8:	b410      	push	{r4}
 80044fa:	4c1a      	ldr	r4, [pc, #104]	; (8004564 <SystemInit+0x6c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <SystemInit+0x70>)
 8004500:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004504:	4819      	ldr	r0, [pc, #100]	; (800456c <SystemInit+0x74>)
 8004506:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800450a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	4c17      	ldr	r4, [pc, #92]	; (8004570 <SystemInit+0x78>)
 8004512:	f041 0101 	orr.w	r1, r1, #1
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	4008      	ands	r0, r1
 800451e:	4915      	ldr	r1, [pc, #84]	; (8004574 <SystemInit+0x7c>)
 8004520:	6018      	str	r0, [r3, #0]
 8004522:	619a      	str	r2, [r3, #24]
 8004524:	61da      	str	r2, [r3, #28]
 8004526:	621a      	str	r2, [r3, #32]
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
 800452e:	635a      	str	r2, [r3, #52]	; 0x34
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
 8004532:	63da      	str	r2, [r3, #60]	; 0x3c
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800453e:	6018      	str	r0, [r3, #0]
 8004540:	661a      	str	r2, [r3, #96]	; 0x60
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	4019      	ands	r1, r3
 8004546:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800454a:	d203      	bcs.n	8004554 <SystemInit+0x5c>
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <SystemInit+0x80>)
 800454e:	2201      	movs	r2, #1
 8004550:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <SystemInit+0x6c>)
 8004556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800455a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000ed00 	.word	0xe000ed00
 8004568:	58024400 	.word	0x58024400
 800456c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004570:	5c001000 	.word	0x5c001000
 8004574:	ffff0000 	.word	0xffff0000
 8004578:	51008000 	.word	0x51008000

0800457c <HAL_GetTick>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <HAL_GetTick+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20010ff8 	.word	0x20010ff8

08004588 <HAL_GetREVID>:
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <HAL_GetREVID+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	0c00      	lsrs	r0, r0, #16
 800458e:	4770      	bx	lr
 8004590:	5c001000 	.word	0x5c001000

08004594 <HAL_DBGMCU_DisableDBGSleepMode>:
 8004594:	4a02      	ldr	r2, [pc, #8]	; (80045a0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004596:	6853      	ldr	r3, [r2, #4]
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6053      	str	r3, [r2, #4]
 800459e:	4770      	bx	lr
 80045a0:	5c001000 	.word	0x5c001000

080045a4 <HAL_DBGMCU_DisableDBGStopMode>:
 80045a4:	4a02      	ldr	r2, [pc, #8]	; (80045b0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80045a6:	6853      	ldr	r3, [r2, #4]
 80045a8:	f023 0302 	bic.w	r3, r3, #2
 80045ac:	6053      	str	r3, [r2, #4]
 80045ae:	4770      	bx	lr
 80045b0:	5c001000 	.word	0x5c001000

080045b4 <HAL_DBGMCU_DisableDBGStandbyMode>:
 80045b4:	4a02      	ldr	r2, [pc, #8]	; (80045c0 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80045b6:	6853      	ldr	r3, [r2, #4]
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	6053      	str	r3, [r2, #4]
 80045be:	4770      	bx	lr
 80045c0:	5c001000 	.word	0x5c001000

080045c4 <HAL_PWR_EnterSLEEPMode>:
 80045c4:	4a05      	ldr	r2, [pc, #20]	; (80045dc <HAL_PWR_EnterSLEEPMode+0x18>)
 80045c6:	2901      	cmp	r1, #1
 80045c8:	6913      	ldr	r3, [r2, #16]
 80045ca:	f023 0304 	bic.w	r3, r3, #4
 80045ce:	6113      	str	r3, [r2, #16]
 80045d0:	d001      	beq.n	80045d6 <HAL_PWR_EnterSLEEPMode+0x12>
 80045d2:	bf20      	wfe
 80045d4:	4770      	bx	lr
 80045d6:	bf30      	wfi
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <HAL_PWREx_ConfigSupply>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_PWREx_ConfigSupply+0x48>)
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	0752      	lsls	r2, r2, #29
 80045e8:	d404      	bmi.n	80045f4 <HAL_PWREx_ConfigSupply+0x14>
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4283      	cmp	r3, r0
 80045f2:	d114      	bne.n	800461e <HAL_PWREx_ConfigSupply+0x3e>
 80045f4:	4c0c      	ldr	r4, [pc, #48]	; (8004628 <HAL_PWREx_ConfigSupply+0x48>)
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	f023 0307 	bic.w	r3, r3, #7
 80045fc:	4318      	orrs	r0, r3
 80045fe:	60e0      	str	r0, [r4, #12]
 8004600:	f7ff ffbc 	bl	800457c <HAL_GetTick>
 8004604:	4605      	mov	r5, r0
 8004606:	e005      	b.n	8004614 <HAL_PWREx_ConfigSupply+0x34>
 8004608:	f7ff ffb8 	bl	800457c <HAL_GetTick>
 800460c:	1b40      	subs	r0, r0, r5
 800460e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004612:	d806      	bhi.n	8004622 <HAL_PWREx_ConfigSupply+0x42>
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	049b      	lsls	r3, r3, #18
 8004618:	d5f6      	bpl.n	8004608 <HAL_PWREx_ConfigSupply+0x28>
 800461a:	2000      	movs	r0, #0
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	2001      	movs	r0, #1
 8004620:	bd38      	pop	{r3, r4, r5, pc}
 8004622:	2003      	movs	r0, #3
 8004624:	bd38      	pop	{r3, r4, r5, pc}
 8004626:	bf00      	nop
 8004628:	58024800 	.word	0x58024800

0800462c <HAL_RCC_OscConfig>:
 800462c:	2800      	cmp	r0, #0
 800462e:	f000 81de 	beq.w	80049ee <HAL_RCC_OscConfig+0x3c2>
 8004632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004634:	6803      	ldr	r3, [r0, #0]
 8004636:	4604      	mov	r4, r0
 8004638:	07d8      	lsls	r0, r3, #31
 800463a:	d530      	bpl.n	800469e <HAL_RCC_OscConfig+0x72>
 800463c:	499f      	ldr	r1, [pc, #636]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 800463e:	690a      	ldr	r2, [r1, #16]
 8004640:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004642:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004646:	2a10      	cmp	r2, #16
 8004648:	f000 8100 	beq.w	800484c <HAL_RCC_OscConfig+0x220>
 800464c:	2a18      	cmp	r2, #24
 800464e:	f000 80f8 	beq.w	8004842 <HAL_RCC_OscConfig+0x216>
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004658:	f000 8120 	beq.w	800489c <HAL_RCC_OscConfig+0x270>
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 815e 	beq.w	800491e <HAL_RCC_OscConfig+0x2f2>
 8004662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004666:	4b95      	ldr	r3, [pc, #596]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f000 822f 	beq.w	8004acc <HAL_RCC_OscConfig+0x4a0>
 800466e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f7ff ff7e 	bl	800457c <HAL_GetTick>
 8004680:	4e8e      	ldr	r6, [pc, #568]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004682:	f241 3788 	movw	r7, #5000	; 0x1388
 8004686:	4605      	mov	r5, r0
 8004688:	e005      	b.n	8004696 <HAL_RCC_OscConfig+0x6a>
 800468a:	f7ff ff77 	bl	800457c <HAL_GetTick>
 800468e:	1b40      	subs	r0, r0, r5
 8004690:	42b8      	cmp	r0, r7
 8004692:	f200 8142 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 8004696:	6833      	ldr	r3, [r6, #0]
 8004698:	039a      	lsls	r2, r3, #14
 800469a:	d5f6      	bpl.n	800468a <HAL_RCC_OscConfig+0x5e>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	079d      	lsls	r5, r3, #30
 80046a0:	f100 8085 	bmi.w	80047ae <HAL_RCC_OscConfig+0x182>
 80046a4:	06d9      	lsls	r1, r3, #27
 80046a6:	d52f      	bpl.n	8004708 <HAL_RCC_OscConfig+0xdc>
 80046a8:	4a84      	ldr	r2, [pc, #528]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 80046aa:	6913      	ldr	r3, [r2, #16]
 80046ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	f000 80da 	beq.w	800486c <HAL_RCC_OscConfig+0x240>
 80046b8:	2b18      	cmp	r3, #24
 80046ba:	f000 80d2 	beq.w	8004862 <HAL_RCC_OscConfig+0x236>
 80046be:	69e3      	ldr	r3, [r4, #28]
 80046c0:	4d7e      	ldr	r5, [pc, #504]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8165 	beq.w	8004992 <HAL_RCC_OscConfig+0x366>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7ff ff54 	bl	800457c <HAL_GetTick>
 80046d4:	4606      	mov	r6, r0
 80046d6:	e005      	b.n	80046e4 <HAL_RCC_OscConfig+0xb8>
 80046d8:	f7ff ff50 	bl	800457c <HAL_GetTick>
 80046dc:	1b80      	subs	r0, r0, r6
 80046de:	2802      	cmp	r0, #2
 80046e0:	f200 811b 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	05db      	lsls	r3, r3, #23
 80046e8:	d5f6      	bpl.n	80046d8 <HAL_RCC_OscConfig+0xac>
 80046ea:	f7ff ff4d 	bl	8004588 <HAL_GetREVID>
 80046ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80046f2:	4298      	cmp	r0, r3
 80046f4:	f200 820b 	bhi.w	8004b0e <HAL_RCC_OscConfig+0x4e2>
 80046f8:	686b      	ldr	r3, [r5, #4]
 80046fa:	6a22      	ldr	r2, [r4, #32]
 80046fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004700:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004704:	606b      	str	r3, [r5, #4]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	071d      	lsls	r5, r3, #28
 800470a:	d516      	bpl.n	800473a <HAL_RCC_OscConfig+0x10e>
 800470c:	6963      	ldr	r3, [r4, #20]
 800470e:	4d6b      	ldr	r5, [pc, #428]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 811c 	beq.w	800494e <HAL_RCC_OscConfig+0x322>
 8004716:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	676b      	str	r3, [r5, #116]	; 0x74
 800471e:	f7ff ff2d 	bl	800457c <HAL_GetTick>
 8004722:	4606      	mov	r6, r0
 8004724:	e005      	b.n	8004732 <HAL_RCC_OscConfig+0x106>
 8004726:	f7ff ff29 	bl	800457c <HAL_GetTick>
 800472a:	1b80      	subs	r0, r0, r6
 800472c:	2802      	cmp	r0, #2
 800472e:	f200 80f4 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 8004732:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004734:	0798      	lsls	r0, r3, #30
 8004736:	d5f6      	bpl.n	8004726 <HAL_RCC_OscConfig+0xfa>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	069a      	lsls	r2, r3, #26
 800473c:	d516      	bpl.n	800476c <HAL_RCC_OscConfig+0x140>
 800473e:	69a3      	ldr	r3, [r4, #24]
 8004740:	4d5e      	ldr	r5, [pc, #376]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8114 	beq.w	8004970 <HAL_RCC_OscConfig+0x344>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800474e:	602b      	str	r3, [r5, #0]
 8004750:	f7ff ff14 	bl	800457c <HAL_GetTick>
 8004754:	4606      	mov	r6, r0
 8004756:	e005      	b.n	8004764 <HAL_RCC_OscConfig+0x138>
 8004758:	f7ff ff10 	bl	800457c <HAL_GetTick>
 800475c:	1b80      	subs	r0, r0, r6
 800475e:	2802      	cmp	r0, #2
 8004760:	f200 80db 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	049f      	lsls	r7, r3, #18
 8004768:	d5f6      	bpl.n	8004758 <HAL_RCC_OscConfig+0x12c>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	0759      	lsls	r1, r3, #29
 800476e:	f100 809b 	bmi.w	80048a8 <HAL_RCC_OscConfig+0x27c>
 8004772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004774:	b1cb      	cbz	r3, 80047aa <HAL_RCC_OscConfig+0x17e>
 8004776:	4d51      	ldr	r5, [pc, #324]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004778:	692a      	ldr	r2, [r5, #16]
 800477a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800477e:	2a18      	cmp	r2, #24
 8004780:	d06d      	beq.n	800485e <HAL_RCC_OscConfig+0x232>
 8004782:	2b02      	cmp	r3, #2
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f000 8139 	beq.w	8004a02 <HAL_RCC_OscConfig+0x3d6>
 8004790:	f7ff fef4 	bl	800457c <HAL_GetTick>
 8004794:	4604      	mov	r4, r0
 8004796:	e005      	b.n	80047a4 <HAL_RCC_OscConfig+0x178>
 8004798:	f7ff fef0 	bl	800457c <HAL_GetTick>
 800479c:	1b00      	subs	r0, r0, r4
 800479e:	2802      	cmp	r0, #2
 80047a0:	f200 80bb 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	019b      	lsls	r3, r3, #6
 80047a8:	d4f6      	bmi.n	8004798 <HAL_RCC_OscConfig+0x16c>
 80047aa:	2000      	movs	r0, #0
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ae:	4a43      	ldr	r2, [pc, #268]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 80047b0:	6913      	ldr	r3, [r2, #16]
 80047b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047b4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80047b8:	d129      	bne.n	800480e <HAL_RCC_OscConfig+0x1e2>
 80047ba:	4b40      	ldr	r3, [pc, #256]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 80047bc:	68e2      	ldr	r2, [r4, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0759      	lsls	r1, r3, #29
 80047c2:	d501      	bpl.n	80047c8 <HAL_RCC_OscConfig+0x19c>
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	d04a      	beq.n	800485e <HAL_RCC_OscConfig+0x232>
 80047c8:	4d3c      	ldr	r5, [pc, #240]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	f023 0319 	bic.w	r3, r3, #25
 80047d0:	4313      	orrs	r3, r2
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7ff fed2 	bl	800457c <HAL_GetTick>
 80047d8:	4606      	mov	r6, r0
 80047da:	e005      	b.n	80047e8 <HAL_RCC_OscConfig+0x1bc>
 80047dc:	f7ff fece 	bl	800457c <HAL_GetTick>
 80047e0:	1b80      	subs	r0, r0, r6
 80047e2:	2802      	cmp	r0, #2
 80047e4:	f200 8099 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	075b      	lsls	r3, r3, #29
 80047ec:	d5f6      	bpl.n	80047dc <HAL_RCC_OscConfig+0x1b0>
 80047ee:	f7ff fecb 	bl	8004588 <HAL_GetREVID>
 80047f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80047f6:	6922      	ldr	r2, [r4, #16]
 80047f8:	4298      	cmp	r0, r3
 80047fa:	686b      	ldr	r3, [r5, #4]
 80047fc:	f200 80f0 	bhi.w	80049e0 <HAL_RCC_OscConfig+0x3b4>
 8004800:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004804:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004808:	606b      	str	r3, [r5, #4]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	e74a      	b.n	80046a4 <HAL_RCC_OscConfig+0x78>
 800480e:	2b18      	cmp	r3, #24
 8004810:	f000 80e2 	beq.w	80049d8 <HAL_RCC_OscConfig+0x3ac>
 8004814:	4d29      	ldr	r5, [pc, #164]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004816:	68e2      	ldr	r2, [r4, #12]
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	2a00      	cmp	r2, #0
 800481c:	f000 80cb 	beq.w	80049b6 <HAL_RCC_OscConfig+0x38a>
 8004820:	f023 0319 	bic.w	r3, r3, #25
 8004824:	4313      	orrs	r3, r2
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	f7ff fea8 	bl	800457c <HAL_GetTick>
 800482c:	4606      	mov	r6, r0
 800482e:	e004      	b.n	800483a <HAL_RCC_OscConfig+0x20e>
 8004830:	f7ff fea4 	bl	800457c <HAL_GetTick>
 8004834:	1b80      	subs	r0, r0, r6
 8004836:	2802      	cmp	r0, #2
 8004838:	d86f      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 800483a:	682b      	ldr	r3, [r5, #0]
 800483c:	075f      	lsls	r7, r3, #29
 800483e:	d5f7      	bpl.n	8004830 <HAL_RCC_OscConfig+0x204>
 8004840:	e7d5      	b.n	80047ee <HAL_RCC_OscConfig+0x1c2>
 8004842:	f001 0103 	and.w	r1, r1, #3
 8004846:	2902      	cmp	r1, #2
 8004848:	f47f af03 	bne.w	8004652 <HAL_RCC_OscConfig+0x26>
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	0391      	lsls	r1, r2, #14
 8004852:	f57f af24 	bpl.w	800469e <HAL_RCC_OscConfig+0x72>
 8004856:	6862      	ldr	r2, [r4, #4]
 8004858:	2a00      	cmp	r2, #0
 800485a:	f47f af20 	bne.w	800469e <HAL_RCC_OscConfig+0x72>
 800485e:	2001      	movs	r0, #1
 8004860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004862:	f002 0203 	and.w	r2, r2, #3
 8004866:	2a01      	cmp	r2, #1
 8004868:	f47f af29 	bne.w	80046be <HAL_RCC_OscConfig+0x92>
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	05da      	lsls	r2, r3, #23
 8004872:	d502      	bpl.n	800487a <HAL_RCC_OscConfig+0x24e>
 8004874:	69e3      	ldr	r3, [r4, #28]
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d1f1      	bne.n	800485e <HAL_RCC_OscConfig+0x232>
 800487a:	f7ff fe85 	bl	8004588 <HAL_GetREVID>
 800487e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004882:	4a0e      	ldr	r2, [pc, #56]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 8004884:	4298      	cmp	r0, r3
 8004886:	6a21      	ldr	r1, [r4, #32]
 8004888:	f200 80b3 	bhi.w	80049f2 <HAL_RCC_OscConfig+0x3c6>
 800488c:	6853      	ldr	r3, [r2, #4]
 800488e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004892:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	e735      	b.n	8004708 <HAL_RCC_OscConfig+0xdc>
 800489c:	4a07      	ldr	r2, [pc, #28]	; (80048bc <HAL_RCC_OscConfig+0x290>)
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e6e9      	b.n	800467c <HAL_RCC_OscConfig+0x50>
 80048a8:	4d05      	ldr	r5, [pc, #20]	; (80048c0 <HAL_RCC_OscConfig+0x294>)
 80048aa:	682b      	ldr	r3, [r5, #0]
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	602b      	str	r3, [r5, #0]
 80048b2:	f7ff fe63 	bl	800457c <HAL_GetTick>
 80048b6:	4606      	mov	r6, r0
 80048b8:	e009      	b.n	80048ce <HAL_RCC_OscConfig+0x2a2>
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400
 80048c0:	58024800 	.word	0x58024800
 80048c4:	f7ff fe5a 	bl	800457c <HAL_GetTick>
 80048c8:	1b80      	subs	r0, r0, r6
 80048ca:	2864      	cmp	r0, #100	; 0x64
 80048cc:	d825      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	05da      	lsls	r2, r3, #23
 80048d2:	d5f7      	bpl.n	80048c4 <HAL_RCC_OscConfig+0x298>
 80048d4:	68a3      	ldr	r3, [r4, #8]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	f000 8122 	beq.w	8004b20 <HAL_RCC_OscConfig+0x4f4>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80fd 	beq.w	8004adc <HAL_RCC_OscConfig+0x4b0>
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	4b95      	ldr	r3, [pc, #596]	; (8004b3c <HAL_RCC_OscConfig+0x510>)
 80048e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e8:	f000 8120 	beq.w	8004b2c <HAL_RCC_OscConfig+0x500>
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	671a      	str	r2, [r3, #112]	; 0x70
 80048f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f4:	f022 0204 	bic.w	r2, r2, #4
 80048f8:	671a      	str	r2, [r3, #112]	; 0x70
 80048fa:	f7ff fe3f 	bl	800457c <HAL_GetTick>
 80048fe:	4e8f      	ldr	r6, [pc, #572]	; (8004b3c <HAL_RCC_OscConfig+0x510>)
 8004900:	f241 3788 	movw	r7, #5000	; 0x1388
 8004904:	4605      	mov	r5, r0
 8004906:	e004      	b.n	8004912 <HAL_RCC_OscConfig+0x2e6>
 8004908:	f7ff fe38 	bl	800457c <HAL_GetTick>
 800490c:	1b40      	subs	r0, r0, r5
 800490e:	42b8      	cmp	r0, r7
 8004910:	d803      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 8004912:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004914:	079b      	lsls	r3, r3, #30
 8004916:	d5f7      	bpl.n	8004908 <HAL_RCC_OscConfig+0x2dc>
 8004918:	e72b      	b.n	8004772 <HAL_RCC_OscConfig+0x146>
 800491a:	2003      	movs	r0, #3
 800491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491e:	4d87      	ldr	r5, [pc, #540]	; (8004b3c <HAL_RCC_OscConfig+0x510>)
 8004920:	f241 3788 	movw	r7, #5000	; 0x1388
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7ff fe22 	bl	800457c <HAL_GetTick>
 8004938:	4606      	mov	r6, r0
 800493a:	e004      	b.n	8004946 <HAL_RCC_OscConfig+0x31a>
 800493c:	f7ff fe1e 	bl	800457c <HAL_GetTick>
 8004940:	1b80      	subs	r0, r0, r6
 8004942:	42b8      	cmp	r0, r7
 8004944:	d8e9      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	039b      	lsls	r3, r3, #14
 800494a:	d4f7      	bmi.n	800493c <HAL_RCC_OscConfig+0x310>
 800494c:	e6a6      	b.n	800469c <HAL_RCC_OscConfig+0x70>
 800494e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	676b      	str	r3, [r5, #116]	; 0x74
 8004956:	f7ff fe11 	bl	800457c <HAL_GetTick>
 800495a:	4606      	mov	r6, r0
 800495c:	e004      	b.n	8004968 <HAL_RCC_OscConfig+0x33c>
 800495e:	f7ff fe0d 	bl	800457c <HAL_GetTick>
 8004962:	1b80      	subs	r0, r0, r6
 8004964:	2802      	cmp	r0, #2
 8004966:	d8d8      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 8004968:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800496a:	0799      	lsls	r1, r3, #30
 800496c:	d4f7      	bmi.n	800495e <HAL_RCC_OscConfig+0x332>
 800496e:	e6e3      	b.n	8004738 <HAL_RCC_OscConfig+0x10c>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	f7ff fe00 	bl	800457c <HAL_GetTick>
 800497c:	4606      	mov	r6, r0
 800497e:	e004      	b.n	800498a <HAL_RCC_OscConfig+0x35e>
 8004980:	f7ff fdfc 	bl	800457c <HAL_GetTick>
 8004984:	1b80      	subs	r0, r0, r6
 8004986:	2802      	cmp	r0, #2
 8004988:	d8c7      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	0498      	lsls	r0, r3, #18
 800498e:	d4f7      	bmi.n	8004980 <HAL_RCC_OscConfig+0x354>
 8004990:	e6eb      	b.n	800476a <HAL_RCC_OscConfig+0x13e>
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	602b      	str	r3, [r5, #0]
 800499a:	f7ff fdef 	bl	800457c <HAL_GetTick>
 800499e:	4606      	mov	r6, r0
 80049a0:	e004      	b.n	80049ac <HAL_RCC_OscConfig+0x380>
 80049a2:	f7ff fdeb 	bl	800457c <HAL_GetTick>
 80049a6:	1b80      	subs	r0, r0, r6
 80049a8:	2802      	cmp	r0, #2
 80049aa:	d8b6      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	05df      	lsls	r7, r3, #23
 80049b0:	d4f7      	bmi.n	80049a2 <HAL_RCC_OscConfig+0x376>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	e6a8      	b.n	8004708 <HAL_RCC_OscConfig+0xdc>
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7ff fdde 	bl	800457c <HAL_GetTick>
 80049c0:	4606      	mov	r6, r0
 80049c2:	e004      	b.n	80049ce <HAL_RCC_OscConfig+0x3a2>
 80049c4:	f7ff fdda 	bl	800457c <HAL_GetTick>
 80049c8:	1b80      	subs	r0, r0, r6
 80049ca:	2802      	cmp	r0, #2
 80049cc:	d8a5      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	0758      	lsls	r0, r3, #29
 80049d2:	d4f7      	bmi.n	80049c4 <HAL_RCC_OscConfig+0x398>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	e665      	b.n	80046a4 <HAL_RCC_OscConfig+0x78>
 80049d8:	0790      	lsls	r0, r2, #30
 80049da:	f47f af1b 	bne.w	8004814 <HAL_RCC_OscConfig+0x1e8>
 80049de:	e6ec      	b.n	80047ba <HAL_RCC_OscConfig+0x18e>
 80049e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049e8:	606b      	str	r3, [r5, #4]
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	e65a      	b.n	80046a4 <HAL_RCC_OscConfig+0x78>
 80049ee:	2001      	movs	r0, #1
 80049f0:	4770      	bx	lr
 80049f2:	68d3      	ldr	r3, [r2, #12]
 80049f4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80049f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80049fc:	60d3      	str	r3, [r2, #12]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	e682      	b.n	8004708 <HAL_RCC_OscConfig+0xdc>
 8004a02:	f7ff fdbb 	bl	800457c <HAL_GetTick>
 8004a06:	4606      	mov	r6, r0
 8004a08:	e004      	b.n	8004a14 <HAL_RCC_OscConfig+0x3e8>
 8004a0a:	f7ff fdb7 	bl	800457c <HAL_GetTick>
 8004a0e:	1b80      	subs	r0, r0, r6
 8004a10:	2802      	cmp	r0, #2
 8004a12:	d882      	bhi.n	800491a <HAL_RCC_OscConfig+0x2ee>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	0199      	lsls	r1, r3, #6
 8004a18:	d4f7      	bmi.n	8004a0a <HAL_RCC_OscConfig+0x3de>
 8004a1a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004a1c:	4b48      	ldr	r3, [pc, #288]	; (8004b40 <HAL_RCC_OscConfig+0x514>)
 8004a1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a20:	400b      	ands	r3, r1
 8004a22:	4948      	ldr	r1, [pc, #288]	; (8004b44 <HAL_RCC_OscConfig+0x518>)
 8004a24:	4e45      	ldr	r6, [pc, #276]	; (8004b3c <HAL_RCC_OscConfig+0x510>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a2a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004a2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004a30:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004a34:	3b01      	subs	r3, #1
 8004a36:	3a01      	subs	r2, #1
 8004a38:	025b      	lsls	r3, r3, #9
 8004a3a:	0412      	lsls	r2, r2, #16
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004a42:	4313      	orrs	r3, r2
 8004a44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a46:	3a01      	subs	r2, #1
 8004a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a50:	3a01      	subs	r2, #1
 8004a52:	0612      	lsls	r2, r2, #24
 8004a54:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	632b      	str	r3, [r5, #48]	; 0x30
 8004a5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004a64:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004a66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a68:	4011      	ands	r1, r2
 8004a6a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004a6e:	6369      	str	r1, [r5, #52]	; 0x34
 8004a70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a74:	f023 030c 	bic.w	r3, r3, #12
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004a7c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a80:	f023 0302 	bic.w	r3, r3, #2
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004a88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004a90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004a98:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004aa0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7ff fd64 	bl	800457c <HAL_GetTick>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	e005      	b.n	8004ac4 <HAL_RCC_OscConfig+0x498>
 8004ab8:	f7ff fd60 	bl	800457c <HAL_GetTick>
 8004abc:	1b00      	subs	r0, r0, r4
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	f63f af2b 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	019a      	lsls	r2, r3, #6
 8004ac8:	d5f6      	bpl.n	8004ab8 <HAL_RCC_OscConfig+0x48c>
 8004aca:	e66e      	b.n	80047aa <HAL_RCC_OscConfig+0x17e>
 8004acc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e5cf      	b.n	800467c <HAL_RCC_OscConfig+0x50>
 8004adc:	4d17      	ldr	r5, [pc, #92]	; (8004b3c <HAL_RCC_OscConfig+0x510>)
 8004ade:	f241 3788 	movw	r7, #5000	; 0x1388
 8004ae2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	672b      	str	r3, [r5, #112]	; 0x70
 8004aea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	672b      	str	r3, [r5, #112]	; 0x70
 8004af2:	f7ff fd43 	bl	800457c <HAL_GetTick>
 8004af6:	4606      	mov	r6, r0
 8004af8:	e005      	b.n	8004b06 <HAL_RCC_OscConfig+0x4da>
 8004afa:	f7ff fd3f 	bl	800457c <HAL_GetTick>
 8004afe:	1b80      	subs	r0, r0, r6
 8004b00:	42b8      	cmp	r0, r7
 8004b02:	f63f af0a 	bhi.w	800491a <HAL_RCC_OscConfig+0x2ee>
 8004b06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004b08:	0798      	lsls	r0, r3, #30
 8004b0a:	d4f6      	bmi.n	8004afa <HAL_RCC_OscConfig+0x4ce>
 8004b0c:	e631      	b.n	8004772 <HAL_RCC_OscConfig+0x146>
 8004b0e:	68eb      	ldr	r3, [r5, #12]
 8004b10:	6a22      	ldr	r2, [r4, #32]
 8004b12:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004b16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b1a:	60eb      	str	r3, [r5, #12]
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	e5f3      	b.n	8004708 <HAL_RCC_OscConfig+0xdc>
 8004b20:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <HAL_RCC_OscConfig+0x510>)
 8004b22:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	e6e6      	b.n	80048fa <HAL_RCC_OscConfig+0x2ce>
 8004b2c:	f042 0204 	orr.w	r2, r2, #4
 8004b30:	671a      	str	r2, [r3, #112]	; 0x70
 8004b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	671a      	str	r2, [r3, #112]	; 0x70
 8004b3a:	e6de      	b.n	80048fa <HAL_RCC_OscConfig+0x2ce>
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	fffffc0c 	.word	0xfffffc0c
 8004b44:	ffff0007 	.word	0xffff0007

08004b48 <HAL_RCC_GetSysClockFreq>:
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x120>)
 8004b4a:	6913      	ldr	r3, [r2, #16]
 8004b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d004      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x16>
 8004b54:	2b18      	cmp	r3, #24
 8004b56:	d00d      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x2c>
 8004b58:	b11b      	cbz	r3, 8004b62 <HAL_RCC_GetSysClockFreq+0x1a>
 8004b5a:	4844      	ldr	r0, [pc, #272]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x124>)
 8004b5c:	4770      	bx	lr
 8004b5e:	4844      	ldr	r0, [pc, #272]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x128>)
 8004b60:	4770      	bx	lr
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	d54a      	bpl.n	8004bfe <HAL_RCC_GetSysClockFreq+0xb6>
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	4842      	ldr	r0, [pc, #264]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b6c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b70:	40d8      	lsrs	r0, r3
 8004b72:	4770      	bx	lr
 8004b74:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004b76:	b430      	push	{r4, r5}
 8004b78:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004b7a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004b7c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004b80:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004b82:	f3c4 1005 	ubfx	r0, r4, #4, #6
 8004b86:	d038      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0xb2>
 8004b88:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004b8c:	f005 0501 	and.w	r5, r5, #1
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	fb05 f101 	mul.w	r1, r5, r1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	ee07 1a90 	vmov	s15, r1
 8004b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ba2:	d002      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x62>
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d02c      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0xba>
 8004ba8:	b393      	cbz	r3, 8004c10 <HAL_RCC_GetSysClockFreq+0xc8>
 8004baa:	ee07 0a90 	vmov	s15, r0
 8004bae:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004c78 <HAL_RCC_GetSysClockFreq+0x130>
 8004bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004bb8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004bbc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8004c7c <HAL_RCC_GetSysClockFreq+0x134>
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	ee06 3a90 	vmov	s13, r3
 8004bc8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004bcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004bd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004bd4:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004bd8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004bdc:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x120>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004be4:	3301      	adds	r3, #1
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf6:	ee17 0a90 	vmov	r0, s15
 8004bfa:	bc30      	pop	{r4, r5}
 8004bfc:	4770      	bx	lr
 8004bfe:	481d      	ldr	r0, [pc, #116]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c00:	4770      	bx	lr
 8004c02:	ee07 0a90 	vmov	s15, r0
 8004c06:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004c80 <HAL_RCC_GetSysClockFreq+0x138>
 8004c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0e:	e7d2      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x6e>
 8004c10:	6813      	ldr	r3, [r2, #0]
 8004c12:	069b      	lsls	r3, r3, #26
 8004c14:	d520      	bpl.n	8004c58 <HAL_RCC_GetSysClockFreq+0x110>
 8004c16:	6814      	ldr	r4, [r2, #0]
 8004c18:	ee07 0a90 	vmov	s15, r0
 8004c1c:	4915      	ldr	r1, [pc, #84]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c24:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8004c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c2c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004c7c <HAL_RCC_GetSysClockFreq+0x134>
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c34:	40e1      	lsrs	r1, r4
 8004c36:	ee06 3a90 	vmov	s13, r3
 8004c3a:	ee05 1a90 	vmov	s11, r1
 8004c3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004c42:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004c46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004c4a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004c4e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004c52:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004c56:	e7c1      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x94>
 8004c58:	ee07 0a90 	vmov	s15, r0
 8004c5c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004c84 <HAL_RCC_GetSysClockFreq+0x13c>
 8004c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c64:	e7a7      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x6e>
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	003d0900 	.word	0x003d0900
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	03d09000 	.word	0x03d09000
 8004c78:	4a742400 	.word	0x4a742400
 8004c7c:	39000000 	.word	0x39000000
 8004c80:	4b742400 	.word	0x4b742400
 8004c84:	4c742400 	.word	0x4c742400

08004c88 <HAL_RCC_ClockConfig>:
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f000 8102 	beq.w	8004e92 <HAL_RCC_ClockConfig+0x20a>
 8004c8e:	4a87      	ldr	r2, [pc, #540]	; (8004eac <HAL_RCC_ClockConfig+0x224>)
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	428b      	cmp	r3, r1
 8004c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	d20c      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x34>
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	f023 030f 	bic.w	r3, r3, #15
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	6813      	ldr	r3, [r2, #0]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	428b      	cmp	r3, r1
 8004cb4:	d002      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x34>
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	075f      	lsls	r7, r3, #29
 8004cc0:	d50b      	bpl.n	8004cda <HAL_RCC_ClockConfig+0x52>
 8004cc2:	497b      	ldr	r1, [pc, #492]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004cc4:	6920      	ldr	r0, [r4, #16]
 8004cc6:	698a      	ldr	r2, [r1, #24]
 8004cc8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004ccc:	4290      	cmp	r0, r2
 8004cce:	d904      	bls.n	8004cda <HAL_RCC_ClockConfig+0x52>
 8004cd0:	698a      	ldr	r2, [r1, #24]
 8004cd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cd6:	4302      	orrs	r2, r0
 8004cd8:	618a      	str	r2, [r1, #24]
 8004cda:	071e      	lsls	r6, r3, #28
 8004cdc:	d50b      	bpl.n	8004cf6 <HAL_RCC_ClockConfig+0x6e>
 8004cde:	4974      	ldr	r1, [pc, #464]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004ce0:	6960      	ldr	r0, [r4, #20]
 8004ce2:	69ca      	ldr	r2, [r1, #28]
 8004ce4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004ce8:	4290      	cmp	r0, r2
 8004cea:	d904      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x6e>
 8004cec:	69ca      	ldr	r2, [r1, #28]
 8004cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cf2:	4302      	orrs	r2, r0
 8004cf4:	61ca      	str	r2, [r1, #28]
 8004cf6:	06d8      	lsls	r0, r3, #27
 8004cf8:	d50b      	bpl.n	8004d12 <HAL_RCC_ClockConfig+0x8a>
 8004cfa:	496d      	ldr	r1, [pc, #436]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004cfc:	69a0      	ldr	r0, [r4, #24]
 8004cfe:	69ca      	ldr	r2, [r1, #28]
 8004d00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004d04:	4290      	cmp	r0, r2
 8004d06:	d904      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x8a>
 8004d08:	69ca      	ldr	r2, [r1, #28]
 8004d0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d0e:	4302      	orrs	r2, r0
 8004d10:	61ca      	str	r2, [r1, #28]
 8004d12:	0699      	lsls	r1, r3, #26
 8004d14:	d50b      	bpl.n	8004d2e <HAL_RCC_ClockConfig+0xa6>
 8004d16:	4966      	ldr	r1, [pc, #408]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004d18:	69e0      	ldr	r0, [r4, #28]
 8004d1a:	6a0a      	ldr	r2, [r1, #32]
 8004d1c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004d20:	4290      	cmp	r0, r2
 8004d22:	d904      	bls.n	8004d2e <HAL_RCC_ClockConfig+0xa6>
 8004d24:	6a0a      	ldr	r2, [r1, #32]
 8004d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d2a:	4302      	orrs	r2, r0
 8004d2c:	620a      	str	r2, [r1, #32]
 8004d2e:	079a      	lsls	r2, r3, #30
 8004d30:	f140 80a1 	bpl.w	8004e76 <HAL_RCC_ClockConfig+0x1ee>
 8004d34:	485e      	ldr	r0, [pc, #376]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004d36:	68e1      	ldr	r1, [r4, #12]
 8004d38:	6982      	ldr	r2, [r0, #24]
 8004d3a:	f002 020f 	and.w	r2, r2, #15
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	d904      	bls.n	8004d4c <HAL_RCC_ClockConfig+0xc4>
 8004d42:	6982      	ldr	r2, [r0, #24]
 8004d44:	f022 020f 	bic.w	r2, r2, #15
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	6182      	str	r2, [r0, #24]
 8004d4c:	07d8      	lsls	r0, r3, #31
 8004d4e:	d530      	bpl.n	8004db2 <HAL_RCC_ClockConfig+0x12a>
 8004d50:	4a57      	ldr	r2, [pc, #348]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004d52:	68a1      	ldr	r1, [r4, #8]
 8004d54:	6993      	ldr	r3, [r2, #24]
 8004d56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6193      	str	r3, [r2, #24]
 8004d5e:	6861      	ldr	r1, [r4, #4]
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	2902      	cmp	r1, #2
 8004d64:	f000 8097 	beq.w	8004e96 <HAL_RCC_ClockConfig+0x20e>
 8004d68:	2903      	cmp	r1, #3
 8004d6a:	f000 808e 	beq.w	8004e8a <HAL_RCC_ClockConfig+0x202>
 8004d6e:	2901      	cmp	r1, #1
 8004d70:	f000 8097 	beq.w	8004ea2 <HAL_RCC_ClockConfig+0x21a>
 8004d74:	0758      	lsls	r0, r3, #29
 8004d76:	d59e      	bpl.n	8004cb6 <HAL_RCC_ClockConfig+0x2e>
 8004d78:	4e4d      	ldr	r6, [pc, #308]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004d7a:	f241 3888 	movw	r8, #5000	; 0x1388
 8004d7e:	6933      	ldr	r3, [r6, #16]
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6133      	str	r3, [r6, #16]
 8004d88:	f7ff fbf8 	bl	800457c <HAL_GetTick>
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_ClockConfig+0x114>
 8004d90:	f7ff fbf4 	bl	800457c <HAL_GetTick>
 8004d94:	1bc0      	subs	r0, r0, r7
 8004d96:	4540      	cmp	r0, r8
 8004d98:	f200 8081 	bhi.w	8004e9e <HAL_RCC_ClockConfig+0x216>
 8004d9c:	6933      	ldr	r3, [r6, #16]
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004da8:	d1f2      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x108>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0799      	lsls	r1, r3, #30
 8004dae:	d506      	bpl.n	8004dbe <HAL_RCC_ClockConfig+0x136>
 8004db0:	68e1      	ldr	r1, [r4, #12]
 8004db2:	483f      	ldr	r0, [pc, #252]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004db4:	6982      	ldr	r2, [r0, #24]
 8004db6:	f002 020f 	and.w	r2, r2, #15
 8004dba:	428a      	cmp	r2, r1
 8004dbc:	d85f      	bhi.n	8004e7e <HAL_RCC_ClockConfig+0x1f6>
 8004dbe:	493b      	ldr	r1, [pc, #236]	; (8004eac <HAL_RCC_ClockConfig+0x224>)
 8004dc0:	680a      	ldr	r2, [r1, #0]
 8004dc2:	f002 020f 	and.w	r2, r2, #15
 8004dc6:	42aa      	cmp	r2, r5
 8004dc8:	d90a      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x158>
 8004dca:	680a      	ldr	r2, [r1, #0]
 8004dcc:	f022 020f 	bic.w	r2, r2, #15
 8004dd0:	432a      	orrs	r2, r5
 8004dd2:	600a      	str	r2, [r1, #0]
 8004dd4:	680a      	ldr	r2, [r1, #0]
 8004dd6:	f002 020f 	and.w	r2, r2, #15
 8004dda:	42aa      	cmp	r2, r5
 8004ddc:	f47f af6b 	bne.w	8004cb6 <HAL_RCC_ClockConfig+0x2e>
 8004de0:	075a      	lsls	r2, r3, #29
 8004de2:	d50b      	bpl.n	8004dfc <HAL_RCC_ClockConfig+0x174>
 8004de4:	4932      	ldr	r1, [pc, #200]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004de6:	6920      	ldr	r0, [r4, #16]
 8004de8:	698a      	ldr	r2, [r1, #24]
 8004dea:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004dee:	4290      	cmp	r0, r2
 8004df0:	d204      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x174>
 8004df2:	698a      	ldr	r2, [r1, #24]
 8004df4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004df8:	4302      	orrs	r2, r0
 8004dfa:	618a      	str	r2, [r1, #24]
 8004dfc:	071f      	lsls	r7, r3, #28
 8004dfe:	d50b      	bpl.n	8004e18 <HAL_RCC_ClockConfig+0x190>
 8004e00:	492b      	ldr	r1, [pc, #172]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004e02:	6960      	ldr	r0, [r4, #20]
 8004e04:	69ca      	ldr	r2, [r1, #28]
 8004e06:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004e0a:	4290      	cmp	r0, r2
 8004e0c:	d204      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x190>
 8004e0e:	69ca      	ldr	r2, [r1, #28]
 8004e10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e14:	4302      	orrs	r2, r0
 8004e16:	61ca      	str	r2, [r1, #28]
 8004e18:	06de      	lsls	r6, r3, #27
 8004e1a:	d50b      	bpl.n	8004e34 <HAL_RCC_ClockConfig+0x1ac>
 8004e1c:	4924      	ldr	r1, [pc, #144]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004e1e:	69a0      	ldr	r0, [r4, #24]
 8004e20:	69ca      	ldr	r2, [r1, #28]
 8004e22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004e26:	4290      	cmp	r0, r2
 8004e28:	d204      	bcs.n	8004e34 <HAL_RCC_ClockConfig+0x1ac>
 8004e2a:	69ca      	ldr	r2, [r1, #28]
 8004e2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e30:	4302      	orrs	r2, r0
 8004e32:	61ca      	str	r2, [r1, #28]
 8004e34:	069d      	lsls	r5, r3, #26
 8004e36:	d50b      	bpl.n	8004e50 <HAL_RCC_ClockConfig+0x1c8>
 8004e38:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004e3a:	69e1      	ldr	r1, [r4, #28]
 8004e3c:	6a13      	ldr	r3, [r2, #32]
 8004e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e42:	4299      	cmp	r1, r3
 8004e44:	d204      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x1c8>
 8004e46:	6a13      	ldr	r3, [r2, #32]
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6213      	str	r3, [r2, #32]
 8004e50:	f7ff fe7a 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <HAL_RCC_ClockConfig+0x228>)
 8004e56:	4603      	mov	r3, r0
 8004e58:	4816      	ldr	r0, [pc, #88]	; (8004eb4 <HAL_RCC_ClockConfig+0x22c>)
 8004e5a:	6992      	ldr	r2, [r2, #24]
 8004e5c:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <HAL_RCC_ClockConfig+0x230>)
 8004e5e:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8004e62:	5c82      	ldrb	r2, [r0, r2]
 8004e64:	200e      	movs	r0, #14
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	40d3      	lsrs	r3, r2
 8004e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e70:	600b      	str	r3, [r1, #0]
 8004e72:	f7fe bfa7 	b.w	8003dc4 <HAL_InitTick>
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	f53f af6a 	bmi.w	8004d50 <HAL_RCC_ClockConfig+0xc8>
 8004e7c:	e79f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x136>
 8004e7e:	6982      	ldr	r2, [r0, #24]
 8004e80:	f022 020f 	bic.w	r2, r2, #15
 8004e84:	4311      	orrs	r1, r2
 8004e86:	6181      	str	r1, [r0, #24]
 8004e88:	e799      	b.n	8004dbe <HAL_RCC_ClockConfig+0x136>
 8004e8a:	019f      	lsls	r7, r3, #6
 8004e8c:	f53f af74 	bmi.w	8004d78 <HAL_RCC_ClockConfig+0xf0>
 8004e90:	e711      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x2e>
 8004e92:	2001      	movs	r0, #1
 8004e94:	4770      	bx	lr
 8004e96:	039b      	lsls	r3, r3, #14
 8004e98:	f53f af6e 	bmi.w	8004d78 <HAL_RCC_ClockConfig+0xf0>
 8004e9c:	e70b      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x2e>
 8004e9e:	2003      	movs	r0, #3
 8004ea0:	e70a      	b.n	8004cb8 <HAL_RCC_ClockConfig+0x30>
 8004ea2:	05de      	lsls	r6, r3, #23
 8004ea4:	f53f af68 	bmi.w	8004d78 <HAL_RCC_ClockConfig+0xf0>
 8004ea8:	e705      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x2e>
 8004eaa:	bf00      	nop
 8004eac:	52002000 	.word	0x52002000
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	08008b3c 	.word	0x08008b3c
 8004eb8:	20000000 	.word	0x20000000

08004ebc <RCCEx_PLL2_Config>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	4c3a      	ldr	r4, [pc, #232]	; (8004fa8 <RCCEx_PLL2_Config+0xec>)
 8004ec0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d067      	beq.n	8004f9a <RCCEx_PLL2_Config+0xde>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f7ff fb51 	bl	800457c <HAL_GetTick>
 8004eda:	4605      	mov	r5, r0
 8004edc:	e004      	b.n	8004ee8 <RCCEx_PLL2_Config+0x2c>
 8004ede:	f7ff fb4d 	bl	800457c <HAL_GetTick>
 8004ee2:	1b43      	subs	r3, r0, r5
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d856      	bhi.n	8004f96 <RCCEx_PLL2_Config+0xda>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	011a      	lsls	r2, r3, #4
 8004eec:	d4f7      	bmi.n	8004ede <RCCEx_PLL2_Config+0x22>
 8004eee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ef0:	6832      	ldr	r2, [r6, #0]
 8004ef2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ef6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004efa:	62a3      	str	r3, [r4, #40]	; 0x28
 8004efc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	3a01      	subs	r2, #1
 8004f04:	025b      	lsls	r3, r3, #9
 8004f06:	0412      	lsls	r2, r2, #16
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	6872      	ldr	r2, [r6, #4]
 8004f12:	3a01      	subs	r2, #1
 8004f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	6932      	ldr	r2, [r6, #16]
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	0612      	lsls	r2, r2, #24
 8004f20:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004f24:	4313      	orrs	r3, r2
 8004f26:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f2a:	6972      	ldr	r2, [r6, #20]
 8004f2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f36:	69b3      	ldr	r3, [r6, #24]
 8004f38:	f022 0220 	bic.w	r2, r2, #32
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <RCCEx_PLL2_Config+0xf0>)
 8004f40:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004f42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f44:	f022 0210 	bic.w	r2, r2, #16
 8004f48:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004f4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f4c:	69f2      	ldr	r2, [r6, #28]
 8004f4e:	400b      	ands	r3, r1
 8004f50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f54:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004f56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f58:	f043 0310 	orr.w	r3, r3, #16
 8004f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f60:	b1ef      	cbz	r7, 8004f9e <RCCEx_PLL2_Config+0xe2>
 8004f62:	2f01      	cmp	r7, #1
 8004f64:	bf0c      	ite	eq
 8004f66:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8004f6a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004f6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f70:	4c0d      	ldr	r4, [pc, #52]	; (8004fa8 <RCCEx_PLL2_Config+0xec>)
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	f7ff faff 	bl	800457c <HAL_GetTick>
 8004f7e:	4605      	mov	r5, r0
 8004f80:	e004      	b.n	8004f8c <RCCEx_PLL2_Config+0xd0>
 8004f82:	f7ff fafb 	bl	800457c <HAL_GetTick>
 8004f86:	1b40      	subs	r0, r0, r5
 8004f88:	2802      	cmp	r0, #2
 8004f8a:	d804      	bhi.n	8004f96 <RCCEx_PLL2_Config+0xda>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	d5f7      	bpl.n	8004f82 <RCCEx_PLL2_Config+0xc6>
 8004f92:	2000      	movs	r0, #0
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f96:	2003      	movs	r0, #3
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fa4:	e7e4      	b.n	8004f70 <RCCEx_PLL2_Config+0xb4>
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	ffff0007 	.word	0xffff0007

08004fb0 <RCCEx_PLL3_Config>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	4c3a      	ldr	r4, [pc, #232]	; (800509c <RCCEx_PLL3_Config+0xec>)
 8004fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d067      	beq.n	800508e <RCCEx_PLL3_Config+0xde>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	f7ff fad7 	bl	800457c <HAL_GetTick>
 8004fce:	4605      	mov	r5, r0
 8004fd0:	e004      	b.n	8004fdc <RCCEx_PLL3_Config+0x2c>
 8004fd2:	f7ff fad3 	bl	800457c <HAL_GetTick>
 8004fd6:	1b43      	subs	r3, r0, r5
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d856      	bhi.n	800508a <RCCEx_PLL3_Config+0xda>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	009a      	lsls	r2, r3, #2
 8004fe0:	d4f7      	bmi.n	8004fd2 <RCCEx_PLL3_Config+0x22>
 8004fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fe4:	6832      	ldr	r2, [r6, #0]
 8004fe6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004fea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004fee:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ff0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	025b      	lsls	r3, r3, #9
 8004ffa:	0412      	lsls	r2, r2, #16
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005002:	4313      	orrs	r3, r2
 8005004:	6872      	ldr	r2, [r6, #4]
 8005006:	3a01      	subs	r2, #1
 8005008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500c:	4313      	orrs	r3, r2
 800500e:	6932      	ldr	r2, [r6, #16]
 8005010:	3a01      	subs	r2, #1
 8005012:	0612      	lsls	r2, r2, #24
 8005014:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005018:	4313      	orrs	r3, r2
 800501a:	6423      	str	r3, [r4, #64]	; 0x40
 800501c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800501e:	6972      	ldr	r2, [r6, #20]
 8005020:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005024:	4313      	orrs	r3, r2
 8005026:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005028:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800502a:	69b3      	ldr	r3, [r6, #24]
 800502c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005030:	431a      	orrs	r2, r3
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <RCCEx_PLL3_Config+0xf0>)
 8005034:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800503c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800503e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005040:	69f2      	ldr	r2, [r6, #28]
 8005042:	400b      	ands	r3, r1
 8005044:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005048:	6463      	str	r3, [r4, #68]	; 0x44
 800504a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800504c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005052:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005054:	b1ef      	cbz	r7, 8005092 <RCCEx_PLL3_Config+0xe2>
 8005056:	2f01      	cmp	r7, #1
 8005058:	bf0c      	ite	eq
 800505a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
 800505e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005062:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005064:	4c0d      	ldr	r4, [pc, #52]	; (800509c <RCCEx_PLL3_Config+0xec>)
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	f7ff fa85 	bl	800457c <HAL_GetTick>
 8005072:	4605      	mov	r5, r0
 8005074:	e004      	b.n	8005080 <RCCEx_PLL3_Config+0xd0>
 8005076:	f7ff fa81 	bl	800457c <HAL_GetTick>
 800507a:	1b40      	subs	r0, r0, r5
 800507c:	2802      	cmp	r0, #2
 800507e:	d804      	bhi.n	800508a <RCCEx_PLL3_Config+0xda>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	d5f7      	bpl.n	8005076 <RCCEx_PLL3_Config+0xc6>
 8005086:	2000      	movs	r0, #0
 8005088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508a:	2003      	movs	r0, #3
 800508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508e:	2001      	movs	r0, #1
 8005090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005096:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005098:	e7e4      	b.n	8005064 <RCCEx_PLL3_Config+0xb4>
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	ffff0007 	.word	0xffff0007

080050a4 <HAL_RCCEx_PeriphCLKConfig>:
 80050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	6803      	ldr	r3, [r0, #0]
 80050aa:	4604      	mov	r4, r0
 80050ac:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80050b0:	d022      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80050b2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80050b4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80050b8:	f000 84ce 	beq.w	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80050bc:	d811      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80050be:	2a00      	cmp	r2, #0
 80050c0:	f000 84f8 	beq.w	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 80050c4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80050c8:	f040 84f1 	bne.w	8005aae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80050cc:	2102      	movs	r1, #2
 80050ce:	3004      	adds	r0, #4
 80050d0:	f7ff fef4 	bl	8004ebc <RCCEx_PLL2_Config>
 80050d4:	4606      	mov	r6, r0
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	f040 8486 	bne.w	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80050dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	e003      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x46>
 80050e2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80050e6:	f040 84e2 	bne.w	8005aae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80050ea:	48a8      	ldr	r0, [pc, #672]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050ec:	2600      	movs	r6, #0
 80050ee:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80050f0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80050f4:	430a      	orrs	r2, r1
 80050f6:	6502      	str	r2, [r0, #80]	; 0x50
 80050f8:	05dd      	lsls	r5, r3, #23
 80050fa:	d50a      	bpl.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80050fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80050fe:	2a04      	cmp	r2, #4
 8005100:	d806      	bhi.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005102:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005106:	04a2      	.short	0x04a2
 8005108:	049a0493 	.word	0x049a0493
 800510c:	02df02df 	.word	0x02df02df
 8005110:	2601      	movs	r6, #1
 8005112:	4635      	mov	r5, r6
 8005114:	0598      	lsls	r0, r3, #22
 8005116:	d51b      	bpl.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005118:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800511a:	2a80      	cmp	r2, #128	; 0x80
 800511c:	f000 845b 	beq.w	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8005120:	f200 80ec 	bhi.w	80052fc <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005124:	2a00      	cmp	r2, #0
 8005126:	f000 838b 	beq.w	8005840 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 800512a:	2a40      	cmp	r2, #64	; 0x40
 800512c:	f040 80ed 	bne.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005130:	2100      	movs	r1, #0
 8005132:	1d20      	adds	r0, r4, #4
 8005134:	f7ff fec2 	bl	8004ebc <RCCEx_PLL2_Config>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	4605      	mov	r5, r0
 800513c:	2d00      	cmp	r5, #0
 800513e:	f040 8367 	bne.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8005142:	4992      	ldr	r1, [pc, #584]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005146:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005148:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800514c:	4302      	orrs	r2, r0
 800514e:	650a      	str	r2, [r1, #80]	; 0x50
 8005150:	0559      	lsls	r1, r3, #21
 8005152:	d51f      	bpl.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005154:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8005158:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800515c:	f000 8447 	beq.w	80059ee <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005160:	f200 80d6 	bhi.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005164:	2a00      	cmp	r2, #0
 8005166:	f000 8371 	beq.w	800584c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800516a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800516e:	f040 80d7 	bne.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005172:	2100      	movs	r1, #0
 8005174:	1d20      	adds	r0, r4, #4
 8005176:	f7ff fea1 	bl	8004ebc <RCCEx_PLL2_Config>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	4605      	mov	r5, r0
 800517e:	2d00      	cmp	r5, #0
 8005180:	f040 8344 	bne.w	800580c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8005184:	4981      	ldr	r1, [pc, #516]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005186:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800518a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800518c:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005190:	4302      	orrs	r2, r0
 8005192:	658a      	str	r2, [r1, #88]	; 0x58
 8005194:	051a      	lsls	r2, r3, #20
 8005196:	d51f      	bpl.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005198:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800519c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80051a0:	f000 842e 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051a4:	f200 80bf 	bhi.w	8005326 <HAL_RCCEx_PeriphCLKConfig+0x282>
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	f000 8355 	beq.w	8005858 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80051ae:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80051b2:	f040 80c0 	bne.w	8005336 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80051b6:	2100      	movs	r1, #0
 80051b8:	1d20      	adds	r0, r4, #4
 80051ba:	f7ff fe7f 	bl	8004ebc <RCCEx_PLL2_Config>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	4605      	mov	r5, r0
 80051c2:	2d00      	cmp	r5, #0
 80051c4:	f040 832a 	bne.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x778>
 80051c8:	4970      	ldr	r1, [pc, #448]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051ca:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80051ce:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80051d0:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80051d4:	4302      	orrs	r2, r0
 80051d6:	658a      	str	r2, [r1, #88]	; 0x58
 80051d8:	019f      	lsls	r7, r3, #6
 80051da:	d518      	bpl.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80051dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80051de:	2a20      	cmp	r2, #32
 80051e0:	f000 83da 	beq.w	8005998 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80051e4:	f200 80aa 	bhi.w	800533c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80051e8:	b13a      	cbz	r2, 80051fa <HAL_RCCEx_PeriphCLKConfig+0x156>
 80051ea:	2a10      	cmp	r2, #16
 80051ec:	f040 80a9 	bne.w	8005342 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80051f0:	4966      	ldr	r1, [pc, #408]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80051f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051f8:	62ca      	str	r2, [r1, #44]	; 0x2c
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	f040 8359 	bne.w	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005200:	4962      	ldr	r1, [pc, #392]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005202:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005204:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005206:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800520a:	4302      	orrs	r2, r0
 800520c:	64ca      	str	r2, [r1, #76]	; 0x4c
 800520e:	04d8      	lsls	r0, r3, #19
 8005210:	d51d      	bpl.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005212:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005214:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005218:	f000 83fb 	beq.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800521c:	f200 8094 	bhi.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8005220:	2a00      	cmp	r2, #0
 8005222:	f000 831f 	beq.w	8005864 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005226:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800522a:	f040 8095 	bne.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800522e:	2100      	movs	r1, #0
 8005230:	1d20      	adds	r0, r4, #4
 8005232:	f7ff fe43 	bl	8004ebc <RCCEx_PLL2_Config>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	4605      	mov	r5, r0
 800523a:	2d00      	cmp	r5, #0
 800523c:	f040 82ec 	bne.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x774>
 8005240:	4952      	ldr	r1, [pc, #328]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005242:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005244:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005246:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800524a:	4302      	orrs	r2, r0
 800524c:	650a      	str	r2, [r1, #80]	; 0x50
 800524e:	0499      	lsls	r1, r3, #18
 8005250:	d51a      	bpl.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005252:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005254:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8005258:	f000 8374 	beq.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800525c:	d87f      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800525e:	b14a      	cbz	r2, 8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8005260:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005264:	f040 8083 	bne.w	800536e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005268:	2101      	movs	r1, #1
 800526a:	1d20      	adds	r0, r4, #4
 800526c:	f7ff fe26 	bl	8004ebc <RCCEx_PLL2_Config>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	4605      	mov	r5, r0
 8005274:	2d00      	cmp	r5, #0
 8005276:	f040 831e 	bne.w	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800527a:	4944      	ldr	r1, [pc, #272]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800527c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800527e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005280:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005284:	4302      	orrs	r2, r0
 8005286:	650a      	str	r2, [r1, #80]	; 0x50
 8005288:	045a      	lsls	r2, r3, #17
 800528a:	d51b      	bpl.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800528c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8005290:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005294:	f000 8360 	beq.w	8005958 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005298:	d86c      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800529a:	b142      	cbz	r2, 80052ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800529c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80052a0:	d170      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 80052a2:	2101      	movs	r1, #1
 80052a4:	1d20      	adds	r0, r4, #4
 80052a6:	f7ff fe09 	bl	8004ebc <RCCEx_PLL2_Config>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	4605      	mov	r5, r0
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f040 8303 	bne.w	80058ba <HAL_RCCEx_PeriphCLKConfig+0x816>
 80052b4:	4935      	ldr	r1, [pc, #212]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052b6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80052ba:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80052bc:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80052c0:	4302      	orrs	r2, r0
 80052c2:	658a      	str	r2, [r1, #88]	; 0x58
 80052c4:	041f      	lsls	r7, r3, #16
 80052c6:	d50d      	bpl.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80052ca:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80052ce:	f000 8331 	beq.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0x890>
 80052d2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80052d6:	f000 8201 	beq.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0x638>
 80052da:	2a00      	cmp	r2, #0
 80052dc:	f000 8204 	beq.w	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x644>
 80052e0:	2601      	movs	r6, #1
 80052e2:	4635      	mov	r5, r6
 80052e4:	01d8      	lsls	r0, r3, #7
 80052e6:	d55d      	bpl.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80052e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80052ea:	2a03      	cmp	r2, #3
 80052ec:	f200 840a 	bhi.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80052f0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80052f4:	03170054 	.word	0x03170054
 80052f8:	0054004e 	.word	0x0054004e
 80052fc:	2ac0      	cmp	r2, #192	; 0xc0
 80052fe:	f43f af1d 	beq.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005302:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005306:	f43f af19 	beq.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800530a:	2601      	movs	r6, #1
 800530c:	4635      	mov	r5, r6
 800530e:	e71f      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005310:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8005314:	f43f af33 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005318:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800531c:	f43f af2f 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005320:	2601      	movs	r6, #1
 8005322:	4635      	mov	r5, r6
 8005324:	e736      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005326:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800532a:	f43f af4a 	beq.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800532e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8005332:	f43f af46 	beq.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005336:	2601      	movs	r6, #1
 8005338:	4635      	mov	r5, r6
 800533a:	e74d      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800533c:	2a30      	cmp	r2, #48	; 0x30
 800533e:	f43f af5c 	beq.w	80051fa <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005342:	2601      	movs	r6, #1
 8005344:	4635      	mov	r5, r6
 8005346:	e762      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005348:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800534c:	f43f af75 	beq.w	800523a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005350:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005354:	f43f af71 	beq.w	800523a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005358:	2601      	movs	r6, #1
 800535a:	4635      	mov	r5, r6
 800535c:	e777      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800535e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005362:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8005366:	d085      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8005368:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800536c:	d082      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800536e:	2601      	movs	r6, #1
 8005370:	4635      	mov	r5, r6
 8005372:	e789      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005374:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8005378:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800537c:	d097      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800537e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005382:	d094      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005384:	2601      	movs	r6, #1
 8005386:	4635      	mov	r5, r6
 8005388:	e79c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	2102      	movs	r1, #2
 8005392:	1d20      	adds	r0, r4, #4
 8005394:	f7ff fd92 	bl	8004ebc <RCCEx_PLL2_Config>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	4605      	mov	r5, r0
 800539c:	2d00      	cmp	r5, #0
 800539e:	f000 826b 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80053a2:	462e      	mov	r6, r5
 80053a4:	0259      	lsls	r1, r3, #9
 80053a6:	f100 81f0 	bmi.w	800578a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 80053aa:	07df      	lsls	r7, r3, #31
 80053ac:	d52f      	bpl.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80053ae:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80053b0:	2a28      	cmp	r2, #40	; 0x28
 80053b2:	d82a      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80053b4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80053b8:	002901d3 	.word	0x002901d3
 80053bc:	00290029 	.word	0x00290029
 80053c0:	00290029 	.word	0x00290029
 80053c4:	00290029 	.word	0x00290029
 80053c8:	0029036d 	.word	0x0029036d
 80053cc:	00290029 	.word	0x00290029
 80053d0:	00290029 	.word	0x00290029
 80053d4:	00290029 	.word	0x00290029
 80053d8:	002901cc 	.word	0x002901cc
 80053dc:	00290029 	.word	0x00290029
 80053e0:	00290029 	.word	0x00290029
 80053e4:	00290029 	.word	0x00290029
 80053e8:	002901d3 	.word	0x002901d3
 80053ec:	00290029 	.word	0x00290029
 80053f0:	00290029 	.word	0x00290029
 80053f4:	00290029 	.word	0x00290029
 80053f8:	002901d3 	.word	0x002901d3
 80053fc:	00290029 	.word	0x00290029
 8005400:	00290029 	.word	0x00290029
 8005404:	00290029 	.word	0x00290029
 8005408:	01d3      	.short	0x01d3
 800540a:	2601      	movs	r6, #1
 800540c:	4635      	mov	r5, r6
 800540e:	0798      	lsls	r0, r3, #30
 8005410:	d516      	bpl.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005412:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005414:	2a05      	cmp	r2, #5
 8005416:	f200 8378 	bhi.w	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800541a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800541e:	000d      	.short	0x000d
 8005420:	00060330 	.word	0x00060330
 8005424:	000d000d 	.word	0x000d000d
 8005428:	000d      	.short	0x000d
 800542a:	2101      	movs	r1, #1
 800542c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005430:	f7ff fdbe 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	4605      	mov	r5, r0
 8005438:	2d00      	cmp	r5, #0
 800543a:	f000 8225 	beq.w	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800543e:	462e      	mov	r6, r5
 8005440:	0759      	lsls	r1, r3, #29
 8005442:	d517      	bpl.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005444:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005448:	2a05      	cmp	r2, #5
 800544a:	f200 8361 	bhi.w	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800544e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005452:	000d      	.short	0x000d
 8005454:	0006030c 	.word	0x0006030c
 8005458:	000d000d 	.word	0x000d000d
 800545c:	000d      	.short	0x000d
 800545e:	2101      	movs	r1, #1
 8005460:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005464:	f7ff fda4 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	4605      	mov	r5, r0
 800546c:	2d00      	cmp	r5, #0
 800546e:	f000 8213 	beq.w	8005898 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8005472:	462e      	mov	r6, r5
 8005474:	069a      	lsls	r2, r3, #26
 8005476:	d51d      	bpl.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005478:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800547c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005480:	f000 8245 	beq.w	800590e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8005484:	f200 80dc 	bhi.w	8005640 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005488:	b14a      	cbz	r2, 800549e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800548a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800548e:	f040 80e1 	bne.w	8005654 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8005492:	2100      	movs	r1, #0
 8005494:	1d20      	adds	r0, r4, #4
 8005496:	f7ff fd11 	bl	8004ebc <RCCEx_PLL2_Config>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	4605      	mov	r5, r0
 800549e:	2d00      	cmp	r5, #0
 80054a0:	f040 8205 	bne.w	80058ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80054a4:	49a9      	ldr	r1, [pc, #676]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80054a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80054aa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80054ac:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80054b0:	4302      	orrs	r2, r0
 80054b2:	654a      	str	r2, [r1, #84]	; 0x54
 80054b4:	065f      	lsls	r7, r3, #25
 80054b6:	d51d      	bpl.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
 80054b8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80054bc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80054c0:	f000 8254 	beq.w	800596c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 80054c4:	f200 80c9 	bhi.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 80054c8:	b14a      	cbz	r2, 80054de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80054ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80054ce:	f040 80ce 	bne.w	800566e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80054d2:	2100      	movs	r1, #0
 80054d4:	1d20      	adds	r0, r4, #4
 80054d6:	f7ff fcf1 	bl	8004ebc <RCCEx_PLL2_Config>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	4605      	mov	r5, r0
 80054de:	2d00      	cmp	r5, #0
 80054e0:	f040 81c8 	bne.w	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80054e4:	4999      	ldr	r1, [pc, #612]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80054e6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80054ea:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80054ec:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80054f0:	4302      	orrs	r2, r0
 80054f2:	658a      	str	r2, [r1, #88]	; 0x58
 80054f4:	0618      	lsls	r0, r3, #24
 80054f6:	d51d      	bpl.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x490>
 80054f8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80054fc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005500:	f000 823f 	beq.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8005504:	f200 80b6 	bhi.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005508:	b14a      	cbz	r2, 800551e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800550a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800550e:	f040 80bb 	bne.w	8005688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8005512:	2100      	movs	r1, #0
 8005514:	1d20      	adds	r0, r4, #4
 8005516:	f7ff fcd1 	bl	8004ebc <RCCEx_PLL2_Config>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	4605      	mov	r5, r0
 800551e:	2d00      	cmp	r5, #0
 8005520:	f040 81a6 	bne.w	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005524:	4989      	ldr	r1, [pc, #548]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005526:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800552a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800552c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005530:	4302      	orrs	r2, r0
 8005532:	658a      	str	r2, [r1, #88]	; 0x58
 8005534:	0719      	lsls	r1, r3, #28
 8005536:	d50b      	bpl.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005538:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800553c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005540:	f000 823e 	beq.w	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8005544:	4881      	ldr	r0, [pc, #516]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005546:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005548:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800554c:	430a      	orrs	r2, r1
 800554e:	6542      	str	r2, [r0, #84]	; 0x54
 8005550:	06da      	lsls	r2, r3, #27
 8005552:	d50b      	bpl.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8005554:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005558:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800555c:	f000 8225 	beq.w	80059aa <HAL_RCCEx_PeriphCLKConfig+0x906>
 8005560:	487a      	ldr	r0, [pc, #488]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005562:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005564:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005568:	430a      	orrs	r2, r1
 800556a:	6582      	str	r2, [r0, #88]	; 0x58
 800556c:	031f      	lsls	r7, r3, #12
 800556e:	d50e      	bpl.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005570:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005574:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005578:	f000 80d4 	beq.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800557c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005580:	f000 80d7 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005584:	2900      	cmp	r1, #0
 8005586:	f000 81ba 	beq.w	80058fe <HAL_RCCEx_PeriphCLKConfig+0x85a>
 800558a:	2601      	movs	r6, #1
 800558c:	4635      	mov	r5, r6
 800558e:	0358      	lsls	r0, r3, #13
 8005590:	d50f      	bpl.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005592:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005596:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800559a:	f000 80b0 	beq.w	80056fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800559e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80055a2:	f000 80b3 	beq.w	800570c <HAL_RCCEx_PeriphCLKConfig+0x668>
 80055a6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80055aa:	f000 81a0 	beq.w	80058ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
 80055ae:	2601      	movs	r6, #1
 80055b0:	4635      	mov	r5, r6
 80055b2:	03d9      	lsls	r1, r3, #15
 80055b4:	d509      	bpl.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x526>
 80055b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	f000 8186 	beq.w	80058ca <HAL_RCCEx_PeriphCLKConfig+0x826>
 80055be:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80055c2:	f000 812d 	beq.w	8005820 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 80055c6:	2601      	movs	r6, #1
 80055c8:	4635      	mov	r5, r6
 80055ca:	009a      	lsls	r2, r3, #2
 80055cc:	f100 80d2 	bmi.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80055d0:	039f      	lsls	r7, r3, #14
 80055d2:	d45c      	bmi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80055d4:	1e30      	subs	r0, r6, #0
 80055d6:	bf18      	it	ne
 80055d8:	2001      	movne	r0, #1
 80055da:	02de      	lsls	r6, r3, #11
 80055dc:	d506      	bpl.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x548>
 80055de:	495b      	ldr	r1, [pc, #364]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80055e0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80055e2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80055e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055e8:	432a      	orrs	r2, r5
 80055ea:	650a      	str	r2, [r1, #80]	; 0x50
 80055ec:	00dd      	lsls	r5, r3, #3
 80055ee:	d507      	bpl.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 80055f0:	4956      	ldr	r1, [pc, #344]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80055f2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80055f6:	690a      	ldr	r2, [r1, #16]
 80055f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055fc:	432a      	orrs	r2, r5
 80055fe:	610a      	str	r2, [r1, #16]
 8005600:	0299      	lsls	r1, r3, #10
 8005602:	d506      	bpl.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8005604:	4951      	ldr	r1, [pc, #324]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005606:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8005608:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800560a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800560e:	432a      	orrs	r2, r5
 8005610:	650a      	str	r2, [r1, #80]	; 0x50
 8005612:	005a      	lsls	r2, r3, #1
 8005614:	d509      	bpl.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005616:	4a4d      	ldr	r2, [pc, #308]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005618:	6911      	ldr	r1, [r2, #16]
 800561a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800561e:	6111      	str	r1, [r2, #16]
 8005620:	6911      	ldr	r1, [r2, #16]
 8005622:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8005626:	4329      	orrs	r1, r5
 8005628:	6111      	str	r1, [r2, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da06      	bge.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800562e:	4a47      	ldr	r2, [pc, #284]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005630:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005632:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005634:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005638:	430b      	orrs	r3, r1
 800563a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800563c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005640:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8005644:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005648:	f43f af29 	beq.w	800549e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800564c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005650:	f43f af25 	beq.w	800549e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005654:	2601      	movs	r6, #1
 8005656:	4635      	mov	r5, r6
 8005658:	e72c      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800565a:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800565e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005662:	f43f af3c 	beq.w	80054de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005666:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800566a:	f43f af38 	beq.w	80054de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800566e:	2601      	movs	r6, #1
 8005670:	4635      	mov	r5, r6
 8005672:	e73f      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005674:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005678:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800567c:	f43f af4f 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005680:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005684:	f43f af4b 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005688:	2601      	movs	r6, #1
 800568a:	4635      	mov	r5, r6
 800568c:	e752      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800568e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005690:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005694:	f000 8122 	beq.w	80058dc <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005698:	d906      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800569a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800569e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80056a2:	d003      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 80056a4:	2001      	movs	r0, #1
 80056a6:	e798      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x536>
 80056a8:	2a00      	cmp	r2, #0
 80056aa:	d1fb      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	d1f9      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80056b0:	4d26      	ldr	r5, [pc, #152]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80056b2:	1e30      	subs	r0, r6, #0
 80056b4:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80056b6:	bf18      	it	ne
 80056b8:	2001      	movne	r0, #1
 80056ba:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80056be:	430a      	orrs	r2, r1
 80056c0:	656a      	str	r2, [r5, #84]	; 0x54
 80056c2:	e78a      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x536>
 80056c4:	4635      	mov	r5, r6
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	f040 80a4 	bne.w	8005814 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80056cc:	491f      	ldr	r1, [pc, #124]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80056ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056d0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80056d2:	f022 0207 	bic.w	r2, r2, #7
 80056d6:	4302      	orrs	r2, r0
 80056d8:	650a      	str	r2, [r1, #80]	; 0x50
 80056da:	e51b      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80056dc:	2101      	movs	r1, #1
 80056de:	1d20      	adds	r0, r4, #4
 80056e0:	f7ff fbec 	bl	8004ebc <RCCEx_PLL2_Config>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	4605      	mov	r5, r0
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	f040 80de 	bne.w	80058aa <HAL_RCCEx_PeriphCLKConfig+0x806>
 80056ee:	4917      	ldr	r1, [pc, #92]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80056f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80056f2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80056f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056f8:	4302      	orrs	r2, r0
 80056fa:	650a      	str	r2, [r1, #80]	; 0x50
 80056fc:	e5f2      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80056fe:	2101      	movs	r1, #1
 8005700:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005704:	f7ff fc54 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	4605      	mov	r5, r0
 800570c:	2d00      	cmp	r5, #0
 800570e:	f040 80da 	bne.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8005712:	490e      	ldr	r1, [pc, #56]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005714:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005718:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800571a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800571e:	4302      	orrs	r2, r0
 8005720:	654a      	str	r2, [r1, #84]	; 0x54
 8005722:	e746      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005724:	2102      	movs	r1, #2
 8005726:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800572a:	f7ff fc41 	bl	8004fb0 <RCCEx_PLL3_Config>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	4605      	mov	r5, r0
 8005732:	2d00      	cmp	r5, #0
 8005734:	f040 80c5 	bne.w	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005738:	4904      	ldr	r1, [pc, #16]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800573a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800573e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005740:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005744:	4302      	orrs	r2, r0
 8005746:	658a      	str	r2, [r1, #88]	; 0x58
 8005748:	e721      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800574a:	bf00      	nop
 800574c:	58024400 	.word	0x58024400
 8005750:	2101      	movs	r1, #1
 8005752:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005756:	f7ff fc2b 	bl	8004fb0 <RCCEx_PLL3_Config>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4605      	mov	r5, r0
 800575e:	2d00      	cmp	r5, #0
 8005760:	f040 80ad 	bne.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005764:	49af      	ldr	r1, [pc, #700]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005766:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005768:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800576a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800576e:	4302      	orrs	r2, r0
 8005770:	654a      	str	r2, [r1, #84]	; 0x54
 8005772:	e64c      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005774:	2102      	movs	r1, #2
 8005776:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800577a:	f7ff fc19 	bl	8004fb0 <RCCEx_PLL3_Config>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	2800      	cmp	r0, #0
 8005782:	f43f af25 	beq.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005786:	2601      	movs	r6, #1
 8005788:	e722      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800578a:	4fa7      	ldr	r7, [pc, #668]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	f7fe fef2 	bl	800457c <HAL_GetTick>
 8005798:	4680      	mov	r8, r0
 800579a:	e006      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x706>
 800579c:	f7fe feee 	bl	800457c <HAL_GetTick>
 80057a0:	eba0 0008 	sub.w	r0, r0, r8
 80057a4:	2864      	cmp	r0, #100	; 0x64
 80057a6:	f200 817e 	bhi.w	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	05da      	lsls	r2, r3, #23
 80057ae:	d5f5      	bpl.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	f040 81a4 	bne.w	8005afe <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 80057b6:	4a9b      	ldr	r2, [pc, #620]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80057b8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80057bc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80057be:	4059      	eors	r1, r3
 80057c0:	f411 7f40 	tst.w	r1, #768	; 0x300
 80057c4:	d00b      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80057c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80057c8:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80057ca:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80057ce:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80057d2:	6710      	str	r0, [r2, #112]	; 0x70
 80057d4:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80057d6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80057da:	6710      	str	r0, [r2, #112]	; 0x70
 80057dc:	6711      	str	r1, [r2, #112]	; 0x70
 80057de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e2:	f000 816e 	beq.w	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80057e6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80057ea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80057ee:	f000 817c 	beq.w	8005aea <HAL_RCCEx_PeriphCLKConfig+0xa46>
 80057f2:	498c      	ldr	r1, [pc, #560]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80057f4:	690a      	ldr	r2, [r1, #16]
 80057f6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80057fa:	610a      	str	r2, [r1, #16]
 80057fc:	4a89      	ldr	r2, [pc, #548]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80057fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005802:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005804:	430b      	orrs	r3, r1
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	e5ce      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x306>
 800580c:	462e      	mov	r6, r5
 800580e:	e4c1      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005810:	462e      	mov	r6, r5
 8005812:	e49d      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005814:	462e      	mov	r6, r5
 8005816:	e47d      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005818:	462e      	mov	r6, r5
 800581a:	e518      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800581c:	462e      	mov	r6, r5
 800581e:	e4db      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005820:	2102      	movs	r1, #2
 8005822:	1d20      	adds	r0, r4, #4
 8005824:	f7ff fb4a 	bl	8004ebc <RCCEx_PLL2_Config>
 8005828:	4605      	mov	r5, r0
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2d00      	cmp	r5, #0
 800582e:	d153      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8005830:	497c      	ldr	r1, [pc, #496]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005832:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005834:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800583a:	4302      	orrs	r2, r0
 800583c:	64ca      	str	r2, [r1, #76]	; 0x4c
 800583e:	e6c4      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005840:	4978      	ldr	r1, [pc, #480]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005842:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005844:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005848:	62ca      	str	r2, [r1, #44]	; 0x2c
 800584a:	e477      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800584c:	4975      	ldr	r1, [pc, #468]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800584e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005850:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005854:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005856:	e492      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005858:	4972      	ldr	r1, [pc, #456]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800585a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800585c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005860:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005862:	e4ae      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005864:	496f      	ldr	r1, [pc, #444]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005866:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005868:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800586c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800586e:	e4e4      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005870:	462e      	mov	r6, r5
 8005872:	e65f      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005874:	462e      	mov	r6, r5
 8005876:	e63d      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005878:	496a      	ldr	r1, [pc, #424]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800587a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800587c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800587e:	f022 0203 	bic.w	r2, r2, #3
 8005882:	4302      	orrs	r2, r0
 8005884:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005886:	e58d      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005888:	4966      	ldr	r1, [pc, #408]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800588a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800588c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800588e:	f022 0207 	bic.w	r2, r2, #7
 8005892:	4302      	orrs	r2, r0
 8005894:	654a      	str	r2, [r1, #84]	; 0x54
 8005896:	e5d3      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005898:	4962      	ldr	r1, [pc, #392]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800589a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800589e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80058a0:	f022 0207 	bic.w	r2, r2, #7
 80058a4:	4302      	orrs	r2, r0
 80058a6:	658a      	str	r2, [r1, #88]	; 0x58
 80058a8:	e5e4      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80058aa:	462e      	mov	r6, r5
 80058ac:	e51a      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80058ae:	462e      	mov	r6, r5
 80058b0:	e600      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80058b2:	462e      	mov	r6, r5
 80058b4:	e4ab      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80058b6:	462e      	mov	r6, r5
 80058b8:	e4e6      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80058ba:	462e      	mov	r6, r5
 80058bc:	e502      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80058be:	462e      	mov	r6, r5
 80058c0:	e5a5      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80058c2:	462e      	mov	r6, r5
 80058c4:	e663      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80058c6:	462e      	mov	r6, r5
 80058c8:	e673      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80058ca:	4956      	ldr	r1, [pc, #344]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80058cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80058ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058d2:	62ca      	str	r2, [r1, #44]	; 0x2c
 80058d4:	2d00      	cmp	r5, #0
 80058d6:	d0ab      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x78c>
 80058d8:	462e      	mov	r6, r5
 80058da:	e676      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x526>
 80058dc:	4851      	ldr	r0, [pc, #324]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80058de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80058e0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80058e4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	f47f aedc 	bne.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80058ec:	e6e0      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80058ee:	494d      	ldr	r1, [pc, #308]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80058f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80058f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058f6:	62ca      	str	r2, [r1, #44]	; 0x2c
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	d1e4      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x822>
 80058fc:	e709      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80058fe:	1d20      	adds	r0, r4, #4
 8005900:	f7ff fadc 	bl	8004ebc <RCCEx_PLL2_Config>
 8005904:	4605      	mov	r5, r0
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	2d00      	cmp	r5, #0
 800590a:	d1da      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800590c:	e714      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800590e:	2102      	movs	r1, #2
 8005910:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005914:	f7ff fb4c 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005918:	4605      	mov	r5, r0
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	2d00      	cmp	r5, #0
 800591e:	d1c6      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005920:	e5c0      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005922:	4940      	ldr	r1, [pc, #256]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005924:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005926:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800592a:	62ca      	str	r2, [r1, #44]	; 0x2c
 800592c:	2d00      	cmp	r5, #0
 800592e:	f47f ad38 	bne.w	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005932:	e7a1      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8005934:	493b      	ldr	r1, [pc, #236]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005936:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005938:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800593c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800593e:	2d00      	cmp	r5, #0
 8005940:	d1b3      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x806>
 8005942:	e6d4      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8005944:	2101      	movs	r1, #1
 8005946:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800594a:	f7ff fb31 	bl	8004fb0 <RCCEx_PLL3_Config>
 800594e:	4605      	mov	r5, r0
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	2d00      	cmp	r5, #0
 8005954:	d1af      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005956:	e490      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005958:	2101      	movs	r1, #1
 800595a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800595e:	f7ff fb27 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005962:	4605      	mov	r5, r0
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	2d00      	cmp	r5, #0
 8005968:	d1a7      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x816>
 800596a:	e4a3      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800596c:	2102      	movs	r1, #2
 800596e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005972:	f7ff fb1d 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005976:	4605      	mov	r5, r0
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	2d00      	cmp	r5, #0
 800597c:	f47f af7a 	bne.w	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005980:	e5b0      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005982:	2102      	movs	r1, #2
 8005984:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005988:	f7ff fb12 	bl	8004fb0 <RCCEx_PLL3_Config>
 800598c:	4605      	mov	r5, r0
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	2d00      	cmp	r5, #0
 8005992:	f47f af6d 	bne.w	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005996:	e5c5      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005998:	2102      	movs	r1, #2
 800599a:	1d20      	adds	r0, r4, #4
 800599c:	f7ff fa8e 	bl	8004ebc <RCCEx_PLL2_Config>
 80059a0:	4605      	mov	r5, r0
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	d184      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80059a8:	e42a      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80059aa:	2102      	movs	r1, #2
 80059ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059b0:	f7ff fafe 	bl	8004fb0 <RCCEx_PLL3_Config>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f add8 	beq.w	800556c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 80059bc:	2601      	movs	r6, #1
 80059be:	e5d5      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 80059c0:	2102      	movs	r1, #2
 80059c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059c6:	f7ff faf3 	bl	8004fb0 <RCCEx_PLL3_Config>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f43f adbf 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80059d2:	2601      	movs	r6, #1
 80059d4:	e5bc      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80059d6:	2100      	movs	r1, #0
 80059d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059dc:	f7ff fae8 	bl	8004fb0 <RCCEx_PLL3_Config>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	4605      	mov	r5, r0
 80059e4:	f7ff bbaa 	b.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	f7ff bb85 	b.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80059ee:	2100      	movs	r1, #0
 80059f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059f4:	f7ff fadc 	bl	8004fb0 <RCCEx_PLL3_Config>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	4605      	mov	r5, r0
 80059fc:	f7ff bbbf 	b.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005a00:	2100      	movs	r1, #0
 8005a02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a06:	f7ff fad3 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	f7ff bbd8 	b.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005a12:	2100      	movs	r1, #0
 8005a14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a18:	f7ff faca 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	4605      	mov	r5, r0
 8005a20:	e40b      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400
 8005a28:	58024800 	.word	0x58024800
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	1d20      	adds	r0, r4, #4
 8005a30:	f7ff fa44 	bl	8004ebc <RCCEx_PLL2_Config>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	4605      	mov	r5, r0
 8005a38:	e645      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a40:	f7ff fab6 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	4605      	mov	r5, r0
 8005a48:	e63d      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005a4a:	4933      	ldr	r1, [pc, #204]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005a4c:	4635      	mov	r5, r6
 8005a4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005a50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a54:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005a56:	e636      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005a58:	2102      	movs	r1, #2
 8005a5a:	3024      	adds	r0, #36	; 0x24
 8005a5c:	f7ff faa8 	bl	8004fb0 <RCCEx_PLL3_Config>
 8005a60:	4606      	mov	r6, r0
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	f43f ab3a 	beq.w	80050dc <HAL_RCCEx_PeriphCLKConfig+0x38>
 8005a68:	e7be      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	1d20      	adds	r0, r4, #4
 8005a6e:	f7ff fa25 	bl	8004ebc <RCCEx_PLL2_Config>
 8005a72:	4605      	mov	r5, r0
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	f47f acfb 	bne.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005a7c:	e70c      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8005a7e:	2101      	movs	r1, #1
 8005a80:	1d20      	adds	r0, r4, #4
 8005a82:	f7ff fa1b 	bl	8004ebc <RCCEx_PLL2_Config>
 8005a86:	4605      	mov	r5, r0
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	f47f acd7 	bne.w	800543e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005a90:	e6fa      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005a92:	2101      	movs	r1, #1
 8005a94:	1d20      	adds	r0, r4, #4
 8005a96:	f7ff fa11 	bl	8004ebc <RCCEx_PLL2_Config>
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	f47f af0d 	bne.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005aa4:	e65e      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005aa6:	2603      	movs	r6, #3
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	4635      	mov	r5, r6
 8005aac:	e47d      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005aae:	2601      	movs	r6, #1
 8005ab0:	f7ff bb22 	b.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005ab4:	4818      	ldr	r0, [pc, #96]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005ab6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005ab8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005abc:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005abe:	f7ff bb14 	b.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005ac2:	f7fe fd5b 	bl	800457c <HAL_GetTick>
 8005ac6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8005b18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005aca:	4607      	mov	r7, r0
 8005acc:	f241 3988 	movw	r9, #5000	; 0x1388
 8005ad0:	e004      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8005ad2:	f7fe fd53 	bl	800457c <HAL_GetTick>
 8005ad6:	1bc0      	subs	r0, r0, r7
 8005ad8:	4548      	cmp	r0, r9
 8005ada:	d8e4      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8005adc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005ae0:	079b      	lsls	r3, r3, #30
 8005ae2:	d5f6      	bpl.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8005ae4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005ae8:	e67d      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8005aea:	480b      	ldr	r0, [pc, #44]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005aec:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005aee:	6901      	ldr	r1, [r0, #16]
 8005af0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005af4:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005af8:	430a      	orrs	r2, r1
 8005afa:	6102      	str	r2, [r0, #16]
 8005afc:	e67e      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x758>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	462e      	mov	r6, r5
 8005b02:	e452      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005b04:	2601      	movs	r6, #1
 8005b06:	4635      	mov	r5, r6
 8005b08:	e44c      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005b0a:	2601      	movs	r6, #1
 8005b0c:	4635      	mov	r5, r6
 8005b0e:	e497      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005b10:	2601      	movs	r6, #1
 8005b12:	4635      	mov	r5, r6
 8005b14:	e4ae      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	00ffffcf 	.word	0x00ffffcf

08005b20 <LL_ADC_Init>:
 8005b20:	6882      	ldr	r2, [r0, #8]
 8005b22:	07d3      	lsls	r3, r2, #31
 8005b24:	d413      	bmi.n	8005b4e <LL_ADC_Init+0x2e>
 8005b26:	68c2      	ldr	r2, [r0, #12]
 8005b28:	4603      	mov	r3, r0
 8005b2a:	6808      	ldr	r0, [r1, #0]
 8005b2c:	b430      	push	{r4, r5}
 8005b2e:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
 8005b32:	ea40 0104 	orr.w	r1, r0, r4
 8005b36:	4c07      	ldr	r4, [pc, #28]	; (8005b54 <LL_ADC_Init+0x34>)
 8005b38:	2001      	movs	r0, #1
 8005b3a:	4014      	ands	r4, r2
 8005b3c:	4321      	orrs	r1, r4
 8005b3e:	60d9      	str	r1, [r3, #12]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b46:	432a      	orrs	r2, r5
 8005b48:	bc30      	pop	{r4, r5}
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4770      	bx	lr
 8005b4e:	2000      	movs	r0, #0
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	ffffbfe3 	.word	0xffffbfe3

08005b58 <LL_ADC_REG_Init>:
 8005b58:	6882      	ldr	r2, [r0, #8]
 8005b5a:	07d3      	lsls	r3, r2, #31
 8005b5c:	d418      	bmi.n	8005b90 <LL_ADC_REG_Init+0x38>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	b430      	push	{r4, r5}
 8005b62:	684c      	ldr	r4, [r1, #4]
 8005b64:	b9b4      	cbnz	r4, 8005b94 <LL_ADC_REG_Init+0x3c>
 8005b66:	68c2      	ldr	r2, [r0, #12]
 8005b68:	4812      	ldr	r0, [pc, #72]	; (8005bb4 <LL_ADC_REG_Init+0x5c>)
 8005b6a:	4010      	ands	r0, r2
 8005b6c:	680a      	ldr	r2, [r1, #0]
 8005b6e:	4310      	orrs	r0, r2
 8005b70:	68ca      	ldr	r2, [r1, #12]
 8005b72:	4310      	orrs	r0, r2
 8005b74:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 8005b78:	ea40 0105 	orr.w	r1, r0, r5
 8005b7c:	4311      	orrs	r1, r2
 8005b7e:	60d9      	str	r1, [r3, #12]
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b82:	2001      	movs	r0, #1
 8005b84:	f022 020f 	bic.w	r2, r2, #15
 8005b88:	4322      	orrs	r2, r4
 8005b8a:	bc30      	pop	{r4, r5}
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005b8e:	4770      	bx	lr
 8005b90:	2000      	movs	r0, #0
 8005b92:	4770      	bx	lr
 8005b94:	68c0      	ldr	r0, [r0, #12]
 8005b96:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <LL_ADC_REG_Init+0x5c>)
 8005b98:	4002      	ands	r2, r0
 8005b9a:	6808      	ldr	r0, [r1, #0]
 8005b9c:	4302      	orrs	r2, r0
 8005b9e:	6888      	ldr	r0, [r1, #8]
 8005ba0:	4302      	orrs	r2, r0
 8005ba2:	68c8      	ldr	r0, [r1, #12]
 8005ba4:	4302      	orrs	r2, r0
 8005ba6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005baa:	4302      	orrs	r2, r0
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e7e6      	b.n	8005b80 <LL_ADC_REG_Init+0x28>
 8005bb2:	bf00      	nop
 8005bb4:	fff0c01c 	.word	0xfff0c01c

08005bb8 <LL_DAC_Init>:
 8005bb8:	f04f 0c01 	mov.w	ip, #1
 8005bbc:	f001 0110 	and.w	r1, r1, #16
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	fa0c fc01 	lsl.w	ip, ip, r1
 8005bc8:	ea3c 0000 	bics.w	r0, ip, r0
 8005bcc:	d02b      	beq.n	8005c26 <LL_DAC_Init+0x6e>
 8005bce:	6850      	ldr	r0, [r2, #4]
 8005bd0:	b470      	push	{r4, r5, r6}
 8005bd2:	b9d0      	cbnz	r0, 8005c0a <LL_DAC_Init+0x52>
 8005bd4:	24fc      	movs	r4, #252	; 0xfc
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	408c      	lsls	r4, r1
 8005bda:	ea20 0004 	bic.w	r0, r0, r4
 8005bde:	6814      	ldr	r4, [r2, #0]
 8005be0:	408c      	lsls	r4, r1
 8005be2:	4320      	orrs	r0, r4
 8005be4:	6018      	str	r0, [r3, #0]
 8005be6:	6955      	ldr	r5, [r2, #20]
 8005be8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8005bea:	e9d2 0603 	ldrd	r0, r6, [r2, #12]
 8005bee:	ea40 0206 	orr.w	r2, r0, r6
 8005bf2:	2007      	movs	r0, #7
 8005bf4:	432a      	orrs	r2, r5
 8005bf6:	4088      	lsls	r0, r1
 8005bf8:	fa02 f101 	lsl.w	r1, r2, r1
 8005bfc:	ea24 0200 	bic.w	r2, r4, r0
 8005c00:	2001      	movs	r0, #1
 8005c02:	4311      	orrs	r1, r2
 8005c04:	bc70      	pop	{r4, r5, r6}
 8005c06:	63d9      	str	r1, [r3, #60]	; 0x3c
 8005c08:	4770      	bx	lr
 8005c0a:	6815      	ldr	r5, [r2, #0]
 8005c0c:	681c      	ldr	r4, [r3, #0]
 8005c0e:	4328      	orrs	r0, r5
 8005c10:	6895      	ldr	r5, [r2, #8]
 8005c12:	4328      	orrs	r0, r5
 8005c14:	f640 75fc 	movw	r5, #4092	; 0xffc
 8005c18:	408d      	lsls	r5, r1
 8005c1a:	4088      	lsls	r0, r1
 8005c1c:	ea24 0405 	bic.w	r4, r4, r5
 8005c20:	4320      	orrs	r0, r4
 8005c22:	6018      	str	r0, [r3, #0]
 8005c24:	e7df      	b.n	8005be6 <LL_DAC_Init+0x2e>
 8005c26:	2000      	movs	r0, #0
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop

08005c2c <LL_DMA_Init>:
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <LL_DMA_Init+0x90>)
 8005c2e:	b4f0      	push	{r4, r5, r6, r7}
 8005c30:	5c5c      	ldrb	r4, [r3, r1]
 8005c32:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8005c34:	5907      	ldr	r7, [r0, r4]
 8005c36:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8005c3a:	4333      	orrs	r3, r6
 8005c3c:	6916      	ldr	r6, [r2, #16]
 8005c3e:	4333      	orrs	r3, r6
 8005c40:	6956      	ldr	r6, [r2, #20]
 8005c42:	4333      	orrs	r3, r6
 8005c44:	6996      	ldr	r6, [r2, #24]
 8005c46:	4333      	orrs	r3, r6
 8005c48:	69d6      	ldr	r6, [r2, #28]
 8005c4a:	4333      	orrs	r3, r6
 8005c4c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8005c4e:	4333      	orrs	r3, r6
 8005c50:	4e1b      	ldr	r6, [pc, #108]	; (8005cc0 <LL_DMA_Init+0x94>)
 8005c52:	403e      	ands	r6, r7
 8005c54:	4333      	orrs	r3, r6
 8005c56:	5103      	str	r3, [r0, r4]
 8005c58:	1903      	adds	r3, r0, r4
 8005c5a:	b195      	cbz	r5, 8005c82 <LL_DMA_Init+0x56>
 8005c5c:	695e      	ldr	r6, [r3, #20]
 8005c5e:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005c60:	f026 0607 	bic.w	r6, r6, #7
 8005c64:	433d      	orrs	r5, r7
 8005c66:	4335      	orrs	r5, r6
 8005c68:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005c6a:	615d      	str	r5, [r3, #20]
 8005c6c:	5905      	ldr	r5, [r0, r4]
 8005c6e:	f025 75c0 	bic.w	r5, r5, #25165824	; 0x1800000
 8005c72:	4335      	orrs	r5, r6
 8005c74:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8005c76:	5105      	str	r5, [r0, r4]
 8005c78:	5905      	ldr	r5, [r0, r4]
 8005c7a:	f425 05c0 	bic.w	r5, r5, #6291456	; 0x600000
 8005c7e:	4335      	orrs	r5, r6
 8005c80:	5105      	str	r5, [r0, r4]
 8005c82:	6854      	ldr	r4, [r2, #4]
 8005c84:	60dc      	str	r4, [r3, #12]
 8005c86:	6814      	ldr	r4, [r2, #0]
 8005c88:	609c      	str	r4, [r3, #8]
 8005c8a:	4c0e      	ldr	r4, [pc, #56]	; (8005cc4 <LL_DMA_Init+0x98>)
 8005c8c:	685d      	ldr	r5, [r3, #4]
 8005c8e:	402c      	ands	r4, r5
 8005c90:	6a15      	ldr	r5, [r2, #32]
 8005c92:	432c      	orrs	r4, r5
 8005c94:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005c96:	4a0c      	ldr	r2, [pc, #48]	; (8005cc8 <LL_DMA_Init+0x9c>)
 8005c98:	605c      	str	r4, [r3, #4]
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <LL_DMA_Init+0xa0>)
 8005c9c:	4290      	cmp	r0, r2
 8005c9e:	f04f 0001 	mov.w	r0, #1
 8005ca2:	440b      	add	r3, r1
 8005ca4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005ca8:	bf18      	it	ne
 8005caa:	3320      	addne	r3, #32
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cb2:	432a      	orrs	r2, r5
 8005cb4:	bcf0      	pop	{r4, r5, r6, r7}
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	08008b4c 	.word	0x08008b4c
 8005cc0:	fffc801f 	.word	0xfffc801f
 8005cc4:	ffff0000 	.word	0xffff0000
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	10008200 	.word	0x10008200

08005cd0 <LL_GPIO_Init>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	680c      	ldr	r4, [r1, #0]
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	fa94 fca4 	rbit	ip, r4
 8005cdc:	fabc fc8c 	clz	ip, ip
 8005ce0:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005ce4:	d075      	beq.n	8005dd2 <LL_GPIO_Init+0x102>
 8005ce6:	684f      	ldr	r7, [r1, #4]
 8005ce8:	2601      	movs	r6, #1
 8005cea:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 8005cee:	e00d      	b.n	8005d0c <LL_GPIO_Init+0x3c>
 8005cf0:	68c3      	ldr	r3, [r0, #12]
 8005cf2:	ea08 0803 	and.w	r8, r8, r3
 8005cf6:	690b      	ldr	r3, [r1, #16]
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	ea43 0308 	orr.w	r3, r3, r8
 8005d00:	60c3      	str	r3, [r0, #12]
 8005d02:	f10c 0c01 	add.w	ip, ip, #1
 8005d06:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005d0a:	d048      	beq.n	8005d9e <LL_GPIO_Init+0xce>
 8005d0c:	fa06 f30c 	lsl.w	r3, r6, ip
 8005d10:	4023      	ands	r3, r4
 8005d12:	fb03 f203 	mul.w	r2, r3, r3
 8005d16:	d0f4      	beq.n	8005d02 <LL_GPIO_Init+0x32>
 8005d18:	6805      	ldr	r5, [r0, #0]
 8005d1a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8005d1e:	fb07 f902 	mul.w	r9, r7, r2
 8005d22:	f1bb 0f01 	cmp.w	fp, #1
 8005d26:	ea25 0e08 	bic.w	lr, r5, r8
 8005d2a:	ea6f 0808 	mvn.w	r8, r8
 8005d2e:	ea4e 0509 	orr.w	r5, lr, r9
 8005d32:	6005      	str	r5, [r0, #0]
 8005d34:	d8dc      	bhi.n	8005cf0 <LL_GPIO_Init+0x20>
 8005d36:	0a1d      	lsrs	r5, r3, #8
 8005d38:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8005d3c:	fb02 fe02 	mul.w	lr, r2, r2
 8005d40:	2f02      	cmp	r7, #2
 8005d42:	fb05 f505 	mul.w	r5, r5, r5
 8005d46:	ea08 0909 	and.w	r9, r8, r9
 8005d4a:	fb05 f505 	mul.w	r5, r5, r5
 8005d4e:	9500      	str	r5, [sp, #0]
 8005d50:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005d54:	9501      	str	r5, [sp, #4]
 8005d56:	688d      	ldr	r5, [r1, #8]
 8005d58:	fb05 fa02 	mul.w	sl, r5, r2
 8005d5c:	690d      	ldr	r5, [r1, #16]
 8005d5e:	ea4a 0909 	orr.w	r9, sl, r9
 8005d62:	fb05 f202 	mul.w	r2, r5, r2
 8005d66:	f8c0 9008 	str.w	r9, [r0, #8]
 8005d6a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005d6e:	ea08 0809 	and.w	r8, r8, r9
 8005d72:	ea42 0208 	orr.w	r2, r2, r8
 8005d76:	60c2      	str	r2, [r0, #12]
 8005d78:	d1c3      	bne.n	8005d02 <LL_GPIO_Init+0x32>
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	d81e      	bhi.n	8005dbc <LL_GPIO_Init+0xec>
 8005d7e:	694b      	ldr	r3, [r1, #20]
 8005d80:	f10c 0c01 	add.w	ip, ip, #1
 8005d84:	6a02      	ldr	r2, [r0, #32]
 8005d86:	fb03 f30e 	mul.w	r3, r3, lr
 8005d8a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d8e:	ea22 0e0e 	bic.w	lr, r2, lr
 8005d92:	ea4e 0303 	orr.w	r3, lr, r3
 8005d96:	6203      	str	r3, [r0, #32]
 8005d98:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005d9c:	d1b6      	bne.n	8005d0c <LL_GPIO_Init+0x3c>
 8005d9e:	f1bb 0f01 	cmp.w	fp, #1
 8005da2:	d807      	bhi.n	8005db4 <LL_GPIO_Init+0xe4>
 8005da4:	6843      	ldr	r3, [r0, #4]
 8005da6:	68ca      	ldr	r2, [r1, #12]
 8005da8:	ea23 0304 	bic.w	r3, r3, r4
 8005dac:	fb02 f404 	mul.w	r4, r2, r4
 8005db0:	431c      	orrs	r4, r3
 8005db2:	6044      	str	r4, [r0, #4]
 8005db4:	2001      	movs	r0, #1
 8005db6:	b003      	add	sp, #12
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	9d00      	ldr	r5, [sp, #0]
 8005dc2:	ea22 0203 	bic.w	r2, r2, r3
 8005dc6:	694b      	ldr	r3, [r1, #20]
 8005dc8:	fb05 f303 	mul.w	r3, r5, r3
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	6243      	str	r3, [r0, #36]	; 0x24
 8005dd0:	e797      	b.n	8005d02 <LL_GPIO_Init+0x32>
 8005dd2:	684b      	ldr	r3, [r1, #4]
 8005dd4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005dd8:	e7e1      	b.n	8005d9e <LL_GPIO_Init+0xce>
 8005dda:	bf00      	nop

08005ddc <LL_GPIO_StructInit>:
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005de2:	2203      	movs	r2, #3
 8005de4:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8005de8:	e9c0 1200 	strd	r1, r2, [r0]
 8005dec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop

08005df4 <LL_RCC_GetPLL1ClockFreq>:
 8005df4:	495c      	ldr	r1, [pc, #368]	; (8005f68 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8005df6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	b430      	push	{r4, r5}
 8005e00:	f000 80aa 	beq.w	8005f58 <LL_RCC_GetPLL1ClockFreq+0x164>
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	f000 80a0 	beq.w	8005f4a <LL_RCC_GetPLL1ClockFreq+0x156>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8092 	beq.w	8005f34 <LL_RCC_GetPLL1ClockFreq+0x140>
 8005e10:	2200      	movs	r2, #0
 8005e12:	2300      	movs	r3, #0
 8005e14:	4d54      	ldr	r5, [pc, #336]	; (8005f68 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8005e16:	e9c0 3300 	strd	r3, r3, [r0]
 8005e1a:	6083      	str	r3, [r0, #8]
 8005e1c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005e1e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8005e20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005e22:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8005e26:	f013 0301 	ands.w	r3, r3, #1
 8005e2a:	d002      	beq.n	8005e32 <LL_RCC_GetPLL1ClockFreq+0x3e>
 8005e2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005e2e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005e32:	2900      	cmp	r1, #0
 8005e34:	d07c      	beq.n	8005f30 <LL_RCC_GetPLL1ClockFreq+0x13c>
 8005e36:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8005e3a:	3401      	adds	r4, #1
 8005e3c:	ee07 4a10 	vmov	s14, r4
 8005e40:	4c49      	ldr	r4, [pc, #292]	; (8005f68 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8005e42:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005e44:	03ed      	lsls	r5, r5, #15
 8005e46:	d523      	bpl.n	8005e90 <LL_RCC_GetPLL1ClockFreq+0x9c>
 8005e48:	ee07 3a90 	vmov	s15, r3
 8005e4c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8005e50:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8005e52:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8005e56:	ee07 2a90 	vmov	s15, r2
 8005e5a:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8005f6c <LL_RCC_GetPLL1ClockFreq+0x178>
 8005e5e:	f3c4 2446 	ubfx	r4, r4, #9, #7
 8005e62:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005e66:	ee07 1a90 	vmov	s15, r1
 8005e6a:	eea4 6a85 	vfma.f32	s12, s9, s10
 8005e6e:	3401      	adds	r4, #1
 8005e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e74:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005e78:	ee07 4a90 	vmov	s15, r4
 8005e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e80:	ee26 6a86 	vmul.f32	s12, s13, s12
 8005e84:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8005e88:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005e8c:	edc0 6a00 	vstr	s13, [r0]
 8005e90:	4c35      	ldr	r4, [pc, #212]	; (8005f68 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8005e92:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005e94:	03ad      	lsls	r5, r5, #14
 8005e96:	d523      	bpl.n	8005ee0 <LL_RCC_GetPLL1ClockFreq+0xec>
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8005ea0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8005ea2:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8005ea6:	ee07 2a90 	vmov	s15, r2
 8005eaa:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005f6c <LL_RCC_GetPLL1ClockFreq+0x178>
 8005eae:	f3c4 4406 	ubfx	r4, r4, #16, #7
 8005eb2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005eb6:	ee07 1a90 	vmov	s15, r1
 8005eba:	eea4 6a85 	vfma.f32	s12, s9, s10
 8005ebe:	3401      	adds	r4, #1
 8005ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ec4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005ec8:	ee07 4a90 	vmov	s15, r4
 8005ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed0:	ee26 6a86 	vmul.f32	s12, s13, s12
 8005ed4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8005ed8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005edc:	edc0 6a01 	vstr	s13, [r0, #4]
 8005ee0:	4c21      	ldr	r4, [pc, #132]	; (8005f68 <LL_RCC_GetPLL1ClockFreq+0x174>)
 8005ee2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005ee4:	036d      	lsls	r5, r5, #13
 8005ee6:	d523      	bpl.n	8005f30 <LL_RCC_GetPLL1ClockFreq+0x13c>
 8005ee8:	ee07 2a90 	vmov	s15, r2
 8005eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ef0:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8005f6c <LL_RCC_GetPLL1ClockFreq+0x178>
 8005ef4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ef8:	ee07 1a90 	vmov	s15, r1
 8005efc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f0a:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8005f0e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005f12:	3301      	adds	r3, #1
 8005f14:	eea7 7a85 	vfma.f32	s14, s15, s10
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f20:	ee25 7a87 	vmul.f32	s14, s11, s14
 8005f24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f28:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005f2c:	edc0 6a02 	vstr	s13, [r0, #8]
 8005f30:	bc30      	pop	{r4, r5}
 8005f32:	4770      	bx	lr
 8005f34:	680a      	ldr	r2, [r1, #0]
 8005f36:	f012 0204 	ands.w	r2, r2, #4
 8005f3a:	f43f af6a 	beq.w	8005e12 <LL_RCC_GetPLL1ClockFreq+0x1e>
 8005f3e:	680b      	ldr	r3, [r1, #0]
 8005f40:	4a0b      	ldr	r2, [pc, #44]	; (8005f70 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8005f42:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f46:	40da      	lsrs	r2, r3
 8005f48:	e763      	b.n	8005e12 <LL_RCC_GetPLL1ClockFreq+0x1e>
 8005f4a:	680a      	ldr	r2, [r1, #0]
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <LL_RCC_GetPLL1ClockFreq+0x180>)
 8005f4e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8005f52:	bf18      	it	ne
 8005f54:	461a      	movne	r2, r3
 8005f56:	e75c      	b.n	8005e12 <LL_RCC_GetPLL1ClockFreq+0x1e>
 8005f58:	680a      	ldr	r2, [r1, #0]
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <LL_RCC_GetPLL1ClockFreq+0x184>)
 8005f5c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005f60:	bf18      	it	ne
 8005f62:	461a      	movne	r2, r3
 8005f64:	e755      	b.n	8005e12 <LL_RCC_GetPLL1ClockFreq+0x1e>
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	39000000 	.word	0x39000000
 8005f70:	03d09000 	.word	0x03d09000
 8005f74:	00f42400 	.word	0x00f42400
 8005f78:	003d0900 	.word	0x003d0900

08005f7c <LL_RCC_GetPLL2ClockFreq>:
 8005f7c:	495c      	ldr	r1, [pc, #368]	; (80060f0 <LL_RCC_GetPLL2ClockFreq+0x174>)
 8005f7e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	b430      	push	{r4, r5}
 8005f88:	f000 80aa 	beq.w	80060e0 <LL_RCC_GetPLL2ClockFreq+0x164>
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	f000 80a0 	beq.w	80060d2 <LL_RCC_GetPLL2ClockFreq+0x156>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8092 	beq.w	80060bc <LL_RCC_GetPLL2ClockFreq+0x140>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4d54      	ldr	r5, [pc, #336]	; (80060f0 <LL_RCC_GetPLL2ClockFreq+0x174>)
 8005f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005fa2:	6083      	str	r3, [r0, #8]
 8005fa4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005fa6:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8005fa8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005faa:	f3c1 3105 	ubfx	r1, r1, #12, #6
 8005fae:	f013 0310 	ands.w	r3, r3, #16
 8005fb2:	d002      	beq.n	8005fba <LL_RCC_GetPLL2ClockFreq+0x3e>
 8005fb4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005fb6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d07c      	beq.n	80060b8 <LL_RCC_GetPLL2ClockFreq+0x13c>
 8005fbe:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8005fc2:	3401      	adds	r4, #1
 8005fc4:	ee07 4a10 	vmov	s14, r4
 8005fc8:	4c49      	ldr	r4, [pc, #292]	; (80060f0 <LL_RCC_GetPLL2ClockFreq+0x174>)
 8005fca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005fcc:	032d      	lsls	r5, r5, #12
 8005fce:	d523      	bpl.n	8006018 <LL_RCC_GetPLL2ClockFreq+0x9c>
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8005fd8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005fda:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8005fde:	ee07 2a90 	vmov	s15, r2
 8005fe2:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80060f4 <LL_RCC_GetPLL2ClockFreq+0x178>
 8005fe6:	f3c4 2446 	ubfx	r4, r4, #9, #7
 8005fea:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005fee:	ee07 1a90 	vmov	s15, r1
 8005ff2:	eea4 6a85 	vfma.f32	s12, s9, s10
 8005ff6:	3401      	adds	r4, #1
 8005ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ffc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006000:	ee07 4a90 	vmov	s15, r4
 8006004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006008:	ee26 6a86 	vmul.f32	s12, s13, s12
 800600c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006010:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006014:	edc0 6a00 	vstr	s13, [r0]
 8006018:	4c35      	ldr	r4, [pc, #212]	; (80060f0 <LL_RCC_GetPLL2ClockFreq+0x174>)
 800601a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800601c:	02ed      	lsls	r5, r5, #11
 800601e:	d523      	bpl.n	8006068 <LL_RCC_GetPLL2ClockFreq+0xec>
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006028:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800602a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800602e:	ee07 2a90 	vmov	s15, r2
 8006032:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80060f4 <LL_RCC_GetPLL2ClockFreq+0x178>
 8006036:	f3c4 4406 	ubfx	r4, r4, #16, #7
 800603a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800603e:	ee07 1a90 	vmov	s15, r1
 8006042:	eea4 6a85 	vfma.f32	s12, s9, s10
 8006046:	3401      	adds	r4, #1
 8006048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800604c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006050:	ee07 4a90 	vmov	s15, r4
 8006054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006058:	ee26 6a86 	vmul.f32	s12, s13, s12
 800605c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006060:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006064:	edc0 6a01 	vstr	s13, [r0, #4]
 8006068:	4c21      	ldr	r4, [pc, #132]	; (80060f0 <LL_RCC_GetPLL2ClockFreq+0x174>)
 800606a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800606c:	02ad      	lsls	r5, r5, #10
 800606e:	d523      	bpl.n	80060b8 <LL_RCC_GetPLL2ClockFreq+0x13c>
 8006070:	ee07 2a90 	vmov	s15, r2
 8006074:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006078:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 80060f4 <LL_RCC_GetPLL2ClockFreq+0x178>
 800607c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006080:	ee07 1a90 	vmov	s15, r1
 8006084:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800608e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006092:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8006096:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800609a:	3301      	adds	r3, #1
 800609c:	eea7 7a85 	vfma.f32	s14, s15, s10
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a8:	ee25 7a87 	vmul.f32	s14, s11, s14
 80060ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80060b0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80060b4:	edc0 6a02 	vstr	s13, [r0, #8]
 80060b8:	bc30      	pop	{r4, r5}
 80060ba:	4770      	bx	lr
 80060bc:	680a      	ldr	r2, [r1, #0]
 80060be:	f012 0204 	ands.w	r2, r2, #4
 80060c2:	f43f af6a 	beq.w	8005f9a <LL_RCC_GetPLL2ClockFreq+0x1e>
 80060c6:	680b      	ldr	r3, [r1, #0]
 80060c8:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 80060ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060ce:	40da      	lsrs	r2, r3
 80060d0:	e763      	b.n	8005f9a <LL_RCC_GetPLL2ClockFreq+0x1e>
 80060d2:	680a      	ldr	r2, [r1, #0]
 80060d4:	4b09      	ldr	r3, [pc, #36]	; (80060fc <LL_RCC_GetPLL2ClockFreq+0x180>)
 80060d6:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80060da:	bf18      	it	ne
 80060dc:	461a      	movne	r2, r3
 80060de:	e75c      	b.n	8005f9a <LL_RCC_GetPLL2ClockFreq+0x1e>
 80060e0:	680a      	ldr	r2, [r1, #0]
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <LL_RCC_GetPLL2ClockFreq+0x184>)
 80060e4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80060e8:	bf18      	it	ne
 80060ea:	461a      	movne	r2, r3
 80060ec:	e755      	b.n	8005f9a <LL_RCC_GetPLL2ClockFreq+0x1e>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
 80060f4:	39000000 	.word	0x39000000
 80060f8:	03d09000 	.word	0x03d09000
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	003d0900 	.word	0x003d0900

08006104 <LL_RCC_GetPLL3ClockFreq>:
 8006104:	4a62      	ldr	r2, [pc, #392]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8006106:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b01      	cmp	r3, #1
 800610e:	b410      	push	{r4}
 8006110:	f000 80a5 	beq.w	800625e <LL_RCC_GetPLL3ClockFreq+0x15a>
 8006114:	2b02      	cmp	r3, #2
 8006116:	f000 809b 	beq.w	8006250 <LL_RCC_GetPLL3ClockFreq+0x14c>
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 808c 	beq.w	8006238 <LL_RCC_GetPLL3ClockFreq+0x134>
 8006120:	4c5b      	ldr	r4, [pc, #364]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8006122:	2300      	movs	r3, #0
 8006124:	e9c0 3300 	strd	r3, r3, [r0]
 8006128:	6083      	str	r3, [r0, #8]
 800612a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800612c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800612e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006130:	f3c2 5205 	ubfx	r2, r2, #20, #6
 8006134:	05e4      	lsls	r4, r4, #23
 8006136:	d57c      	bpl.n	8006232 <LL_RCC_GetPLL3ClockFreq+0x12e>
 8006138:	ee06 3a90 	vmov	s13, r3
 800613c:	4c54      	ldr	r4, [pc, #336]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 800613e:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8006140:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 8006144:	ee07 4a10 	vmov	s14, r4
 8006148:	2a00      	cmp	r2, #0
 800614a:	d072      	beq.n	8006232 <LL_RCC_GetPLL3ClockFreq+0x12e>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d070      	beq.n	8006232 <LL_RCC_GetPLL3ClockFreq+0x12e>
 8006150:	4b4f      	ldr	r3, [pc, #316]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8006152:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006156:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006158:	3101      	adds	r1, #1
 800615a:	ee07 1a90 	vmov	s15, r1
 800615e:	0261      	lsls	r1, r4, #9
 8006160:	d51f      	bpl.n	80061a2 <LL_RCC_GetPLL3ClockFreq+0x9e>
 8006162:	ee06 2a10 	vmov	s12, r2
 8006166:	eef8 4ae6 	vcvt.f32.s32	s9, s13
 800616a:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006174:	ed9f 4a47 	vldr	s8, [pc, #284]	; 8006294 <LL_RCC_GetPLL3ClockFreq+0x190>
 8006178:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800617c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006180:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8006184:	3301      	adds	r3, #1
 8006186:	ee06 3a10 	vmov	s12, r3
 800618a:	eea3 5a84 	vfma.f32	s10, s7, s8
 800618e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006192:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006196:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800619a:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 800619e:	edc0 5a00 	vstr	s11, [r0]
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80061a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061a6:	020c      	lsls	r4, r1, #8
 80061a8:	d51f      	bpl.n	80061ea <LL_RCC_GetPLL3ClockFreq+0xe6>
 80061aa:	ee06 2a10 	vmov	s12, r2
 80061ae:	eef8 4ae6 	vcvt.f32.s32	s9, s13
 80061b2:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80061bc:	ed9f 4a35 	vldr	s8, [pc, #212]	; 8006294 <LL_RCC_GetPLL3ClockFreq+0x190>
 80061c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80061c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80061c8:	eec4 5a86 	vdiv.f32	s11, s9, s12
 80061cc:	3301      	adds	r3, #1
 80061ce:	ee06 3a10 	vmov	s12, r3
 80061d2:	eea3 5a84 	vfma.f32	s10, s7, s8
 80061d6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80061da:	ee25 5a85 	vmul.f32	s10, s11, s10
 80061de:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80061e2:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80061e6:	edc0 5a01 	vstr	s11, [r0, #4]
 80061ea:	4b29      	ldr	r3, [pc, #164]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80061ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ee:	01c9      	lsls	r1, r1, #7
 80061f0:	d51f      	bpl.n	8006232 <LL_RCC_GetPLL3ClockFreq+0x12e>
 80061f2:	ee06 2a10 	vmov	s12, r2
 80061f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80061fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	eeb8 5ac6 	vcvt.f32.s32	s10, s12
 8006204:	eddf 5a23 	vldr	s11, [pc, #140]	; 8006294 <LL_RCC_GetPLL3ClockFreq+0x190>
 8006208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800620c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006210:	ee86 6a85 	vdiv.f32	s12, s13, s10
 8006214:	3301      	adds	r3, #1
 8006216:	eee7 7a25 	vfma.f32	s15, s14, s11
 800621a:	ee07 3a10 	vmov	s14, r3
 800621e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006222:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006226:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800622a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800622e:	edc0 6a02 	vstr	s13, [r0, #8]
 8006232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	6813      	ldr	r3, [r2, #0]
 800623a:	0759      	lsls	r1, r3, #29
 800623c:	f57f af70 	bpl.w	8006120 <LL_RCC_GetPLL3ClockFreq+0x1c>
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <LL_RCC_GetPLL3ClockFreq+0x194>)
 8006244:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006248:	40d3      	lsrs	r3, r2
 800624a:	ee06 3a90 	vmov	s13, r3
 800624e:	e00c      	b.n	800626a <LL_RCC_GetPLL3ClockFreq+0x166>
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	039c      	lsls	r4, r3, #14
 8006254:	f57f af64 	bpl.w	8006120 <LL_RCC_GetPLL3ClockFreq+0x1c>
 8006258:	eddf 6a10 	vldr	s13, [pc, #64]	; 800629c <LL_RCC_GetPLL3ClockFreq+0x198>
 800625c:	e005      	b.n	800626a <LL_RCC_GetPLL3ClockFreq+0x166>
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	05db      	lsls	r3, r3, #23
 8006262:	f57f af5d 	bpl.w	8006120 <LL_RCC_GetPLL3ClockFreq+0x1c>
 8006266:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80062a0 <LL_RCC_GetPLL3ClockFreq+0x19c>
 800626a:	2200      	movs	r2, #0
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 800626e:	e9c0 2200 	strd	r2, r2, [r0]
 8006272:	6082      	str	r2, [r0, #8]
 8006274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006276:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	f3c2 5205 	ubfx	r2, r2, #20, #6
 800627e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006282:	ee07 3a10 	vmov	s14, r3
 8006286:	f04f 0301 	mov.w	r3, #1
 800628a:	f43f af5d 	beq.w	8006148 <LL_RCC_GetPLL3ClockFreq+0x44>
 800628e:	e755      	b.n	800613c <LL_RCC_GetPLL3ClockFreq+0x38>
 8006290:	58024400 	.word	0x58024400
 8006294:	39000000 	.word	0x39000000
 8006298:	03d09000 	.word	0x03d09000
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	003d0900 	.word	0x003d0900

080062a4 <LL_RCC_GetUSARTClockFreq>:
 80062a4:	4a6e      	ldr	r2, [pc, #440]	; (8006460 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80062a6:	f3c0 2104 	ubfx	r1, r0, #8, #5
 80062aa:	0e03      	lsrs	r3, r0, #24
 80062ac:	fa52 f280 	uxtab	r2, r2, r0
 80062b0:	408b      	lsls	r3, r1
 80062b2:	f8d2 244c 	ldr.w	r2, [r2, #1100]	; 0x44c
 80062b6:	4013      	ands	r3, r2
 80062b8:	40cb      	lsrs	r3, r1
 80062ba:	b510      	push	{r4, lr}
 80062bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80062c0:	4c68      	ldr	r4, [pc, #416]	; (8006464 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80062c2:	b084      	sub	sp, #16
 80062c4:	42a0      	cmp	r0, r4
 80062c6:	d00c      	beq.n	80062e2 <LL_RCC_GetUSARTClockFreq+0x3e>
 80062c8:	d83d      	bhi.n	8006346 <LL_RCC_GetUSARTClockFreq+0xa2>
 80062ca:	4b67      	ldr	r3, [pc, #412]	; (8006468 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80062cc:	4298      	cmp	r0, r3
 80062ce:	f000 8086 	beq.w	80063de <LL_RCC_GetUSARTClockFreq+0x13a>
 80062d2:	d91f      	bls.n	8006314 <LL_RCC_GetUSARTClockFreq+0x70>
 80062d4:	4b65      	ldr	r3, [pc, #404]	; (800646c <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80062d6:	4298      	cmp	r0, r3
 80062d8:	d012      	beq.n	8006300 <LL_RCC_GetUSARTClockFreq+0x5c>
 80062da:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80062de:	4298      	cmp	r0, r3
 80062e0:	d10a      	bne.n	80062f8 <LL_RCC_GetUSARTClockFreq+0x54>
 80062e2:	4b63      	ldr	r3, [pc, #396]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80062ea:	d003      	beq.n	80062f4 <LL_RCC_GetUSARTClockFreq+0x50>
 80062ec:	a801      	add	r0, sp, #4
 80062ee:	f7ff ff09 	bl	8006104 <LL_RCC_GetPLL3ClockFreq>
 80062f2:	9802      	ldr	r0, [sp, #8]
 80062f4:	b004      	add	sp, #16
 80062f6:	bd10      	pop	{r4, pc}
 80062f8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80062fc:	4298      	cmp	r0, r3
 80062fe:	d156      	bne.n	80063ae <LL_RCC_GetUSARTClockFreq+0x10a>
 8006300:	4b5b      	ldr	r3, [pc, #364]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006308:	d0f4      	beq.n	80062f4 <LL_RCC_GetUSARTClockFreq+0x50>
 800630a:	a801      	add	r0, sp, #4
 800630c:	f7ff fe36 	bl	8005f7c <LL_RCC_GetPLL2ClockFreq>
 8006310:	9802      	ldr	r0, [sp, #8]
 8006312:	e7ef      	b.n	80062f4 <LL_RCC_GetUSARTClockFreq+0x50>
 8006314:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8006318:	4298      	cmp	r0, r3
 800631a:	d148      	bne.n	80063ae <LL_RCC_GetUSARTClockFreq+0x10a>
 800631c:	4b54      	ldr	r3, [pc, #336]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006324:	2b18      	cmp	r3, #24
 8006326:	d845      	bhi.n	80063b4 <LL_RCC_GetUSARTClockFreq+0x110>
 8006328:	e8df f003 	tbb	[pc, r3]
 800632c:	44444488 	.word	0x44444488
 8006330:	44444444 	.word	0x44444444
 8006334:	44444498 	.word	0x44444498
 8006338:	44444444 	.word	0x44444444
 800633c:	4444448f 	.word	0x4444448f
 8006340:	44444444 	.word	0x44444444
 8006344:	91          	.byte	0x91
 8006345:	00          	.byte	0x00
 8006346:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8006348:	4298      	cmp	r0, r3
 800634a:	d018      	beq.n	800637e <LL_RCC_GetUSARTClockFreq+0xda>
 800634c:	d90f      	bls.n	800636e <LL_RCC_GetUSARTClockFreq+0xca>
 800634e:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8006350:	4298      	cmp	r0, r3
 8006352:	d003      	beq.n	800635c <LL_RCC_GetUSARTClockFreq+0xb8>
 8006354:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006358:	4298      	cmp	r0, r3
 800635a:	d128      	bne.n	80063ae <LL_RCC_GetUSARTClockFreq+0x10a>
 800635c:	4b44      	ldr	r3, [pc, #272]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800635e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006360:	f010 0002 	ands.w	r0, r0, #2
 8006364:	bf18      	it	ne
 8006366:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800636a:	b004      	add	sp, #16
 800636c:	bd10      	pop	{r4, pc}
 800636e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006372:	4298      	cmp	r0, r3
 8006374:	d010      	beq.n	8006398 <LL_RCC_GetUSARTClockFreq+0xf4>
 8006376:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 800637a:	4298      	cmp	r0, r3
 800637c:	d108      	bne.n	8006390 <LL_RCC_GetUSARTClockFreq+0xec>
 800637e:	4a3c      	ldr	r2, [pc, #240]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006380:	4b3e      	ldr	r3, [pc, #248]	; (800647c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8006382:	6810      	ldr	r0, [r2, #0]
 8006384:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006388:	bf18      	it	ne
 800638a:	4618      	movne	r0, r3
 800638c:	b004      	add	sp, #16
 800638e:	bd10      	pop	{r4, pc}
 8006390:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006394:	4298      	cmp	r0, r3
 8006396:	d10a      	bne.n	80063ae <LL_RCC_GetUSARTClockFreq+0x10a>
 8006398:	4b35      	ldr	r3, [pc, #212]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	f010 0004 	ands.w	r0, r0, #4
 80063a0:	d0a8      	beq.n	80062f4 <LL_RCC_GetUSARTClockFreq+0x50>
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4836      	ldr	r0, [pc, #216]	; (8006480 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80063a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80063aa:	40d8      	lsrs	r0, r3
 80063ac:	e7a2      	b.n	80062f4 <LL_RCC_GetUSARTClockFreq+0x50>
 80063ae:	2000      	movs	r0, #0
 80063b0:	b004      	add	sp, #16
 80063b2:	bd10      	pop	{r4, pc}
 80063b4:	2300      	movs	r3, #0
 80063b6:	4a2e      	ldr	r2, [pc, #184]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80063b8:	6990      	ldr	r0, [r2, #24]
 80063ba:	6994      	ldr	r4, [r2, #24]
 80063bc:	69d2      	ldr	r2, [r2, #28]
 80063be:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80063c2:	f004 040f 	and.w	r4, r4, #15
 80063c6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80063ca:	492e      	ldr	r1, [pc, #184]	; (8006484 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 80063cc:	5c08      	ldrb	r0, [r1, r0]
 80063ce:	5d0c      	ldrb	r4, [r1, r4]
 80063d0:	fa23 f000 	lsr.w	r0, r3, r0
 80063d4:	5c8a      	ldrb	r2, [r1, r2]
 80063d6:	40e0      	lsrs	r0, r4
 80063d8:	40d0      	lsrs	r0, r2
 80063da:	b004      	add	sp, #16
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	4b24      	ldr	r3, [pc, #144]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e6:	2b18      	cmp	r3, #24
 80063e8:	d80e      	bhi.n	8006408 <LL_RCC_GetUSARTClockFreq+0x164>
 80063ea:	e8df f003 	tbb	[pc, r3]
 80063ee:	0d20      	.short	0x0d20
 80063f0:	0d0d0d0d 	.word	0x0d0d0d0d
 80063f4:	0d350d0d 	.word	0x0d350d0d
 80063f8:	0d0d0d0d 	.word	0x0d0d0d0d
 80063fc:	0d1e0d0d 	.word	0x0d1e0d0d
 8006400:	0d0d0d0d 	.word	0x0d0d0d0d
 8006404:	0d0d      	.short	0x0d0d
 8006406:	19          	.byte	0x19
 8006407:	00          	.byte	0x00
 8006408:	2300      	movs	r3, #0
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800640c:	6990      	ldr	r0, [r2, #24]
 800640e:	6994      	ldr	r4, [r2, #24]
 8006410:	69d2      	ldr	r2, [r2, #28]
 8006412:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8006416:	f004 040f 	and.w	r4, r4, #15
 800641a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800641e:	e7d4      	b.n	80063ca <LL_RCC_GetUSARTClockFreq+0x126>
 8006420:	a801      	add	r0, sp, #4
 8006422:	f7ff fce7 	bl	8005df4 <LL_RCC_GetPLL1ClockFreq>
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	e7ef      	b.n	800640a <LL_RCC_GetUSARTClockFreq+0x166>
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 800642c:	e7ed      	b.n	800640a <LL_RCC_GetUSARTClockFreq+0x166>
 800642e:	4a10      	ldr	r2, [pc, #64]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006430:	4b13      	ldr	r3, [pc, #76]	; (8006480 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006438:	40d3      	lsrs	r3, r2
 800643a:	e7e6      	b.n	800640a <LL_RCC_GetUSARTClockFreq+0x166>
 800643c:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006446:	40d3      	lsrs	r3, r2
 8006448:	e7b5      	b.n	80063b6 <LL_RCC_GetUSARTClockFreq+0x112>
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 800644c:	e7b3      	b.n	80063b6 <LL_RCC_GetUSARTClockFreq+0x112>
 800644e:	a801      	add	r0, sp, #4
 8006450:	f7ff fcd0 	bl	8005df4 <LL_RCC_GetPLL1ClockFreq>
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	e7ae      	b.n	80063b6 <LL_RCC_GetUSARTClockFreq+0x112>
 8006458:	4b08      	ldr	r3, [pc, #32]	; (800647c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800645a:	e7d6      	b.n	800640a <LL_RCC_GetUSARTClockFreq+0x166>
 800645c:	4b07      	ldr	r3, [pc, #28]	; (800647c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800645e:	e7aa      	b.n	80063b6 <LL_RCC_GetUSARTClockFreq+0x112>
 8006460:	58024000 	.word	0x58024000
 8006464:	07020308 	.word	0x07020308
 8006468:	07000308 	.word	0x07000308
 800646c:	07010308 	.word	0x07010308
 8006470:	58024400 	.word	0x58024400
 8006474:	07040308 	.word	0x07040308
 8006478:	07050008 	.word	0x07050008
 800647c:	003d0900 	.word	0x003d0900
 8006480:	03d09000 	.word	0x03d09000
 8006484:	08008b54 	.word	0x08008b54
 8006488:	00f42400 	.word	0x00f42400

0800648c <LL_TIM_Init>:
 800648c:	4a3b      	ldr	r2, [pc, #236]	; (800657c <LL_TIM_Init+0xf0>)
 800648e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006492:	6803      	ldr	r3, [r0, #0]
 8006494:	eba0 0202 	sub.w	r2, r0, r2
 8006498:	fab2 f282 	clz	r2, r2
 800649c:	b430      	push	{r4, r5}
 800649e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80064a2:	d01f      	beq.n	80064e4 <LL_TIM_Init+0x58>
 80064a4:	b9f2      	cbnz	r2, 80064e4 <LL_TIM_Init+0x58>
 80064a6:	4c36      	ldr	r4, [pc, #216]	; (8006580 <LL_TIM_Init+0xf4>)
 80064a8:	42a0      	cmp	r0, r4
 80064aa:	d042      	beq.n	8006532 <LL_TIM_Init+0xa6>
 80064ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80064b0:	42a0      	cmp	r0, r4
 80064b2:	d03e      	beq.n	8006532 <LL_TIM_Init+0xa6>
 80064b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d044      	beq.n	8006546 <LL_TIM_Init+0xba>
 80064bc:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80064c0:	42a0      	cmp	r0, r4
 80064c2:	d040      	beq.n	8006546 <LL_TIM_Init+0xba>
 80064c4:	4c2f      	ldr	r4, [pc, #188]	; (8006584 <LL_TIM_Init+0xf8>)
 80064c6:	4a30      	ldr	r2, [pc, #192]	; (8006588 <LL_TIM_Init+0xfc>)
 80064c8:	4290      	cmp	r0, r2
 80064ca:	bf18      	it	ne
 80064cc:	42a0      	cmpne	r0, r4
 80064ce:	d04a      	beq.n	8006566 <LL_TIM_Init+0xda>
 80064d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d4:	4290      	cmp	r0, r2
 80064d6:	d046      	beq.n	8006566 <LL_TIM_Init+0xda>
 80064d8:	688c      	ldr	r4, [r1, #8]
 80064da:	880a      	ldrh	r2, [r1, #0]
 80064dc:	6003      	str	r3, [r0, #0]
 80064de:	62c4      	str	r4, [r0, #44]	; 0x2c
 80064e0:	6282      	str	r2, [r0, #40]	; 0x28
 80064e2:	e01f      	b.n	8006524 <LL_TIM_Init+0x98>
 80064e4:	684c      	ldr	r4, [r1, #4]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	4323      	orrs	r3, r4
 80064ec:	4c27      	ldr	r4, [pc, #156]	; (800658c <LL_TIM_Init+0x100>)
 80064ee:	1b04      	subs	r4, r0, r4
 80064f0:	fab4 f484 	clz	r4, r4
 80064f4:	0964      	lsrs	r4, r4, #5
 80064f6:	68cd      	ldr	r5, [r1, #12]
 80064f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fc:	432b      	orrs	r3, r5
 80064fe:	6003      	str	r3, [r0, #0]
 8006500:	688b      	ldr	r3, [r1, #8]
 8006502:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006504:	880b      	ldrh	r3, [r1, #0]
 8006506:	6283      	str	r3, [r0, #40]	; 0x28
 8006508:	b952      	cbnz	r2, 8006520 <LL_TIM_Init+0x94>
 800650a:	b94c      	cbnz	r4, 8006520 <LL_TIM_Init+0x94>
 800650c:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <LL_TIM_Init+0xf8>)
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <LL_TIM_Init+0xfc>)
 8006510:	4298      	cmp	r0, r3
 8006512:	bf18      	it	ne
 8006514:	4290      	cmpne	r0, r2
 8006516:	d003      	beq.n	8006520 <LL_TIM_Init+0x94>
 8006518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800651c:	4298      	cmp	r0, r3
 800651e:	d101      	bne.n	8006524 <LL_TIM_Init+0x98>
 8006520:	7c0b      	ldrb	r3, [r1, #16]
 8006522:	6303      	str	r3, [r0, #48]	; 0x30
 8006524:	6943      	ldr	r3, [r0, #20]
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	bc30      	pop	{r4, r5}
 800652c:	6143      	str	r3, [r0, #20]
 800652e:	2001      	movs	r0, #1
 8006530:	4770      	bx	lr
 8006532:	4c16      	ldr	r4, [pc, #88]	; (800658c <LL_TIM_Init+0x100>)
 8006534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006538:	684d      	ldr	r5, [r1, #4]
 800653a:	1b04      	subs	r4, r0, r4
 800653c:	432b      	orrs	r3, r5
 800653e:	fab4 f484 	clz	r4, r4
 8006542:	0964      	lsrs	r4, r4, #5
 8006544:	e7d7      	b.n	80064f6 <LL_TIM_Init+0x6a>
 8006546:	684d      	ldr	r5, [r1, #4]
 8006548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654c:	4c0f      	ldr	r4, [pc, #60]	; (800658c <LL_TIM_Init+0x100>)
 800654e:	432b      	orrs	r3, r5
 8006550:	4d0f      	ldr	r5, [pc, #60]	; (8006590 <LL_TIM_Init+0x104>)
 8006552:	1b04      	subs	r4, r0, r4
 8006554:	42a8      	cmp	r0, r5
 8006556:	fab4 f484 	clz	r4, r4
 800655a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800655e:	d0ca      	beq.n	80064f6 <LL_TIM_Init+0x6a>
 8006560:	2c00      	cmp	r4, #0
 8006562:	d1c8      	bne.n	80064f6 <LL_TIM_Init+0x6a>
 8006564:	e7ae      	b.n	80064c4 <LL_TIM_Init+0x38>
 8006566:	68cc      	ldr	r4, [r1, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	688a      	ldr	r2, [r1, #8]
 800656e:	4323      	orrs	r3, r4
 8006570:	6003      	str	r3, [r0, #0]
 8006572:	880b      	ldrh	r3, [r1, #0]
 8006574:	62c2      	str	r2, [r0, #44]	; 0x2c
 8006576:	6283      	str	r3, [r0, #40]	; 0x28
 8006578:	e7c8      	b.n	800650c <LL_TIM_Init+0x80>
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40010400 	.word	0x40010400
 8006590:	40000c00 	.word	0x40000c00

08006594 <LL_USART_Init>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4604      	mov	r4, r0
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	f010 0001 	ands.w	r0, r0, #1
 800659e:	d13d      	bne.n	800661c <LL_USART_Init+0x88>
 80065a0:	690a      	ldr	r2, [r1, #16]
 80065a2:	460d      	mov	r5, r1
 80065a4:	688b      	ldr	r3, [r1, #8]
 80065a6:	6821      	ldr	r1, [r4, #0]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	696a      	ldr	r2, [r5, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	69ea      	ldr	r2, [r5, #28]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	4a37      	ldr	r2, [pc, #220]	; (8006690 <LL_USART_Init+0xfc>)
 80065b4:	400a      	ands	r2, r1
 80065b6:	68e9      	ldr	r1, [r5, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	6862      	ldr	r2, [r4, #4]
 80065be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80065c2:	430a      	orrs	r2, r1
 80065c4:	69a9      	ldr	r1, [r5, #24]
 80065c6:	6062      	str	r2, [r4, #4]
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	4a32      	ldr	r2, [pc, #200]	; (8006694 <LL_USART_Init+0x100>)
 80065cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d0:	4294      	cmp	r4, r2
 80065d2:	ea43 0301 	orr.w	r3, r3, r1
 80065d6:	60a3      	str	r3, [r4, #8]
 80065d8:	d043      	beq.n	8006662 <LL_USART_Init+0xce>
 80065da:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <LL_USART_Init+0x104>)
 80065dc:	429c      	cmp	r4, r3
 80065de:	d01f      	beq.n	8006620 <LL_USART_Init+0x8c>
 80065e0:	4b2e      	ldr	r3, [pc, #184]	; (800669c <LL_USART_Init+0x108>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d01c      	beq.n	8006620 <LL_USART_Init+0x8c>
 80065e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d018      	beq.n	8006620 <LL_USART_Init+0x8c>
 80065ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d014      	beq.n	8006620 <LL_USART_Init+0x8c>
 80065f6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80065fa:	429c      	cmp	r4, r3
 80065fc:	d031      	beq.n	8006662 <LL_USART_Init+0xce>
 80065fe:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8006602:	429c      	cmp	r4, r3
 8006604:	d00c      	beq.n	8006620 <LL_USART_Init+0x8c>
 8006606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660a:	429c      	cmp	r4, r3
 800660c:	d008      	beq.n	8006620 <LL_USART_Init+0x8c>
 800660e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006610:	8829      	ldrh	r1, [r5, #0]
 8006612:	f023 030f 	bic.w	r3, r3, #15
 8006616:	430b      	orrs	r3, r1
 8006618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	2000      	movs	r0, #0
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	481f      	ldr	r0, [pc, #124]	; (80066a0 <LL_USART_Init+0x10c>)
 8006622:	f7ff fe3f 	bl	80062a4 <LL_RCC_GetUSARTClockFreq>
 8006626:	b1a0      	cbz	r0, 8006652 <LL_USART_Init+0xbe>
 8006628:	686b      	ldr	r3, [r5, #4]
 800662a:	b193      	cbz	r3, 8006652 <LL_USART_Init+0xbe>
 800662c:	69ea      	ldr	r2, [r5, #28]
 800662e:	6829      	ldr	r1, [r5, #0]
 8006630:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006634:	4a1b      	ldr	r2, [pc, #108]	; (80066a4 <LL_USART_Init+0x110>)
 8006636:	b289      	uxth	r1, r1
 8006638:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800663c:	d017      	beq.n	800666e <LL_USART_Init+0xda>
 800663e:	fbb0 f2f2 	udiv	r2, r0, r2
 8006642:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8006646:	2001      	movs	r0, #1
 8006648:	fbb2 f2f3 	udiv	r2, r2, r3
 800664c:	b292      	uxth	r2, r2
 800664e:	60e2      	str	r2, [r4, #12]
 8006650:	e001      	b.n	8006656 <LL_USART_Init+0xc2>
 8006652:	8829      	ldrh	r1, [r5, #0]
 8006654:	2000      	movs	r0, #0
 8006656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006658:	f023 030f 	bic.w	r3, r3, #15
 800665c:	430b      	orrs	r3, r1
 800665e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006660:	bd38      	pop	{r3, r4, r5, pc}
 8006662:	4811      	ldr	r0, [pc, #68]	; (80066a8 <LL_USART_Init+0x114>)
 8006664:	f7ff fe1e 	bl	80062a4 <LL_RCC_GetUSARTClockFreq>
 8006668:	2800      	cmp	r0, #0
 800666a:	d1dd      	bne.n	8006628 <LL_USART_Init+0x94>
 800666c:	e7f1      	b.n	8006652 <LL_USART_Init+0xbe>
 800666e:	fbb0 f0f2 	udiv	r0, r0, r2
 8006672:	085a      	lsrs	r2, r3, #1
 8006674:	f64f 75f0 	movw	r5, #65520	; 0xfff0
 8006678:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800667c:	fbb0 f2f3 	udiv	r2, r0, r3
 8006680:	ea02 0005 	and.w	r0, r2, r5
 8006684:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8006688:	4303      	orrs	r3, r0
 800668a:	2001      	movs	r0, #1
 800668c:	60e3      	str	r3, [r4, #12]
 800668e:	e7e2      	b.n	8006656 <LL_USART_Init+0xc2>
 8006690:	efff69f3 	.word	0xefff69f3
 8006694:	40011000 	.word	0x40011000
 8006698:	40004400 	.word	0x40004400
 800669c:	40004800 	.word	0x40004800
 80066a0:	07000008 	.word	0x07000008
 80066a4:	08008b64 	.word	0x08008b64
 80066a8:	07000308 	.word	0x07000308
 80066ac:	00000000 	.word	0x00000000

080066b0 <cosf>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	ee10 4a10 	vmov	r4, s0
 80066b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80066ba:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80066be:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80066c2:	d21e      	bcs.n	8006702 <cosf+0x52>
 80066c4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80066c8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80066cc:	d36f      	bcc.n	80067ae <cosf+0xfe>
 80066ce:	ee27 1b07 	vmul.f64	d1, d7, d7
 80066d2:	4b63      	ldr	r3, [pc, #396]	; (8006860 <cosf+0x1b0>)
 80066d4:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 80066d8:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 80066dc:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80066e0:	eea7 5b02 	vfma.f64	d5, d7, d2
 80066e4:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 80066e8:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 80066ec:	eea7 0b03 	vfma.f64	d0, d7, d3
 80066f0:	ee27 7b01 	vmul.f64	d7, d7, d1
 80066f4:	eea1 0b04 	vfma.f64	d0, d1, d4
 80066f8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80066fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006700:	bd38      	pop	{r3, r4, r5, pc}
 8006702:	f240 422e 	movw	r2, #1070	; 0x42e
 8006706:	4293      	cmp	r3, r2
 8006708:	d854      	bhi.n	80067b4 <cosf+0x104>
 800670a:	4955      	ldr	r1, [pc, #340]	; (8006860 <cosf+0x1b0>)
 800670c:	ed91 6b08 	vldr	d6, [r1, #32]
 8006710:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006714:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8006718:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
 800671c:	ee16 3a90 	vmov	r3, s13
 8006720:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8006724:	161b      	asrs	r3, r3, #24
 8006726:	f013 0f02 	tst.w	r3, #2
 800672a:	ee06 3a90 	vmov	s13, r3
 800672e:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8006732:	bf08      	it	eq
 8006734:	460a      	moveq	r2, r1
 8006736:	07d8      	lsls	r0, r3, #31
 8006738:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800673c:	eea6 7b45 	vfms.f64	d7, d6, d5
 8006740:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006744:	d51a      	bpl.n	800677c <cosf+0xcc>
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800674e:	ed93 2b00 	vldr	d2, [r3]
 8006752:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
 8006756:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
 800675a:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
 800675e:	eea6 5b04 	vfma.f64	d5, d6, d4
 8006762:	ee27 7b02 	vmul.f64	d7, d7, d2
 8006766:	ee27 4b06 	vmul.f64	d4, d7, d6
 800676a:	ee26 6b04 	vmul.f64	d6, d6, d4
 800676e:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006772:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006776:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
 8006780:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
 8006784:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
 8006788:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
 800678c:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
 8006790:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006794:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006798:	eea6 0b03 	vfma.f64	d0, d6, d3
 800679c:	ee26 6b05 	vmul.f64	d6, d6, d5
 80067a0:	eea5 0b04 	vfma.f64	d0, d5, d4
 80067a4:	eea7 0b06 	vfma.f64	d0, d7, d6
 80067a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80067b8:	d23d      	bcs.n	8006836 <cosf+0x186>
 80067ba:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <cosf+0x1b4>)
 80067bc:	f3c4 6283 	ubfx	r2, r4, #26, #4
 80067c0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 80067c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067c8:	690d      	ldr	r5, [r1, #16]
 80067ca:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80067ce:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80067d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067d6:	4083      	lsls	r3, r0
 80067d8:	6a08      	ldr	r0, [r1, #32]
 80067da:	fb03 f202 	mul.w	r2, r3, r2
 80067de:	fba3 1000 	umull	r1, r0, r3, r0
 80067e2:	fbe3 0205 	umlal	r0, r2, r3, r5
 80067e6:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 80067ea:	0f8d      	lsrs	r5, r1, #30
 80067ec:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80067f0:	1a51      	subs	r1, r2, r1
 80067f2:	f7f9 ff5b 	bl	80006ac <__aeabi_l2d>
 80067f6:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <cosf+0x1b8>)
 80067f8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8006858 <cosf+0x1a8>
 80067fc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006800:	ec41 0b16 	vmov	d6, r0, r1
 8006804:	f014 0f02 	tst.w	r4, #2
 8006808:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 800680c:	bf08      	it	eq
 800680e:	4613      	moveq	r3, r2
 8006810:	07e9      	lsls	r1, r5, #31
 8006812:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006816:	ee27 6b07 	vmul.f64	d6, d7, d7
 800681a:	d510      	bpl.n	800683e <cosf+0x18e>
 800681c:	f004 0403 	and.w	r4, r4, #3
 8006820:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8006824:	ed94 2b00 	vldr	d2, [r4]
 8006828:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 800682c:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006830:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
 8006834:	e793      	b.n	800675e <cosf+0xae>
 8006836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683a:	f000 b857 	b.w	80068ec <__math_invalidf>
 800683e:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006842:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006846:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800684a:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 800684e:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006852:	e79d      	b.n	8006790 <cosf+0xe0>
 8006854:	f3af 8000 	nop.w
 8006858:	54442d18 	.word	0x54442d18
 800685c:	3c1921fb 	.word	0x3c1921fb
 8006860:	08008d28 	.word	0x08008d28
 8006864:	08008cc8 	.word	0x08008cc8
 8006868:	08008d98 	.word	0x08008d98

0800686c <with_errnof>:
 800686c:	b510      	push	{r4, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006874:	4604      	mov	r4, r0
 8006876:	f000 fbc7 	bl	8007008 <__errno>
 800687a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800687e:	6004      	str	r4, [r0, #0]
 8006880:	b002      	add	sp, #8
 8006882:	bd10      	pop	{r4, pc}

08006884 <xflowf>:
 8006884:	b130      	cbz	r0, 8006894 <xflowf+0x10>
 8006886:	eef1 7a40 	vneg.f32	s15, s0
 800688a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800688e:	2022      	movs	r0, #34	; 0x22
 8006890:	f7ff bfec 	b.w	800686c <with_errnof>
 8006894:	eef0 7a40 	vmov.f32	s15, s0
 8006898:	ee27 0a80 	vmul.f32	s0, s15, s0
 800689c:	2022      	movs	r0, #34	; 0x22
 800689e:	f7ff bfe5 	b.w	800686c <with_errnof>
 80068a2:	bf00      	nop

080068a4 <__math_uflowf>:
 80068a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068ac <__math_uflowf+0x8>
 80068a8:	f7ff bfec 	b.w	8006884 <xflowf>
 80068ac:	10000000 	.word	0x10000000

080068b0 <__math_may_uflowf>:
 80068b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068b8 <__math_may_uflowf+0x8>
 80068b4:	f7ff bfe6 	b.w	8006884 <xflowf>
 80068b8:	1a200000 	.word	0x1a200000

080068bc <__math_oflowf>:
 80068bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068c4 <__math_oflowf+0x8>
 80068c0:	f7ff bfe0 	b.w	8006884 <xflowf>
 80068c4:	70000000 	.word	0x70000000

080068c8 <__math_divzerof>:
 80068c8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80068e8 <__math_divzerof+0x20>
 80068cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80068d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f04f 0022 	mov.w	r0, #34	; 0x22
 80068da:	fe47 7a27 	vseleq.f32	s15, s14, s15
 80068de:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80068e2:	f7ff bfc3 	b.w	800686c <with_errnof>
 80068e6:	bf00      	nop
 80068e8:	00000000 	.word	0x00000000

080068ec <__math_invalidf>:
 80068ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80068f0:	eeb4 0a40 	vcmp.f32	s0, s0
 80068f4:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006900:	d602      	bvs.n	8006908 <__math_invalidf+0x1c>
 8006902:	2021      	movs	r0, #33	; 0x21
 8006904:	f7ff bfb2 	b.w	800686c <with_errnof>
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop

0800690c <expf>:
 800690c:	ee10 3a10 	vmov	r3, s0
 8006910:	f240 412a 	movw	r1, #1066	; 0x42a
 8006914:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006918:	428a      	cmp	r2, r1
 800691a:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
 800691e:	d832      	bhi.n	8006986 <expf+0x7a>
 8006920:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006924:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <expf+0xd0>)
 8006926:	ed93 2b4a 	vldr	d2, [r3, #296]	; 0x128
 800692a:	ed93 1b48 	vldr	d1, [r3, #288]	; 0x120
 800692e:	eeb0 7b41 	vmov.f64	d7, d1
 8006932:	eea2 7b03 	vfma.f64	d7, d2, d3
 8006936:	ee17 0a10 	vmov	r0, s14
 800693a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800693e:	f000 021f 	and.w	r2, r0, #31
 8006942:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8006946:	b430      	push	{r4, r5}
 8006948:	ee92 7b03 	vfnms.f64	d7, d2, d3
 800694c:	ed93 4b4c 	vldr	d4, [r3, #304]	; 0x130
 8006950:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8006954:	684d      	ldr	r5, [r1, #4]
 8006956:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800695a:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800695e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8006962:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006966:	2100      	movs	r1, #0
 8006968:	190a      	adds	r2, r1, r4
 800696a:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800696e:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006972:	ec43 2b17 	vmov	d7, r2, r3
 8006976:	eea6 0b04 	vfma.f64	d0, d6, d4
 800697a:	bc30      	pop	{r4, r5}
 800697c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006980:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006984:	4770      	bx	lr
 8006986:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800698a:	d020      	beq.n	80069ce <expf+0xc2>
 800698c:	f5b2 6fff 	cmp.w	r2, #2040	; 0x7f8
 8006990:	d21a      	bcs.n	80069c8 <expf+0xbc>
 8006992:	eddf 7a13 	vldr	s15, [pc, #76]	; 80069e0 <expf+0xd4>
 8006996:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699e:	dc10      	bgt.n	80069c2 <expf+0xb6>
 80069a0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80069e4 <expf+0xd8>
 80069a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80069a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ac:	d412      	bmi.n	80069d4 <expf+0xc8>
 80069ae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80069e8 <expf+0xdc>
 80069b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80069b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ba:	d5b1      	bpl.n	8006920 <expf+0x14>
 80069bc:	2000      	movs	r0, #0
 80069be:	f7ff bf77 	b.w	80068b0 <__math_may_uflowf>
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7ff bf7a 	b.w	80068bc <__math_oflowf>
 80069c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069cc:	4770      	bx	lr
 80069ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80069ec <expf+0xe0>
 80069d2:	4770      	bx	lr
 80069d4:	2000      	movs	r0, #0
 80069d6:	f7ff bf65 	b.w	80068a4 <__math_uflowf>
 80069da:	bf00      	nop
 80069dc:	08008b80 	.word	0x08008b80
 80069e0:	42b17217 	.word	0x42b17217
 80069e4:	c2cff1b4 	.word	0xc2cff1b4
 80069e8:	c2ce8ecf 	.word	0xc2ce8ecf
 80069ec:	00000000 	.word	0x00000000

080069f0 <sinf>:
 80069f0:	b530      	push	{r4, r5, lr}
 80069f2:	ee10 4a10 	vmov	r4, s0
 80069f6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80069fa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80069fe:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006a02:	b083      	sub	sp, #12
 8006a04:	d21b      	bcs.n	8006a3e <sinf+0x4e>
 8006a06:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006a0a:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006a0e:	d370      	bcc.n	8006af2 <sinf+0x102>
 8006a10:	ee26 2b05 	vmul.f64	d2, d6, d5
 8006a14:	ee25 1b02 	vmul.f64	d1, d5, d2
 8006a18:	4b75      	ldr	r3, [pc, #468]	; (8006bf0 <sinf+0x200>)
 8006a1a:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
 8006a1e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006a22:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
 8006a26:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006a2a:	eea2 6b04 	vfma.f64	d6, d2, d4
 8006a2e:	eeb0 0b46 	vmov.f64	d0, d6
 8006a32:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006a36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a3a:	b003      	add	sp, #12
 8006a3c:	bd30      	pop	{r4, r5, pc}
 8006a3e:	f240 422e 	movw	r2, #1070	; 0x42e
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d860      	bhi.n	8006b08 <sinf+0x118>
 8006a46:	496a      	ldr	r1, [pc, #424]	; (8006bf0 <sinf+0x200>)
 8006a48:	ed91 7b08 	vldr	d7, [r1, #32]
 8006a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006a54:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
 8006a58:	ee17 3a90 	vmov	r3, s15
 8006a5c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8006a60:	161b      	asrs	r3, r3, #24
 8006a62:	f013 0f02 	tst.w	r3, #2
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8006a6e:	bf08      	it	eq
 8006a70:	460a      	moveq	r2, r1
 8006a72:	07d8      	lsls	r0, r3, #31
 8006a74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a78:	eea7 6b45 	vfms.f64	d6, d7, d5
 8006a7c:	eeb0 0b46 	vmov.f64	d0, d6
 8006a80:	ee26 7b06 	vmul.f64	d7, d6, d6
 8006a84:	d41b      	bmi.n	8006abe <sinf+0xce>
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8006a8e:	ed92 5b1a 	vldr	d5, [r2, #104]	; 0x68
 8006a92:	ed93 3b00 	vldr	d3, [r3]
 8006a96:	ed92 6b18 	vldr	d6, [r2, #96]	; 0x60
 8006a9a:	ee20 0b03 	vmul.f64	d0, d0, d3
 8006a9e:	ed92 4b16 	vldr	d4, [r2, #88]	; 0x58
 8006aa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006aa6:	ee20 5b07 	vmul.f64	d5, d0, d7
 8006aaa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006aae:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006ab2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006ab6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006aba:	b003      	add	sp, #12
 8006abc:	bd30      	pop	{r4, r5, pc}
 8006abe:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
 8006ac2:	ee27 5b07 	vmul.f64	d5, d7, d7
 8006ac6:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
 8006aca:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
 8006ace:	eea7 6b02 	vfma.f64	d6, d7, d2
 8006ad2:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
 8006ad6:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
 8006ada:	eea7 0b03 	vfma.f64	d0, d7, d3
 8006ade:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ae2:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006ae6:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006aea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006aee:	b003      	add	sp, #12
 8006af0:	bd30      	pop	{r4, r5, pc}
 8006af2:	0d22      	lsrs	r2, r4, #20
 8006af4:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8006af8:	d1df      	bne.n	8006aba <sinf+0xca>
 8006afa:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8006afe:	ee00 4a10 	vmov	s0, r4
 8006b02:	ed8d 5a01 	vstr	s10, [sp, #4]
 8006b06:	e7d8      	b.n	8006aba <sinf+0xca>
 8006b08:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006b0c:	d24b      	bcs.n	8006ba6 <sinf+0x1b6>
 8006b0e:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <sinf+0x204>)
 8006b10:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006b14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b1c:	690d      	ldr	r5, [r1, #16]
 8006b1e:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006b22:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b2a:	4083      	lsls	r3, r0
 8006b2c:	6a08      	ldr	r0, [r1, #32]
 8006b2e:	fb03 f202 	mul.w	r2, r3, r2
 8006b32:	fba3 1000 	umull	r1, r0, r3, r0
 8006b36:	fbe3 0205 	umlal	r0, r2, r3, r5
 8006b3a:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8006b3e:	0f8d      	lsrs	r5, r1, #30
 8006b40:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8006b44:	1a51      	subs	r1, r2, r1
 8006b46:	f7f9 fdb1 	bl	80006ac <__aeabi_l2d>
 8006b4a:	4b2b      	ldr	r3, [pc, #172]	; (8006bf8 <sinf+0x208>)
 8006b4c:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8006be8 <sinf+0x1f8>
 8006b50:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006b54:	ec41 0b16 	vmov	d6, r0, r1
 8006b58:	f014 0f02 	tst.w	r4, #2
 8006b5c:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8006b60:	bf08      	it	eq
 8006b62:	4613      	moveq	r3, r2
 8006b64:	07e9      	lsls	r1, r5, #31
 8006b66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b6a:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006b6e:	d41f      	bmi.n	8006bb0 <sinf+0x1c0>
 8006b70:	f004 0403 	and.w	r4, r4, #3
 8006b74:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8006b78:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8006b7c:	ed94 2b00 	vldr	d2, [r4]
 8006b80:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006b84:	ee27 7b02 	vmul.f64	d7, d7, d2
 8006b88:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
 8006b8c:	eea6 5b04 	vfma.f64	d5, d6, d4
 8006b90:	ee27 4b06 	vmul.f64	d4, d7, d6
 8006b94:	ee26 6b04 	vmul.f64	d6, d6, d4
 8006b98:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006b9c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006ba0:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8006ba4:	e789      	b.n	8006aba <sinf+0xca>
 8006ba6:	b003      	add	sp, #12
 8006ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bac:	f7ff be9e 	b.w	80068ec <__math_invalidf>
 8006bb0:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006bb4:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006bb8:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006bbc:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006bc0:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006bc4:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006bc8:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006bcc:	eea6 0b03 	vfma.f64	d0, d6, d3
 8006bd0:	ee26 6b05 	vmul.f64	d6, d6, d5
 8006bd4:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006bd8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8006bdc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006be0:	e76b      	b.n	8006aba <sinf+0xca>
 8006be2:	bf00      	nop
 8006be4:	f3af 8000 	nop.w
 8006be8:	54442d18 	.word	0x54442d18
 8006bec:	3c1921fb 	.word	0x3c1921fb
 8006bf0:	08008d28 	.word	0x08008d28
 8006bf4:	08008cc8 	.word	0x08008cc8
 8006bf8:	08008d98 	.word	0x08008d98

08006bfc <fmodf>:
 8006bfc:	b508      	push	{r3, lr}
 8006bfe:	ed2d 8b02 	vpush	{d8}
 8006c02:	eef0 8a40 	vmov.f32	s17, s0
 8006c06:	eeb0 8a60 	vmov.f32	s16, s1
 8006c0a:	f000 f84b 	bl	8006ca4 <__ieee754_fmodf>
 8006c0e:	eef4 8a48 	vcmp.f32	s17, s16
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	d606      	bvs.n	8006c26 <fmodf+0x2a>
 8006c18:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006c40 <fmodf+0x44>
 8006c1c:	eeb4 8a68 	vcmp.f32	s16, s17
 8006c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c24:	d002      	beq.n	8006c2c <fmodf+0x30>
 8006c26:	ecbd 8b02 	vpop	{d8}
 8006c2a:	bd08      	pop	{r3, pc}
 8006c2c:	f000 f9ec 	bl	8007008 <__errno>
 8006c30:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006c34:	ecbd 8b02 	vpop	{d8}
 8006c38:	2321      	movs	r3, #33	; 0x21
 8006c3a:	6003      	str	r3, [r0, #0]
 8006c3c:	bd08      	pop	{r3, pc}
 8006c3e:	bf00      	nop
 8006c40:	00000000 	.word	0x00000000

08006c44 <log10f>:
 8006c44:	b508      	push	{r3, lr}
 8006c46:	ed2d 8b02 	vpush	{d8}
 8006c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8006c4e:	f000 f8b9 	bl	8006dc4 <__ieee754_log10f>
 8006c52:	eeb4 8a48 	vcmp.f32	s16, s16
 8006c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5a:	d60f      	bvs.n	8006c7c <log10f+0x38>
 8006c5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c64:	d80a      	bhi.n	8006c7c <log10f+0x38>
 8006c66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6e:	d108      	bne.n	8006c82 <log10f+0x3e>
 8006c70:	f000 f9ca 	bl	8007008 <__errno>
 8006c74:	2322      	movs	r3, #34	; 0x22
 8006c76:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006c9c <log10f+0x58>
 8006c7a:	6003      	str	r3, [r0, #0]
 8006c7c:	ecbd 8b02 	vpop	{d8}
 8006c80:	bd08      	pop	{r3, pc}
 8006c82:	f000 f9c1 	bl	8007008 <__errno>
 8006c86:	ecbd 8b02 	vpop	{d8}
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2221      	movs	r2, #33	; 0x21
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	4803      	ldr	r0, [pc, #12]	; (8006ca0 <log10f+0x5c>)
 8006c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c96:	f000 b959 	b.w	8006f4c <nanf>
 8006c9a:	bf00      	nop
 8006c9c:	ff800000 	.word	0xff800000
 8006ca0:	08008740 	.word	0x08008740

08006ca4 <__ieee754_fmodf>:
 8006ca4:	b530      	push	{r4, r5, lr}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	edcd 0a01 	vstr	s1, [sp, #4]
 8006cac:	9d01      	ldr	r5, [sp, #4]
 8006cae:	f035 4000 	bics.w	r0, r5, #2147483648	; 0x80000000
 8006cb2:	d041      	beq.n	8006d38 <__ieee754_fmodf+0x94>
 8006cb4:	ee10 ea10 	vmov	lr, s0
 8006cb8:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
 8006cbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006cc0:	da3a      	bge.n	8006d38 <__ieee754_fmodf+0x94>
 8006cc2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006cc6:	dc37      	bgt.n	8006d38 <__ieee754_fmodf+0x94>
 8006cc8:	4283      	cmp	r3, r0
 8006cca:	db3b      	blt.n	8006d44 <__ieee754_fmodf+0xa0>
 8006ccc:	f00e 4400 	and.w	r4, lr, #2147483648	; 0x80000000
 8006cd0:	d03a      	beq.n	8006d48 <__ieee754_fmodf+0xa4>
 8006cd2:	f01e 4fff 	tst.w	lr, #2139095040	; 0x7f800000
 8006cd6:	d156      	bne.n	8006d86 <__ieee754_fmodf+0xe2>
 8006cd8:	0219      	lsls	r1, r3, #8
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006ce0:	dd04      	ble.n	8006cec <__ieee754_fmodf+0x48>
 8006ce2:	0049      	lsls	r1, r1, #1
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006cea:	dcfa      	bgt.n	8006ce2 <__ieee754_fmodf+0x3e>
 8006cec:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006cf0:	d157      	bne.n	8006da2 <__ieee754_fmodf+0xfe>
 8006cf2:	0201      	lsls	r1, r0, #8
 8006cf4:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 8006cf8:	d403      	bmi.n	8006d02 <__ieee754_fmodf+0x5e>
 8006cfa:	0049      	lsls	r1, r1, #1
 8006cfc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006d00:	d5fb      	bpl.n	8006cfa <__ieee754_fmodf+0x56>
 8006d02:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006d06:	db47      	blt.n	8006d98 <__ieee754_fmodf+0xf4>
 8006d08:	f3ce 0316 	ubfx	r3, lr, #0, #23
 8006d0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d10:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8006d14:	db3a      	blt.n	8006d8c <__ieee754_fmodf+0xe8>
 8006d16:	f3c5 0016 	ubfx	r0, r5, #0, #23
 8006d1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8006d22:	d104      	bne.n	8006d2e <__ieee754_fmodf+0x8a>
 8006d24:	e017      	b.n	8006d56 <__ieee754_fmodf+0xb2>
 8006d26:	d00f      	beq.n	8006d48 <__ieee754_fmodf+0xa4>
 8006d28:	004b      	lsls	r3, r1, #1
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	d013      	beq.n	8006d56 <__ieee754_fmodf+0xb2>
 8006d2e:	1a19      	subs	r1, r3, r0
 8006d30:	2900      	cmp	r1, #0
 8006d32:	daf8      	bge.n	8006d26 <__ieee754_fmodf+0x82>
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	e7f8      	b.n	8006d2a <__ieee754_fmodf+0x86>
 8006d38:	eddd 7a01 	vldr	s15, [sp, #4]
 8006d3c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006d40:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006d44:	b003      	add	sp, #12
 8006d46:	bd30      	pop	{r4, r5, pc}
 8006d48:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <__ieee754_fmodf+0x11c>)
 8006d4a:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 8006d4e:	ed93 0a00 	vldr	s0, [r3]
 8006d52:	b003      	add	sp, #12
 8006d54:	bd30      	pop	{r4, r5, pc}
 8006d56:	1a18      	subs	r0, r3, r0
 8006d58:	bf58      	it	pl
 8006d5a:	4603      	movpl	r3, r0
 8006d5c:	b91b      	cbnz	r3, 8006d66 <__ieee754_fmodf+0xc2>
 8006d5e:	e7f3      	b.n	8006d48 <__ieee754_fmodf+0xa4>
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d6a:	dbf9      	blt.n	8006d60 <__ieee754_fmodf+0xbc>
 8006d6c:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8006d70:	db1c      	blt.n	8006dac <__ieee754_fmodf+0x108>
 8006d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006d76:	f10c 0c7f 	add.w	ip, ip, #127	; 0x7f
 8006d7a:	4323      	orrs	r3, r4
 8006d7c:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
 8006d80:	ee00 3a10 	vmov	s0, r3
 8006d84:	e7de      	b.n	8006d44 <__ieee754_fmodf+0xa0>
 8006d86:	15da      	asrs	r2, r3, #23
 8006d88:	3a7f      	subs	r2, #127	; 0x7f
 8006d8a:	e7af      	b.n	8006cec <__ieee754_fmodf+0x48>
 8006d8c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8006d90:	eba1 010c 	sub.w	r1, r1, ip
 8006d94:	4088      	lsls	r0, r1
 8006d96:	e7c2      	b.n	8006d1e <__ieee754_fmodf+0x7a>
 8006d98:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8006d9c:	1a89      	subs	r1, r1, r2
 8006d9e:	408b      	lsls	r3, r1
 8006da0:	e7b6      	b.n	8006d10 <__ieee754_fmodf+0x6c>
 8006da2:	ea4f 5ce0 	mov.w	ip, r0, asr #23
 8006da6:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
 8006daa:	e7aa      	b.n	8006d02 <__ieee754_fmodf+0x5e>
 8006dac:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006db0:	eba2 0c0c 	sub.w	ip, r2, ip
 8006db4:	fa43 f30c 	asr.w	r3, r3, ip
 8006db8:	4323      	orrs	r3, r4
 8006dba:	ee00 3a10 	vmov	s0, r3
 8006dbe:	e7c1      	b.n	8006d44 <__ieee754_fmodf+0xa0>
 8006dc0:	08008e08 	.word	0x08008e08

08006dc4 <__ieee754_log10f>:
 8006dc4:	b508      	push	{r3, lr}
 8006dc6:	ee10 3a10 	vmov	r3, s0
 8006dca:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006dce:	ed2d 8b02 	vpush	{d8}
 8006dd2:	d02b      	beq.n	8006e2c <__ieee754_log10f+0x68>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	db32      	blt.n	8006e3e <__ieee754_log10f+0x7a>
 8006dd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ddc:	da41      	bge.n	8006e62 <__ieee754_log10f+0x9e>
 8006dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006de2:	db35      	blt.n	8006e50 <__ieee754_log10f+0x8c>
 8006de4:	2100      	movs	r1, #0
 8006de6:	15da      	asrs	r2, r3, #23
 8006de8:	3a7f      	subs	r2, #127	; 0x7f
 8006dea:	440a      	add	r2, r1
 8006dec:	0fd1      	lsrs	r1, r2, #31
 8006dee:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8006df2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8006df6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006dfa:	ee07 2a90 	vmov	s15, r2
 8006dfe:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8006e02:	ee00 3a10 	vmov	s0, r3
 8006e06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006e0a:	f000 f83b 	bl	8006e84 <logf>
 8006e0e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8006e6c <__ieee754_log10f+0xa8>
 8006e12:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006e70 <__ieee754_log10f+0xac>
 8006e16:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006e1a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006e74 <__ieee754_log10f+0xb0>
 8006e1e:	eea8 0a07 	vfma.f32	s0, s16, s14
 8006e22:	eea8 0a27 	vfma.f32	s0, s16, s15
 8006e26:	ecbd 8b02 	vpop	{d8}
 8006e2a:	bd08      	pop	{r3, pc}
 8006e2c:	ecbd 8b02 	vpop	{d8}
 8006e30:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006e78 <__ieee754_log10f+0xb4>
 8006e34:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006e7c <__ieee754_log10f+0xb8>
 8006e38:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006e3c:	bd08      	pop	{r3, pc}
 8006e3e:	ecbd 8b02 	vpop	{d8}
 8006e42:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006e46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006e7c <__ieee754_log10f+0xb8>
 8006e4a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8006e4e:	bd08      	pop	{r3, pc}
 8006e50:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006e80 <__ieee754_log10f+0xbc>
 8006e54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006e58:	f06f 0118 	mvn.w	r1, #24
 8006e5c:	ee17 3a90 	vmov	r3, s15
 8006e60:	e7c1      	b.n	8006de6 <__ieee754_log10f+0x22>
 8006e62:	ecbd 8b02 	vpop	{d8}
 8006e66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e6a:	bd08      	pop	{r3, pc}
 8006e6c:	3ede5bd9 	.word	0x3ede5bd9
 8006e70:	355427db 	.word	0x355427db
 8006e74:	3e9a2080 	.word	0x3e9a2080
 8006e78:	cc000000 	.word	0xcc000000
 8006e7c:	00000000 	.word	0x00000000
 8006e80:	4c000000 	.word	0x4c000000

08006e84 <logf>:
 8006e84:	ee10 3a10 	vmov	r3, s0
 8006e88:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006e8c:	ee10 1a10 	vmov	r1, s0
 8006e90:	d038      	beq.n	8006f04 <logf+0x80>
 8006e92:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8006e96:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8006e9a:	d236      	bcs.n	8006f0a <logf+0x86>
 8006e9c:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8006ea0:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8006ea4:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <logf+0xbc>)
 8006ea6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8006eaa:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8006eae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8006eb2:	ed93 4b40 	vldr	d4, [r3, #256]	; 0x100
 8006eb6:	ed93 5b44 	vldr	d5, [r3, #272]	; 0x110
 8006eba:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8006ebe:	ed93 6b42 	vldr	d6, [r3, #264]	; 0x108
 8006ec2:	0dd3      	lsrs	r3, r2, #23
 8006ec4:	05db      	lsls	r3, r3, #23
 8006ec6:	ed90 2b00 	vldr	d2, [r0]
 8006eca:	1acb      	subs	r3, r1, r3
 8006ecc:	ee03 3a90 	vmov	s7, r3
 8006ed0:	ed90 1b02 	vldr	d1, [r0, #8]
 8006ed4:	15d2      	asrs	r2, r2, #23
 8006ed6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8006eda:	eea2 0b03 	vfma.f64	d0, d2, d3
 8006ede:	ee03 2a90 	vmov	s7, r2
 8006ee2:	ee20 2b00 	vmul.f64	d2, d0, d0
 8006ee6:	eea5 7b00 	vfma.f64	d7, d5, d0
 8006eea:	eeb8 3be3 	vcvt.f64.s32	d3, s7
 8006eee:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006ef2:	eea3 1b04 	vfma.f64	d1, d3, d4
 8006ef6:	ee30 0b01 	vadd.f64	d0, d0, d1
 8006efa:	eea2 0b07 	vfma.f64	d0, d2, d7
 8006efe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006f02:	4770      	bx	lr
 8006f04:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8006f44 <logf+0xc0>
 8006f08:	4770      	bx	lr
 8006f0a:	005a      	lsls	r2, r3, #1
 8006f0c:	d014      	beq.n	8006f38 <logf+0xb4>
 8006f0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f12:	d014      	beq.n	8006f3e <logf+0xba>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	db0b      	blt.n	8006f30 <logf+0xac>
 8006f18:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8006f1c:	d208      	bcs.n	8006f30 <logf+0xac>
 8006f1e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8006f48 <logf+0xc4>
 8006f22:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006f26:	ee17 3a90 	vmov	r3, s15
 8006f2a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8006f2e:	e7b5      	b.n	8006e9c <logf+0x18>
 8006f30:	ee00 3a10 	vmov	s0, r3
 8006f34:	f7ff bcda 	b.w	80068ec <__math_invalidf>
 8006f38:	2001      	movs	r0, #1
 8006f3a:	f7ff bcc5 	b.w	80068c8 <__math_divzerof>
 8006f3e:	4770      	bx	lr
 8006f40:	08008e10 	.word	0x08008e10
 8006f44:	00000000 	.word	0x00000000
 8006f48:	4b000000 	.word	0x4b000000

08006f4c <nanf>:
 8006f4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f54 <nanf+0x8>
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	7fc00000 	.word	0x7fc00000

08006f58 <__assert_func>:
 8006f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f5a:	4614      	mov	r4, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <__assert_func+0x2c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4605      	mov	r5, r0
 8006f64:	68d8      	ldr	r0, [r3, #12]
 8006f66:	b14c      	cbz	r4, 8006f7c <__assert_func+0x24>
 8006f68:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <__assert_func+0x30>)
 8006f6a:	9100      	str	r1, [sp, #0]
 8006f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f70:	4906      	ldr	r1, [pc, #24]	; (8006f8c <__assert_func+0x34>)
 8006f72:	462b      	mov	r3, r5
 8006f74:	f000 f990 	bl	8007298 <fiprintf>
 8006f78:	f001 f858 	bl	800802c <abort>
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <__assert_func+0x38>)
 8006f7e:	461c      	mov	r4, r3
 8006f80:	e7f3      	b.n	8006f6a <__assert_func+0x12>
 8006f82:	bf00      	nop
 8006f84:	20000008 	.word	0x20000008
 8006f88:	08008f30 	.word	0x08008f30
 8006f8c:	08008f3d 	.word	0x08008f3d
 8006f90:	08008f6b 	.word	0x08008f6b

08006f94 <clearerr>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <clearerr+0x64>)
 8006f98:	681d      	ldr	r5, [r3, #0]
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	b125      	cbz	r5, 8006fa8 <clearerr+0x14>
 8006f9e:	69ab      	ldr	r3, [r5, #24]
 8006fa0:	b913      	cbnz	r3, 8006fa8 <clearerr+0x14>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 f8fa 	bl	800719c <__sinit>
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <clearerr+0x68>)
 8006faa:	429c      	cmp	r4, r3
 8006fac:	d118      	bne.n	8006fe0 <clearerr+0x4c>
 8006fae:	686c      	ldr	r4, [r5, #4]
 8006fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb2:	07d8      	lsls	r0, r3, #31
 8006fb4:	d405      	bmi.n	8006fc2 <clearerr+0x2e>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	0599      	lsls	r1, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <clearerr+0x2e>
 8006fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fbe:	f000 fa22 	bl	8007406 <__retarget_lock_acquire_recursive>
 8006fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fc8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006fcc:	07d2      	lsls	r2, r2, #31
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	d410      	bmi.n	8006ff4 <clearerr+0x60>
 8006fd2:	059b      	lsls	r3, r3, #22
 8006fd4:	d40e      	bmi.n	8006ff4 <clearerr+0x60>
 8006fd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fdc:	f000 ba14 	b.w	8007408 <__retarget_lock_release_recursive>
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <clearerr+0x6c>)
 8006fe2:	429c      	cmp	r4, r3
 8006fe4:	d101      	bne.n	8006fea <clearerr+0x56>
 8006fe6:	68ac      	ldr	r4, [r5, #8]
 8006fe8:	e7e2      	b.n	8006fb0 <clearerr+0x1c>
 8006fea:	4b06      	ldr	r3, [pc, #24]	; (8007004 <clearerr+0x70>)
 8006fec:	429c      	cmp	r4, r3
 8006fee:	bf08      	it	eq
 8006ff0:	68ec      	ldreq	r4, [r5, #12]
 8006ff2:	e7dd      	b.n	8006fb0 <clearerr+0x1c>
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000008 	.word	0x20000008
 8006ffc:	08008f8c 	.word	0x08008f8c
 8007000:	08008fac 	.word	0x08008fac
 8007004:	08008f6c 	.word	0x08008f6c

08007008 <__errno>:
 8007008:	4b01      	ldr	r3, [pc, #4]	; (8007010 <__errno+0x8>)
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000008 	.word	0x20000008

08007014 <feof>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4b16      	ldr	r3, [pc, #88]	; (8007070 <feof+0x5c>)
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	4604      	mov	r4, r0
 800701c:	b125      	cbz	r5, 8007028 <feof+0x14>
 800701e:	69ab      	ldr	r3, [r5, #24]
 8007020:	b913      	cbnz	r3, 8007028 <feof+0x14>
 8007022:	4628      	mov	r0, r5
 8007024:	f000 f8ba 	bl	800719c <__sinit>
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <feof+0x60>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d116      	bne.n	800705c <feof+0x48>
 800702e:	686c      	ldr	r4, [r5, #4]
 8007030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007032:	07d8      	lsls	r0, r3, #31
 8007034:	d405      	bmi.n	8007042 <feof+0x2e>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	0599      	lsls	r1, r3, #22
 800703a:	d402      	bmi.n	8007042 <feof+0x2e>
 800703c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703e:	f000 f9e2 	bl	8007406 <__retarget_lock_acquire_recursive>
 8007042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	07d2      	lsls	r2, r2, #31
 8007048:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800704c:	d404      	bmi.n	8007058 <feof+0x44>
 800704e:	059b      	lsls	r3, r3, #22
 8007050:	d402      	bmi.n	8007058 <feof+0x44>
 8007052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007054:	f000 f9d8 	bl	8007408 <__retarget_lock_release_recursive>
 8007058:	4628      	mov	r0, r5
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <feof+0x64>)
 800705e:	429c      	cmp	r4, r3
 8007060:	d101      	bne.n	8007066 <feof+0x52>
 8007062:	68ac      	ldr	r4, [r5, #8]
 8007064:	e7e4      	b.n	8007030 <feof+0x1c>
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <feof+0x68>)
 8007068:	429c      	cmp	r4, r3
 800706a:	bf08      	it	eq
 800706c:	68ec      	ldreq	r4, [r5, #12]
 800706e:	e7df      	b.n	8007030 <feof+0x1c>
 8007070:	20000008 	.word	0x20000008
 8007074:	08008f8c 	.word	0x08008f8c
 8007078:	08008fac 	.word	0x08008fac
 800707c:	08008f6c 	.word	0x08008f6c

08007080 <ferror>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4b16      	ldr	r3, [pc, #88]	; (80070dc <ferror+0x5c>)
 8007084:	681d      	ldr	r5, [r3, #0]
 8007086:	4604      	mov	r4, r0
 8007088:	b125      	cbz	r5, 8007094 <ferror+0x14>
 800708a:	69ab      	ldr	r3, [r5, #24]
 800708c:	b913      	cbnz	r3, 8007094 <ferror+0x14>
 800708e:	4628      	mov	r0, r5
 8007090:	f000 f884 	bl	800719c <__sinit>
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <ferror+0x60>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d116      	bne.n	80070c8 <ferror+0x48>
 800709a:	686c      	ldr	r4, [r5, #4]
 800709c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800709e:	07d8      	lsls	r0, r3, #31
 80070a0:	d405      	bmi.n	80070ae <ferror+0x2e>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	0599      	lsls	r1, r3, #22
 80070a6:	d402      	bmi.n	80070ae <ferror+0x2e>
 80070a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070aa:	f000 f9ac 	bl	8007406 <__retarget_lock_acquire_recursive>
 80070ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	07d2      	lsls	r2, r2, #31
 80070b4:	f3c3 1580 	ubfx	r5, r3, #6, #1
 80070b8:	d404      	bmi.n	80070c4 <ferror+0x44>
 80070ba:	059b      	lsls	r3, r3, #22
 80070bc:	d402      	bmi.n	80070c4 <ferror+0x44>
 80070be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c0:	f000 f9a2 	bl	8007408 <__retarget_lock_release_recursive>
 80070c4:	4628      	mov	r0, r5
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <ferror+0x64>)
 80070ca:	429c      	cmp	r4, r3
 80070cc:	d101      	bne.n	80070d2 <ferror+0x52>
 80070ce:	68ac      	ldr	r4, [r5, #8]
 80070d0:	e7e4      	b.n	800709c <ferror+0x1c>
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <ferror+0x68>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	bf08      	it	eq
 80070d8:	68ec      	ldreq	r4, [r5, #12]
 80070da:	e7df      	b.n	800709c <ferror+0x1c>
 80070dc:	20000008 	.word	0x20000008
 80070e0:	08008f8c 	.word	0x08008f8c
 80070e4:	08008fac 	.word	0x08008fac
 80070e8:	08008f6c 	.word	0x08008f6c

080070ec <std>:
 80070ec:	2300      	movs	r3, #0
 80070ee:	b510      	push	{r4, lr}
 80070f0:	4604      	mov	r4, r0
 80070f2:	e9c0 3300 	strd	r3, r3, [r0]
 80070f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070fa:	6083      	str	r3, [r0, #8]
 80070fc:	8181      	strh	r1, [r0, #12]
 80070fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007100:	81c2      	strh	r2, [r0, #14]
 8007102:	6183      	str	r3, [r0, #24]
 8007104:	4619      	mov	r1, r3
 8007106:	2208      	movs	r2, #8
 8007108:	305c      	adds	r0, #92	; 0x5c
 800710a:	f000 f98c 	bl	8007426 <memset>
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <std+0x38>)
 8007110:	6263      	str	r3, [r4, #36]	; 0x24
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <std+0x3c>)
 8007114:	62a3      	str	r3, [r4, #40]	; 0x28
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <std+0x40>)
 8007118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800711a:	4b05      	ldr	r3, [pc, #20]	; (8007130 <std+0x44>)
 800711c:	6224      	str	r4, [r4, #32]
 800711e:	6323      	str	r3, [r4, #48]	; 0x30
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop
 8007124:	08007da9 	.word	0x08007da9
 8007128:	08007dcb 	.word	0x08007dcb
 800712c:	08007e03 	.word	0x08007e03
 8007130:	08007e27 	.word	0x08007e27

08007134 <_cleanup_r>:
 8007134:	4901      	ldr	r1, [pc, #4]	; (800713c <_cleanup_r+0x8>)
 8007136:	f000 b8de 	b.w	80072f6 <_fwalk_reent>
 800713a:	bf00      	nop
 800713c:	08008169 	.word	0x08008169

08007140 <__sfmoreglue>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	2268      	movs	r2, #104	; 0x68
 8007144:	1e4d      	subs	r5, r1, #1
 8007146:	4355      	muls	r5, r2
 8007148:	460e      	mov	r6, r1
 800714a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800714e:	f000 f993 	bl	8007478 <_malloc_r>
 8007152:	4604      	mov	r4, r0
 8007154:	b140      	cbz	r0, 8007168 <__sfmoreglue+0x28>
 8007156:	2100      	movs	r1, #0
 8007158:	e9c0 1600 	strd	r1, r6, [r0]
 800715c:	300c      	adds	r0, #12
 800715e:	60a0      	str	r0, [r4, #8]
 8007160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007164:	f000 f95f 	bl	8007426 <memset>
 8007168:	4620      	mov	r0, r4
 800716a:	bd70      	pop	{r4, r5, r6, pc}

0800716c <__sfp_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sfp_lock_acquire+0x8>)
 800716e:	f000 b94a 	b.w	8007406 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20010ffd 	.word	0x20010ffd

08007178 <__sfp_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sfp_lock_release+0x8>)
 800717a:	f000 b945 	b.w	8007408 <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20010ffd 	.word	0x20010ffd

08007184 <__sinit_lock_acquire>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__sinit_lock_acquire+0x8>)
 8007186:	f000 b93e 	b.w	8007406 <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	20010ffe 	.word	0x20010ffe

08007190 <__sinit_lock_release>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__sinit_lock_release+0x8>)
 8007192:	f000 b939 	b.w	8007408 <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	20010ffe 	.word	0x20010ffe

0800719c <__sinit>:
 800719c:	b510      	push	{r4, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	f7ff fff0 	bl	8007184 <__sinit_lock_acquire>
 80071a4:	69a3      	ldr	r3, [r4, #24]
 80071a6:	b11b      	cbz	r3, 80071b0 <__sinit+0x14>
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ac:	f7ff bff0 	b.w	8007190 <__sinit_lock_release>
 80071b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071b4:	6523      	str	r3, [r4, #80]	; 0x50
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <__sinit+0x68>)
 80071b8:	4a13      	ldr	r2, [pc, #76]	; (8007208 <__sinit+0x6c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80071be:	42a3      	cmp	r3, r4
 80071c0:	bf04      	itt	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	61a3      	streq	r3, [r4, #24]
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f820 	bl	800720c <__sfp>
 80071cc:	6060      	str	r0, [r4, #4]
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f81c 	bl	800720c <__sfp>
 80071d4:	60a0      	str	r0, [r4, #8]
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 f818 	bl	800720c <__sfp>
 80071dc:	2200      	movs	r2, #0
 80071de:	60e0      	str	r0, [r4, #12]
 80071e0:	2104      	movs	r1, #4
 80071e2:	6860      	ldr	r0, [r4, #4]
 80071e4:	f7ff ff82 	bl	80070ec <std>
 80071e8:	68a0      	ldr	r0, [r4, #8]
 80071ea:	2201      	movs	r2, #1
 80071ec:	2109      	movs	r1, #9
 80071ee:	f7ff ff7d 	bl	80070ec <std>
 80071f2:	68e0      	ldr	r0, [r4, #12]
 80071f4:	2202      	movs	r2, #2
 80071f6:	2112      	movs	r1, #18
 80071f8:	f7ff ff78 	bl	80070ec <std>
 80071fc:	2301      	movs	r3, #1
 80071fe:	61a3      	str	r3, [r4, #24]
 8007200:	e7d2      	b.n	80071a8 <__sinit+0xc>
 8007202:	bf00      	nop
 8007204:	08008fcc 	.word	0x08008fcc
 8007208:	08007135 	.word	0x08007135

0800720c <__sfp>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	4607      	mov	r7, r0
 8007210:	f7ff ffac 	bl	800716c <__sfp_lock_acquire>
 8007214:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <__sfp+0x84>)
 8007216:	681e      	ldr	r6, [r3, #0]
 8007218:	69b3      	ldr	r3, [r6, #24]
 800721a:	b913      	cbnz	r3, 8007222 <__sfp+0x16>
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff ffbd 	bl	800719c <__sinit>
 8007222:	3648      	adds	r6, #72	; 0x48
 8007224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007228:	3b01      	subs	r3, #1
 800722a:	d503      	bpl.n	8007234 <__sfp+0x28>
 800722c:	6833      	ldr	r3, [r6, #0]
 800722e:	b30b      	cbz	r3, 8007274 <__sfp+0x68>
 8007230:	6836      	ldr	r6, [r6, #0]
 8007232:	e7f7      	b.n	8007224 <__sfp+0x18>
 8007234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007238:	b9d5      	cbnz	r5, 8007270 <__sfp+0x64>
 800723a:	4b16      	ldr	r3, [pc, #88]	; (8007294 <__sfp+0x88>)
 800723c:	60e3      	str	r3, [r4, #12]
 800723e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007242:	6665      	str	r5, [r4, #100]	; 0x64
 8007244:	f000 f8de 	bl	8007404 <__retarget_lock_init_recursive>
 8007248:	f7ff ff96 	bl	8007178 <__sfp_lock_release>
 800724c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007254:	6025      	str	r5, [r4, #0]
 8007256:	61a5      	str	r5, [r4, #24]
 8007258:	2208      	movs	r2, #8
 800725a:	4629      	mov	r1, r5
 800725c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007260:	f000 f8e1 	bl	8007426 <memset>
 8007264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800726c:	4620      	mov	r0, r4
 800726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007270:	3468      	adds	r4, #104	; 0x68
 8007272:	e7d9      	b.n	8007228 <__sfp+0x1c>
 8007274:	2104      	movs	r1, #4
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ff62 	bl	8007140 <__sfmoreglue>
 800727c:	4604      	mov	r4, r0
 800727e:	6030      	str	r0, [r6, #0]
 8007280:	2800      	cmp	r0, #0
 8007282:	d1d5      	bne.n	8007230 <__sfp+0x24>
 8007284:	f7ff ff78 	bl	8007178 <__sfp_lock_release>
 8007288:	230c      	movs	r3, #12
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	e7ee      	b.n	800726c <__sfp+0x60>
 800728e:	bf00      	nop
 8007290:	08008fcc 	.word	0x08008fcc
 8007294:	ffff0001 	.word	0xffff0001

08007298 <fiprintf>:
 8007298:	b40e      	push	{r1, r2, r3}
 800729a:	b503      	push	{r0, r1, lr}
 800729c:	4601      	mov	r1, r0
 800729e:	ab03      	add	r3, sp, #12
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <fiprintf+0x20>)
 80072a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a6:	6800      	ldr	r0, [r0, #0]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	f000 f983 	bl	80075b4 <_vfiprintf_r>
 80072ae:	b002      	add	sp, #8
 80072b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b4:	b003      	add	sp, #12
 80072b6:	4770      	bx	lr
 80072b8:	20000008 	.word	0x20000008

080072bc <_fwalk>:
 80072bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c0:	460f      	mov	r7, r1
 80072c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072c6:	2600      	movs	r6, #0
 80072c8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80072cc:	f1b8 0801 	subs.w	r8, r8, #1
 80072d0:	d505      	bpl.n	80072de <_fwalk+0x22>
 80072d2:	6824      	ldr	r4, [r4, #0]
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d1f7      	bne.n	80072c8 <_fwalk+0xc>
 80072d8:	4630      	mov	r0, r6
 80072da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072de:	89ab      	ldrh	r3, [r5, #12]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d906      	bls.n	80072f2 <_fwalk+0x36>
 80072e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072e8:	3301      	adds	r3, #1
 80072ea:	d002      	beq.n	80072f2 <_fwalk+0x36>
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	4306      	orrs	r6, r0
 80072f2:	3568      	adds	r5, #104	; 0x68
 80072f4:	e7ea      	b.n	80072cc <_fwalk+0x10>

080072f6 <_fwalk_reent>:
 80072f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072fa:	4606      	mov	r6, r0
 80072fc:	4688      	mov	r8, r1
 80072fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007302:	2700      	movs	r7, #0
 8007304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007308:	f1b9 0901 	subs.w	r9, r9, #1
 800730c:	d505      	bpl.n	800731a <_fwalk_reent+0x24>
 800730e:	6824      	ldr	r4, [r4, #0]
 8007310:	2c00      	cmp	r4, #0
 8007312:	d1f7      	bne.n	8007304 <_fwalk_reent+0xe>
 8007314:	4638      	mov	r0, r7
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d907      	bls.n	8007330 <_fwalk_reent+0x3a>
 8007320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007324:	3301      	adds	r3, #1
 8007326:	d003      	beq.n	8007330 <_fwalk_reent+0x3a>
 8007328:	4629      	mov	r1, r5
 800732a:	4630      	mov	r0, r6
 800732c:	47c0      	blx	r8
 800732e:	4307      	orrs	r7, r0
 8007330:	3568      	adds	r5, #104	; 0x68
 8007332:	e7e9      	b.n	8007308 <_fwalk_reent+0x12>

08007334 <getc>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <getc+0x78>)
 8007338:	681d      	ldr	r5, [r3, #0]
 800733a:	4604      	mov	r4, r0
 800733c:	b125      	cbz	r5, 8007348 <getc+0x14>
 800733e:	69ab      	ldr	r3, [r5, #24]
 8007340:	b913      	cbnz	r3, 8007348 <getc+0x14>
 8007342:	4628      	mov	r0, r5
 8007344:	f7ff ff2a 	bl	800719c <__sinit>
 8007348:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <getc+0x7c>)
 800734a:	429c      	cmp	r4, r3
 800734c:	d11e      	bne.n	800738c <getc+0x58>
 800734e:	686c      	ldr	r4, [r5, #4]
 8007350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007352:	07d8      	lsls	r0, r3, #31
 8007354:	d405      	bmi.n	8007362 <getc+0x2e>
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	0599      	lsls	r1, r3, #22
 800735a:	d402      	bmi.n	8007362 <getc+0x2e>
 800735c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735e:	f000 f852 	bl	8007406 <__retarget_lock_acquire_recursive>
 8007362:	6863      	ldr	r3, [r4, #4]
 8007364:	3b01      	subs	r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	da19      	bge.n	80073a0 <getc+0x6c>
 800736c:	4628      	mov	r0, r5
 800736e:	4621      	mov	r1, r4
 8007370:	f000 fcde 	bl	8007d30 <__srget_r>
 8007374:	4605      	mov	r5, r0
 8007376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007378:	07da      	lsls	r2, r3, #31
 800737a:	d405      	bmi.n	8007388 <getc+0x54>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	059b      	lsls	r3, r3, #22
 8007380:	d402      	bmi.n	8007388 <getc+0x54>
 8007382:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007384:	f000 f840 	bl	8007408 <__retarget_lock_release_recursive>
 8007388:	4628      	mov	r0, r5
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <getc+0x80>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d101      	bne.n	8007396 <getc+0x62>
 8007392:	68ac      	ldr	r4, [r5, #8]
 8007394:	e7dc      	b.n	8007350 <getc+0x1c>
 8007396:	4b08      	ldr	r3, [pc, #32]	; (80073b8 <getc+0x84>)
 8007398:	429c      	cmp	r4, r3
 800739a:	bf08      	it	eq
 800739c:	68ec      	ldreq	r4, [r5, #12]
 800739e:	e7d7      	b.n	8007350 <getc+0x1c>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	6022      	str	r2, [r4, #0]
 80073a6:	781d      	ldrb	r5, [r3, #0]
 80073a8:	e7e5      	b.n	8007376 <getc+0x42>
 80073aa:	bf00      	nop
 80073ac:	20000008 	.word	0x20000008
 80073b0:	08008f8c 	.word	0x08008f8c
 80073b4:	08008fac 	.word	0x08008fac
 80073b8:	08008f6c 	.word	0x08008f6c

080073bc <__libc_init_array>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	4d0d      	ldr	r5, [pc, #52]	; (80073f4 <__libc_init_array+0x38>)
 80073c0:	4c0d      	ldr	r4, [pc, #52]	; (80073f8 <__libc_init_array+0x3c>)
 80073c2:	1b64      	subs	r4, r4, r5
 80073c4:	10a4      	asrs	r4, r4, #2
 80073c6:	2600      	movs	r6, #0
 80073c8:	42a6      	cmp	r6, r4
 80073ca:	d109      	bne.n	80073e0 <__libc_init_array+0x24>
 80073cc:	4d0b      	ldr	r5, [pc, #44]	; (80073fc <__libc_init_array+0x40>)
 80073ce:	4c0c      	ldr	r4, [pc, #48]	; (8007400 <__libc_init_array+0x44>)
 80073d0:	f001 fe50 	bl	8009074 <_init>
 80073d4:	1b64      	subs	r4, r4, r5
 80073d6:	10a4      	asrs	r4, r4, #2
 80073d8:	2600      	movs	r6, #0
 80073da:	42a6      	cmp	r6, r4
 80073dc:	d105      	bne.n	80073ea <__libc_init_array+0x2e>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e4:	4798      	blx	r3
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7ee      	b.n	80073c8 <__libc_init_array+0xc>
 80073ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ee:	4798      	blx	r3
 80073f0:	3601      	adds	r6, #1
 80073f2:	e7f2      	b.n	80073da <__libc_init_array+0x1e>
 80073f4:	0800908c 	.word	0x0800908c
 80073f8:	0800908c 	.word	0x0800908c
 80073fc:	0800908c 	.word	0x0800908c
 8007400:	08009098 	.word	0x08009098

08007404 <__retarget_lock_init_recursive>:
 8007404:	4770      	bx	lr

08007406 <__retarget_lock_acquire_recursive>:
 8007406:	4770      	bx	lr

08007408 <__retarget_lock_release_recursive>:
 8007408:	4770      	bx	lr

0800740a <memcpy>:
 800740a:	440a      	add	r2, r1
 800740c:	4291      	cmp	r1, r2
 800740e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007412:	d100      	bne.n	8007416 <memcpy+0xc>
 8007414:	4770      	bx	lr
 8007416:	b510      	push	{r4, lr}
 8007418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800741c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007420:	4291      	cmp	r1, r2
 8007422:	d1f9      	bne.n	8007418 <memcpy+0xe>
 8007424:	bd10      	pop	{r4, pc}

08007426 <memset>:
 8007426:	4402      	add	r2, r0
 8007428:	4603      	mov	r3, r0
 800742a:	4293      	cmp	r3, r2
 800742c:	d100      	bne.n	8007430 <memset+0xa>
 800742e:	4770      	bx	lr
 8007430:	f803 1b01 	strb.w	r1, [r3], #1
 8007434:	e7f9      	b.n	800742a <memset+0x4>
	...

08007438 <sbrk_aligned>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4e0e      	ldr	r6, [pc, #56]	; (8007474 <sbrk_aligned+0x3c>)
 800743c:	460c      	mov	r4, r1
 800743e:	6831      	ldr	r1, [r6, #0]
 8007440:	4605      	mov	r5, r0
 8007442:	b911      	cbnz	r1, 800744a <sbrk_aligned+0x12>
 8007444:	f000 fca0 	bl	8007d88 <_sbrk_r>
 8007448:	6030      	str	r0, [r6, #0]
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 fc9b 	bl	8007d88 <_sbrk_r>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d00a      	beq.n	800746c <sbrk_aligned+0x34>
 8007456:	1cc4      	adds	r4, r0, #3
 8007458:	f024 0403 	bic.w	r4, r4, #3
 800745c:	42a0      	cmp	r0, r4
 800745e:	d007      	beq.n	8007470 <sbrk_aligned+0x38>
 8007460:	1a21      	subs	r1, r4, r0
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fc90 	bl	8007d88 <_sbrk_r>
 8007468:	3001      	adds	r0, #1
 800746a:	d101      	bne.n	8007470 <sbrk_aligned+0x38>
 800746c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007470:	4620      	mov	r0, r4
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	20011004 	.word	0x20011004

08007478 <_malloc_r>:
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	1ccd      	adds	r5, r1, #3
 800747e:	f025 0503 	bic.w	r5, r5, #3
 8007482:	3508      	adds	r5, #8
 8007484:	2d0c      	cmp	r5, #12
 8007486:	bf38      	it	cc
 8007488:	250c      	movcc	r5, #12
 800748a:	2d00      	cmp	r5, #0
 800748c:	4607      	mov	r7, r0
 800748e:	db01      	blt.n	8007494 <_malloc_r+0x1c>
 8007490:	42a9      	cmp	r1, r5
 8007492:	d905      	bls.n	80074a0 <_malloc_r+0x28>
 8007494:	230c      	movs	r3, #12
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	2600      	movs	r6, #0
 800749a:	4630      	mov	r0, r6
 800749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a0:	4e2e      	ldr	r6, [pc, #184]	; (800755c <_malloc_r+0xe4>)
 80074a2:	f000 ff41 	bl	8008328 <__malloc_lock>
 80074a6:	6833      	ldr	r3, [r6, #0]
 80074a8:	461c      	mov	r4, r3
 80074aa:	bb34      	cbnz	r4, 80074fa <_malloc_r+0x82>
 80074ac:	4629      	mov	r1, r5
 80074ae:	4638      	mov	r0, r7
 80074b0:	f7ff ffc2 	bl	8007438 <sbrk_aligned>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	4604      	mov	r4, r0
 80074b8:	d14d      	bne.n	8007556 <_malloc_r+0xde>
 80074ba:	6834      	ldr	r4, [r6, #0]
 80074bc:	4626      	mov	r6, r4
 80074be:	2e00      	cmp	r6, #0
 80074c0:	d140      	bne.n	8007544 <_malloc_r+0xcc>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	4631      	mov	r1, r6
 80074c6:	4638      	mov	r0, r7
 80074c8:	eb04 0803 	add.w	r8, r4, r3
 80074cc:	f000 fc5c 	bl	8007d88 <_sbrk_r>
 80074d0:	4580      	cmp	r8, r0
 80074d2:	d13a      	bne.n	800754a <_malloc_r+0xd2>
 80074d4:	6821      	ldr	r1, [r4, #0]
 80074d6:	3503      	adds	r5, #3
 80074d8:	1a6d      	subs	r5, r5, r1
 80074da:	f025 0503 	bic.w	r5, r5, #3
 80074de:	3508      	adds	r5, #8
 80074e0:	2d0c      	cmp	r5, #12
 80074e2:	bf38      	it	cc
 80074e4:	250c      	movcc	r5, #12
 80074e6:	4629      	mov	r1, r5
 80074e8:	4638      	mov	r0, r7
 80074ea:	f7ff ffa5 	bl	8007438 <sbrk_aligned>
 80074ee:	3001      	adds	r0, #1
 80074f0:	d02b      	beq.n	800754a <_malloc_r+0xd2>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	442b      	add	r3, r5
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	e00e      	b.n	8007518 <_malloc_r+0xa0>
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	1b52      	subs	r2, r2, r5
 80074fe:	d41e      	bmi.n	800753e <_malloc_r+0xc6>
 8007500:	2a0b      	cmp	r2, #11
 8007502:	d916      	bls.n	8007532 <_malloc_r+0xba>
 8007504:	1961      	adds	r1, r4, r5
 8007506:	42a3      	cmp	r3, r4
 8007508:	6025      	str	r5, [r4, #0]
 800750a:	bf18      	it	ne
 800750c:	6059      	strne	r1, [r3, #4]
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	bf08      	it	eq
 8007512:	6031      	streq	r1, [r6, #0]
 8007514:	5162      	str	r2, [r4, r5]
 8007516:	604b      	str	r3, [r1, #4]
 8007518:	4638      	mov	r0, r7
 800751a:	f104 060b 	add.w	r6, r4, #11
 800751e:	f000 ff09 	bl	8008334 <__malloc_unlock>
 8007522:	f026 0607 	bic.w	r6, r6, #7
 8007526:	1d23      	adds	r3, r4, #4
 8007528:	1af2      	subs	r2, r6, r3
 800752a:	d0b6      	beq.n	800749a <_malloc_r+0x22>
 800752c:	1b9b      	subs	r3, r3, r6
 800752e:	50a3      	str	r3, [r4, r2]
 8007530:	e7b3      	b.n	800749a <_malloc_r+0x22>
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	42a3      	cmp	r3, r4
 8007536:	bf0c      	ite	eq
 8007538:	6032      	streq	r2, [r6, #0]
 800753a:	605a      	strne	r2, [r3, #4]
 800753c:	e7ec      	b.n	8007518 <_malloc_r+0xa0>
 800753e:	4623      	mov	r3, r4
 8007540:	6864      	ldr	r4, [r4, #4]
 8007542:	e7b2      	b.n	80074aa <_malloc_r+0x32>
 8007544:	4634      	mov	r4, r6
 8007546:	6876      	ldr	r6, [r6, #4]
 8007548:	e7b9      	b.n	80074be <_malloc_r+0x46>
 800754a:	230c      	movs	r3, #12
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4638      	mov	r0, r7
 8007550:	f000 fef0 	bl	8008334 <__malloc_unlock>
 8007554:	e7a1      	b.n	800749a <_malloc_r+0x22>
 8007556:	6025      	str	r5, [r4, #0]
 8007558:	e7de      	b.n	8007518 <_malloc_r+0xa0>
 800755a:	bf00      	nop
 800755c:	20011000 	.word	0x20011000

08007560 <__sfputc_r>:
 8007560:	6893      	ldr	r3, [r2, #8]
 8007562:	3b01      	subs	r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	b410      	push	{r4}
 8007568:	6093      	str	r3, [r2, #8]
 800756a:	da08      	bge.n	800757e <__sfputc_r+0x1e>
 800756c:	6994      	ldr	r4, [r2, #24]
 800756e:	42a3      	cmp	r3, r4
 8007570:	db01      	blt.n	8007576 <__sfputc_r+0x16>
 8007572:	290a      	cmp	r1, #10
 8007574:	d103      	bne.n	800757e <__sfputc_r+0x1e>
 8007576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800757a:	f000 bc85 	b.w	8007e88 <__swbuf_r>
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	1c58      	adds	r0, r3, #1
 8007582:	6010      	str	r0, [r2, #0]
 8007584:	7019      	strb	r1, [r3, #0]
 8007586:	4608      	mov	r0, r1
 8007588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758c:	4770      	bx	lr

0800758e <__sfputs_r>:
 800758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007590:	4606      	mov	r6, r0
 8007592:	460f      	mov	r7, r1
 8007594:	4614      	mov	r4, r2
 8007596:	18d5      	adds	r5, r2, r3
 8007598:	42ac      	cmp	r4, r5
 800759a:	d101      	bne.n	80075a0 <__sfputs_r+0x12>
 800759c:	2000      	movs	r0, #0
 800759e:	e007      	b.n	80075b0 <__sfputs_r+0x22>
 80075a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a4:	463a      	mov	r2, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ffda 	bl	8007560 <__sfputc_r>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d1f3      	bne.n	8007598 <__sfputs_r+0xa>
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075b4 <_vfiprintf_r>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460d      	mov	r5, r1
 80075ba:	b09d      	sub	sp, #116	; 0x74
 80075bc:	4614      	mov	r4, r2
 80075be:	4698      	mov	r8, r3
 80075c0:	4606      	mov	r6, r0
 80075c2:	b118      	cbz	r0, 80075cc <_vfiprintf_r+0x18>
 80075c4:	6983      	ldr	r3, [r0, #24]
 80075c6:	b90b      	cbnz	r3, 80075cc <_vfiprintf_r+0x18>
 80075c8:	f7ff fde8 	bl	800719c <__sinit>
 80075cc:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <_vfiprintf_r+0x240>)
 80075ce:	429d      	cmp	r5, r3
 80075d0:	d11b      	bne.n	800760a <_vfiprintf_r+0x56>
 80075d2:	6875      	ldr	r5, [r6, #4]
 80075d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e2:	f7ff ff10 	bl	8007406 <__retarget_lock_acquire_recursive>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	071b      	lsls	r3, r3, #28
 80075ea:	d501      	bpl.n	80075f0 <_vfiprintf_r+0x3c>
 80075ec:	692b      	ldr	r3, [r5, #16]
 80075ee:	b9eb      	cbnz	r3, 800762c <_vfiprintf_r+0x78>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fcac 	bl	8007f50 <__swsetup_r>
 80075f8:	b1c0      	cbz	r0, 800762c <_vfiprintf_r+0x78>
 80075fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075fc:	07dc      	lsls	r4, r3, #31
 80075fe:	d50e      	bpl.n	800761e <_vfiprintf_r+0x6a>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007604:	b01d      	add	sp, #116	; 0x74
 8007606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <_vfiprintf_r+0x244>)
 800760c:	429d      	cmp	r5, r3
 800760e:	d101      	bne.n	8007614 <_vfiprintf_r+0x60>
 8007610:	68b5      	ldr	r5, [r6, #8]
 8007612:	e7df      	b.n	80075d4 <_vfiprintf_r+0x20>
 8007614:	4b79      	ldr	r3, [pc, #484]	; (80077fc <_vfiprintf_r+0x248>)
 8007616:	429d      	cmp	r5, r3
 8007618:	bf08      	it	eq
 800761a:	68f5      	ldreq	r5, [r6, #12]
 800761c:	e7da      	b.n	80075d4 <_vfiprintf_r+0x20>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	0598      	lsls	r0, r3, #22
 8007622:	d4ed      	bmi.n	8007600 <_vfiprintf_r+0x4c>
 8007624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007626:	f7ff feef 	bl	8007408 <__retarget_lock_release_recursive>
 800762a:	e7e9      	b.n	8007600 <_vfiprintf_r+0x4c>
 800762c:	2300      	movs	r3, #0
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	2320      	movs	r3, #32
 8007632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007636:	f8cd 800c 	str.w	r8, [sp, #12]
 800763a:	2330      	movs	r3, #48	; 0x30
 800763c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007800 <_vfiprintf_r+0x24c>
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	4623      	mov	r3, r4
 800764a:	469a      	mov	sl, r3
 800764c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007650:	b10a      	cbz	r2, 8007656 <_vfiprintf_r+0xa2>
 8007652:	2a25      	cmp	r2, #37	; 0x25
 8007654:	d1f9      	bne.n	800764a <_vfiprintf_r+0x96>
 8007656:	ebba 0b04 	subs.w	fp, sl, r4
 800765a:	d00b      	beq.n	8007674 <_vfiprintf_r+0xc0>
 800765c:	465b      	mov	r3, fp
 800765e:	4622      	mov	r2, r4
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff93 	bl	800758e <__sfputs_r>
 8007668:	3001      	adds	r0, #1
 800766a:	f000 80aa 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	445a      	add	r2, fp
 8007672:	9209      	str	r2, [sp, #36]	; 0x24
 8007674:	f89a 3000 	ldrb.w	r3, [sl]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80a2 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800767e:	2300      	movs	r3, #0
 8007680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007694:	931a      	str	r3, [sp, #104]	; 0x68
 8007696:	4654      	mov	r4, sl
 8007698:	2205      	movs	r2, #5
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4858      	ldr	r0, [pc, #352]	; (8007800 <_vfiprintf_r+0x24c>)
 80076a0:	f7f8 fe26 	bl	80002f0 <memchr>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	b9d8      	cbnz	r0, 80076e0 <_vfiprintf_r+0x12c>
 80076a8:	06d1      	lsls	r1, r2, #27
 80076aa:	bf44      	itt	mi
 80076ac:	2320      	movmi	r3, #32
 80076ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b2:	0713      	lsls	r3, r2, #28
 80076b4:	bf44      	itt	mi
 80076b6:	232b      	movmi	r3, #43	; 0x2b
 80076b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076bc:	f89a 3000 	ldrb.w	r3, [sl]
 80076c0:	2b2a      	cmp	r3, #42	; 0x2a
 80076c2:	d015      	beq.n	80076f0 <_vfiprintf_r+0x13c>
 80076c4:	9a07      	ldr	r2, [sp, #28]
 80076c6:	4654      	mov	r4, sl
 80076c8:	2000      	movs	r0, #0
 80076ca:	f04f 0c0a 	mov.w	ip, #10
 80076ce:	4621      	mov	r1, r4
 80076d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d4:	3b30      	subs	r3, #48	; 0x30
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d94e      	bls.n	8007778 <_vfiprintf_r+0x1c4>
 80076da:	b1b0      	cbz	r0, 800770a <_vfiprintf_r+0x156>
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	e014      	b.n	800770a <_vfiprintf_r+0x156>
 80076e0:	eba0 0308 	sub.w	r3, r0, r8
 80076e4:	fa09 f303 	lsl.w	r3, r9, r3
 80076e8:	4313      	orrs	r3, r2
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	46a2      	mov	sl, r4
 80076ee:	e7d2      	b.n	8007696 <_vfiprintf_r+0xe2>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	1d19      	adds	r1, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	9103      	str	r1, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfbb      	ittet	lt
 80076fc:	425b      	neglt	r3, r3
 80076fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007702:	9307      	strge	r3, [sp, #28]
 8007704:	9307      	strlt	r3, [sp, #28]
 8007706:	bfb8      	it	lt
 8007708:	9204      	strlt	r2, [sp, #16]
 800770a:	7823      	ldrb	r3, [r4, #0]
 800770c:	2b2e      	cmp	r3, #46	; 0x2e
 800770e:	d10c      	bne.n	800772a <_vfiprintf_r+0x176>
 8007710:	7863      	ldrb	r3, [r4, #1]
 8007712:	2b2a      	cmp	r3, #42	; 0x2a
 8007714:	d135      	bne.n	8007782 <_vfiprintf_r+0x1ce>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	9203      	str	r2, [sp, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007726:	3402      	adds	r4, #2
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007810 <_vfiprintf_r+0x25c>
 800772e:	7821      	ldrb	r1, [r4, #0]
 8007730:	2203      	movs	r2, #3
 8007732:	4650      	mov	r0, sl
 8007734:	f7f8 fddc 	bl	80002f0 <memchr>
 8007738:	b140      	cbz	r0, 800774c <_vfiprintf_r+0x198>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	eba0 000a 	sub.w	r0, r0, sl
 8007740:	fa03 f000 	lsl.w	r0, r3, r0
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	4303      	orrs	r3, r0
 8007748:	3401      	adds	r4, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	482c      	ldr	r0, [pc, #176]	; (8007804 <_vfiprintf_r+0x250>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	f7f8 fdca 	bl	80002f0 <memchr>
 800775c:	2800      	cmp	r0, #0
 800775e:	d03f      	beq.n	80077e0 <_vfiprintf_r+0x22c>
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <_vfiprintf_r+0x254>)
 8007762:	bb1b      	cbnz	r3, 80077ac <_vfiprintf_r+0x1f8>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	3307      	adds	r3, #7
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	443b      	add	r3, r7
 8007774:	9309      	str	r3, [sp, #36]	; 0x24
 8007776:	e767      	b.n	8007648 <_vfiprintf_r+0x94>
 8007778:	fb0c 3202 	mla	r2, ip, r2, r3
 800777c:	460c      	mov	r4, r1
 800777e:	2001      	movs	r0, #1
 8007780:	e7a5      	b.n	80076ce <_vfiprintf_r+0x11a>
 8007782:	2300      	movs	r3, #0
 8007784:	3401      	adds	r4, #1
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0c0a 	mov.w	ip, #10
 800778e:	4620      	mov	r0, r4
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	; 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_vfiprintf_r+0x1ee>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c5      	beq.n	800772a <_vfiprintf_r+0x176>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c3      	b.n	800772a <_vfiprintf_r+0x176>
 80077a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a6:	4604      	mov	r4, r0
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7f0      	b.n	800778e <_vfiprintf_r+0x1da>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <_vfiprintf_r+0x258>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4630      	mov	r0, r6
 80077b8:	f3af 8000 	nop.w
 80077bc:	4607      	mov	r7, r0
 80077be:	1c78      	adds	r0, r7, #1
 80077c0:	d1d6      	bne.n	8007770 <_vfiprintf_r+0x1bc>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07d9      	lsls	r1, r3, #31
 80077c6:	d405      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077c8:	89ab      	ldrh	r3, [r5, #12]
 80077ca:	059a      	lsls	r2, r3, #22
 80077cc:	d402      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d0:	f7ff fe1a 	bl	8007408 <__retarget_lock_release_recursive>
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	065b      	lsls	r3, r3, #25
 80077d8:	f53f af12 	bmi.w	8007600 <_vfiprintf_r+0x4c>
 80077dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077de:	e711      	b.n	8007604 <_vfiprintf_r+0x50>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <_vfiprintf_r+0x258>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4630      	mov	r0, r6
 80077ec:	f000 f880 	bl	80078f0 <_printf_i>
 80077f0:	e7e4      	b.n	80077bc <_vfiprintf_r+0x208>
 80077f2:	bf00      	nop
 80077f4:	08008f8c 	.word	0x08008f8c
 80077f8:	08008fac 	.word	0x08008fac
 80077fc:	08008f6c 	.word	0x08008f6c
 8007800:	08008fd0 	.word	0x08008fd0
 8007804:	08008fda 	.word	0x08008fda
 8007808:	00000000 	.word	0x00000000
 800780c:	0800758f 	.word	0x0800758f
 8007810:	08008fd6 	.word	0x08008fd6

08007814 <_printf_common>:
 8007814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	4616      	mov	r6, r2
 800781a:	4699      	mov	r9, r3
 800781c:	688a      	ldr	r2, [r1, #8]
 800781e:	690b      	ldr	r3, [r1, #16]
 8007820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007824:	4293      	cmp	r3, r2
 8007826:	bfb8      	it	lt
 8007828:	4613      	movlt	r3, r2
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007830:	4607      	mov	r7, r0
 8007832:	460c      	mov	r4, r1
 8007834:	b10a      	cbz	r2, 800783a <_printf_common+0x26>
 8007836:	3301      	adds	r3, #1
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	0699      	lsls	r1, r3, #26
 800783e:	bf42      	ittt	mi
 8007840:	6833      	ldrmi	r3, [r6, #0]
 8007842:	3302      	addmi	r3, #2
 8007844:	6033      	strmi	r3, [r6, #0]
 8007846:	6825      	ldr	r5, [r4, #0]
 8007848:	f015 0506 	ands.w	r5, r5, #6
 800784c:	d106      	bne.n	800785c <_printf_common+0x48>
 800784e:	f104 0a19 	add.w	sl, r4, #25
 8007852:	68e3      	ldr	r3, [r4, #12]
 8007854:	6832      	ldr	r2, [r6, #0]
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	42ab      	cmp	r3, r5
 800785a:	dc26      	bgt.n	80078aa <_printf_common+0x96>
 800785c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007860:	1e13      	subs	r3, r2, #0
 8007862:	6822      	ldr	r2, [r4, #0]
 8007864:	bf18      	it	ne
 8007866:	2301      	movne	r3, #1
 8007868:	0692      	lsls	r2, r2, #26
 800786a:	d42b      	bmi.n	80078c4 <_printf_common+0xb0>
 800786c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007870:	4649      	mov	r1, r9
 8007872:	4638      	mov	r0, r7
 8007874:	47c0      	blx	r8
 8007876:	3001      	adds	r0, #1
 8007878:	d01e      	beq.n	80078b8 <_printf_common+0xa4>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	68e5      	ldr	r5, [r4, #12]
 800787e:	6832      	ldr	r2, [r6, #0]
 8007880:	f003 0306 	and.w	r3, r3, #6
 8007884:	2b04      	cmp	r3, #4
 8007886:	bf08      	it	eq
 8007888:	1aad      	subeq	r5, r5, r2
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	6922      	ldr	r2, [r4, #16]
 800788e:	bf0c      	ite	eq
 8007890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007894:	2500      	movne	r5, #0
 8007896:	4293      	cmp	r3, r2
 8007898:	bfc4      	itt	gt
 800789a:	1a9b      	subgt	r3, r3, r2
 800789c:	18ed      	addgt	r5, r5, r3
 800789e:	2600      	movs	r6, #0
 80078a0:	341a      	adds	r4, #26
 80078a2:	42b5      	cmp	r5, r6
 80078a4:	d11a      	bne.n	80078dc <_printf_common+0xc8>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e008      	b.n	80078bc <_printf_common+0xa8>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4652      	mov	r2, sl
 80078ae:	4649      	mov	r1, r9
 80078b0:	4638      	mov	r0, r7
 80078b2:	47c0      	blx	r8
 80078b4:	3001      	adds	r0, #1
 80078b6:	d103      	bne.n	80078c0 <_printf_common+0xac>
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c0:	3501      	adds	r5, #1
 80078c2:	e7c6      	b.n	8007852 <_printf_common+0x3e>
 80078c4:	18e1      	adds	r1, r4, r3
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	2030      	movs	r0, #48	; 0x30
 80078ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078ce:	4422      	add	r2, r4
 80078d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078d8:	3302      	adds	r3, #2
 80078da:	e7c7      	b.n	800786c <_printf_common+0x58>
 80078dc:	2301      	movs	r3, #1
 80078de:	4622      	mov	r2, r4
 80078e0:	4649      	mov	r1, r9
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c0      	blx	r8
 80078e6:	3001      	adds	r0, #1
 80078e8:	d0e6      	beq.n	80078b8 <_printf_common+0xa4>
 80078ea:	3601      	adds	r6, #1
 80078ec:	e7d9      	b.n	80078a2 <_printf_common+0x8e>
	...

080078f0 <_printf_i>:
 80078f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	7e0f      	ldrb	r7, [r1, #24]
 80078f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078f8:	2f78      	cmp	r7, #120	; 0x78
 80078fa:	4691      	mov	r9, r2
 80078fc:	4680      	mov	r8, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	469a      	mov	sl, r3
 8007902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007906:	d807      	bhi.n	8007918 <_printf_i+0x28>
 8007908:	2f62      	cmp	r7, #98	; 0x62
 800790a:	d80a      	bhi.n	8007922 <_printf_i+0x32>
 800790c:	2f00      	cmp	r7, #0
 800790e:	f000 80d8 	beq.w	8007ac2 <_printf_i+0x1d2>
 8007912:	2f58      	cmp	r7, #88	; 0x58
 8007914:	f000 80a3 	beq.w	8007a5e <_printf_i+0x16e>
 8007918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800791c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007920:	e03a      	b.n	8007998 <_printf_i+0xa8>
 8007922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007926:	2b15      	cmp	r3, #21
 8007928:	d8f6      	bhi.n	8007918 <_printf_i+0x28>
 800792a:	a101      	add	r1, pc, #4	; (adr r1, 8007930 <_printf_i+0x40>)
 800792c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007930:	08007989 	.word	0x08007989
 8007934:	0800799d 	.word	0x0800799d
 8007938:	08007919 	.word	0x08007919
 800793c:	08007919 	.word	0x08007919
 8007940:	08007919 	.word	0x08007919
 8007944:	08007919 	.word	0x08007919
 8007948:	0800799d 	.word	0x0800799d
 800794c:	08007919 	.word	0x08007919
 8007950:	08007919 	.word	0x08007919
 8007954:	08007919 	.word	0x08007919
 8007958:	08007919 	.word	0x08007919
 800795c:	08007aa9 	.word	0x08007aa9
 8007960:	080079cd 	.word	0x080079cd
 8007964:	08007a8b 	.word	0x08007a8b
 8007968:	08007919 	.word	0x08007919
 800796c:	08007919 	.word	0x08007919
 8007970:	08007acb 	.word	0x08007acb
 8007974:	08007919 	.word	0x08007919
 8007978:	080079cd 	.word	0x080079cd
 800797c:	08007919 	.word	0x08007919
 8007980:	08007919 	.word	0x08007919
 8007984:	08007a93 	.word	0x08007a93
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	1d1a      	adds	r2, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	602a      	str	r2, [r5, #0]
 8007990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007998:	2301      	movs	r3, #1
 800799a:	e0a3      	b.n	8007ae4 <_printf_i+0x1f4>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	6829      	ldr	r1, [r5, #0]
 80079a0:	0606      	lsls	r6, r0, #24
 80079a2:	f101 0304 	add.w	r3, r1, #4
 80079a6:	d50a      	bpl.n	80079be <_printf_i+0xce>
 80079a8:	680e      	ldr	r6, [r1, #0]
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	2e00      	cmp	r6, #0
 80079ae:	da03      	bge.n	80079b8 <_printf_i+0xc8>
 80079b0:	232d      	movs	r3, #45	; 0x2d
 80079b2:	4276      	negs	r6, r6
 80079b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b8:	485e      	ldr	r0, [pc, #376]	; (8007b34 <_printf_i+0x244>)
 80079ba:	230a      	movs	r3, #10
 80079bc:	e019      	b.n	80079f2 <_printf_i+0x102>
 80079be:	680e      	ldr	r6, [r1, #0]
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079c6:	bf18      	it	ne
 80079c8:	b236      	sxthne	r6, r6
 80079ca:	e7ef      	b.n	80079ac <_printf_i+0xbc>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	1d19      	adds	r1, r3, #4
 80079d2:	6029      	str	r1, [r5, #0]
 80079d4:	0601      	lsls	r1, r0, #24
 80079d6:	d501      	bpl.n	80079dc <_printf_i+0xec>
 80079d8:	681e      	ldr	r6, [r3, #0]
 80079da:	e002      	b.n	80079e2 <_printf_i+0xf2>
 80079dc:	0646      	lsls	r6, r0, #25
 80079de:	d5fb      	bpl.n	80079d8 <_printf_i+0xe8>
 80079e0:	881e      	ldrh	r6, [r3, #0]
 80079e2:	4854      	ldr	r0, [pc, #336]	; (8007b34 <_printf_i+0x244>)
 80079e4:	2f6f      	cmp	r7, #111	; 0x6f
 80079e6:	bf0c      	ite	eq
 80079e8:	2308      	moveq	r3, #8
 80079ea:	230a      	movne	r3, #10
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079f2:	6865      	ldr	r5, [r4, #4]
 80079f4:	60a5      	str	r5, [r4, #8]
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	bfa2      	ittt	ge
 80079fa:	6821      	ldrge	r1, [r4, #0]
 80079fc:	f021 0104 	bicge.w	r1, r1, #4
 8007a00:	6021      	strge	r1, [r4, #0]
 8007a02:	b90e      	cbnz	r6, 8007a08 <_printf_i+0x118>
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	d04d      	beq.n	8007aa4 <_printf_i+0x1b4>
 8007a08:	4615      	mov	r5, r2
 8007a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a12:	5dc7      	ldrb	r7, [r0, r7]
 8007a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a18:	4637      	mov	r7, r6
 8007a1a:	42bb      	cmp	r3, r7
 8007a1c:	460e      	mov	r6, r1
 8007a1e:	d9f4      	bls.n	8007a0a <_printf_i+0x11a>
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d10b      	bne.n	8007a3c <_printf_i+0x14c>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	07de      	lsls	r6, r3, #31
 8007a28:	d508      	bpl.n	8007a3c <_printf_i+0x14c>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	bfde      	ittt	le
 8007a32:	2330      	movle	r3, #48	; 0x30
 8007a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a3c:	1b52      	subs	r2, r2, r5
 8007a3e:	6122      	str	r2, [r4, #16]
 8007a40:	f8cd a000 	str.w	sl, [sp]
 8007a44:	464b      	mov	r3, r9
 8007a46:	aa03      	add	r2, sp, #12
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fee2 	bl	8007814 <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d14c      	bne.n	8007aee <_printf_i+0x1fe>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a58:	b004      	add	sp, #16
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	4835      	ldr	r0, [pc, #212]	; (8007b34 <_printf_i+0x244>)
 8007a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a64:	6829      	ldr	r1, [r5, #0]
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a6c:	6029      	str	r1, [r5, #0]
 8007a6e:	061d      	lsls	r5, r3, #24
 8007a70:	d514      	bpl.n	8007a9c <_printf_i+0x1ac>
 8007a72:	07df      	lsls	r7, r3, #31
 8007a74:	bf44      	itt	mi
 8007a76:	f043 0320 	orrmi.w	r3, r3, #32
 8007a7a:	6023      	strmi	r3, [r4, #0]
 8007a7c:	b91e      	cbnz	r6, 8007a86 <_printf_i+0x196>
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	f023 0320 	bic.w	r3, r3, #32
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	2310      	movs	r3, #16
 8007a88:	e7b0      	b.n	80079ec <_printf_i+0xfc>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	f043 0320 	orr.w	r3, r3, #32
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	2378      	movs	r3, #120	; 0x78
 8007a94:	4828      	ldr	r0, [pc, #160]	; (8007b38 <_printf_i+0x248>)
 8007a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a9a:	e7e3      	b.n	8007a64 <_printf_i+0x174>
 8007a9c:	0659      	lsls	r1, r3, #25
 8007a9e:	bf48      	it	mi
 8007aa0:	b2b6      	uxthmi	r6, r6
 8007aa2:	e7e6      	b.n	8007a72 <_printf_i+0x182>
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	e7bb      	b.n	8007a20 <_printf_i+0x130>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	6826      	ldr	r6, [r4, #0]
 8007aac:	6961      	ldr	r1, [r4, #20]
 8007aae:	1d18      	adds	r0, r3, #4
 8007ab0:	6028      	str	r0, [r5, #0]
 8007ab2:	0635      	lsls	r5, r6, #24
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	d501      	bpl.n	8007abc <_printf_i+0x1cc>
 8007ab8:	6019      	str	r1, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <_printf_i+0x1d2>
 8007abc:	0670      	lsls	r0, r6, #25
 8007abe:	d5fb      	bpl.n	8007ab8 <_printf_i+0x1c8>
 8007ac0:	8019      	strh	r1, [r3, #0]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6123      	str	r3, [r4, #16]
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	e7ba      	b.n	8007a40 <_printf_i+0x150>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	602a      	str	r2, [r5, #0]
 8007ad0:	681d      	ldr	r5, [r3, #0]
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7f8 fc0a 	bl	80002f0 <memchr>
 8007adc:	b108      	cbz	r0, 8007ae2 <_printf_i+0x1f2>
 8007ade:	1b40      	subs	r0, r0, r5
 8007ae0:	6060      	str	r0, [r4, #4]
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aec:	e7a8      	b.n	8007a40 <_printf_i+0x150>
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	462a      	mov	r2, r5
 8007af2:	4649      	mov	r1, r9
 8007af4:	4640      	mov	r0, r8
 8007af6:	47d0      	blx	sl
 8007af8:	3001      	adds	r0, #1
 8007afa:	d0ab      	beq.n	8007a54 <_printf_i+0x164>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	079b      	lsls	r3, r3, #30
 8007b00:	d413      	bmi.n	8007b2a <_printf_i+0x23a>
 8007b02:	68e0      	ldr	r0, [r4, #12]
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	4298      	cmp	r0, r3
 8007b08:	bfb8      	it	lt
 8007b0a:	4618      	movlt	r0, r3
 8007b0c:	e7a4      	b.n	8007a58 <_printf_i+0x168>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4632      	mov	r2, r6
 8007b12:	4649      	mov	r1, r9
 8007b14:	4640      	mov	r0, r8
 8007b16:	47d0      	blx	sl
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d09b      	beq.n	8007a54 <_printf_i+0x164>
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	68e3      	ldr	r3, [r4, #12]
 8007b20:	9903      	ldr	r1, [sp, #12]
 8007b22:	1a5b      	subs	r3, r3, r1
 8007b24:	42ab      	cmp	r3, r5
 8007b26:	dcf2      	bgt.n	8007b0e <_printf_i+0x21e>
 8007b28:	e7eb      	b.n	8007b02 <_printf_i+0x212>
 8007b2a:	2500      	movs	r5, #0
 8007b2c:	f104 0619 	add.w	r6, r4, #25
 8007b30:	e7f5      	b.n	8007b1e <_printf_i+0x22e>
 8007b32:	bf00      	nop
 8007b34:	08008fe1 	.word	0x08008fe1
 8007b38:	08008ff2 	.word	0x08008ff2

08007b3c <iprintf>:
 8007b3c:	b40f      	push	{r0, r1, r2, r3}
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <iprintf+0x2c>)
 8007b40:	b513      	push	{r0, r1, r4, lr}
 8007b42:	681c      	ldr	r4, [r3, #0]
 8007b44:	b124      	cbz	r4, 8007b50 <iprintf+0x14>
 8007b46:	69a3      	ldr	r3, [r4, #24]
 8007b48:	b913      	cbnz	r3, 8007b50 <iprintf+0x14>
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f7ff fb26 	bl	800719c <__sinit>
 8007b50:	ab05      	add	r3, sp, #20
 8007b52:	9a04      	ldr	r2, [sp, #16]
 8007b54:	68a1      	ldr	r1, [r4, #8]
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff fd2b 	bl	80075b4 <_vfiprintf_r>
 8007b5e:	b002      	add	sp, #8
 8007b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b64:	b004      	add	sp, #16
 8007b66:	4770      	bx	lr
 8007b68:	20000008 	.word	0x20000008

08007b6c <_puts_r>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	460e      	mov	r6, r1
 8007b70:	4605      	mov	r5, r0
 8007b72:	b118      	cbz	r0, 8007b7c <_puts_r+0x10>
 8007b74:	6983      	ldr	r3, [r0, #24]
 8007b76:	b90b      	cbnz	r3, 8007b7c <_puts_r+0x10>
 8007b78:	f7ff fb10 	bl	800719c <__sinit>
 8007b7c:	69ab      	ldr	r3, [r5, #24]
 8007b7e:	68ac      	ldr	r4, [r5, #8]
 8007b80:	b913      	cbnz	r3, 8007b88 <_puts_r+0x1c>
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7ff fb0a 	bl	800719c <__sinit>
 8007b88:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <_puts_r+0xd0>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	d120      	bne.n	8007bd0 <_puts_r+0x64>
 8007b8e:	686c      	ldr	r4, [r5, #4]
 8007b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b92:	07db      	lsls	r3, r3, #31
 8007b94:	d405      	bmi.n	8007ba2 <_puts_r+0x36>
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	0598      	lsls	r0, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_puts_r+0x36>
 8007b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9e:	f7ff fc32 	bl	8007406 <__retarget_lock_acquire_recursive>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	0719      	lsls	r1, r3, #28
 8007ba6:	d51d      	bpl.n	8007be4 <_puts_r+0x78>
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	b1db      	cbz	r3, 8007be4 <_puts_r+0x78>
 8007bac:	3e01      	subs	r6, #1
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	bb39      	cbnz	r1, 8007c0a <_puts_r+0x9e>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da38      	bge.n	8007c30 <_puts_r+0xc4>
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	210a      	movs	r1, #10
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f960 	bl	8007e88 <__swbuf_r>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d011      	beq.n	8007bf0 <_puts_r+0x84>
 8007bcc:	250a      	movs	r5, #10
 8007bce:	e011      	b.n	8007bf4 <_puts_r+0x88>
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <_puts_r+0xd4>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d101      	bne.n	8007bda <_puts_r+0x6e>
 8007bd6:	68ac      	ldr	r4, [r5, #8]
 8007bd8:	e7da      	b.n	8007b90 <_puts_r+0x24>
 8007bda:	4b1a      	ldr	r3, [pc, #104]	; (8007c44 <_puts_r+0xd8>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	bf08      	it	eq
 8007be0:	68ec      	ldreq	r4, [r5, #12]
 8007be2:	e7d5      	b.n	8007b90 <_puts_r+0x24>
 8007be4:	4621      	mov	r1, r4
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 f9b2 	bl	8007f50 <__swsetup_r>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d0dd      	beq.n	8007bac <_puts_r+0x40>
 8007bf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bf6:	07da      	lsls	r2, r3, #31
 8007bf8:	d405      	bmi.n	8007c06 <_puts_r+0x9a>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	059b      	lsls	r3, r3, #22
 8007bfe:	d402      	bmi.n	8007c06 <_puts_r+0x9a>
 8007c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c02:	f7ff fc01 	bl	8007408 <__retarget_lock_release_recursive>
 8007c06:	4628      	mov	r0, r5
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da04      	bge.n	8007c18 <_puts_r+0xac>
 8007c0e:	69a2      	ldr	r2, [r4, #24]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	dc06      	bgt.n	8007c22 <_puts_r+0xb6>
 8007c14:	290a      	cmp	r1, #10
 8007c16:	d004      	beq.n	8007c22 <_puts_r+0xb6>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	6022      	str	r2, [r4, #0]
 8007c1e:	7019      	strb	r1, [r3, #0]
 8007c20:	e7c5      	b.n	8007bae <_puts_r+0x42>
 8007c22:	4622      	mov	r2, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 f92f 	bl	8007e88 <__swbuf_r>
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d1bf      	bne.n	8007bae <_puts_r+0x42>
 8007c2e:	e7df      	b.n	8007bf0 <_puts_r+0x84>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	250a      	movs	r5, #10
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	6022      	str	r2, [r4, #0]
 8007c38:	701d      	strb	r5, [r3, #0]
 8007c3a:	e7db      	b.n	8007bf4 <_puts_r+0x88>
 8007c3c:	08008f8c 	.word	0x08008f8c
 8007c40:	08008fac 	.word	0x08008fac
 8007c44:	08008f6c 	.word	0x08008f6c

08007c48 <puts>:
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <puts+0xc>)
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	f7ff bf8d 	b.w	8007b6c <_puts_r>
 8007c52:	bf00      	nop
 8007c54:	20000008 	.word	0x20000008

08007c58 <srand>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <srand+0x44>)
 8007c5c:	681d      	ldr	r5, [r3, #0]
 8007c5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007c60:	4604      	mov	r4, r0
 8007c62:	b9b3      	cbnz	r3, 8007c92 <srand+0x3a>
 8007c64:	2018      	movs	r0, #24
 8007c66:	f000 fb57 	bl	8008318 <malloc>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	63a8      	str	r0, [r5, #56]	; 0x38
 8007c6e:	b920      	cbnz	r0, 8007c7a <srand+0x22>
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <srand+0x48>)
 8007c72:	480c      	ldr	r0, [pc, #48]	; (8007ca4 <srand+0x4c>)
 8007c74:	2142      	movs	r1, #66	; 0x42
 8007c76:	f7ff f96f 	bl	8006f58 <__assert_func>
 8007c7a:	490b      	ldr	r1, [pc, #44]	; (8007ca8 <srand+0x50>)
 8007c7c:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <srand+0x54>)
 8007c7e:	e9c0 1300 	strd	r1, r3, [r0]
 8007c82:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <srand+0x58>)
 8007c84:	6083      	str	r3, [r0, #8]
 8007c86:	230b      	movs	r3, #11
 8007c88:	8183      	strh	r3, [r0, #12]
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007c92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007c94:	2200      	movs	r2, #0
 8007c96:	611c      	str	r4, [r3, #16]
 8007c98:	615a      	str	r2, [r3, #20]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000008 	.word	0x20000008
 8007ca0:	08009003 	.word	0x08009003
 8007ca4:	0800901a 	.word	0x0800901a
 8007ca8:	abcd330e 	.word	0xabcd330e
 8007cac:	e66d1234 	.word	0xe66d1234
 8007cb0:	0005deec 	.word	0x0005deec

08007cb4 <rand>:
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <rand+0x5c>)
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	681c      	ldr	r4, [r3, #0]
 8007cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cbc:	b9b3      	cbnz	r3, 8007cec <rand+0x38>
 8007cbe:	2018      	movs	r0, #24
 8007cc0:	f000 fb2a 	bl	8008318 <malloc>
 8007cc4:	63a0      	str	r0, [r4, #56]	; 0x38
 8007cc6:	b928      	cbnz	r0, 8007cd4 <rand+0x20>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <rand+0x60>)
 8007ccc:	4812      	ldr	r0, [pc, #72]	; (8007d18 <rand+0x64>)
 8007cce:	214e      	movs	r1, #78	; 0x4e
 8007cd0:	f7ff f942 	bl	8006f58 <__assert_func>
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <rand+0x68>)
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <rand+0x6c>)
 8007cd8:	e9c0 2300 	strd	r2, r3, [r0]
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <rand+0x70>)
 8007cde:	6083      	str	r3, [r0, #8]
 8007ce0:	230b      	movs	r3, #11
 8007ce2:	8183      	strh	r3, [r0, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007cec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007cee:	4a0e      	ldr	r2, [pc, #56]	; (8007d28 <rand+0x74>)
 8007cf0:	6920      	ldr	r0, [r4, #16]
 8007cf2:	6963      	ldr	r3, [r4, #20]
 8007cf4:	490d      	ldr	r1, [pc, #52]	; (8007d2c <rand+0x78>)
 8007cf6:	4342      	muls	r2, r0
 8007cf8:	fb01 2203 	mla	r2, r1, r3, r2
 8007cfc:	fba0 0101 	umull	r0, r1, r0, r1
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	eb42 0001 	adc.w	r0, r2, r1
 8007d06:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007d0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	20000008 	.word	0x20000008
 8007d14:	08009003 	.word	0x08009003
 8007d18:	0800901a 	.word	0x0800901a
 8007d1c:	abcd330e 	.word	0xabcd330e
 8007d20:	e66d1234 	.word	0xe66d1234
 8007d24:	0005deec 	.word	0x0005deec
 8007d28:	5851f42d 	.word	0x5851f42d
 8007d2c:	4c957f2d 	.word	0x4c957f2d

08007d30 <__srget_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	460c      	mov	r4, r1
 8007d34:	4605      	mov	r5, r0
 8007d36:	b118      	cbz	r0, 8007d40 <__srget_r+0x10>
 8007d38:	6983      	ldr	r3, [r0, #24]
 8007d3a:	b90b      	cbnz	r3, 8007d40 <__srget_r+0x10>
 8007d3c:	f7ff fa2e 	bl	800719c <__sinit>
 8007d40:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <__srget_r+0x4c>)
 8007d42:	429c      	cmp	r4, r3
 8007d44:	d10d      	bne.n	8007d62 <__srget_r+0x32>
 8007d46:	686c      	ldr	r4, [r5, #4]
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 fb60 	bl	8008410 <__srefill_r>
 8007d50:	b988      	cbnz	r0, 8007d76 <__srget_r+0x46>
 8007d52:	6863      	ldr	r3, [r4, #4]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	6063      	str	r3, [r4, #4]
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	7818      	ldrb	r0, [r3, #0]
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <__srget_r+0x50>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d101      	bne.n	8007d6c <__srget_r+0x3c>
 8007d68:	68ac      	ldr	r4, [r5, #8]
 8007d6a:	e7ed      	b.n	8007d48 <__srget_r+0x18>
 8007d6c:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <__srget_r+0x54>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	bf08      	it	eq
 8007d72:	68ec      	ldreq	r4, [r5, #12]
 8007d74:	e7e8      	b.n	8007d48 <__srget_r+0x18>
 8007d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d7a:	e7f1      	b.n	8007d60 <__srget_r+0x30>
 8007d7c:	08008f8c 	.word	0x08008f8c
 8007d80:	08008fac 	.word	0x08008fac
 8007d84:	08008f6c 	.word	0x08008f6c

08007d88 <_sbrk_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d06      	ldr	r5, [pc, #24]	; (8007da4 <_sbrk_r+0x1c>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f000 fc64 	bl	8008660 <_sbrk>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_sbrk_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_sbrk_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	20011008 	.word	0x20011008

08007da8 <__sread>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	460c      	mov	r4, r1
 8007dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db0:	f000 fb12 	bl	80083d8 <_read_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	bfab      	itete	ge
 8007db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dba:	89a3      	ldrhlt	r3, [r4, #12]
 8007dbc:	181b      	addge	r3, r3, r0
 8007dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dc2:	bfac      	ite	ge
 8007dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dc6:	81a3      	strhlt	r3, [r4, #12]
 8007dc8:	bd10      	pop	{r4, pc}

08007dca <__swrite>:
 8007dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dce:	461f      	mov	r7, r3
 8007dd0:	898b      	ldrh	r3, [r1, #12]
 8007dd2:	05db      	lsls	r3, r3, #23
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	4616      	mov	r6, r2
 8007dda:	d505      	bpl.n	8007de8 <__swrite+0x1e>
 8007ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de0:	2302      	movs	r3, #2
 8007de2:	2200      	movs	r2, #0
 8007de4:	f000 fa20 	bl	8008228 <_lseek_r>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	4632      	mov	r2, r6
 8007df6:	463b      	mov	r3, r7
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfe:	f000 b895 	b.w	8007f2c <_write_r>

08007e02 <__sseek>:
 8007e02:	b510      	push	{r4, lr}
 8007e04:	460c      	mov	r4, r1
 8007e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0a:	f000 fa0d 	bl	8008228 <_lseek_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	bf15      	itete	ne
 8007e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e1e:	81a3      	strheq	r3, [r4, #12]
 8007e20:	bf18      	it	ne
 8007e22:	81a3      	strhne	r3, [r4, #12]
 8007e24:	bd10      	pop	{r4, pc}

08007e26 <__sclose>:
 8007e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2a:	f000 b907 	b.w	800803c <_close_r>

08007e2e <strncpy>:
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	3901      	subs	r1, #1
 8007e32:	4603      	mov	r3, r0
 8007e34:	b132      	cbz	r2, 8007e44 <strncpy+0x16>
 8007e36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e3a:	f803 4b01 	strb.w	r4, [r3], #1
 8007e3e:	3a01      	subs	r2, #1
 8007e40:	2c00      	cmp	r4, #0
 8007e42:	d1f7      	bne.n	8007e34 <strncpy+0x6>
 8007e44:	441a      	add	r2, r3
 8007e46:	2100      	movs	r1, #0
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <strncpy+0x20>
 8007e4c:	bd10      	pop	{r4, pc}
 8007e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e52:	e7f9      	b.n	8007e48 <strncpy+0x1a>

08007e54 <time>:
 8007e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e56:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <time+0x30>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4669      	mov	r1, sp
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	f000 f9d0 	bl	8008204 <_gettimeofday_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	bfbe      	ittt	lt
 8007e68:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8007e6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e70:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e78:	b10c      	cbz	r4, 8007e7e <time+0x2a>
 8007e7a:	e9c4 0100 	strd	r0, r1, [r4]
 8007e7e:	b004      	add	sp, #16
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	bf00      	nop
 8007e84:	20000008 	.word	0x20000008

08007e88 <__swbuf_r>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	460e      	mov	r6, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	4605      	mov	r5, r0
 8007e90:	b118      	cbz	r0, 8007e9a <__swbuf_r+0x12>
 8007e92:	6983      	ldr	r3, [r0, #24]
 8007e94:	b90b      	cbnz	r3, 8007e9a <__swbuf_r+0x12>
 8007e96:	f7ff f981 	bl	800719c <__sinit>
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <__swbuf_r+0x98>)
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	d12b      	bne.n	8007ef8 <__swbuf_r+0x70>
 8007ea0:	686c      	ldr	r4, [r5, #4]
 8007ea2:	69a3      	ldr	r3, [r4, #24]
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	071a      	lsls	r2, r3, #28
 8007eaa:	d52f      	bpl.n	8007f0c <__swbuf_r+0x84>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	b36b      	cbz	r3, 8007f0c <__swbuf_r+0x84>
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1ac0      	subs	r0, r0, r3
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	b2f6      	uxtb	r6, r6
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	4637      	mov	r7, r6
 8007ebe:	dc04      	bgt.n	8007eca <__swbuf_r+0x42>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 f950 	bl	8008168 <_fflush_r>
 8007ec8:	bb30      	cbnz	r0, 8007f18 <__swbuf_r+0x90>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	701e      	strb	r6, [r3, #0]
 8007ed8:	6963      	ldr	r3, [r4, #20]
 8007eda:	3001      	adds	r0, #1
 8007edc:	4283      	cmp	r3, r0
 8007ede:	d004      	beq.n	8007eea <__swbuf_r+0x62>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d506      	bpl.n	8007ef4 <__swbuf_r+0x6c>
 8007ee6:	2e0a      	cmp	r6, #10
 8007ee8:	d104      	bne.n	8007ef4 <__swbuf_r+0x6c>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f93b 	bl	8008168 <_fflush_r>
 8007ef2:	b988      	cbnz	r0, 8007f18 <__swbuf_r+0x90>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <__swbuf_r+0x9c>)
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d101      	bne.n	8007f02 <__swbuf_r+0x7a>
 8007efe:	68ac      	ldr	r4, [r5, #8]
 8007f00:	e7cf      	b.n	8007ea2 <__swbuf_r+0x1a>
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <__swbuf_r+0xa0>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	bf08      	it	eq
 8007f08:	68ec      	ldreq	r4, [r5, #12]
 8007f0a:	e7ca      	b.n	8007ea2 <__swbuf_r+0x1a>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 f81e 	bl	8007f50 <__swsetup_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d0cb      	beq.n	8007eb0 <__swbuf_r+0x28>
 8007f18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f1c:	e7ea      	b.n	8007ef4 <__swbuf_r+0x6c>
 8007f1e:	bf00      	nop
 8007f20:	08008f8c 	.word	0x08008f8c
 8007f24:	08008fac 	.word	0x08008fac
 8007f28:	08008f6c 	.word	0x08008f6c

08007f2c <_write_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_write_r+0x20>)
 8007f30:	4604      	mov	r4, r0
 8007f32:	4608      	mov	r0, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f7fc fa7a 	bl	8004434 <_write>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_write_r+0x1e>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_write_r+0x1e>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	20011008 	.word	0x20011008

08007f50 <__swsetup_r>:
 8007f50:	4b32      	ldr	r3, [pc, #200]	; (800801c <__swsetup_r+0xcc>)
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	4606      	mov	r6, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	b125      	cbz	r5, 8007f66 <__swsetup_r+0x16>
 8007f5c:	69ab      	ldr	r3, [r5, #24]
 8007f5e:	b913      	cbnz	r3, 8007f66 <__swsetup_r+0x16>
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7ff f91b 	bl	800719c <__sinit>
 8007f66:	4b2e      	ldr	r3, [pc, #184]	; (8008020 <__swsetup_r+0xd0>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	d10f      	bne.n	8007f8c <__swsetup_r+0x3c>
 8007f6c:	686c      	ldr	r4, [r5, #4]
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f74:	0719      	lsls	r1, r3, #28
 8007f76:	d42c      	bmi.n	8007fd2 <__swsetup_r+0x82>
 8007f78:	06dd      	lsls	r5, r3, #27
 8007f7a:	d411      	bmi.n	8007fa0 <__swsetup_r+0x50>
 8007f7c:	2309      	movs	r3, #9
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8a:	e03e      	b.n	800800a <__swsetup_r+0xba>
 8007f8c:	4b25      	ldr	r3, [pc, #148]	; (8008024 <__swsetup_r+0xd4>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d101      	bne.n	8007f96 <__swsetup_r+0x46>
 8007f92:	68ac      	ldr	r4, [r5, #8]
 8007f94:	e7eb      	b.n	8007f6e <__swsetup_r+0x1e>
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <__swsetup_r+0xd8>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	bf08      	it	eq
 8007f9c:	68ec      	ldreq	r4, [r5, #12]
 8007f9e:	e7e6      	b.n	8007f6e <__swsetup_r+0x1e>
 8007fa0:	0758      	lsls	r0, r3, #29
 8007fa2:	d512      	bpl.n	8007fca <__swsetup_r+0x7a>
 8007fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa6:	b141      	cbz	r1, 8007fba <__swsetup_r+0x6a>
 8007fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d002      	beq.n	8007fb6 <__swsetup_r+0x66>
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f9c5 	bl	8008340 <_free_r>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6063      	str	r3, [r4, #4]
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0308 	orr.w	r3, r3, #8
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	b94b      	cbnz	r3, 8007fea <__swsetup_r+0x9a>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe0:	d003      	beq.n	8007fea <__swsetup_r+0x9a>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f000 f957 	bl	8008298 <__smakebuf_r>
 8007fea:	89a0      	ldrh	r0, [r4, #12]
 8007fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ff0:	f010 0301 	ands.w	r3, r0, #1
 8007ff4:	d00a      	beq.n	800800c <__swsetup_r+0xbc>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	6963      	ldr	r3, [r4, #20]
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	61a3      	str	r3, [r4, #24]
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b943      	cbnz	r3, 8008016 <__swsetup_r+0xc6>
 8008004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008008:	d1ba      	bne.n	8007f80 <__swsetup_r+0x30>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	0781      	lsls	r1, r0, #30
 800800e:	bf58      	it	pl
 8008010:	6963      	ldrpl	r3, [r4, #20]
 8008012:	60a3      	str	r3, [r4, #8]
 8008014:	e7f4      	b.n	8008000 <__swsetup_r+0xb0>
 8008016:	2000      	movs	r0, #0
 8008018:	e7f7      	b.n	800800a <__swsetup_r+0xba>
 800801a:	bf00      	nop
 800801c:	20000008 	.word	0x20000008
 8008020:	08008f8c 	.word	0x08008f8c
 8008024:	08008fac 	.word	0x08008fac
 8008028:	08008f6c 	.word	0x08008f6c

0800802c <abort>:
 800802c:	b508      	push	{r3, lr}
 800802e:	2006      	movs	r0, #6
 8008030:	f000 faa0 	bl	8008574 <raise>
 8008034:	2001      	movs	r0, #1
 8008036:	f000 fb21 	bl	800867c <_exit>
	...

0800803c <_close_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d06      	ldr	r5, [pc, #24]	; (8008058 <_close_r+0x1c>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	602b      	str	r3, [r5, #0]
 8008048:	f000 fad2 	bl	80085f0 <_close>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_close_r+0x1a>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_close_r+0x1a>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	20011008 	.word	0x20011008

0800805c <__sflush_r>:
 800805c:	898a      	ldrh	r2, [r1, #12]
 800805e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008062:	4605      	mov	r5, r0
 8008064:	0710      	lsls	r0, r2, #28
 8008066:	460c      	mov	r4, r1
 8008068:	d458      	bmi.n	800811c <__sflush_r+0xc0>
 800806a:	684b      	ldr	r3, [r1, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dc05      	bgt.n	800807c <__sflush_r+0x20>
 8008070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc02      	bgt.n	800807c <__sflush_r+0x20>
 8008076:	2000      	movs	r0, #0
 8008078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800807e:	2e00      	cmp	r6, #0
 8008080:	d0f9      	beq.n	8008076 <__sflush_r+0x1a>
 8008082:	2300      	movs	r3, #0
 8008084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008088:	682f      	ldr	r7, [r5, #0]
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	d032      	beq.n	80080f4 <__sflush_r+0x98>
 800808e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	075a      	lsls	r2, r3, #29
 8008094:	d505      	bpl.n	80080a2 <__sflush_r+0x46>
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	1ac0      	subs	r0, r0, r3
 800809a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800809c:	b10b      	cbz	r3, 80080a2 <__sflush_r+0x46>
 800809e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	2300      	movs	r3, #0
 80080a4:	4602      	mov	r2, r0
 80080a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b0      	blx	r6
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	d106      	bne.n	80080c2 <__sflush_r+0x66>
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	291d      	cmp	r1, #29
 80080b8:	d82c      	bhi.n	8008114 <__sflush_r+0xb8>
 80080ba:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <__sflush_r+0x108>)
 80080bc:	40ca      	lsrs	r2, r1
 80080be:	07d6      	lsls	r6, r2, #31
 80080c0:	d528      	bpl.n	8008114 <__sflush_r+0xb8>
 80080c2:	2200      	movs	r2, #0
 80080c4:	6062      	str	r2, [r4, #4]
 80080c6:	04d9      	lsls	r1, r3, #19
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	d504      	bpl.n	80080d8 <__sflush_r+0x7c>
 80080ce:	1c42      	adds	r2, r0, #1
 80080d0:	d101      	bne.n	80080d6 <__sflush_r+0x7a>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	b903      	cbnz	r3, 80080d8 <__sflush_r+0x7c>
 80080d6:	6560      	str	r0, [r4, #84]	; 0x54
 80080d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080da:	602f      	str	r7, [r5, #0]
 80080dc:	2900      	cmp	r1, #0
 80080de:	d0ca      	beq.n	8008076 <__sflush_r+0x1a>
 80080e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d002      	beq.n	80080ee <__sflush_r+0x92>
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 f929 	bl	8008340 <_free_r>
 80080ee:	2000      	movs	r0, #0
 80080f0:	6360      	str	r0, [r4, #52]	; 0x34
 80080f2:	e7c1      	b.n	8008078 <__sflush_r+0x1c>
 80080f4:	6a21      	ldr	r1, [r4, #32]
 80080f6:	2301      	movs	r3, #1
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b0      	blx	r6
 80080fc:	1c41      	adds	r1, r0, #1
 80080fe:	d1c7      	bne.n	8008090 <__sflush_r+0x34>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0c4      	beq.n	8008090 <__sflush_r+0x34>
 8008106:	2b1d      	cmp	r3, #29
 8008108:	d001      	beq.n	800810e <__sflush_r+0xb2>
 800810a:	2b16      	cmp	r3, #22
 800810c:	d101      	bne.n	8008112 <__sflush_r+0xb6>
 800810e:	602f      	str	r7, [r5, #0]
 8008110:	e7b1      	b.n	8008076 <__sflush_r+0x1a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	e7ad      	b.n	8008078 <__sflush_r+0x1c>
 800811c:	690f      	ldr	r7, [r1, #16]
 800811e:	2f00      	cmp	r7, #0
 8008120:	d0a9      	beq.n	8008076 <__sflush_r+0x1a>
 8008122:	0793      	lsls	r3, r2, #30
 8008124:	680e      	ldr	r6, [r1, #0]
 8008126:	bf08      	it	eq
 8008128:	694b      	ldreq	r3, [r1, #20]
 800812a:	600f      	str	r7, [r1, #0]
 800812c:	bf18      	it	ne
 800812e:	2300      	movne	r3, #0
 8008130:	eba6 0807 	sub.w	r8, r6, r7
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	dd9c      	ble.n	8008076 <__sflush_r+0x1a>
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008140:	4643      	mov	r3, r8
 8008142:	463a      	mov	r2, r7
 8008144:	4628      	mov	r0, r5
 8008146:	47b0      	blx	r6
 8008148:	2800      	cmp	r0, #0
 800814a:	dc06      	bgt.n	800815a <__sflush_r+0xfe>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008158:	e78e      	b.n	8008078 <__sflush_r+0x1c>
 800815a:	4407      	add	r7, r0
 800815c:	eba8 0800 	sub.w	r8, r8, r0
 8008160:	e7e9      	b.n	8008136 <__sflush_r+0xda>
 8008162:	bf00      	nop
 8008164:	20400001 	.word	0x20400001

08008168 <_fflush_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	690b      	ldr	r3, [r1, #16]
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b913      	cbnz	r3, 8008178 <_fflush_r+0x10>
 8008172:	2500      	movs	r5, #0
 8008174:	4628      	mov	r0, r5
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	b118      	cbz	r0, 8008182 <_fflush_r+0x1a>
 800817a:	6983      	ldr	r3, [r0, #24]
 800817c:	b90b      	cbnz	r3, 8008182 <_fflush_r+0x1a>
 800817e:	f7ff f80d 	bl	800719c <__sinit>
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <_fflush_r+0x6c>)
 8008184:	429c      	cmp	r4, r3
 8008186:	d11b      	bne.n	80081c0 <_fflush_r+0x58>
 8008188:	686c      	ldr	r4, [r5, #4]
 800818a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0ef      	beq.n	8008172 <_fflush_r+0xa>
 8008192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008194:	07d0      	lsls	r0, r2, #31
 8008196:	d404      	bmi.n	80081a2 <_fflush_r+0x3a>
 8008198:	0599      	lsls	r1, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_fflush_r+0x3a>
 800819c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819e:	f7ff f932 	bl	8007406 <__retarget_lock_acquire_recursive>
 80081a2:	4628      	mov	r0, r5
 80081a4:	4621      	mov	r1, r4
 80081a6:	f7ff ff59 	bl	800805c <__sflush_r>
 80081aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ac:	07da      	lsls	r2, r3, #31
 80081ae:	4605      	mov	r5, r0
 80081b0:	d4e0      	bmi.n	8008174 <_fflush_r+0xc>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	059b      	lsls	r3, r3, #22
 80081b6:	d4dd      	bmi.n	8008174 <_fflush_r+0xc>
 80081b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ba:	f7ff f925 	bl	8007408 <__retarget_lock_release_recursive>
 80081be:	e7d9      	b.n	8008174 <_fflush_r+0xc>
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <_fflush_r+0x70>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	d101      	bne.n	80081ca <_fflush_r+0x62>
 80081c6:	68ac      	ldr	r4, [r5, #8]
 80081c8:	e7df      	b.n	800818a <_fflush_r+0x22>
 80081ca:	4b04      	ldr	r3, [pc, #16]	; (80081dc <_fflush_r+0x74>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	bf08      	it	eq
 80081d0:	68ec      	ldreq	r4, [r5, #12]
 80081d2:	e7da      	b.n	800818a <_fflush_r+0x22>
 80081d4:	08008f8c 	.word	0x08008f8c
 80081d8:	08008fac 	.word	0x08008fac
 80081dc:	08008f6c 	.word	0x08008f6c

080081e0 <fflush>:
 80081e0:	4601      	mov	r1, r0
 80081e2:	b920      	cbnz	r0, 80081ee <fflush+0xe>
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <fflush+0x18>)
 80081e6:	4905      	ldr	r1, [pc, #20]	; (80081fc <fflush+0x1c>)
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f7ff b884 	b.w	80072f6 <_fwalk_reent>
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <fflush+0x20>)
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	f7ff bfb9 	b.w	8008168 <_fflush_r>
 80081f6:	bf00      	nop
 80081f8:	08008fcc 	.word	0x08008fcc
 80081fc:	08008169 	.word	0x08008169
 8008200:	20000008 	.word	0x20000008

08008204 <_gettimeofday_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	; (8008224 <_gettimeofday_r+0x20>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f000 fa05 	bl	8008620 <_gettimeofday>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d102      	bne.n	8008220 <_gettimeofday_r+0x1c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	b103      	cbz	r3, 8008220 <_gettimeofday_r+0x1c>
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	20011008 	.word	0x20011008

08008228 <_lseek_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d07      	ldr	r5, [pc, #28]	; (8008248 <_lseek_r+0x20>)
 800822c:	4604      	mov	r4, r0
 800822e:	4608      	mov	r0, r1
 8008230:	4611      	mov	r1, r2
 8008232:	2200      	movs	r2, #0
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f000 fa0a 	bl	8008650 <_lseek>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_lseek_r+0x1e>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_lseek_r+0x1e>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	20011008 	.word	0x20011008

0800824c <__swhatbuf_r>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	460e      	mov	r6, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	2900      	cmp	r1, #0
 8008256:	b096      	sub	sp, #88	; 0x58
 8008258:	4614      	mov	r4, r2
 800825a:	461d      	mov	r5, r3
 800825c:	da08      	bge.n	8008270 <__swhatbuf_r+0x24>
 800825e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	602a      	str	r2, [r5, #0]
 8008266:	061a      	lsls	r2, r3, #24
 8008268:	d410      	bmi.n	800828c <__swhatbuf_r+0x40>
 800826a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800826e:	e00e      	b.n	800828e <__swhatbuf_r+0x42>
 8008270:	466a      	mov	r2, sp
 8008272:	f000 f99b 	bl	80085ac <_fstat_r>
 8008276:	2800      	cmp	r0, #0
 8008278:	dbf1      	blt.n	800825e <__swhatbuf_r+0x12>
 800827a:	9a01      	ldr	r2, [sp, #4]
 800827c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008280:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008284:	425a      	negs	r2, r3
 8008286:	415a      	adcs	r2, r3
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	e7ee      	b.n	800826a <__swhatbuf_r+0x1e>
 800828c:	2340      	movs	r3, #64	; 0x40
 800828e:	2000      	movs	r0, #0
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	b016      	add	sp, #88	; 0x58
 8008294:	bd70      	pop	{r4, r5, r6, pc}
	...

08008298 <__smakebuf_r>:
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800829c:	079d      	lsls	r5, r3, #30
 800829e:	4606      	mov	r6, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	d507      	bpl.n	80082b4 <__smakebuf_r+0x1c>
 80082a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	2301      	movs	r3, #1
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	b002      	add	sp, #8
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	ab01      	add	r3, sp, #4
 80082b6:	466a      	mov	r2, sp
 80082b8:	f7ff ffc8 	bl	800824c <__swhatbuf_r>
 80082bc:	9900      	ldr	r1, [sp, #0]
 80082be:	4605      	mov	r5, r0
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff f8d9 	bl	8007478 <_malloc_r>
 80082c6:	b948      	cbnz	r0, 80082dc <__smakebuf_r+0x44>
 80082c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082cc:	059a      	lsls	r2, r3, #22
 80082ce:	d4ef      	bmi.n	80082b0 <__smakebuf_r+0x18>
 80082d0:	f023 0303 	bic.w	r3, r3, #3
 80082d4:	f043 0302 	orr.w	r3, r3, #2
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	e7e3      	b.n	80082a4 <__smakebuf_r+0xc>
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <__smakebuf_r+0x7c>)
 80082de:	62b3      	str	r3, [r6, #40]	; 0x28
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	6020      	str	r0, [r4, #0]
 80082e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	9b00      	ldr	r3, [sp, #0]
 80082ec:	6163      	str	r3, [r4, #20]
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	6120      	str	r0, [r4, #16]
 80082f2:	b15b      	cbz	r3, 800830c <__smakebuf_r+0x74>
 80082f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f969 	bl	80085d0 <_isatty_r>
 80082fe:	b128      	cbz	r0, 800830c <__smakebuf_r+0x74>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	89a0      	ldrh	r0, [r4, #12]
 800830e:	4305      	orrs	r5, r0
 8008310:	81a5      	strh	r5, [r4, #12]
 8008312:	e7cd      	b.n	80082b0 <__smakebuf_r+0x18>
 8008314:	08007135 	.word	0x08007135

08008318 <malloc>:
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <malloc+0xc>)
 800831a:	4601      	mov	r1, r0
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f7ff b8ab 	b.w	8007478 <_malloc_r>
 8008322:	bf00      	nop
 8008324:	20000008 	.word	0x20000008

08008328 <__malloc_lock>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__malloc_lock+0x8>)
 800832a:	f7ff b86c 	b.w	8007406 <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	20010ffc 	.word	0x20010ffc

08008334 <__malloc_unlock>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__malloc_unlock+0x8>)
 8008336:	f7ff b867 	b.w	8007408 <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	20010ffc 	.word	0x20010ffc

08008340 <_free_r>:
 8008340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008342:	2900      	cmp	r1, #0
 8008344:	d044      	beq.n	80083d0 <_free_r+0x90>
 8008346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834a:	9001      	str	r0, [sp, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f1a1 0404 	sub.w	r4, r1, #4
 8008352:	bfb8      	it	lt
 8008354:	18e4      	addlt	r4, r4, r3
 8008356:	f7ff ffe7 	bl	8008328 <__malloc_lock>
 800835a:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <_free_r+0x94>)
 800835c:	9801      	ldr	r0, [sp, #4]
 800835e:	6813      	ldr	r3, [r2, #0]
 8008360:	b933      	cbnz	r3, 8008370 <_free_r+0x30>
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	6014      	str	r4, [r2, #0]
 8008366:	b003      	add	sp, #12
 8008368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800836c:	f7ff bfe2 	b.w	8008334 <__malloc_unlock>
 8008370:	42a3      	cmp	r3, r4
 8008372:	d908      	bls.n	8008386 <_free_r+0x46>
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	1961      	adds	r1, r4, r5
 8008378:	428b      	cmp	r3, r1
 800837a:	bf01      	itttt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	1949      	addeq	r1, r1, r5
 8008382:	6021      	streq	r1, [r4, #0]
 8008384:	e7ed      	b.n	8008362 <_free_r+0x22>
 8008386:	461a      	mov	r2, r3
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	b10b      	cbz	r3, 8008390 <_free_r+0x50>
 800838c:	42a3      	cmp	r3, r4
 800838e:	d9fa      	bls.n	8008386 <_free_r+0x46>
 8008390:	6811      	ldr	r1, [r2, #0]
 8008392:	1855      	adds	r5, r2, r1
 8008394:	42a5      	cmp	r5, r4
 8008396:	d10b      	bne.n	80083b0 <_free_r+0x70>
 8008398:	6824      	ldr	r4, [r4, #0]
 800839a:	4421      	add	r1, r4
 800839c:	1854      	adds	r4, r2, r1
 800839e:	42a3      	cmp	r3, r4
 80083a0:	6011      	str	r1, [r2, #0]
 80083a2:	d1e0      	bne.n	8008366 <_free_r+0x26>
 80083a4:	681c      	ldr	r4, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	6053      	str	r3, [r2, #4]
 80083aa:	4421      	add	r1, r4
 80083ac:	6011      	str	r1, [r2, #0]
 80083ae:	e7da      	b.n	8008366 <_free_r+0x26>
 80083b0:	d902      	bls.n	80083b8 <_free_r+0x78>
 80083b2:	230c      	movs	r3, #12
 80083b4:	6003      	str	r3, [r0, #0]
 80083b6:	e7d6      	b.n	8008366 <_free_r+0x26>
 80083b8:	6825      	ldr	r5, [r4, #0]
 80083ba:	1961      	adds	r1, r4, r5
 80083bc:	428b      	cmp	r3, r1
 80083be:	bf04      	itt	eq
 80083c0:	6819      	ldreq	r1, [r3, #0]
 80083c2:	685b      	ldreq	r3, [r3, #4]
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	bf04      	itt	eq
 80083c8:	1949      	addeq	r1, r1, r5
 80083ca:	6021      	streq	r1, [r4, #0]
 80083cc:	6054      	str	r4, [r2, #4]
 80083ce:	e7ca      	b.n	8008366 <_free_r+0x26>
 80083d0:	b003      	add	sp, #12
 80083d2:	bd30      	pop	{r4, r5, pc}
 80083d4:	20011000 	.word	0x20011000

080083d8 <_read_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d07      	ldr	r5, [pc, #28]	; (80083f8 <_read_r+0x20>)
 80083dc:	4604      	mov	r4, r0
 80083de:	4608      	mov	r0, r1
 80083e0:	4611      	mov	r1, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	602a      	str	r2, [r5, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	f7fb fff0 	bl	80043cc <_read>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_read_r+0x1e>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_read_r+0x1e>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	20011008 	.word	0x20011008

080083fc <lflush>:
 80083fc:	8983      	ldrh	r3, [r0, #12]
 80083fe:	f003 0309 	and.w	r3, r3, #9
 8008402:	2b09      	cmp	r3, #9
 8008404:	d101      	bne.n	800840a <lflush+0xe>
 8008406:	f7ff beeb 	b.w	80081e0 <fflush>
 800840a:	2000      	movs	r0, #0
 800840c:	4770      	bx	lr
	...

08008410 <__srefill_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	4605      	mov	r5, r0
 8008416:	b118      	cbz	r0, 8008420 <__srefill_r+0x10>
 8008418:	6983      	ldr	r3, [r0, #24]
 800841a:	b90b      	cbnz	r3, 8008420 <__srefill_r+0x10>
 800841c:	f7fe febe 	bl	800719c <__sinit>
 8008420:	4b3b      	ldr	r3, [pc, #236]	; (8008510 <__srefill_r+0x100>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d10a      	bne.n	800843c <__srefill_r+0x2c>
 8008426:	686c      	ldr	r4, [r5, #4]
 8008428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800842c:	2300      	movs	r3, #0
 800842e:	6063      	str	r3, [r4, #4]
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	069e      	lsls	r6, r3, #26
 8008434:	d50c      	bpl.n	8008450 <__srefill_r+0x40>
 8008436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800843a:	e066      	b.n	800850a <__srefill_r+0xfa>
 800843c:	4b35      	ldr	r3, [pc, #212]	; (8008514 <__srefill_r+0x104>)
 800843e:	429c      	cmp	r4, r3
 8008440:	d101      	bne.n	8008446 <__srefill_r+0x36>
 8008442:	68ac      	ldr	r4, [r5, #8]
 8008444:	e7f0      	b.n	8008428 <__srefill_r+0x18>
 8008446:	4b34      	ldr	r3, [pc, #208]	; (8008518 <__srefill_r+0x108>)
 8008448:	429c      	cmp	r4, r3
 800844a:	bf08      	it	eq
 800844c:	68ec      	ldreq	r4, [r5, #12]
 800844e:	e7eb      	b.n	8008428 <__srefill_r+0x18>
 8008450:	0758      	lsls	r0, r3, #29
 8008452:	d448      	bmi.n	80084e6 <__srefill_r+0xd6>
 8008454:	06d9      	lsls	r1, r3, #27
 8008456:	d405      	bmi.n	8008464 <__srefill_r+0x54>
 8008458:	2309      	movs	r3, #9
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	e7e8      	b.n	8008436 <__srefill_r+0x26>
 8008464:	071a      	lsls	r2, r3, #28
 8008466:	d50b      	bpl.n	8008480 <__srefill_r+0x70>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f7ff fe7c 	bl	8008168 <_fflush_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d1e0      	bne.n	8008436 <__srefill_r+0x26>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	60a0      	str	r0, [r4, #8]
 8008478:	f023 0308 	bic.w	r3, r3, #8
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	61a0      	str	r0, [r4, #24]
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f043 0304 	orr.w	r3, r3, #4
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	b91b      	cbnz	r3, 8008494 <__srefill_r+0x84>
 800848c:	4621      	mov	r1, r4
 800848e:	4628      	mov	r0, r5
 8008490:	f7ff ff02 	bl	8008298 <__smakebuf_r>
 8008494:	89a6      	ldrh	r6, [r4, #12]
 8008496:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800849a:	07b3      	lsls	r3, r6, #30
 800849c:	d00f      	beq.n	80084be <__srefill_r+0xae>
 800849e:	2301      	movs	r3, #1
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	4b1e      	ldr	r3, [pc, #120]	; (800851c <__srefill_r+0x10c>)
 80084a4:	491e      	ldr	r1, [pc, #120]	; (8008520 <__srefill_r+0x110>)
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	f006 0609 	and.w	r6, r6, #9
 80084ac:	f7fe ff06 	bl	80072bc <_fwalk>
 80084b0:	2e09      	cmp	r6, #9
 80084b2:	81a7      	strh	r7, [r4, #12]
 80084b4:	d103      	bne.n	80084be <__srefill_r+0xae>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f7ff fdcf 	bl	800805c <__sflush_r>
 80084be:	6922      	ldr	r2, [r4, #16]
 80084c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084c2:	6963      	ldr	r3, [r4, #20]
 80084c4:	6a21      	ldr	r1, [r4, #32]
 80084c6:	6022      	str	r2, [r4, #0]
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b0      	blx	r6
 80084cc:	2800      	cmp	r0, #0
 80084ce:	6060      	str	r0, [r4, #4]
 80084d0:	dc1c      	bgt.n	800850c <__srefill_r+0xfc>
 80084d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d6:	bf17      	itett	ne
 80084d8:	2200      	movne	r2, #0
 80084da:	f043 0320 	orreq.w	r3, r3, #32
 80084de:	6062      	strne	r2, [r4, #4]
 80084e0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80084e4:	e7bc      	b.n	8008460 <__srefill_r+0x50>
 80084e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d0cd      	beq.n	8008488 <__srefill_r+0x78>
 80084ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <__srefill_r+0xea>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7ff ff23 	bl	8008340 <_free_r>
 80084fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	2000      	movs	r0, #0
 8008500:	6360      	str	r0, [r4, #52]	; 0x34
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0c0      	beq.n	8008488 <__srefill_r+0x78>
 8008506:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800850c:	2000      	movs	r0, #0
 800850e:	e7fc      	b.n	800850a <__srefill_r+0xfa>
 8008510:	08008f8c 	.word	0x08008f8c
 8008514:	08008fac 	.word	0x08008fac
 8008518:	08008f6c 	.word	0x08008f6c
 800851c:	08008fcc 	.word	0x08008fcc
 8008520:	080083fd 	.word	0x080083fd

08008524 <_raise_r>:
 8008524:	291f      	cmp	r1, #31
 8008526:	b538      	push	{r3, r4, r5, lr}
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	d904      	bls.n	8008538 <_raise_r+0x14>
 800852e:	2316      	movs	r3, #22
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800853a:	b112      	cbz	r2, 8008542 <_raise_r+0x1e>
 800853c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008540:	b94b      	cbnz	r3, 8008556 <_raise_r+0x32>
 8008542:	4620      	mov	r0, r4
 8008544:	f000 f830 	bl	80085a8 <_getpid_r>
 8008548:	462a      	mov	r2, r5
 800854a:	4601      	mov	r1, r0
 800854c:	4620      	mov	r0, r4
 800854e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008552:	f000 b817 	b.w	8008584 <_kill_r>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d00a      	beq.n	8008570 <_raise_r+0x4c>
 800855a:	1c59      	adds	r1, r3, #1
 800855c:	d103      	bne.n	8008566 <_raise_r+0x42>
 800855e:	2316      	movs	r3, #22
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	2001      	movs	r0, #1
 8008564:	e7e7      	b.n	8008536 <_raise_r+0x12>
 8008566:	2400      	movs	r4, #0
 8008568:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800856c:	4628      	mov	r0, r5
 800856e:	4798      	blx	r3
 8008570:	2000      	movs	r0, #0
 8008572:	e7e0      	b.n	8008536 <_raise_r+0x12>

08008574 <raise>:
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <raise+0xc>)
 8008576:	4601      	mov	r1, r0
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f7ff bfd3 	b.w	8008524 <_raise_r>
 800857e:	bf00      	nop
 8008580:	20000008 	.word	0x20000008

08008584 <_kill_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	; (80085a4 <_kill_r+0x20>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f000 f855 	bl	8008640 <_kill>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d102      	bne.n	80085a0 <_kill_r+0x1c>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b103      	cbz	r3, 80085a0 <_kill_r+0x1c>
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	20011008 	.word	0x20011008

080085a8 <_getpid_r>:
 80085a8:	f000 b832 	b.w	8008610 <_getpid>

080085ac <_fstat_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	; (80085cc <_fstat_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f000 f821 	bl	8008600 <_fstat>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_fstat_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_fstat_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20011008 	.word	0x20011008

080085d0 <_isatty_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_isatty_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f000 f828 	bl	8008630 <_isatty>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_isatty_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_isatty_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20011008 	.word	0x20011008

080085f0 <_close>:
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <_close+0xc>)
 80085f2:	2258      	movs	r2, #88	; 0x58
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fa:	4770      	bx	lr
 80085fc:	20011008 	.word	0x20011008

08008600 <_fstat>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <_fstat+0xc>)
 8008602:	2258      	movs	r2, #88	; 0x58
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800860a:	4770      	bx	lr
 800860c:	20011008 	.word	0x20011008

08008610 <_getpid>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <_getpid+0xc>)
 8008612:	2258      	movs	r2, #88	; 0x58
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800861a:	4770      	bx	lr
 800861c:	20011008 	.word	0x20011008

08008620 <_gettimeofday>:
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <_gettimeofday+0xc>)
 8008622:	2258      	movs	r2, #88	; 0x58
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800862a:	4770      	bx	lr
 800862c:	20011008 	.word	0x20011008

08008630 <_isatty>:
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <_isatty+0xc>)
 8008632:	2258      	movs	r2, #88	; 0x58
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	2000      	movs	r0, #0
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20011008 	.word	0x20011008

08008640 <_kill>:
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <_kill+0xc>)
 8008642:	2258      	movs	r2, #88	; 0x58
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800864a:	4770      	bx	lr
 800864c:	20011008 	.word	0x20011008

08008650 <_lseek>:
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <_lseek+0xc>)
 8008652:	2258      	movs	r2, #88	; 0x58
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800865a:	4770      	bx	lr
 800865c:	20011008 	.word	0x20011008

08008660 <_sbrk>:
 8008660:	4a04      	ldr	r2, [pc, #16]	; (8008674 <_sbrk+0x14>)
 8008662:	4905      	ldr	r1, [pc, #20]	; (8008678 <_sbrk+0x18>)
 8008664:	6813      	ldr	r3, [r2, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf08      	it	eq
 800866a:	460b      	moveq	r3, r1
 800866c:	4418      	add	r0, r3
 800866e:	6010      	str	r0, [r2, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	4770      	bx	lr
 8008674:	2001100c 	.word	0x2001100c
 8008678:	20011010 	.word	0x20011010

0800867c <_exit>:
 800867c:	e7fe      	b.n	800867c <_exit>
 800867e:	bf00      	nop
 8008680:	00000020 	.word	0x00000020
	...
 800868c:	00000002 	.word	0x00000002
	...
 8008698:	00000020 	.word	0x00000020
 800869c:	00000064 	.word	0x00000064
 80086a0:	00000020 	.word	0x00000020
 80086a4:	00000020 	.word	0x00000020
 80086a8:	00000020 	.word	0x00000020
 80086ac:	00000000 	.word	0x00000000
 80086b0:	00000200 	.word	0x00000200
 80086b4:	00000000 	.word	0x00000000
 80086b8:	74617453 	.word	0x74617453
 80086bc:	00203a65 	.word	0x00203a65
 80086c0:	454c4449 	.word	0x454c4449
 80086c4:	00000000 	.word	0x00000000
 80086c8:	4f434552 	.word	0x4f434552
 80086cc:	00004452 	.word	0x00004452
 80086d0:	59414c50 	.word	0x59414c50
 80086d4:	00000000 	.word	0x00000000
 80086d8:	504f5453 	.word	0x504f5453
 80086dc:	00000000 	.word	0x00000000
 80086e0:	45564153 	.word	0x45564153
 80086e4:	00000000 	.word	0x00000000
 80086e8:	53415245 	.word	0x53415245
 80086ec:	00000045 	.word	0x00000045
 80086f0:	49474542 	.word	0x49474542
 80086f4:	52575f4e 	.word	0x52575f4e
 80086f8:	00455449 	.word	0x00455449
 80086fc:	54495257 	.word	0x54495257
 8008700:	00000045 	.word	0x00000045
 8008704:	4d4d4f43 	.word	0x4d4d4f43
 8008708:	00005449 	.word	0x00005449
 800870c:	4e415453 	.word	0x4e415453
 8008710:	00594244 	.word	0x00594244
 8008714:	656c6449 	.word	0x656c6449
 8008718:	6d697420 	.word	0x6d697420
 800871c:	74756f65 	.word	0x74756f65
 8008720:	70786520 	.word	0x70786520
 8008724:	64657269 	.word	0x64657269
 8008728:	00000000 	.word	0x00000000
 800872c:	74736574 	.word	0x74736574
 8008730:	00000000 	.word	0x00000000
 8008734:	6b6361ff 	.word	0x6b6361ff
 8008738:	00000000 	.word	0x00000000
 800873c:	0a7325ff 	.word	0x0a7325ff
 8008740:	00000000 	.word	0x00000000
 8008744:	73617245 	.word	0x73617245
 8008748:	20676e69 	.word	0x20676e69
 800874c:	65766173 	.word	0x65766173
 8008750:	74616420 	.word	0x74616420
 8008754:	2e2e2e61 	.word	0x2e2e2e61
 8008758:	00000020 	.word	0x00000020
 800875c:	656e6f64 	.word	0x656e6f64
 8008760:	00000000 	.word	0x00000000

08008764 <recorder::SynthEngine::kDiatonicRatios>:
 8008764:	3f800000 3f8facc5 3fa1450f 3faadc0a     ...?...?.E.?...?
 8008774:	3fbfc89f 3fd744e5 3ff1a1cb 40000000     ...?.D.?...?...@

08008784 <recorder::FormantFilter::vowelData>:
 8008784:	43870000 450f2000 453c2000 41200000     ...C. .E. <E.. A
 8008794:	41100000 41100000 43c30000 44f8c000     ...A...A...C...D
 80087a4:	451f6000 41400000 41300000 41200000     .`.E..@A..0A.. A
 80087b4:	44048000 44e60000 451b0000 41300000     ...D...D...E..0A
 80087c4:	41300000 41200000 44250000 44d70000     ..0A.. A..%D...D
 80087d4:	4516a000 41300000 41300000 41200000     ...E..0A..0A.. A
 80087e4:	44368000 44884000 45188000 41200000     ..6D.@.D...E.. A
 80087f4:	41000000 41100000 440e8000 44520000     ...A...A...D..RD
 8008804:	4516a000 41300000 41200000 41200000     ...E..0A.. A.. A
 8008814:	43fa0000 442f0000 45192000 41300000     ...C../D. .E..0A
 8008824:	41200000 41200000 43dc0000 447f0000     .. A.. A...C...D
 8008834:	450c0000 41400000 41200000 41200000     ...E..@A.. A.. A
 8008844:	43960000 44598000 450c0000 41200000     ...C..YD...E.. A
 8008854:	41100000 41100000 43fa0000 44bb8000     ...A...A...C...D
 8008864:	45160000 41400000 41300000 41200000     ...E..@A..0A.. A

08008874 <recorder::Adc::PotFilter::kPotCorrection>:
 8008874:	00000000 3c805439 3d00a626 3d41709b     ....9T.<&..=.pA=
 8008884:	3d8142f1 3da1f120 3dc2c0f0 3de3b06c     .B.= ..=...=l..=
 8008894:	3e025ec9 3e12f32c 3e239452 3e34412e     .^.>,..>R.#>.A4>
 80088a4:	3e44f8aa 3e55b9af 3e668323 3e7753e8     ..D>..U>#.f>.Sw>
 80088b4:	3e84156f 3e8c8371 3e94f36b 3e9d64c9     o..>q..>k..>.d.>
 80088c4:	3ea5d6fa 3eae496d 3eb6bb8f 3ebf2cd1     ...>mI.>...>.,.>
 80088d4:	3ec79ca3 3ed00a76 3ed875bd 3ee0dded     ...>v..>.u.>...>
 80088e4:	3ee9427b 3ef1a2e0 3ef9fe97 3f012a8f     {B.>...>...>.*.?
 80088f4:	3f0552f9 3f09784b 3f0d9a49 3f11b8b5     .R.?Kx.?I..?...?
 8008904:	3f15d358 3f19e9f6 3f1dfc5b 3f220a51     X..?...?[..?Q."?
 8008914:	3f2613a4 3f2a1825 3f2e17a2 3f3211ef     ..&?%.*?...?..2?
 8008924:	3f3606e0 3f39f64c 3f3de00a 3f41c3f6     ..6?L.9?..=?..A?
 8008934:	3f45a1ea 3f4979c6 3f4d4b69 3f5116b5     ..E?.yI?iKM?..Q?
 8008944:	3f54db8e 3f5899da 3f5c5180 3f600268     ..T?..X?.Q\?h.`?
 8008954:	3f63ac7f 3f674fb1 3f6aebed 3f6e8121     ..c?.Og?..j?!.n?
 8008964:	3f720f41 3f75963e 3f79160e 3f7c8ea7     A.r?>.u?..y?..|?
 8008974:	3f800000                                ...?

08008978 <recorder::kADCRegRank>:
 8008978:	00000006 0000000c 00000012 00000018     ................
 8008988:	00000100 00000106 0000010c 00000112     ................
 8008998:	00000118 00000200 00000206 0000020c     ................
 80089a8:	00000212 00000218 00000300 00000306     ................

080089b8 <recorder::kPotChannels>:
 80089b8:	0c900008 2a000400 1d500080 10c00010     .......*..P.....
 80089c8:	32601000 36902000 4b840000 47520000     ..`2. .6...K..RG
 80089d8:	6e717269 203d3e20 4d6e6f4e 616b7361     irqn >= NonMaska
 80089e8:	49656c62 495f746e 006e5152 64696f76     bleInt_IRQn.void
 80089f8:	63657220 6564726f 693a3a72 3a3a7172      recorder::irq::
 8008a08:	69676552 72657473 646e6148 2872656c     RegisterHandler(
 8008a18:	6e515249 7079545f 72202c65 726f6365     IRQn_Type, recor
 8008a28:	3a726564 7172693a 65563a3a 726f7463     der::irq::Vector
 8008a38:	00000029 76697264 2f737265 2e717269     )...drivers/irq.
 8008a48:	00707063 65637865 6f697470 756e5f6e     cpp.exception_nu
 8008a58:	203c206d 6d754e6b 74636556 0073726f     m < kNumVectors.
 8008a68:	6e717269 203d3e20 00000030 64696f76     irqn >= 0...void
 8008a78:	63657220 6564726f 693a3a72 3a3a7172      recorder::irq::
 8008a88:	62616e45 4928656c 5f6e5152 65707954     Enable(IRQn_Type
 8008a98:	00000029 65736552 6f732074 65637275     )...Reset source
 8008aa8:	73617720 00000020 00524f50 5453524e      was ...POR.NRST
 8008ab8:	00000000 00524f42 00544653 00555043     ....BOR.SFT.CPU.
 8008ac8:	47445757 00000031 47445749 00000031     WWDG1...IWDG1...
 8008ad8:	454b4157 00000000 5257504c 00000000     WAKE....LPWR....
 8008ae8:	6e6b6e75 3a6e776f 25783020 586c3830     unknown: 0x%08lX
 8008af8:	0000000a 656b6157 65207075 746e6576     ....Wakeup event
 8008b08:	73617720 63657220 2064726f 74747562      was record butt
 8008b18:	00006e6f 656b6157 65207075 746e6576     on..Wakeup event
 8008b28:	73617720 616c7020 75622079 6e6f7474      was play button
 8008b38:	00000000                                ....

08008b3c <D1CorePrescTable>:
 8008b3c:	00000000 04030201 04030201 09080706     ................

08008b4c <LL_DMA_STR_OFFSET_TAB>:
 8008b4c:	58402810 b8a08870                       .(@Xp...

08008b54 <LL_RCC_PrescTable>:
 8008b54:	00000000 04030201 04030201 09080706     ................

08008b64 <USART_PRESCALER_TAB>:
 8008b64:	00020001 00060004 000a0008 0010000c     ................
 8008b74:	00400020 01000080 00000000               .@.........

08008b80 <__exp2f_data>:
 8008b80:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 8008b90:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 8008ba0:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 8008bb0:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 8008bc0:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 8008bd0:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 8008be0:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 8008bf0:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 8008c00:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 8008c10:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 8008c20:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 8008c30:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 8008c40:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 8008c50:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 8008c60:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 8008c70:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 8008c80:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 8008c90:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 8008ca0:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 8008cb0:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 8008cc0:	ff0c52d6 3f962e42                       .R..B..?

08008cc8 <__inv_pio4>:
 8008cc8:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 8008cd8:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 8008ce8:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 8008cf8:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 8008d08:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 8008d18:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

08008d28 <__sincosf_table>:
 8008d28:	00000000 3ff00000 00000000 bff00000     .......?........
 8008d38:	00000000 bff00000 00000000 3ff00000     ...............?
 8008d48:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 8008d58:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 8008d68:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 8008d78:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 8008d88:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 8008d98:	00000000 3ff00000 00000000 bff00000     .......?........
 8008da8:	00000000 bff00000 00000000 3ff00000     ...............?
 8008db8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 8008dc8:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 8008dd8:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 8008de8:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 8008df8:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

08008e08 <Zero>:
 8008e08:	00000000 80000000                       ........

08008e10 <__logf_data>:
 8008e10:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 8008e20:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 8008e30:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 8008e40:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 8008e50:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 8008e60:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 8008e70:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 8008e80:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 8008e90:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 8008ea0:	00000000 3ff00000 00000000 00000000     .......?........
 8008eb0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 8008ec0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 8008ed0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 8008ee0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 8008ef0:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 8008f00:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 8008f10:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 8008f20:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......
 8008f30:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
 8008f40:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
 8008f50:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
 8008f60:	20656e69 73256425 000a7325              ine %d%s%s..

08008f6c <__sf_fake_stderr>:
	...

08008f8c <__sf_fake_stdin>:
	...

08008fac <__sf_fake_stdout>:
	...

08008fcc <_global_impure_ptr>:
 8008fcc:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
 8008fdc:	47464567 32313000 36353433 41393837     gEFG.0123456789A
 8008fec:	45444342 31300046 35343332 39383736     BCDEF.0123456789
 8008ffc:	64636261 52006665 544e4545 6c616d20     abcdef.REENT mal
 800900c:	20636f6c 63637573 65646565 742f0064     loc succeeded./t
 800901c:	6a2f706d 696b6e65 472d736e 312d4343     mp/jenkins-GCC-1
 800902c:	69702d30 696c6570 332d656e 325f3833     0-pipeline-338_2
 800903c:	31313230 5f383130 34333631 31363135     0211018_16345161
 800904c:	732f3539 6e2f6372 696c7765 656e2f62     95/src/newlib/ne
 800905c:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
 800906c:	6e61722f 00632e64                       /rand.c.

08009074 <_init>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr

08009080 <_fini>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr
