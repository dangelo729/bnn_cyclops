
build/recorder.no-line-in/artifact/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009064  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  08009304  08009304  0002006c  2**0
                  CONTENTS
  3 .exidx        00000000  08009304  08009304  0002006c  2**0
                  CONTENTS
  4 .ARM.attributes 00000030  08009304  08009304  0002006c  2**0
                  CONTENTS, READONLY
  5 .init_array   0000000c  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000006c  20000000  08009314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010c10  20000400  08009380  00020400  2**10
                  ALLOC
  9 .dma          00000048  38000000  38000000  00030000  2**2
                  ALLOC
 10 .heap         00000000  20011010  20011010  0002009c  2**0
                  CONTENTS
 11 .reserved_for_stack 00000000  20011010  20011010  0002009c  2**0
                  CONTENTS
 12 .debug_info   000455b2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c83  00000000  00000000  0006564e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001495b  00000000  00000000  0006c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  00080c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000077c8  00000000  00000000  000816b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0005299c  00000000  00000000  00088e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000243fe  00000000  00000000  000db818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001fdcfd  00000000  00000000  000ffc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  002fd913  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e58  00000000  00000000  002fd95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  003007b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000193  00000000  00000000  00300868  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
08009304 l    d  .ARM.extab	00000000 .ARM.extab
08009304 l    d  .exidx	00000000 .exidx
08009304 l    d  .ARM.attributes	00000000 .ARM.attributes
08009304 l    d  .init_array	00000000 .init_array
08009310 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
38000000 l    d  .dma	00000000 .dma
20011010 l    d  .heap	00000000 .heap
20011010 l    d  .reserved_for_stack	00000000 .reserved_for_stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32h750xx.c
00000000 l    df *ABS*	00000000 crtstuff.c
080002a0 l     F .text	00000000 __do_global_dtors_aux
20000400 l       .bss	00000001 completed.1
08009310 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080002c4 l     F .text	00000000 frame_dummy
20000404 l       .bss	00000018 object.0
08009304 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 main.cpp
08002964 l     F .text	000000b4 _GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE
20010a54 l     O .bss	00000004 recorder::StateMachine(bool)::synthReleaseCounter
00000000 l    df *ABS*	00000000 adc.cpp
08008bf0 l     O .text	00000040 recorder::kADCRegRank
08008c30 l     O .text	00000020 recorder::kPotChannels
00000000 l    df *ABS*	00000000 analog.cpp
00000000 l    df *ABS*	00000000 dac.cpp
00000000 l    df *ABS*	00000000 irq.cpp
20010c00 l     O .bss	00000298 recorder::irq::RAMVectorTable
00000000 l    df *ABS*	00000000 serial.cpp
00000000 l    df *ABS*	00000000 system.cpp
08003f1c l     F .text	00000024 NVIC_SystemReset
08003f5c l     F .text	000000e0 recorder::system::ConfigureClocks()
08004714 l     F .text	00000014 _GLOBAL__sub_I_TickHandler
20010e9c l     O .bss	00000004 recorder::system::wakeup_flags_
20010ea0 l     O .bss	00000004 recorder::system::ticks_
20010ea4 l     O .bss	00000150 recorder::system::serial_
20010ff4 l     O .bss	00000001 _read::prev_was_cr
20010ff5 l     O .bss	00000001 _write::prev
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
20010ff8 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
08005134 l     F .text	000000f4 RCCEx_PLL2_Config
08005228 l     F .text	000000f4 RCCEx_PLL3_Config
00000000 l    df *ABS*	00000000 stm32h7xx_ll_adc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dac.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dma.c
08008dc4 l     O .text	00000008 LL_DMA_STR_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_usart.c
08008ddc l     O .text	00000018 USART_PRESCALER_TAB
00000000 l    df *ABS*	00000000 cosf.c
00000000 l    df *ABS*	00000000 math_errf.c
08006ae4 l     F .text	00000018 with_errnof
08006afc l     F .text	0000001e xflowf
00000000 l    df *ABS*	00000000 sf_exp.c
00000000 l    df *ABS*	00000000 sinf.c
00000000 l    df *ABS*	00000000 wf_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 ef_fmod.c
08009080 l     O .text	00000008 Zero
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 sf_log.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 clearerr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 feof.c
00000000 l    df *ABS*	00000000 ferror.c
00000000 l    df *ABS*	00000000 findfp.c
08007364 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
080076b0 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080077d8 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 refill.c
08008674 l     F .text	00000012 lflush
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 gettod.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
2001100c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 sf_exp2_data.c
00000000 l    df *ABS*	00000000 sincosf_data.c
00000000 l    df *ABS*	00000000 sf_log_data.c
00000000 l    df *ABS*	00000000 impure.c
2000000c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 reent.c
08004728  w    F .text	00000002 RTC_Alarm_IRQHandler
08004728  w    F .text	00000002 HASH_RNG_IRQHandler
08004728  w    F .text	00000002 EXTI2_IRQHandler
08008dcc g     O .text	00000010 LL_RCC_PrescTable
080045b0 g     F .text	00000006 recorder::system::Reset()
08004728  w    F .text	00000002 TIM8_CC_IRQHandler
08008848 g     F .text	00000020 _isatty_r
08003e78 g     F .text	00000098 recorder::Serial::InterruptService()
2000041c g     O .bss	00000004 recorder::play_button_
08008888 g     F .text	00000010 _getpid
08007de4 g     F .text	000000dc _puts_r
08004728  w    F .text	00000002 HRTIM1_Master_IRQHandler
08006e74 g     F .text	00000048 fmodf
080084a0 g     F .text	00000024 _lseek_r
08004728  w    F .text	00000002 DebugMon_Handler
08004728  w    F .text	00000002 UART8_IRQHandler
08004728  w    F .text	00000002 SPI4_IRQHandler
0800847c g     F .text	00000024 _gettimeofday_r
08009088 g     O .text	00000120 .hidden __logf_data
08003a7c g     F .text	000000b8 recorder::Dac::Init()
080006ac g     F .text	0000005a .hidden __floatdidf
080087fc g     F .text	00000024 _kill_r
08007db4 g     F .text	00000030 printf
08004728  w    F .text	00000002 TIM1_CC_IRQHandler
08004728  w    F .text	00000002 BDMA_Channel6_IRQHandler
0800807a g     F .text	00000024 __sseek
08007414 g     F .text	00000070 __sinit
08004728  w    F .text	00000002 DMA2_Stream5_IRQHandler
08008100 g     F .text	000000a4 __swbuf_r
08004040 g     F .text	00000010 recorder::system::ReloadWatchdog()
08004728  w    F .text	00000002 HardFault_Handler
08004728  w    F .text	00000002 HRTIM1_FLT_IRQHandler
08004728  w    F .text	00000002 JPEG_IRQHandler
20010a60  w    O .bss	00000004 recorder::Analog::instance_
080073b8 g     F .text	0000002c __sfmoreglue
08004728  w    F .text	00000002 DMA1_Stream5_IRQHandler
080085ac g     F .text	0000000c __malloc_unlock
08004728  w    F .text	00000002 SysTick_Handler
08004728  w    F .text	00000002 BDMA_Channel1_IRQHandler
08004728  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
08000ba8  w    F .text	0000067c recorder::SynthEngine::RenderOneSample()
08004728  w    F .text	00000002 TAMP_STAMP_IRQHandler
08009314 g       *ABS*	00000000 _sidata
08004728  w    F .text	00000002 PendSV_Handler
08004728  w    F .text	00000002 NMI_Handler
20010704 g     O .bss	00000164 recorder::analog_
08004728  w    F .text	00000002 EXTI3_IRQHandler
08004dc0 g     F .text	00000140 HAL_RCC_GetSysClockFreq
08004728  w    F .text	00000002 LPTIM4_IRQHandler
08007280 g     F .text	0000000c __errno
08006b28 g     F .text	0000000c .hidden __math_may_uflowf
20010868 g     O .bss	0000012c recorder::monitor_
08004728  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08004728  w    F .text	00000002 LPTIM2_IRQHandler
08004728  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
08004448 g     F .text	0000002c recorder::system::Delay_ms(unsigned long)
080070fc g     F .text	000000c8 logf
08008824 g     F .text	00000024 _fstat_r
08004050 g     F .text	000003f8 recorder::system::Init()
20011008 g     O .bss	00000004 errno
08009304 g       .text	00000000 _etext
08004728  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20000400 g       .bss	00000000 _sbss
080033b0 g     F .text	000000b4 recorder::Adc::Stop()
08004800 g     F .text	0000000c HAL_GetREVID
08004728  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08004728  w    F .text	00000002 I2C3_ER_IRQHandler
08004728  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
080045b8 g     F .text	0000008c fgets
0800651c g     F .text	000001e8 LL_RCC_GetUSARTClockFreq
08002db0 g     F .text	000000d8 recorder::Adc::InitAudioSequence()
08004728  w    F .text	00000002 MDMA_IRQHandler
08008df8 g     O .text	00000148 .hidden __exp2f_data
08004728  w    F .text	00000002 LPTIM3_IRQHandler
080075ac g     F .text	00000088 getc
200106d8 g     O .bss	00000028 recorder::io_
08007682 g     F .text	0000001c memcpy
080073ac g     F .text	0000000c _cleanup_r
08004728  w    F .text	00000002 HSEM1_IRQHandler
08000634 g     F .text	00000022 .hidden __floatsidf
08001e8c g     F .text	000003cc recorder::StateMachine(bool)
08004728  w    F .text	00000002 EXTI0_IRQHandler
08004728  w    F .text	00000002 I2C2_EV_IRQHandler
08007ec0 g     F .text	00000010 puts
08004728  w    F .text	00000002 DMA1_Stream2_IRQHandler
08004728  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
0800728c g     F .text	0000006c feof
08004728  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08004728  w    F .text	00000002 FDCAN1_IT1_IRQHandler
08008590 g     F .text	00000010 malloc
0800879c g     F .text	00000050 _raise_r
08008878 g     F .text	00000010 _fstat
080071d0 g     F .text	0000003c __assert_func
08004728  w    F .text	00000002 UsageFault_Handler
08002f98 g     F .text	000003ac recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
080039d0 g     F .text	000000ac recorder::Dac::InitDMA()
08004728  w    F .text	00000002 LTDC_ER_IRQHandler
08004728  w    F .text	00000002 DMA2_Stream2_IRQHandler
08008820 g     F .text	00000004 _getpid_r
20000400 g       .bss	00000000 __bss_start__
08004728  w    F .text	00000002 HRTIM1_TIME_IRQHandler
20010700 g     O .bss	00000001 recorder::state_
08000614 g     F .text	0000001e .hidden __aeabi_ui2d
08005e30 g     F .text	00000072 LL_DAC_Init
20000000 g       .data	00000000 _sdata
08004728  w    F .text	00000002 SPI1_IRQHandler
08003b34 g     F .text	00000058 recorder::irq::Init()
08000390 g     F .text	00000000 .hidden __aeabi_drsub
08008000 g     F .text	00000020 _sbrk_r
08006b64 g     F .text	0000001e .hidden __math_invalidf
08004728  w    F .text	00000002 TIM6_DAC_IRQHandler
08008650 g     F .text	00000024 _read_r
08004728  w    F .text	00000002 DCMI_IRQHandler
08003dc0 g     F .text	00000022 recorder::Serial::GetByteBlocking()
08008458 g     F .text	00000024 fflush
08004728  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
20000004 g     O .data	00000004 SystemD2Clock
08000658 g     F .text	00000042 .hidden __extendsfdf2
08004480 g     F .text	00000120 recorder::system::Standby()
20010a5c  w    O .bss	00000004 recorder::Analog::callback_
0800039c g     F .text	00000276 .hidden __adddf3
08003de4 g     F .text	00000058 recorder::Serial::Write(unsigned char, bool)
08004728  w    F .text	00000002 DMA2_Stream3_IRQHandler
0800680c g     F .text	00000118 LL_USART_Init
080088a8 g     F .text	00000010 _isatty
20010ffe g     O .bss	00000001 __lock___sinit_recursive_mutex
08009244 g     O .text	00000004 _global_impure_ptr
08008db4 g     O .text	00000010 D1CorePrescTable
08007634 g     F .text	00000048 __libc_init_array
08004728  w    F .text	00000002 SAI2_IRQHandler
080082a4 g     F .text	0000000e abort
08000614 g     F .text	0000001e .hidden __floatunsidf
08002e88 g     F .text	00000110 recorder::Adc::InitPotSequence()
080088d8 g     F .text	0000001c _sbrk
08004728  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08004728  w    F .text	00000002 USART6_IRQHandler
080092ec g     F .text	00000000 _init
08008fa0 g     O .text	000000e0 .hidden __sincosf_table
08006928 g     F .text	000001bc cosf
0800703c g     F .text	000000c0 __ieee754_log10f
08004728  w    F .text	00000002 TIM17_IRQHandler
08004728  w    F .text	00000002 USART3_IRQHandler
08004728  w    F .text	00000002 CRYP_IRQHandler
08004728  w    F .text	00000002 BDMA_Channel7_IRQHandler
20011010 g       .bss	00000000 _ebss
0800472c g     F .text	00000044 Reset_Handler
08004728  w    F .text	00000002 LPTIM5_IRQHandler
08004728  w    F .text	00000002 UART5_IRQHandler
20010ffc g     O .bss	00000001 __lock___malloc_recursive_mutex
08004728  w    F .text	00000002 ADC3_IRQHandler
08004728  w    F .text	00000002 DMA2_Stream0_IRQHandler
08002a18 g     F .text	0000038c recorder::Adc::DMAService()
08006704 g     F .text	00000108 LL_TIM_Init
08003464  w    F .text	00000328 recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
08007510 g     F .text	00000024 fprintf
08004728  w    F .text	00000002 TIM4_IRQHandler
0800039c g     F .text	00000276 .hidden __aeabi_dadd
08003c04 g     F .text	00000060 recorder::irq::SetPriority(IRQn_Type, unsigned long)
08004728  w    F .text	00000002 BDMA_Channel2_IRQHandler
0800480c g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
0800069c g     F .text	0000006a .hidden __aeabi_ul2d
080089fc g     O .text	000000f0 recorder::FormantFilter::vowelData
080091e4 g     O .text	00000020 __sf_fake_stderr
08004728  w    F .text	00000002 QUADSPI_IRQHandler
0800481c g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
20011010 g       .bss	00000000 end
08004728  w    F .text	00000002 I2C1_EV_IRQHandler
08003c64 g     F .text	00000150 recorder::Serial::Init(unsigned long)
08007680 g     F .text	00000002 __retarget_lock_release_recursive
08004728  w    F .text	00000002 DMA1_Stream6_IRQHandler
08006054 g     F .text	00000016 LL_GPIO_StructInit
08006ebc g     F .text	00000060 log10f
20010e98  w    O .bss	00000004 recorder::Serial::instance_
08006b1c g     F .text	0000000c .hidden __math_uflowf
0800606c g     F .text	00000188 LL_RCC_GetPLL1ClockFreq
08004728  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08004728  w    F .text	00000002 DMA1_Stream1_IRQHandler
08004728  w    F .text	00000002 TIM16_IRQHandler
08007806 g     F .text	00000024 __sfputs_r
08004728  w    F .text	00000002 UART4_IRQHandler
080073e4 g     F .text	0000000c __sfp_lock_acquire
080002f0 g     F .text	00000000 memchr
20011010 g       .bss	00000000 __bss_end__
08004728  w    F .text	00000002 BDMA_Channel5_IRQHandler
080085b8 g     F .text	00000098 _free_r
08004728  w    F .text	00000002 TIM3_IRQHandler
08004728  w    F .text	00000002 RCC_IRQHandler
08004728  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08004728  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
08007fa8 g     F .text	00000058 __srget_r
08000398 g     F .text	0000027a .hidden __aeabi_dsub
08004728 g     F .text	00000002 Default_Handler
08004728  w    F .text	00000002 ECC_IRQHandler
080072f8 g     F .text	0000006c ferror
0800069c g     F .text	0000006a .hidden __floatundidf
08007f2c g     F .text	0000007c rand
080088c8 g     F .text	00000010 _lseek
08004728  w    F .text	00000002 CEC_IRQHandler
08004728  w    F .text	00000002 EXTI15_10_IRQHandler
08003db4 g     F .text	0000000c recorder::Serial::BytesAvailable()
08004728  w    F .text	00000002 BDMA_Channel0_IRQHandler
08004728  w    F .text	00000002 ADC_IRQHandler
08003bd0 g     F .text	00000034 recorder::irq::Enable(IRQn_Type)
08004f00 g     F .text	00000234 HAL_RCC_ClockConfig
080080a6 g     F .text	00000026 strncpy
08004728  w    F .text	00000002 DMA1_Stream7_IRQHandler
08004728  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
080038d0 g     F .text	00000014 recorder::Analog::StartTimer()
080061f4 g     F .text	00000188 LL_RCC_GetPLL2ClockFreq
08004728  w    F .text	00000002 SPI5_IRQHandler
08003b8c g     F .text	00000044 recorder::irq::RegisterHandler(IRQn_Type, void (*)())
08004728  w    F .text	00000002 TIM7_IRQHandler
08004728  w    F .text	00000002 SDMMC1_IRQHandler
080082b4 g     F .text	00000020 _close_r
08000634 g     F .text	00000022 .hidden __aeabi_i2d
38000030  w    O .dma	00000018 recorder::Dac::dma_buffer_
08004728  w    F .text	00000002 TIM5_IRQHandler
08004728  w    F .text	00000002 DMA2_Stream7_IRQHandler
08004728  w    F .text	00000002 TIM15_IRQHandler
08004728  w    F .text	00000002 PVD_AVD_IRQHandler
08004728  w    F .text	00000002 I2C3_EV_IRQHandler
080081c8 g     F .text	000000dc __swsetup_r
08004728  w    F .text	00000002 EXTI9_5_IRQHandler
08007484 g     F .text	0000008c __sfp
08004728  w    F .text	00000002 RTC_WKUP_IRQHandler
08000708  w    F .text	000004a0 recorder::SynthEngine::Init()
08007408 g     F .text	0000000c __sinit_lock_release
08004728  w    F .text	00000002 LTDC_IRQHandler
20000424 g     O .bss	00000004 recorder::idle_timeout_
08008020 g     F .text	00000022 __sread
08004728  w    F .text	00000002 SAI3_IRQHandler
08004728  w    F .text	00000002 ETH_WKUP_IRQHandler
080047f4  w    F .text	0000000c HAL_GetTick
08004728  w    F .text	00000002 SPDIF_RX_IRQHandler
080085a0 g     F .text	0000000c __malloc_lock
08006f1c g     F .text	00000120 __ieee754_fmodf
0800637c g     F .text	000001a0 LL_RCC_GetPLL3ClockFreq
080083e0 g     F .text	00000078 _fflush_r
08004728  w    F .text	00000002 SPI2_IRQHandler
08009204 g     O .text	00000020 __sf_fake_stdin
0800767e g     F .text	00000002 __retarget_lock_acquire_recursive
08004728  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
0800769e g     F .text	00000010 memset
08004728  w    F .text	00000002 MemManage_Handler
08002258 g     F .text	0000070c main
20000420 g     O .bss	00000004 recorder::tune_button_
08004728  w    F .text	00000002 DMA1_Stream0_IRQHandler
0800767c g     F .text	00000002 __retarget_lock_init_recursive
08007ed0 g     F .text	0000005c srand
0800720c g     F .text	00000074 clearerr
08004728  w    F .text	00000002 SVC_Handler
0800809e g     F .text	00000008 __sclose
08004728  w    F .text	00000002 CRS_IRQHandler
08009310 g       .init_array	00000000 __init_array_end
080076f0 g     F .text	000000e8 _malloc_r
080080cc g     F .text	00000034 time
080006ac g     F .text	0000005a .hidden __aeabi_l2d
08007534 g     F .text	0000003a _fwalk
08004728  w    F .text	00000002 EXTI4_IRQHandler
08003e3c g     F .text	0000003c recorder::Serial::FlushTx(bool)
08004770 g     F .text	00000084 SystemInit
08004728  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
080092f8 g     F .text	00000000 _fini
08007db4 g     F .text	00000030 iprintf
08003970 g     F .text	00000060 recorder::Dac::Stop()
080038f8 g     F .text	00000078 recorder::Dac::Start()
08004728  w    F .text	00000002 FDCAN2_IT1_IRQHandler
080081a4 g     F .text	00000024 _write_r
0800483c g     F .text	0000001c HAL_PWR_EnterSLEEPMode
0800403c g     F .text	00000004 HAL_InitTick
08004728  w    F .text	00000002 ETH_IRQHandler
080071c4 g     F .text	0000000c nanf
08007a8c g     F .text	000000da _printf_common
20000008 g     O .data	00000004 _impure_ptr
08004728  w    F .text	00000002 TIM1_UP_IRQHandler
08002da4 g     F .text	0000000c recorder::Adc::DMAHandler()
080082d4 g     F .text	0000010c __sflush_r
08004728  w    F .text	00000002 BDMA_Channel4_IRQHandler
08004728  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
20010a58  w    O .bss	00000004 recorder::Adc::instance_
08009304 g       .ARM.attributes	00000000 __preinit_array_end
08008688 g     F .text	00000114 __srefill_r
080089dc  w    O .text	00000020 recorder::SynthEngine::kDiatonicRatios
08004728  w    F .text	00000002 WWDG_IRQHandler
08004728  w    F .text	00000002 SPI6_IRQHandler
20010994 g     O .bss	000000c0 recorder::switches_
08004728  w    F .text	00000002 I2C4_EV_IRQHandler
08004728  w    F .text	00000002 MDIOS_IRQHandler
08004728  w    F .text	00000002 FDCAN2_IT0_IRQHandler
08005d98 g     F .text	00000038 LL_ADC_Init
08004728  w    F .text	00000002 LPUART1_IRQHandler
08004728  w    F .text	00000002 FDCAN1_IT0_IRQHandler
08004728  w    F .text	00000002 TIM2_IRQHandler
08006c68 g     F .text	0000020c sinf
08003344 g     F .text	0000006c recorder::Adc::Start()
08004728  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08004728  w    F .text	00000002 OTG_HS_IRQHandler
08004728  w    F .text	00000002 DMA2D_IRQHandler
08004728  w    F .text	00000002 TIM1_BRK_IRQHandler
080084c4 g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
08004728  w    F .text	00000002 EXTI1_IRQHandler
08004728  w    F .text	00000002 SDMMC2_IRQHandler
08005f48 g     F .text	0000010a LL_GPIO_Init
080046ac g     F .text	00000068 _write
2000006c g       .data	00000000 _edata
08004728  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
08001224  w    F .text	00000bd8 recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)
08001dfc g     F .text	00000090 recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
20000428 g     O .bss	000102b0 recorder::synth_engine_
08004728  w    F .text	00000002 BDMA_Channel3_IRQHandler
0800378c g     F .text	00000144 recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
08008aec  w    O .text	00000104 recorder::Adc::PotFilter::kPotCorrection
08006b40 g     F .text	00000024 .hidden __math_divzerof
08004728  w    F .text	00000002 UART7_IRQHandler
08005ea4 g     F .text	000000a4 LL_DMA_Init
08004728  w    F .text	00000002 MDIOS_WKUP_IRQHandler
08004728  w    F .text	00000002 USART2_IRQHandler
08008042 g     F .text	00000038 __swrite
080048a4  w    F .text	0000051c HAL_RCC_OscConfig
08004728  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08004728  w    F .text	00000002 SAI4_IRQHandler
08007510 g     F .text	00000024 fiprintf
0800782c g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000298 g_pfnVectors
0800756e g     F .text	0000003e _fwalk_reent
0800531c g     F .text	00000a7c HAL_RCCEx_PeriphCLKConfig
080088b8 g     F .text	00000010 _kill
08003f10 g     F .text	0000000c recorder::Serial::InterruptHandler()
08004728  w    F .text	00000002 I2C2_ER_IRQHandler
080073f0 g     F .text	0000000c __sfp_lock_release
08009224 g     O .text	00000020 __sf_fake_stdout
08008898 g     F .text	00000010 _gettimeofday
08004728  w    F .text	00000002 DMA2_Stream1_IRQHandler
08003f40 g     F .text	0000001c TickHandler
38000000  w    O .dma	00000030 recorder::Adc::dma_buffer_
08004644 g     F .text	00000068 _read
08009304 g       .init_array	00000000 __init_array_start
08004728  w    F .text	00000002 FLASH_IRQHandler
080088f4 g     F .text	00000002 _exit
08006b84 g     F .text	000000e4 expf
08004474 g     F .text	0000000c recorder::system::SerialFlushTx(bool)
08004728  w    F .text	00000002 DMA2_Stream4_IRQHandler
08004728  w    F .text	00000002 BusFault_Handler
08004728  w    F .text	00000002 USART1_IRQHandler
08008510 g     F .text	00000080 __smakebuf_r
080002a0 g       .text	00000000 _stext
08006b34 g     F .text	0000000c .hidden __math_oflowf
080002e0 g     F .text	00000010 strlen
08004728  w    F .text	00000002 OTG_FS_IRQHandler
08007b68 g     F .text	0000024c _printf_i
08004728  w    F .text	00000002 SPI3_IRQHandler
08004728  w    F .text	00000002 WAKEUP_PIN_IRQHandler
08004728  w    F .text	00000002 DMA1_Stream4_IRQHandler
20011004 g     O .bss	00000004 __malloc_sbrk_start
08004728  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
08004728  w    F .text	00000002 I2C1_ER_IRQHandler
0800482c g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
08004728  w    F .text	00000002 FMC_IRQHandler
08000658 g     F .text	00000042 .hidden __aeabi_f2d
08008f40 g     O .text	00000060 .hidden __inv_pio4
08004728  w    F .text	00000002 FDCAN_CAL_IRQHandler
20011000 g     O .bss	00000004 __malloc_free_list
08004728  w    F .text	00000002 SWPMI1_IRQHandler
08004728  w    F .text	00000002 COMP1_IRQHandler
08004728  w    F .text	00000002 LPTIM1_IRQHandler
080045a0 g     F .text	00000010 recorder::system::WakeupWasPlayButton()
08000398 g     F .text	0000027a .hidden __subdf3
0800782c g     F .text	00000260 _vfprintf_r
08009304 g       .ARM.attributes	00000000 __preinit_array_start
08004728  w    F .text	00000002 I2C4_ER_IRQHandler
08004858 g     F .text	0000004c HAL_PWREx_ConfigSupply
08004728  w    F .text	00000002 DMA2_Stream6_IRQHandler
080038e4 g     F .text	00000014 recorder::Dac::DMAHandler()
08005dd0 g     F .text	00000060 LL_ADC_REG_Init
08004728  w    F .text	00000002 SAI1_IRQHandler
08004728  w    F .text	00000002 DMA1_Stream3_IRQHandler
20010ffd g     O .bss	00000001 __lock___sfp_recursive_mutex
08008868 g     F .text	00000010 _close
080087ec g     F .text	00000010 raise
080073fc g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000400 	.word	0x20000400
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009304 	.word	0x08009304

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000404 	.word	0x20000404
 80002dc:	08009304 	.word	0x08009304

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <recorder::SynthEngine::Init()>:
              freq_wobbliness_(0.0f),
              previous_formant_pot_val_(0.0f) // track the last pot value
        {
        }

        void Init()
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	4604      	mov	r4, r0
        {
            // Seed random generator once at initialization
            std::srand(static_cast<unsigned>(std::time(nullptr)));
 800070e:	2000      	movs	r0, #0

            // Initial parameters
            is_note_on_ = false;
            phase_ = 0.0f;
 8000710:	2500      	movs	r5, #0
    void Init(float threshold_dB, float ratio, float softness,
        float attack_ms, float decay_ms, float hold_ms, float sample_rate)
    {
        pregain_ = std::pow(10.0, -threshold_dB / 20);
        ratio_ = 1 / ratio - 1;
        softness_ = softness;
 8000712:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
            is_note_on_ = false;
 8000716:	4680      	mov	r8, r0
            std::srand(static_cast<unsigned>(std::time(nullptr)));
 8000718:	f007 fcd8 	bl	80080cc <time>
 800071c:	f007 fbd8 	bl	8007ed0 <srand>
            currentFrequency_ = 130.81f; // Start at C3
 8000720:	4be0      	ldr	r3, [pc, #896]	; (8000aa4 <recorder::SynthEngine::Init()+0x39c>)
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8000722:	f504 3680 	add.w	r6, r4, #65536	; 0x10000
            is_note_on_ = false;
 8000726:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
            currentFrequency_ = 130.81f; // Start at C3
 800072a:	6063      	str	r3, [r4, #4]
        t_scaler_ = 0.5 / softness;
 800072c:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
            fundamentalFreq_ = 130.81f;  // Default fundamental is also C3
 8000730:	60a3      	str	r3, [r4, #8]
            targetFrequencyOffset_ = 0.0f;
            offsetCounter_ = 0;
            previousTargetIndex_ = -1;
 8000732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            offsetCounter_ = 0;
 8000736:	f8c4 8014 	str.w	r8, [r4, #20]

    void Reset(void)
    {
        for (uint32_t i = 0; i < kBufferSize; i++)
        {
            buffer_[i] = 0;
 800073a:	4641      	mov	r1, r8
            previousTargetIndex_ = -1;
 800073c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800073e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8000742:	4bd9      	ldr	r3, [pc, #868]	; (8000aa8 <recorder::SynthEngine::Init()+0x3a0>)
 8000744:	f504 7008 	add.w	r0, r4, #544	; 0x220
            phase_ = 0.0f;
 8000748:	6025      	str	r5, [r4, #0]
            targetFrequencyOffset_ = 0.0f;
 800074a:	60e5      	str	r5, [r4, #12]
 800074c:	f8c6 3224 	str.w	r3, [r6, #548]	; 0x224
        ratio_ = 1 / ratio - 1;
 8000750:	4bd6      	ldr	r3, [pc, #856]	; (8000aac <recorder::SynthEngine::Init()+0x3a4>)
        Reset();
    }

    void Reset(void)
    {
        hold_count_ = 0;
 8000752:	f8c6 8240 	str.w	r8, [r6, #576]	; 0x240
 8000756:	f8c6 3228 	str.w	r3, [r6, #552]	; 0x228
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800075a:	4bd5      	ldr	r3, [pc, #852]	; (8000ab0 <recorder::SynthEngine::Init()+0x3a8>)
        hold_count_ = 0;
 800075c:	f8c6 8254 	str.w	r8, [r6, #596]	; 0x254
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8000760:	f8c6 3234 	str.w	r3, [r6, #564]	; 0x234
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8000764:	4bd3      	ldr	r3, [pc, #844]	; (8000ab4 <recorder::SynthEngine::Init()+0x3ac>)
        envelope_ = 0;
 8000766:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 800076a:	f8c6 3238 	str.w	r3, [r6, #568]	; 0x238
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 800076e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
        envelope_ = 0;
 8000772:	f8c6 5258 	str.w	r5, [r6, #600]	; 0x258
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8000776:	f8c6 323c 	str.w	r3, [r6, #572]	; 0x23c
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800077a:	4bcf      	ldr	r3, [pc, #828]	; (8000ab8 <recorder::SynthEngine::Init()+0x3b0>)
            Reset(initial_value);
        }

        void Reset(float initial_value = 0)
        {
            history_ = initial_value;
 800077c:	f8c6 5260 	str.w	r5, [r6, #608]	; 0x260
 8000780:	f8c6 3248 	str.w	r3, [r6, #584]	; 0x248
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8000784:	4bcd      	ldr	r3, [pc, #820]	; (8000abc <recorder::SynthEngine::Init()+0x3b4>)
        softness_ = softness;
 8000786:	f8c6 722c 	str.w	r7, [r6, #556]	; 0x22c
 800078a:	f8c6 324c 	str.w	r3, [r6, #588]	; 0x24c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 800078e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
        t_scaler_ = 0.5 / softness;
 8000792:	f8c6 9230 	str.w	r9, [r6, #560]	; 0x230
 8000796:	f8c6 3250 	str.w	r3, [r6, #592]	; 0x250
            factor_ = omega / (1.0f + omega);
 800079a:	4bc9      	ldr	r3, [pc, #804]	; (8000ac0 <recorder::SynthEngine::Init()+0x3b8>)

    void SetCoefficients(const SOSCoefficients* sections)
    {
        for (int n = 0; n < num_sections_; n++)
        {
            sections_[n].b[0] = sections[n].b[0];
 800079c:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 8000b58 <recorder::SynthEngine::Init()+0x450>
 80007a0:	f8c6 325c 	str.w	r3, [r6, #604]	; 0x25c
 80007a4:	f006 ff7b 	bl	800769e <memset>
            delay_.Init();

            // Set a local sample rate variable
            sample_rate_ = 16000.0f;
 80007a8:	4bc6      	ldr	r3, [pc, #792]	; (8000ac4 <recorder::SynthEngine::Init()+0x3bc>)
        }

        write_head_ = 0;
 80007aa:	f8c6 8220 	str.w	r8, [r6, #544]	; 0x220
class FormantBiquad
{
public:
    void Init(BiquadType type, float sampleRate, float centerFrequency, float Q, float gainDB = 0.0f)
    {
        type_ = type;
 80007ae:	2002      	movs	r0, #2
 80007b0:	f8c6 32ac 	str.w	r3, [r6, #684]	; 0x2ac
        compressor_.Reset();
        follower_.Reset();
        delay_time_lpf_.Reset();
        interpolator_history_ = 0;
 80007b4:	f8c6 5264 	str.w	r5, [r6, #612]	; 0x264
 80007b8:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
            sections_[n].b[1] = sections[n].b[1];
            sections_[n].b[2] = sections[n].b[2];
 80007bc:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
        num_sections_ = num_sections;
 80007c0:	f04f 0a05 	mov.w	sl, #5
            x_[n][0] = 0;
 80007c4:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
        num_sections_ = num_sections;
 80007c8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
            sections_[n].b[1] = sections[n].b[1];
 80007cc:	f8df a38c 	ldr.w	sl, [pc, #908]	; 8000b5c <recorder::SynthEngine::Init()+0x454>
            x_[n][1] = 0;
 80007d0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
            sections_[n].b[1] = sections[n].b[1];
 80007d4:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c

            sections_[n].a[0] = sections[n].a[0];
 80007d8:	f8df a384 	ldr.w	sl, [pc, #900]	; 8000b60 <recorder::SynthEngine::Init()+0x458>
            x_[n][2] = 0;
 80007dc:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
            sections_[n].a[0] = sections[n].a[0];
 80007e0:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
            sections_[n].a[1] = sections[n].a[1];
 80007e4:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8000b64 <recorder::SynthEngine::Init()+0x45c>
            x_[n][0] = 0;
 80007e8:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
            sections_[n].a[1] = sections[n].a[1];
 80007ec:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
            sections_[n].b[1] = sections[n].b[1];
 80007f0:	f8df a374 	ldr.w	sl, [pc, #884]	; 8000b68 <recorder::SynthEngine::Init()+0x460>
            x_[n][1] = 0;
 80007f4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
            sections_[n].b[1] = sections[n].b[1];
 80007f8:	f8c4 a070 	str.w	sl, [r4, #112]	; 0x70
            sections_[n].a[0] = sections[n].a[0];
 80007fc:	f8df a36c 	ldr.w	sl, [pc, #876]	; 8000b6c <recorder::SynthEngine::Init()+0x464>
            x_[n][2] = 0;
 8000800:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
            sections_[n].a[0] = sections[n].a[0];
 8000804:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
            sections_[n].a[1] = sections[n].a[1];
 8000808:	f8df a364 	ldr.w	sl, [pc, #868]	; 8000b70 <recorder::SynthEngine::Init()+0x468>
            x_[n][0] = 0;
 800080c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
            sections_[n].a[1] = sections[n].a[1];
 8000810:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
            sections_[n].b[1] = sections[n].b[1];
 8000814:	f8df a35c 	ldr.w	sl, [pc, #860]	; 8000b74 <recorder::SynthEngine::Init()+0x46c>
            x_[n][1] = 0;
 8000818:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
            sections_[n].b[1] = sections[n].b[1];
 800081c:	f8c4 a084 	str.w	sl, [r4, #132]	; 0x84
            sections_[n].a[0] = sections[n].a[0];
 8000820:	f8df a354 	ldr.w	sl, [pc, #852]	; 8000b78 <recorder::SynthEngine::Init()+0x470>
            x_[n][2] = 0;
 8000824:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
            x_[n][0] = 0;
 8000828:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
            x_[n][1] = 0;
 800082c:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            x_[n][2] = 0;
 8000830:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
            x_[n][0] = 0;
 8000834:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
            x_[n][1] = 0;
 8000838:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
            x_[n][2] = 0;
 800083c:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
            sections_[n].b[0] = sections[n].b[0];
 8000840:	66e7      	str	r7, [r4, #108]	; 0x6c
            sections_[n].b[2] = sections[n].b[2];
 8000842:	6767      	str	r7, [r4, #116]	; 0x74
            sections_[n].b[0] = sections[n].b[0];
 8000844:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
            sections_[n].b[2] = sections[n].b[2];
 8000848:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
            sections_[n].a[0] = sections[n].a[0];
 800084c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
        void Init(float sampleRate)
        {
            sampleRate_ = sampleRate;

            // Default to neutral voice
            currentVoice_ = VOICE_NEUTRAL;
 8000850:	f8a4 81f8 	strh.w	r8, [r4, #504]	; 0x1f8
            sections_[n].a[1] = sections[n].a[1];
 8000854:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b7c <recorder::SynthEngine::Init()+0x474>
            {
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;

                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8000858:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8000ac8 <recorder::SynthEngine::Init()+0x3c0>
 800085c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
            sections_[n].b[1] = sections[n].b[1];
 8000860:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8000b80 <recorder::SynthEngine::Init()+0x478>
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8000864:	4a99      	ldr	r2, [pc, #612]	; (8000acc <recorder::SynthEngine::Init()+0x3c4>)
 8000866:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
            sections_[n].a[0] = sections[n].a[0];
 800086a:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8000b84 <recorder::SynthEngine::Init()+0x47c>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 800086e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8000ad0 <recorder::SynthEngine::Init()+0x3c8>
 8000872:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
            sections_[n].a[1] = sections[n].a[1];
 8000876:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000b88 <recorder::SynthEngine::Init()+0x480>
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 800087a:	f8df e310 	ldr.w	lr, [pc, #784]	; 8000b8c <recorder::SynthEngine::Init()+0x484>
 800087e:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4
            sections_[n].b[1] = sections[n].b[1];
 8000882:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8000b90 <recorder::SynthEngine::Init()+0x488>
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8000886:	4993      	ldr	r1, [pc, #588]	; (8000ad4 <recorder::SynthEngine::Init()+0x3cc>)
 8000888:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
            sections_[n].a[0] = sections[n].a[0];
 800088c:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8000b94 <recorder::SynthEngine::Init()+0x48c>
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8000890:	f8df c304 	ldr.w	ip, [pc, #772]	; 8000b98 <recorder::SynthEngine::Init()+0x490>
 8000894:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
            sections_[n].a[1] = sections[n].a[1];
 8000898:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8000b9c <recorder::SynthEngine::Init()+0x494>
            sampleRate_ = sampleRate;
 800089c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80008a0:	f8c4 80b8 	str.w	r8, [r4, #184]	; 0xb8
            // Initialize filters
            aa_filter_.Init();
            aa_filter_.Reset();

            // Example delay parameters
            delay_time_ = 0.3f;
 80008a4:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8000ba0 <recorder::SynthEngine::Init()+0x498>
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 80008a8:	edc4 7a78 	vstr	s15, [r4, #480]	; 0x1e0
 80008ac:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
            delay_feedback_ = 0.4f;
 80008b0:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8000ba4 <recorder::SynthEngine::Init()+0x49c>
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 80008b4:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
                currentFormantQs_[i] = targetFormantQs_[i];
 80008b8:	edc4 7a75 	vstr	s15, [r4, #468]	; 0x1d4
        sampleRate_ = sampleRate;
        centerFrequency_ = centerFrequency;
        Q_ = Q;
 80008bc:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
        sampleRate_ = sampleRate;
 80008c0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            sections_[n].b[0] = sections[n].b[0];
 80008c4:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
            sections_[n].b[2] = sections[n].b[2];
 80008c8:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
            sections_[n].b[0] = sections[n].b[0];
 80008cc:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
            sections_[n].b[2] = sections[n].b[2];
 80008d0:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
        x_[num_sections_][0] = 0;
 80008d4:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
        x_[num_sections_][1] = 0;
 80008d8:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
        x_[num_sections_][2] = 0;
 80008dc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
            wahPosition_ = 0.0f;
 80008e0:	f8c4 51fc 	str.w	r5, [r4, #508]	; 0x1fc
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80008e4:	ed84 7a72 	vstr	s14, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80008e8:	f8c4 e1cc 	str.w	lr, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 80008ec:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 80008f0:	f8c4 c1e4 	str.w	ip, [r4, #484]	; 0x1e4
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 80008f4:	ed84 7a6f 	vstr	s14, [r4, #444]	; 0x1bc
        centerFrequency_ = centerFrequency;
 80008f8:	ed84 7a44 	vstr	s14, [r4, #272]	; 0x110
        type_ = type;
 80008fc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8000900:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
 8000904:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000908:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
        sampleRate_ = sampleRate;
 800090c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8000910:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
            case BANDPASS:
            {
                b0_ = alpha;
                b1_ = 0.0f;
                b2_ = -alpha;
                a0_ = 1.0f + alpha;
 8000914:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <recorder::SynthEngine::Init()+0x3d0>)
                currentFormantQs_[i] = targetFormantQs_[i];
 8000916:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 800091a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
                a2_ = 1.0f - alpha;
                break;
        }

        // Normalize coefficients
        b0_ /= a0_;
 800091e:	4b6f      	ldr	r3, [pc, #444]	; (8000adc <recorder::SynthEngine::Init()+0x3d4>)
        Q_ = Q;
 8000920:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
        b0_ /= a0_;
 8000924:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        b1_ /= a0_;
        b2_ /= a0_;
 8000928:	4b6d      	ldr	r3, [pc, #436]	; (8000ae0 <recorder::SynthEngine::Init()+0x3d8>)
                a0_ = 1.0f + alpha;
 800092a:	4a6e      	ldr	r2, [pc, #440]	; (8000ae4 <recorder::SynthEngine::Init()+0x3dc>)
        b2_ /= a0_;
 800092c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
        a1_ /= a0_;
 8000930:	4b6d      	ldr	r3, [pc, #436]	; (8000ae8 <recorder::SynthEngine::Init()+0x3e0>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000932:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        a1_ /= a0_;
 8000936:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        a2_ /= a0_;
 800093a:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <recorder::SynthEngine::Init()+0x3e4>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 800093c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
        a2_ /= a0_;
 8000940:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
                a0_ = 1.0f + alpha;
 8000944:	4b6a      	ldr	r3, [pc, #424]	; (8000af0 <recorder::SynthEngine::Init()+0x3e8>)
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000946:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
                a0_ = 1.0f + alpha;
 800094a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
        b0_ /= a0_;
 800094e:	4b69      	ldr	r3, [pc, #420]	; (8000af4 <recorder::SynthEngine::Init()+0x3ec>)
        b1_ /= a0_;
 8000950:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
        b0_ /= a0_;
 8000954:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
        b2_ /= a0_;
 8000958:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <recorder::SynthEngine::Init()+0x3f0>)
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 800095a:	f8c4 e1c0 	str.w	lr, [r4, #448]	; 0x1c0
 800095e:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
        a1_ /= a0_;
 8000962:	4b66      	ldr	r3, [pc, #408]	; (8000afc <recorder::SynthEngine::Init()+0x3f4>)
        centerFrequency_ = centerFrequency;
 8000964:	f8c4 e14c 	str.w	lr, [r4, #332]	; 0x14c
        a1_ /= a0_;
 8000968:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
        a2_ /= a0_;
 800096c:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <recorder::SynthEngine::Init()+0x3f8>)
                currentFormantQs_[i] = targetFormantQs_[i];
 800096e:	f8c4 c1d8 	str.w	ip, [r4, #472]	; 0x1d8
 8000972:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
            q_mult_ = qMult;
 8000976:	4b63      	ldr	r3, [pc, #396]	; (8000b04 <recorder::SynthEngine::Init()+0x3fc>)
        Q_ = Q;
 8000978:	f8c4 c150 	str.w	ip, [r4, #336]	; 0x150
        type_ = type;
 800097c:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
 8000980:	f884 0180 	strb.w	r0, [r4, #384]	; 0x180
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8000984:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 8000988:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 800098c:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 8000990:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 8000994:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
        b1_ /= a0_;
 8000998:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
                currentFormantFreqs_[i] = targetFormantFreqs_[i];
 800099c:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
        centerFrequency_ = centerFrequency;
 80009a0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80009a4:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
            q_mult_ = qMult;
 80009a8:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
            freq_mult_ = freqMult;
 80009ac:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <recorder::SynthEngine::Init()+0x400>)
        float current_dutycycle;
        int randomizationcounter;
        const int randomizationperiod;
        void UpdateDutyCycle()
        {
            if (duty_cyclerandomization > 0.0f)
 80009ae:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
 80009b2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
                a0_ = 1.0f + alpha;
 80009b6:	f8c4 2194 	str.w	r2, [r4, #404]	; 0x194
 80009ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        }

        // Function to set the formant morphing rate
        void SetFormantRate(float rate)
        {
            formantRate_ = rate;
 80009be:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <recorder::SynthEngine::Init()+0x404>)
        b0_ /= a0_;
 80009c0:	4a53      	ldr	r2, [pc, #332]	; (8000b10 <recorder::SynthEngine::Init()+0x408>)
 80009c2:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 80009c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ca:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
            formant_filter_.SetVoice(FormantFilter::VOICE_NEUTRAL);
            formant_filter_.setQMult(6.0f);
            formant_filter_.setFreqMult(1.4f);
            formant_filter_.SetMode(FormantFilter::FILTER_MODE_NORMAL);
            formant_filter_.SetFormantRate(0.000001f);
            attack_formant_rate_ = 0.001f;
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <recorder::SynthEngine::Init()+0x40c>)
        b2_ /= a0_;
 80009d0:	4a51      	ldr	r2, [pc, #324]	; (8000b18 <recorder::SynthEngine::Init()+0x410>)
 80009d2:	6223      	str	r3, [r4, #32]
 80009d4:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
 80009d8:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <recorder::SynthEngine::Init()+0x414>)
        a1_ /= a0_;
 80009da:	4a51      	ldr	r2, [pc, #324]	; (8000b20 <recorder::SynthEngine::Init()+0x418>)
 80009dc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 80009e0:	f8c4 2198 	str.w	r2, [r4, #408]	; 0x198
    public:
        // Initialize the high-pass filter
        void Init(float cutoff, float sample_rate, float initial_value = 0.0f)
        {
            float omega = 2.0f * M_PI * cutoff / sample_rate;
            factor_ = omega / (1.0f + omega); // Proper bilinear transform coefficient
 80009e4:	4b4f      	ldr	r3, [pc, #316]	; (8000b24 <recorder::SynthEngine::Init()+0x41c>)
        a2_ /= a0_;
 80009e6:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <recorder::SynthEngine::Init()+0x420>)
            freq_mult_ = 1.0f;
 80009e8:	61e7      	str	r7, [r4, #28]
        x1_ = x2_ = y1_ = y2_ = 0.0f;
 80009ea:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
 80009ee:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
 80009f2:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
 80009f6:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
        b1_ /= a0_;
 80009fa:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
            history_ = initial_value;
 80009fe:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
        a2_ /= a0_;
 8000a02:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
 8000a06:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
        }

        // Reset the filter state
        void Reset(float initial_value = 0.0f)
        {
            history_ = initial_value; // Last output sample (y[n-1])
 8000a0a:	f8c6 526c 	str.w	r5, [r6, #620]	; 0x26c
            lowpassHistory_ = initial_value; // Tracks DC content
 8000a0e:	f8c6 5270 	str.w	r5, [r6, #624]	; 0x270
            base_dutycycle = std::max(0.0f, std::min(1.0f, duty_cycle));
 8000a12:	f8c4 920c 	str.w	r9, [r4, #524]	; 0x20c
            if (duty_cyclerandomization > 0.0f)
 8000a16:	dc33      	bgt.n	8000a80 <recorder::SynthEngine::Init()+0x378>
 8000a18:	eddf 7a44 	vldr	s15, [pc, #272]	; 8000b2c <recorder::SynthEngine::Init()+0x424>
            lowpass_filter_.Init(19000.0f, sample_rate_, 0.0f);
            highpass_filter_.Init(120.0f, sample_rate_, 0.0f);

            // Set up pulse generator
            pulse_generator_.SetBaseDutyCycle(0.5f);
            duty_gain_ = 2.4f;
 8000a1c:	4944      	ldr	r1, [pc, #272]	; (8000b30 <recorder::SynthEngine::Init()+0x428>)
            freq_wobbliness_ = 0.0f;
 8000a1e:	2300      	movs	r3, #0
            pulse_generator_.SetDutyCycleRandomization(0.0f);

            // ADSR parameters
            adsr_attack_time_ = 0.1f; // seconds
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <recorder::SynthEngine::Init()+0x42c>)
            duty_gain_ = 2.4f;
 8000a22:	61a1      	str	r1, [r4, #24]
            adsr_decay_time_ = 0.2f;
 8000a24:	4944      	ldr	r1, [pc, #272]	; (8000b38 <recorder::SynthEngine::Init()+0x430>)
            freq_wobbliness_ = 0.0f;
 8000a26:	6463      	str	r3, [r4, #68]	; 0x44
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8000a28:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
                float offset = random_offset * max_offset;
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
            }
            else
            {
                current_dutycycle = base_dutycycle;
 8000a2c:	f8c4 9214 	str.w	r9, [r4, #532]	; 0x214
            adsr_attack_time_ = 0.1f; // seconds
 8000a30:	f8c6 2294 	str.w	r2, [r6, #660]	; 0x294
            adsr_decay_time_ = 0.2f;
 8000a34:	f8c6 1298 	str.w	r1, [r6, #664]	; 0x298
            adsr_sustain_level_ = 0.8f;
            adsr_release_time_ = 0.1f;
 8000a38:	f8c6 22a0 	str.w	r2, [r6, #672]	; 0x2a0
            adsr_sustain_level_ = 0.8f;
 8000a3c:	493f      	ldr	r1, [pc, #252]	; (8000b3c <recorder::SynthEngine::Init()+0x434>)
 8000a3e:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <recorder::SynthEngine::Init()+0x438>)
 8000a40:	f8c6 129c 	str.w	r1, [r6, #668]	; 0x29c
 8000a44:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
     * @brief Initialize the vibrato with the given sample rate.
     * @param sampleRate The audio sample rate (e.g. 16000).
     */
    void Init(float sampleRate)
    {
        sampleRate_   = sampleRate;
 8000a48:	f8d6 12ac 	ldr.w	r1, [r6, #684]	; 0x2ac
     * @param depth       Maximum vibrato depth (0.0 -> 0.25 in typical usage).
     * @param buildupTime Time in seconds to ramp from 0 -> depth after `Trigger()`.
     */
    void SetParameters(float rate, float depth, float buildupTime)
    {
        rate_        = rate;
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <recorder::SynthEngine::Init()+0x3fc>)
        depth_        = targetDepth_;
 8000a4e:	f8d6 0284 	ldr.w	r0, [r6, #644]	; 0x284
        sampleRate_   = sampleRate;
 8000a52:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
        buildingUp_   = false;
 8000a56:	2100      	movs	r1, #0
        phase_        = 0.0f;
 8000a58:	f8c6 3278 	str.w	r3, [r6, #632]	; 0x278
        currentDepth_ = 0.0f;
 8000a5c:	f8c6 328c 	str.w	r3, [r6, #652]	; 0x28c
        rate_        = rate;
 8000a60:	f8c6 227c 	str.w	r2, [r6, #636]	; 0x27c
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
        buildupTime_ = (buildupTime <= 0.0f) ? 0.01f : buildupTime;
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <recorder::SynthEngine::Init()+0x43c>)
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
 8000a66:	4a38      	ldr	r2, [pc, #224]	; (8000b48 <recorder::SynthEngine::Init()+0x440>)
        depth_        = targetDepth_;
 8000a68:	f8c6 0280 	str.w	r0, [r6, #640]	; 0x280
        buildingUp_   = false;
 8000a6c:	f886 1290 	strb.w	r1, [r6, #656]	; 0x290
        targetDepth_ = depth; // We'll still clamp and smooth this in Process().
 8000a70:	f8c6 2284 	str.w	r2, [r6, #644]	; 0x284
        buildupTime_ = (buildupTime <= 0.0f) ? 0.01f : buildupTime;
 8000a74:	f8c6 3288 	str.w	r3, [r6, #648]	; 0x288
            freq_mult_ = freqMult;
 8000a78:	edc4 7a7d 	vstr	s15, [r4, #500]	; 0x1f4
            // Initialize and set default vibrato parameters
            vibrato_.Init(sample_rate_);
            // Example: vibrato rate = 5 Hz, depth = 0.12, buildup = 1.8 seconds
            vibrato_.SetParameters(6.0f, 0.12f, 1.8f);
            formant_filter_.setFreqMult(mapFloat(fundamentalFreq_, kMinFundamental, kMaxFundamental, 0.7f, 2.0f));
        }
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8000a80:	f007 fa54 	bl	8007f2c <rand>
            return formant_freq_mult_;
        }

        float mapFloat(float x, float in_min, float in_max, float out_min, float out_max)
        {
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000a84:	ed94 7a02 	vldr	s14, [r4, #8]
 8000a88:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8000b4c <recorder::SynthEngine::Init()+0x444>
 8000a8c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000b50 <recorder::SynthEngine::Init()+0x448>
 8000a90:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000a94:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000b54 <recorder::SynthEngine::Init()+0x44c>
                current_dutycycle = base_dutycycle;
 8000a98:	f8d4 920c 	ldr.w	r9, [r4, #524]	; 0x20c
 8000a9c:	eee7 7a26 	vfma.f32	s15, s14, s13
            }
        }
 8000aa0:	e7bc      	b.n	8000a1c <recorder::SynthEngine::Init()+0x314>
 8000aa2:	bf00      	nop
 8000aa4:	4302cf5c 	.word	0x4302cf5c
 8000aa8:	3f642905 	.word	0x3f642905
 8000aac:	bd430c20 	.word	0xbd430c20
 8000ab0:	3c4b8680 	.word	0x3c4b8680
 8000ab4:	39831000 	.word	0x39831000
 8000ab8:	3bcc2980 	.word	0x3bcc2980
 8000abc:	3a23c800 	.word	0x3a23c800
 8000ac0:	3b802d22 	.word	0x3b802d22
 8000ac4:	467a0000 	.word	0x467a0000
 8000ac8:	4142b852 	.word	0x4142b852
 8000acc:	418228f6 	.word	0x418228f6
 8000ad0:	44368000 	.word	0x44368000
 8000ad4:	45188000 	.word	0x45188000
 8000ad8:	3f817cab 	.word	0x3f817cab
 8000adc:	3c3c2611 	.word	0x3c3c2611
 8000ae0:	bc3c2611 	.word	0xbc3c2611
 8000ae4:	3f8337e2 	.word	0x3f8337e2
 8000ae8:	bff2bba3 	.word	0xbff2bba3
 8000aec:	3f7a1ed0 	.word	0x3f7a1ed0
 8000af0:	3f823197 	.word	0x3f823197
 8000af4:	3c8a0814 	.word	0x3c8a0814
 8000af8:	bc8a0814 	.word	0xbc8a0814
 8000afc:	bfe4faba 	.word	0xbfe4faba
 8000b00:	3f775f7f 	.word	0x3f775f7f
 8000b04:	40c00000 	.word	0x40c00000
 8000b08:	3fb33333 	.word	0x3fb33333
 8000b0c:	358637bd 	.word	0x358637bd
 8000b10:	3cc8eb3d 	.word	0x3cc8eb3d
 8000b14:	3a83126f 	.word	0x3a83126f
 8000b18:	bcc8eb3d 	.word	0xbcc8eb3d
 8000b1c:	3f61be9a 	.word	0x3f61be9a
 8000b20:	bf8f974e 	.word	0xbf8f974e
 8000b24:	3d38553d 	.word	0x3d38553d
 8000b28:	3f73714c 	.word	0x3f73714c
 8000b2c:	3f536814 	.word	0x3f536814
 8000b30:	4019999a 	.word	0x4019999a
 8000b34:	3dcccccd 	.word	0x3dcccccd
 8000b38:	3e4ccccd 	.word	0x3e4ccccd
 8000b3c:	3f4ccccd 	.word	0x3f4ccccd
 8000b40:	3ba3d70a 	.word	0x3ba3d70a
 8000b44:	3fe66666 	.word	0x3fe66666
 8000b48:	3df5c28f 	.word	0x3df5c28f
 8000b4c:	4202cccd 	.word	0x4202cccd
 8000b50:	3aa812fd 	.word	0x3aa812fd
 8000b54:	3f333333 	.word	0x3f333333
 8000b58:	3a446737 	.word	0x3a446737
 8000b5c:	3a85b218 	.word	0x3a85b218
 8000b60:	bfbc65fb 	.word	0xbfbc65fb
 8000b64:	3f10296d 	.word	0x3f10296d
 8000b68:	beade39b 	.word	0xbeade39b
 8000b6c:	bfb80d8c 	.word	0xbfb80d8c
 8000b70:	3f2d1db0 	.word	0x3f2d1db0
 8000b74:	bf74e042 	.word	0xbf74e042
 8000b78:	bfb33dc4 	.word	0xbfb33dc4
 8000b7c:	3f4f7eb1 	.word	0x3f4f7eb1
 8000b80:	bf954df0 	.word	0xbf954df0
 8000b84:	bfb0aec0 	.word	0xbfb0aec0
 8000b88:	3f68ba72 	.word	0x3f68ba72
 8000b8c:	44884000 	.word	0x44884000
 8000b90:	bf9e3e9d 	.word	0xbf9e3e9d
 8000b94:	bfb140a2 	.word	0xbfb140a2
 8000b98:	4141c28f 	.word	0x4141c28f
 8000b9c:	3f793977 	.word	0x3f793977
 8000ba0:	3e99999a 	.word	0x3e99999a
 8000ba4:	3ecccccd 	.word	0x3ecccccd

08000ba8 <recorder::SynthEngine::RenderOneSample()>:
        float RenderOneSample()
 8000ba8:	b570      	push	{r4, r5, r6, lr}
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000baa:	f500 3580 	add.w	r5, r0, #65536	; 0x10000
        float RenderOneSample()
 8000bae:	4604      	mov	r4, r0
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000bb0:	f8d5 32a8 	ldr.w	r3, [r5, #680]	; 0x2a8
        float RenderOneSample()
 8000bb4:	ed2d 8b06 	vpush	{d8-d10}
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 81bb 	bne.w	8000f34 <recorder::SynthEngine::RenderOneSample()+0x38c>
 8000bbe:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8000f50 <recorder::SynthEngine::RenderOneSample()+0x3a8>
 8000bc2:	ed95 7a96 	vldr	s14, [r5, #600]	; 0x258
 8000bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bce:	f240 81b9 	bls.w	8000f44 <recorder::SynthEngine::RenderOneSample()+0x39c>
                adsr_value_ = 0.0f;
 8000bd2:	2300      	movs	r3, #0
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000bd4:	edd5 7aab 	vldr	s15, [r5, #684]	; 0x2ac
                adsr_value_ = 0.0f;
 8000bd8:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
            float phaseIncrement = currentFrequency_ / sample_rate_;
 8000bdc:	edd4 6a01 	vldr	s13, [r4, #4]
            if (phase_ >= 1.0f)
 8000be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            phase_ += phaseIncrement;
 8000be4:	ed94 8a00 	vldr	s16, [r4]
            float phaseIncrement = currentFrequency_ / sample_rate_;
 8000be8:	eec6 9aa7 	vdiv.f32	s19, s13, s15
            if (--randomizationcounter <= 0)
 8000bec:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
            phase_ += phaseIncrement;
 8000bf6:	ee39 8a88 	vadd.f32	s16, s19, s16
            if (phase_ >= 1.0f)
 8000bfa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8000bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                phase_ -= 1.0f;
 8000c02:	bfa8      	it	ge
 8000c04:	ee38 8a47 	vsubge.f32	s16, s16, s14
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	ed84 8a00 	vstr	s16, [r4]
 8000c0e:	f340 8291 	ble.w	8001134 <recorder::SynthEngine::RenderOneSample()+0x58c>
            float sample = (phase < current_dutycycle) ? 1.0f : -1.0f;
 8000c12:	ed94 9a85 	vldr	s18, [r4, #532]	; 0x214
 8000c16:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8000c1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8000c1e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float PolyBlep(float t, float dt)
        {
            if (dt == 0.0f)
 8000c26:	eef5 9a40 	vcmp.f32	s19, #0.0
            float sample = (phase < current_dutycycle) ? 1.0f : -1.0f;
 8000c2a:	bf54      	ite	pl
 8000c2c:	eeb0 aa67 	vmovpl.f32	s20, s15
 8000c30:	eeb0 aa68 	vmovmi.f32	s20, s17
            if (dt == 0.0f)
 8000c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c38:	d04b      	beq.n	8000cd2 <recorder::SynthEngine::RenderOneSample()+0x12a>
                return 0.0f;
            // Normalize t to [0, 1)
            t = fmodf(t, 1.0f);
 8000c3a:	eef0 0a68 	vmov.f32	s1, s17
 8000c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8000c42:	f006 f917 	bl	8006e74 <fmodf>
            if (t < dt)
 8000c46:	eef4 9ac0 	vcmpe.f32	s19, s0
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	f300 82a2 	bgt.w	8001196 <recorder::SynthEngine::RenderOneSample()+0x5ee>
            {
                t /= dt;
                return t + t - t * t - 1.0f;
            }
            else if (t > 1.0f - dt)
 8000c52:	ee78 7ae9 	vsub.f32	s15, s17, s19
 8000c56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	dd0d      	ble.n	8000c7c <recorder::SynthEngine::RenderOneSample()+0xd4>
            {
                t = (t - 1.0f) / dt;
 8000c60:	ee30 0a68 	vsub.f32	s0, s0, s17
                return t * t + t + t + 1.0f;
 8000c64:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            sample += PolyBlep(phase, phase_increment);
 8000c68:	ee7a 8a28 	vadd.f32	s17, s20, s17
                t = (t - 1.0f) / dt;
 8000c6c:	ee80 7a29 	vdiv.f32	s14, s0, s19
                return t * t + t + t + 1.0f;
 8000c70:	ee77 7a27 	vadd.f32	s15, s14, s15
            sample += PolyBlep(phase, phase_increment);
 8000c74:	eee7 8a27 	vfma.f32	s17, s14, s15
 8000c78:	eeb0 aa68 	vmov.f32	s20, s17
            float t = phase - current_dutycycle;
 8000c7c:	ee38 0a49 	vsub.f32	s0, s16, s18
            if (t < 0.0f)
 8000c80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	d503      	bpl.n	8000c92 <recorder::SynthEngine::RenderOneSample()+0xea>
                t += 1.0f;
 8000c8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c8e:	ee30 0a27 	vadd.f32	s0, s0, s15
            t = fmodf(t, 1.0f);
 8000c92:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c96:	f006 f8ed 	bl	8006e74 <fmodf>
            if (t < dt)
 8000c9a:	eef4 9ac0 	vcmpe.f32	s19, s0
 8000c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca2:	f300 826b 	bgt.w	800117c <recorder::SynthEngine::RenderOneSample()+0x5d4>
            else if (t > 1.0f - dt)
 8000ca6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000caa:	ee37 7ae9 	vsub.f32	s14, s15, s19
 8000cae:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	f340 827b 	ble.w	80011b0 <recorder::SynthEngine::RenderOneSample()+0x608>
                t = (t - 1.0f) / dt;
 8000cba:	ee30 0a67 	vsub.f32	s0, s0, s15
                return t * t + t + t + 1.0f;
 8000cbe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
                t = (t - 1.0f) / dt;
 8000cc2:	eec0 6a29 	vdiv.f32	s13, s0, s19
                return t * t + t + t + 1.0f;
 8000cc6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8000cca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000cce:	eef0 9a67 	vmov.f32	s19, s15
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000cd2:	ed94 6a4e 	vldr	s12, [r4, #312]	; 0x138
 8000cd6:	ed94 7a5d 	vldr	s14, [r4, #372]	; 0x174
 8000cda:	edd4 6a4c 	vldr	s13, [r4, #304]	; 0x130
 8000cde:	edd4 7a5b 	vldr	s15, [r4, #364]	; 0x16c
 8000ce2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000ce6:	edd4 3a4d 	vldr	s7, [r4, #308]	; 0x134
 8000cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cee:	ed94 5a5c 	vldr	s10, [r4, #368]	; 0x170
 8000cf2:	ed94 6a4b 	vldr	s12, [r4, #300]	; 0x12c
 8000cf6:	ed94 7a5a 	vldr	s14, [r4, #360]	; 0x168
 8000cfa:	eee6 6a23 	vfma.f32	s13, s12, s7
 8000cfe:	ed94 4a4f 	vldr	s8, [r4, #316]	; 0x13c
 8000d02:	eee7 7a05 	vfma.f32	s15, s14, s10
 8000d06:	ed94 6a5e 	vldr	s12, [r4, #376]	; 0x178
        }

        float Process(float input)
        {
            history_ += factor_ * (input - history_);
 8000d0a:	edd4 4a82 	vldr	s9, [r4, #520]	; 0x208
 8000d0e:	ed94 3a48 	vldr	s6, [r4, #288]	; 0x120
 8000d12:	edd4 5a57 	vldr	s11, [r4, #348]	; 0x15c
 8000d16:	ee7a 8a64 	vsub.f32	s17, s20, s9
 8000d1a:	ed94 1a50 	vldr	s2, [r4, #320]	; 0x140
 8000d1e:	eee3 6a44 	vfms.f32	s13, s6, s8
 8000d22:	ed94 2a5f 	vldr	s4, [r4, #380]	; 0x17c
 8000d26:	eee5 7ac6 	vfms.f32	s15, s11, s12
 8000d2a:	ed94 7a81 	vldr	s14, [r4, #516]	; 0x204
 8000d2e:	ee78 8ae9 	vsub.f32	s17, s17, s19
 8000d32:	edd4 0a49 	vldr	s1, [r4, #292]	; 0x124
 8000d36:	edd4 1a58 	vldr	s3, [r4, #352]	; 0x160
 8000d3a:	edd4 2a4a 	vldr	s5, [r4, #296]	; 0x128
 8000d3e:	eee7 4a28 	vfma.f32	s9, s14, s17
 8000d42:	ed94 3a59 	vldr	s6, [r4, #356]	; 0x164
 8000d46:	eee0 6ac1 	vfms.f32	s13, s1, s2
 8000d4a:	ed94 0a6c 	vldr	s0, [r4, #432]	; 0x1b0
 8000d4e:	eee1 7ac2 	vfms.f32	s15, s3, s4
 8000d52:	ed94 7a6a 	vldr	s14, [r4, #424]	; 0x1a8
 8000d56:	edd4 5a6b 	vldr	s11, [r4, #428]	; 0x1ac
 8000d5a:	ee27 7a00 	vmul.f32	s14, s14, s0
        x2_ = x1_;
 8000d5e:	edc4 3a4e 	vstr	s7, [r4, #312]	; 0x138
        y2_ = y1_;
 8000d62:	ed84 4a50 	vstr	s8, [r4, #320]	; 0x140
 8000d66:	ed84 6a5f 	vstr	s12, [r4, #380]	; 0x17c
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d6a:	eee4 6aa2 	vfma.f32	s13, s9, s5
        x2_ = x1_;
 8000d6e:	ed84 5a5d 	vstr	s10, [r4, #372]	; 0x174
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d72:	eee4 7a83 	vfma.f32	s15, s9, s6
 8000d76:	edc4 4a82 	vstr	s9, [r4, #520]	; 0x208
        x1_ = input;
 8000d7a:	edc4 4a4d 	vstr	s9, [r4, #308]	; 0x134
 8000d7e:	edc4 4a5c 	vstr	s9, [r4, #368]	; 0x170
            float output1 = filters_[0].Process(input);
            float output2 = filters_[1].Process(input);
            float output3 = filters_[2].Process(input);

            // Sum the outputs and apply a gain factor
            float output = (output1 + output2 * 0.3f + output3 * 0.3f);
 8000d82:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8000f54 <recorder::SynthEngine::RenderOneSample()+0x3ac>

    float Process(float input, float delay, float feedback)
    {
        delay *= delay;
        delay = delay_time_lpf_.Process(delay);
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8000d86:	ed9f 6a74 	vldr	s12, [pc, #464]	; 8000f58 <recorder::SynthEngine::RenderOneSample()+0x3b0>
        y1_ = y0;
 8000d8a:	edc4 6a4f 	vstr	s13, [r4, #316]	; 0x13c
 8000d8e:	edc4 7a5e 	vstr	s15, [r4, #376]	; 0x178
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000d92:	ed94 5a69 	vldr	s10, [r4, #420]	; 0x1a4
 8000d96:	edd4 3a6d 	vldr	s7, [r4, #436]	; 0x1b4
 8000d9a:	eea5 7a25 	vfma.f32	s14, s10, s11
 8000d9e:	ed94 1a66 	vldr	s2, [r4, #408]	; 0x198
 8000da2:	ed94 0a6e 	vldr	s0, [r4, #440]	; 0x1b8
 8000da6:	ed94 8a67 	vldr	s16, [r4, #412]	; 0x19c
 8000daa:	edd4 1a68 	vldr	s3, [r4, #416]	; 0x1a0

        // Process one sample through the high-pass filter
        float Process(float input)
        {
            // Track the low frequencies (DC removal)
            lowpassHistory_ += factor_ * (input - lowpassHistory_);
 8000dae:	ed95 5a9c 	vldr	s10, [r5, #624]	; 0x270
 8000db2:	ed94 3a06 	vldr	s6, [r4, #24]
 8000db6:	eea1 7a63 	vfms.f32	s14, s2, s7
 8000dba:	ed95 4aa9 	vldr	s8, [r5, #676]	; 0x2a4
        x2_ = x1_;
 8000dbe:	edc4 5a6c 	vstr	s11, [r4, #432]	; 0x1b0
 8000dc2:	edd5 5a98 	vldr	s11, [r5, #608]	; 0x260
 8000dc6:	ee24 4a03 	vmul.f32	s8, s8, s6
 8000dca:	edd5 2a9a 	vldr	s5, [r5, #616]	; 0x268
 8000dce:	edd5 0a97 	vldr	s1, [r5, #604]	; 0x25c
 8000dd2:	eeb0 1a65 	vmov.f32	s2, s11
            sample = delay_.Process(sample, delay_time_, delay_feedback_);
 8000dd6:	ed94 3a0e 	vldr	s6, [r4, #56]	; 0x38
 8000dda:	eea8 7a40 	vfms.f32	s14, s16, s0
        y2_ = y1_;
 8000dde:	edc4 3a6e 	vstr	s7, [r4, #440]	; 0x1b8
 8000de2:	ee93 1a03 	vfnms.f32	s2, s6, s6
 8000de6:	edd4 3a0f 	vldr	s7, [r4, #60]	; 0x3c
        x1_ = input;
 8000dea:	edc4 4a6b 	vstr	s9, [r4, #428]	; 0x1ac
        float y0 = b0_ * input + b1_ * x1_ + b2_ * x2_ - a1_ * y1_ - a2_ * y2_;
 8000dee:	eea4 7aa1 	vfma.f32	s14, s9, s3
 8000df2:	eee0 5a81 	vfma.f32	s11, s1, s2
 8000df6:	ee77 7a87 	vadd.f32	s15, s15, s14
        y1_ = y0;
 8000dfa:	ed84 7a6d 	vstr	s14, [r4, #436]	; 0x1b4
 8000dfe:	eeb0 7a45 	vmov.f32	s14, s10
 8000e02:	edc5 5a98 	vstr	s11, [r5, #608]	; 0x260
 8000e06:	ee25 6a86 	vmul.f32	s12, s11, s12
 8000e0a:	eee7 6a82 	vfma.f32	s13, s15, s4
 8000e0e:	eef0 7a45 	vmov.f32	s15, s10
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8000e12:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8000e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1a:	ee96 7a84 	vfnms.f32	s14, s13, s8
 8000e1e:	eee2 7a87 	vfma.f32	s15, s5, s14
            
            // Subtract the low frequencies from the original signal
            float output = input - lowpassHistory_;
 8000e22:	eeb0 8a67 	vmov.f32	s16, s15
            lowpassHistory_ += factor_ * (input - lowpassHistory_);
 8000e26:	edc5 7a9c 	vstr	s15, [r5, #624]	; 0x270
            float output = input - lowpassHistory_;
 8000e2a:	ee96 8a84 	vfnms.f32	s16, s13, s8

            history_ = output;
 8000e2e:	ed85 8a9b 	vstr	s16, [r5, #620]	; 0x26c
 8000e32:	f2c0 817c 	blt.w	800112e <recorder::SynthEngine::RenderOneSample()+0x586>
 8000e36:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8000e3a:	eef4 5ac5 	vcmpe.f32	s11, s10
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	f340 8133 	ble.w	80010ac <recorder::SynthEngine::RenderOneSample()+0x504>
 8000e46:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    OnePoleLowpass delay_time_lpf_;
    float interpolator_history_;

    uint32_t ReadIndex(uint32_t offset)
    {
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8000e4a:	f8d5 6220 	ldr.w	r6, [r5, #544]	; 0x220
 8000e4e:	1af3      	subs	r3, r6, r3
 8000e50:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8000e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000e58:	edd3 6a88 	vldr	s13, [r3, #544]	; 0x220
        output = std::clamp<float>(input + output * feedback, -2, 2);
 8000e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e60:	ed9f 5a3e 	vldr	s10, [pc, #248]	; 8000f5c <recorder::SynthEngine::RenderOneSample()+0x3b4>
 8000e64:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
        follower_.Reset();
    }

    float Process(float in)
    {
        float envelope = follower_.Process(in * pregain_);
 8000e68:	edd5 7a89 	vldr	s15, [r5, #548]	; 0x224
 8000e6c:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0

    float Process(float in)
    {
        in = std::abs(in);

        if (in >= envelope_)
 8000e70:	ed95 0a91 	vldr	s0, [r5, #580]	; 0x244
 8000e74:	fe83 7ac7 	vminnm.f32	s14, s7, s14
 8000e78:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 8000e7c:	eea6 8a87 	vfma.f32	s16, s13, s14
 8000e80:	edc5 6a99 	vstr	s13, [r5, #612]	; 0x264
 8000e84:	fe88 8a65 	vminnm.f32	s16, s16, s11
 8000e88:	fe88 8a06 	vmaxnm.f32	s16, s16, s12
 8000e8c:	ee68 7a27 	vmul.f32	s15, s16, s15
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000e90:	eef0 7ae7 	vabs.f32	s15, s15
 8000e94:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	f2c0 813f 	blt.w	800111e <recorder::SynthEngine::RenderOneSample()+0x576>
        {
            envelope_ += attack_rate_ * (in - envelope_);
 8000ea0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000ea4:	ed95 7a8d 	vldr	s14, [r5, #564]	; 0x234
            hold_count_ = 0;
 8000ea8:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8000eaa:	eea7 0a27 	vfma.f32	s0, s14, s15
            hold_count_ = 0;
 8000eae:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
            envelope_ += attack_rate_ * (in - envelope_);
 8000eb2:	ed85 0a91 	vstr	s0, [r5, #580]	; 0x244
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
 8000eb6:	f006 f801 	bl	8006ebc <log10f>
        float sense = 20 * std::log10(envelope);
 8000eba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
        // h11 = t^3 - t^2
        // We multiply h01 by A = ratio * softness to provide the step from 0
        // to A. We multiply h11 by 2A to make the ending slope equal to ratio.
        // Then, the sum of the terms reduces to A*t^2.

        if (db > softness_)
 8000ebe:	edd5 7a8b 	vldr	s15, [r5, #556]	; 0x22c
        float sense = 20 * std::log10(envelope);
 8000ec2:	ee20 0a07 	vmul.f32	s0, s0, s14
        if (db > softness_)
 8000ec6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	f340 80d4 	ble.w	800107a <recorder::SynthEngine::RenderOneSample()+0x4d2>
        {
            return ratio_ * db;
 8000ed2:	edd5 7a8a 	vldr	s15, [r5, #552]	; 0x228
 8000ed6:	ee20 0a27 	vmul.f32	s0, s0, s15
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 8000eda:	eddf 7a21 	vldr	s15, [pc, #132]	; 8000f60 <recorder::SynthEngine::RenderOneSample()+0x3b8>
        buffer_[write_head_] = compressor_.Process(output);
 8000ede:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8000ee2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000ee6:	f005 fe4d 	bl	8006b84 <expf>
        output *= 0.5;
 8000eea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
        return in * std::pow(10.0, gain / 20);
 8000eee:	ee20 7a08 	vmul.f32	s14, s0, s16
        if (in >= envelope_)
 8000ef2:	edd5 7a96 	vldr	s15, [r5, #600]	; 0x258
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000ef6:	1c73      	adds	r3, r6, #1
        output *= 0.5;
 8000ef8:	ee28 0a26 	vmul.f32	s0, s16, s13
        buffer_[write_head_] = compressor_.Process(output);
 8000efc:	ed84 7a88 	vstr	s14, [r4, #544]	; 0x220
        write_head_ = (write_head_ + 1) % kBufferSize;
 8000f00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f04:	eeb0 7ac0 	vabs.f32	s14, s0
 8000f08:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
 8000f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	f2c0 80a7 	blt.w	8001066 <recorder::SynthEngine::RenderOneSample()+0x4be>
            envelope_ += attack_rate_ * (in - envelope_);
 8000f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1c:	edd5 6a92 	vldr	s13, [r5, #584]	; 0x248
            hold_count_ = 0;
 8000f20:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8000f22:	eee6 7a87 	vfma.f32	s15, s13, s14
            hold_count_ = 0;
 8000f26:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
        }
 8000f2a:	ecbd 8b06 	vpop	{d8-d10}
            envelope_ += attack_rate_ * (in - envelope_);
 8000f2e:	edc5 7a96 	vstr	s15, [r5, #600]	; 0x258
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
            switch (adsr_state_)
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	f63f ae4b 	bhi.w	8000bd2 <recorder::SynthEngine::RenderOneSample()+0x2a>
 8000f3c:	e8df f003 	tbb	[pc, r3]
 8000f40:	512c3312 	.word	0x512c3312
        }
 8000f44:	ecbd 8b06 	vpop	{d8-d10}
                return 0.0f;
 8000f48:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000f5c <recorder::SynthEngine::RenderOneSample()+0x3b4>
        }
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}
 8000f4e:	bf00      	nop
 8000f50:	3a83126f 	.word	0x3a83126f
 8000f54:	3e99999a 	.word	0x3e99999a
 8000f58:	3f666666 	.word	0x3f666666
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	3debc8e3 	.word	0x3debc8e3
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000f64:	edd5 7aab 	vldr	s15, [r5, #684]	; 0x2ac
 8000f68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000f6c:	edd5 6aa5 	vldr	s13, [r5, #660]	; 0x294
                adsr_value_ += increment;
 8000f70:	edd5 5aa9 	vldr	s11, [r5, #676]	; 0x2a4
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000f74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f78:	ee86 7a26 	vdiv.f32	s14, s12, s13
                adsr_value_ += increment;
 8000f7c:	ee37 7a25 	vadd.f32	s14, s14, s11
                if (adsr_value_ >= 1.0f)
 8000f80:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	f2c0 8115 	blt.w	80011b6 <recorder::SynthEngine::RenderOneSample()+0x60e>
                    adsr_state_ = ADSRState::kDecay;
 8000f8c:	2302      	movs	r3, #2
                    adsr_value_ = 1.0f;
 8000f8e:	ed85 6aa9 	vstr	s12, [r5, #676]	; 0x2a4
                    adsr_state_ = ADSRState::kDecay;
 8000f92:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
 8000f96:	e621      	b.n	8000bdc <recorder::SynthEngine::RenderOneSample()+0x34>
                adsr_value_ = adsr_sustain_level_;
 8000f98:	f8d5 329c 	ldr.w	r3, [r5, #668]	; 0x29c
                float increment = 1.0f / (adsr_attack_time_ * sample_rate_);
 8000f9c:	edd5 7aab 	vldr	s15, [r5, #684]	; 0x2ac
                adsr_value_ = adsr_sustain_level_;
 8000fa0:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
                break;
 8000fa4:	e61a      	b.n	8000bdc <recorder::SynthEngine::RenderOneSample()+0x34>
                float decrement = (1.0f - adsr_sustain_level_) / (adsr_decay_time_ * sample_rate_);
 8000fa6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000faa:	edd5 5aa7 	vldr	s11, [r5, #668]	; 0x29c
 8000fae:	edd5 7aab 	vldr	s15, [r5, #684]	; 0x2ac
 8000fb2:	edd5 6aa6 	vldr	s13, [r5, #664]	; 0x298
 8000fb6:	ee36 6a65 	vsub.f32	s12, s12, s11
                adsr_value_ -= decrement;
 8000fba:	ed95 7aa9 	vldr	s14, [r5, #676]	; 0x2a4
                float decrement = (1.0f - adsr_sustain_level_) / (adsr_decay_time_ * sample_rate_);
 8000fbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000fc2:	ee86 5a26 	vdiv.f32	s10, s12, s13
                adsr_value_ -= decrement;
 8000fc6:	ee37 7a45 	vsub.f32	s14, s14, s10
                if (adsr_value_ <= adsr_sustain_level_)
 8000fca:	eef4 5ac7 	vcmpe.f32	s11, s14
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	f2c0 80f0 	blt.w	80011b6 <recorder::SynthEngine::RenderOneSample()+0x60e>
                    adsr_state_ = ADSRState::kSustain;
 8000fd6:	2303      	movs	r3, #3
                    adsr_value_ = adsr_sustain_level_;
 8000fd8:	edc5 5aa9 	vstr	s11, [r5, #676]	; 0x2a4
                    adsr_state_ = ADSRState::kSustain;
 8000fdc:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
 8000fe0:	e5fc      	b.n	8000bdc <recorder::SynthEngine::RenderOneSample()+0x34>
                float decrement = adsr_sustain_level_ / (adsr_release_time_ * sample_rate_);
 8000fe2:	edd5 7aab 	vldr	s15, [r5, #684]	; 0x2ac
 8000fe6:	edd5 6aa8 	vldr	s13, [r5, #672]	; 0x2a0
 8000fea:	edd5 5aa7 	vldr	s11, [r5, #668]	; 0x29c
 8000fee:	ee67 6aa6 	vmul.f32	s13, s15, s13
                adsr_value_ -= decrement;
 8000ff2:	ed95 7aa9 	vldr	s14, [r5, #676]	; 0x2a4
            if (filterMode_ == FILTER_MODE_NORMAL)
 8000ff6:	f890 31f9 	ldrb.w	r3, [r0, #505]	; 0x1f9
                float decrement = adsr_sustain_level_ / (adsr_release_time_ * sample_rate_);
 8000ffa:	ee85 6aa6 	vdiv.f32	s12, s11, s13
                adsr_value_ -= decrement;
 8000ffe:	ee37 7a46 	vsub.f32	s14, s14, s12
 8001002:	ed85 7aa9 	vstr	s14, [r5, #676]	; 0x2a4
 8001006:	b9e3      	cbnz	r3, 8001042 <recorder::SynthEngine::RenderOneSample()+0x49a>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8001008:	f890 21f8 	ldrb.w	r2, [r0, #504]	; 0x1f8
 800100c:	4b7d      	ldr	r3, [pc, #500]	; (8001204 <recorder::SynthEngine::RenderOneSample()+0x65c>)
 800100e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001012:	eb03 1302 	add.w	r3, r3, r2, lsl #4
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8001016:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8001018:	6f99      	ldr	r1, [r3, #120]	; 0x78
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 800101a:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 800101e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8001022:	f8c0 11c8 	str.w	r1, [r0, #456]	; 0x1c8
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8001026:	f8c0 21e0 	str.w	r2, [r0, #480]	; 0x1e0
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 800102a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800102e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8001036:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800103a:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 800103e:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
                if (adsr_value_ <= 0.0f)
 8001042:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
            formantRate_ = rate;
 8001046:	4b70      	ldr	r3, [pc, #448]	; (8001208 <recorder::SynthEngine::RenderOneSample()+0x660>)
 8001048:	2200      	movs	r2, #0
 800104a:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	f63f adc3 	bhi.w	8000bdc <recorder::SynthEngine::RenderOneSample()+0x34>
                    adsr_state_ = ADSRState::kIdle;
 8001056:	2300      	movs	r3, #0
                    adsr_value_ = 0.0f;
 8001058:	f8c5 22a4 	str.w	r2, [r5, #676]	; 0x2a4
                    adsr_state_ = ADSRState::kIdle;
 800105c:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
                    is_note_on_ = false;
 8001060:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001064:	e5ba      	b.n	8000bdc <recorder::SynthEngine::RenderOneSample()+0x34>
        }
        else if (hold_count_ < hold_samples_)
 8001066:	e9d5 2394 	ldrd	r2, r3, [r5, #592]	; 0x250
 800106a:	4293      	cmp	r3, r2
 800106c:	d272      	bcs.n	8001154 <recorder::SynthEngine::RenderOneSample()+0x5ac>
        {
            hold_count_++;
 800106e:	3301      	adds	r3, #1
        }
 8001070:	ecbd 8b06 	vpop	{d8-d10}
 8001074:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
 8001078:	bd70      	pop	{r4, r5, r6, pc}
        }
        else
        {
            float t = std::max<float>(db * t_scaler_ + 0.5, 0);
 800107a:	edd5 6a8c 	vldr	s13, [r5, #560]	; 0x230
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800107e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001082:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001086:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	f100 8095 	bmi.w	80011bc <recorder::SynthEngine::RenderOneSample()+0x614>
 8001092:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001096:	ee30 0a07 	vadd.f32	s0, s0, s14
            return ratio_ * softness_ * t * t;
 800109a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800109e:	ed95 7a8a 	vldr	s14, [r5, #552]	; 0x228
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80010aa:	e716      	b.n	8000eda <recorder::SynthEngine::RenderOneSample()+0x332>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 80010ac:	eddf 7a57 	vldr	s15, [pc, #348]	; 800120c <recorder::SynthEngine::RenderOneSample()+0x664>
        float delay_samples = time * kAudioSampleRate;
 80010b0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001210 <recorder::SynthEngine::RenderOneSample()+0x668>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 80010b4:	ee76 7a27 	vadd.f32	s15, s12, s15
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 80010b8:	f8d5 6220 	ldr.w	r6, [r5, #544]	; 0x220
        float delay_samples = time * kAudioSampleRate;
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 80010c0:	eebc 6ae7 	vcvt.u32.f32	s12, s15
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 80010c4:	ee77 6a85 	vadd.f32	s13, s15, s10
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 80010c8:	eef8 5a46 	vcvt.f32.u32	s11, s12
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 80010cc:	ee16 2a10 	vmov	r2, s12
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 80010d0:	eebc 7ae6 	vcvt.u32.f32	s14, s13
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 80010d4:	1ab2      	subs	r2, r6, r2
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 80010d6:	ee17 3a10 	vmov	r3, s14
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 80010da:	ee37 7ae5 	vsub.f32	s14, s15, s11
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 80010de:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80010e2:	1af3      	subs	r3, r6, r3
    }

    float AllpassInterpolator(float a, float b, float t)
    {
        if (t == 0)
 80010e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 80010e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 80010ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 80010f0:	edd2 6a88 	vldr	s13, [r2, #544]	; 0x220
        if (t == 0)
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 80010f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80010fc:	ed93 6a88 	vldr	s12, [r3, #544]	; 0x220
        if (t == 0)
 8001100:	f43f aeac 	beq.w	8000e5c <recorder::SynthEngine::RenderOneSample()+0x2b4>
        {
            interpolator_history_ = a;
        }
        else
        {
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 8001104:	ee35 5a67 	vsub.f32	s10, s10, s15
 8001108:	ed95 7a99 	vldr	s14, [r5, #612]	; 0x264
 800110c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001110:	ee35 5a25 	vadd.f32	s10, s10, s11
 8001114:	eef0 6a46 	vmov.f32	s13, s12
 8001118:	eee5 6a07 	vfma.f32	s13, s10, s14
 800111c:	e69e      	b.n	8000e5c <recorder::SynthEngine::RenderOneSample()+0x2b4>
        else if (hold_count_ < hold_samples_)
 800111e:	e9d5 238f 	ldrd	r2, r3, [r5, #572]	; 0x23c
 8001122:	4293      	cmp	r3, r2
 8001124:	d221      	bcs.n	800116a <recorder::SynthEngine::RenderOneSample()+0x5c2>
            hold_count_++;
 8001126:	3301      	adds	r3, #1
 8001128:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
 800112c:	e6c3      	b.n	8000eb6 <recorder::SynthEngine::RenderOneSample()+0x30e>
 800112e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001132:	e68a      	b.n	8000e4a <recorder::SynthEngine::RenderOneSample()+0x2a2>
            if (duty_cyclerandomization > 0.0f)
 8001134:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	dc3f      	bgt.n	80011c2 <recorder::SynthEngine::RenderOneSample()+0x61a>
                current_dutycycle = base_dutycycle;
 8001142:	ed94 9a83 	vldr	s18, [r4, #524]	; 0x20c
 8001146:	ed84 9a85 	vstr	s18, [r4, #532]	; 0x214
                randomizationcounter = randomizationperiod;
 800114a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800114e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8001152:	e560      	b.n	8000c16 <recorder::SynthEngine::RenderOneSample()+0x6e>
        }
        else
        {
            envelope_ += decay_rate_ * (in - envelope_);
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	edd5 6a93 	vldr	s13, [r5, #588]	; 0x24c
 800115c:	ecbd 8b06 	vpop	{d8-d10}
 8001160:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001164:	edc5 7a96 	vstr	s15, [r5, #600]	; 0x258
 8001168:	bd70      	pop	{r4, r5, r6, pc}
 800116a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800116e:	ed95 7a8e 	vldr	s14, [r5, #568]	; 0x238
 8001172:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001176:	ed85 0a91 	vstr	s0, [r5, #580]	; 0x244
 800117a:	e69c      	b.n	8000eb6 <recorder::SynthEngine::RenderOneSample()+0x30e>
                t /= dt;
 800117c:	ee80 7a29 	vdiv.f32	s14, s0, s19
                return t + t - t * t - 1.0f;
 8001180:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8001184:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8001188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800118c:	eee7 8a27 	vfma.f32	s17, s14, s15
 8001190:	eef0 9a68 	vmov.f32	s19, s17
 8001194:	e59d      	b.n	8000cd2 <recorder::SynthEngine::RenderOneSample()+0x12a>
                t /= dt;
 8001196:	ee80 7a29 	vdiv.f32	s14, s0, s19
                return t + t - t * t - 1.0f;
 800119a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            sample += PolyBlep(phase, phase_increment);
 800119e:	ee7a 8a68 	vsub.f32	s17, s20, s17
                return t + t - t * t - 1.0f;
 80011a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sample += PolyBlep(phase, phase_increment);
 80011a6:	eee7 8a27 	vfma.f32	s17, s14, s15
 80011aa:	eeb0 aa68 	vmov.f32	s20, s17
                return t + t - t * t - 1.0f;
 80011ae:	e565      	b.n	8000c7c <recorder::SynthEngine::RenderOneSample()+0xd4>
            }
            else
            {
                return 0.0f;
 80011b0:	eddf 9a18 	vldr	s19, [pc, #96]	; 8001214 <recorder::SynthEngine::RenderOneSample()+0x66c>
 80011b4:	e58d      	b.n	8000cd2 <recorder::SynthEngine::RenderOneSample()+0x12a>
                adsr_value_ -= decrement;
 80011b6:	ed85 7aa9 	vstr	s14, [r5, #676]	; 0x2a4
 80011ba:	e50f      	b.n	8000bdc <recorder::SynthEngine::RenderOneSample()+0x34>
 80011bc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001214 <recorder::SynthEngine::RenderOneSample()+0x66c>
 80011c0:	e76d      	b.n	800109e <recorder::SynthEngine::RenderOneSample()+0x4f6>
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 80011c2:	f006 feb3 	bl	8007f2c <rand>
 80011c6:	ee07 0a90 	vmov	s15, r0
 80011ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011ce:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8001218 <recorder::SynthEngine::RenderOneSample()+0x670>
 80011d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 80011d6:	eddf 5a11 	vldr	s11, [pc, #68]	; 800121c <recorder::SynthEngine::RenderOneSample()+0x674>
 80011da:	edd4 7a84 	vldr	s15, [r4, #528]	; 0x210
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 80011de:	ed94 0a83 	vldr	s0, [r4, #524]	; 0x20c
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 80011e2:	eea6 7a85 	vfma.f32	s14, s13, s10
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 80011e6:	ed9f 9a09 	vldr	s18, [pc, #36]	; 800120c <recorder::SynthEngine::RenderOneSample()+0x664>
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 80011ea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011ee:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8001220 <recorder::SynthEngine::RenderOneSample()+0x678>
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 80011f2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80011f6:	fe80 9a09 	vmaxnm.f32	s18, s0, s18
 80011fa:	fe89 9a46 	vminnm.f32	s18, s18, s12
 80011fe:	ed84 9a85 	vstr	s18, [r4, #532]	; 0x214
        }
 8001202:	e7a2      	b.n	800114a <recorder::SynthEngine::RenderOneSample()+0x5a2>
 8001204:	080089fc 	.word	0x080089fc
 8001208:	3a83126f 	.word	0x3a83126f
 800120c:	3dcccccd 	.word	0x3dcccccd
 8001210:	467a0000 	.word	0x467a0000
 8001214:	00000000 	.word	0x00000000
 8001218:	30800000 	.word	0x30800000
 800121c:	3e99999a 	.word	0x3e99999a
 8001220:	3f666666 	.word	0x3f666666

08001224 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)>:
            if (abs(formant_pot_val - previous_formant_pot_val_) > 0.01f)
 8001224:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
 8001228:	ed9f 7aed 	vldr	s14, [pc, #948]	; 80015e0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3bc>
 800122c:	ee70 7ae7 	vsub.f32	s15, s1, s15
        void Process(float (&block)[kAudioOSFactor],
 8001230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001234:	eef0 7ae7 	vabs.f32	s15, s15
 8001238:	4604      	mov	r4, r0
 800123a:	4688      	mov	r8, r1
 800123c:	4616      	mov	r6, r2
 800123e:	4699      	mov	r9, r3
            if (abs(formant_pot_val - previous_formant_pot_val_) > 0.01f)
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
        void Process(float (&block)[kAudioOSFactor],
 8001244:	ed2d 8b0e 	vpush	{d8-d14}
            if (abs(formant_pot_val - previous_formant_pot_val_) > 0.01f)
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        void Process(float (&block)[kAudioOSFactor],
 800124c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8001250:	eef0 ba40 	vmov.f32	s23, s0
 8001254:	eef0 8a60 	vmov.f32	s17, s1
 8001258:	eeb0 ca41 	vmov.f32	s24, s2
            if (abs(formant_pot_val - previous_formant_pot_val_) > 0.01f)
 800125c:	f300 849a 	bgt.w	8001b94 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x970>
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001260:	edd0 ca7b 	vldr	s25, [r0, #492]	; 0x1ec
            if (filterMode_ == FILTER_MODE_WAH)
 8001264:	f894 a1f9 	ldrb.w	sl, [r4, #505]	; 0x1f9
 8001268:	f1ba 0f01 	cmp.w	sl, #1
 800126c:	d144      	bne.n	80012f8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xd4>
                const auto &vowelA = vowelData[currentVoice_][VOWEL_A];
 800126e:	f894 21f8 	ldrb.w	r2, [r4, #504]	; 0x1f8
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001272:	edd4 7a7f 	vldr	s15, [r4, #508]	; 0x1fc
 8001276:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 800127a:	4ada      	ldr	r2, [pc, #872]	; (80015e4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c0>)
 800127c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001280:	edd2 4a0c 	vldr	s9, [r2, #48]	; 0x30
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 8001284:	edd2 5a0d 	vldr	s11, [r2, #52]	; 0x34
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 8001288:	ed92 6a0e 	vldr	s12, [r2, #56]	; 0x38
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 800128c:	edd2 6a0f 	vldr	s13, [r2, #60]	; 0x3c
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 8001290:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 8001294:	ed92 5a11 	vldr	s10, [r2, #68]	; 0x44
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 8001298:	ed92 2a1e 	vldr	s4, [r2, #120]	; 0x78
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 800129c:	edd2 2a1f 	vldr	s5, [r2, #124]	; 0x7c
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 80012a0:	ed92 3a20 	vldr	s6, [r2, #128]	; 0x80
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 80012a4:	ee32 2a64 	vsub.f32	s4, s4, s9
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 80012a8:	edd2 3a21 	vldr	s7, [r2, #132]	; 0x84
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 80012ac:	ee72 2ae5 	vsub.f32	s5, s5, s11
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 80012b0:	ed92 4a22 	vldr	s8, [r2, #136]	; 0x88
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 80012b4:	ee33 3a46 	vsub.f32	s6, s6, s12
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 80012b8:	edd2 1a23 	vldr	s3, [r2, #140]	; 0x8c
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 80012bc:	ee73 3ae6 	vsub.f32	s7, s7, s13
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 80012c0:	ee34 4a47 	vsub.f32	s8, s8, s14
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 80012c4:	ee71 1ac5 	vsub.f32	s3, s3, s10
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 80012c8:	eee7 4a82 	vfma.f32	s9, s15, s4
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 80012cc:	eee7 5aa2 	vfma.f32	s11, s15, s5
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 80012d0:	eea7 5aa1 	vfma.f32	s10, s15, s3
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 80012d4:	eea7 6a83 	vfma.f32	s12, s15, s6
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 80012d8:	eee7 6aa3 	vfma.f32	s13, s15, s7
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 80012dc:	eea7 7a84 	vfma.f32	s14, s15, s8
                targetFormantFreqs_[0] = vowelA.F1 + wahPosition_ * (vowelOU.F1 - vowelA.F1);
 80012e0:	edc4 4a72 	vstr	s9, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelA.F2 + wahPosition_ * (vowelOU.F2 - vowelA.F2);
 80012e4:	edc4 5a73 	vstr	s11, [r4, #460]	; 0x1cc
                targetFormantQs_[2] = vowelA.Q3 + wahPosition_ * (vowelOU.Q3 - vowelA.Q3);
 80012e8:	ed84 5a7a 	vstr	s10, [r4, #488]	; 0x1e8
                targetFormantFreqs_[2] = vowelA.F3 + wahPosition_ * (vowelOU.F3 - vowelA.F3);
 80012ec:	ed84 6a74 	vstr	s12, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelA.Q1 + wahPosition_ * (vowelOU.Q1 - vowelA.Q1);
 80012f0:	edc4 6a78 	vstr	s13, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelA.Q2 + wahPosition_ * (vowelOU.Q2 - vowelA.Q2);
 80012f4:	ed84 7a79 	vstr	s14, [r4, #484]	; 0x1e4
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 80012f8:	ed94 7a6f 	vldr	s14, [r4, #444]	; 0x1bc
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 80012fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001300:	ed94 6a72 	vldr	s12, [r4, #456]	; 0x1c8
        float alpha = sin_omega / (2.0f * Q_);
 8001304:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001308:	edd4 7a75 	vldr	s15, [r4, #468]	; 0x1d4
                a1_ = -2.0f * cos_omega;
 800130c:	eeb8 ba00 	vmov.f32	s22, #128	; 0xc0000000 -2.0
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 8001310:	ee36 6a47 	vsub.f32	s12, s12, s14
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001314:	edd4 6a78 	vldr	s13, [r4, #480]	; 0x1e0
                    currentFormantFreqs_[i] * freq_mult_,
 8001318:	edd4 da7d 	vldr	s27, [r4, #500]	; 0x1f4
     */
    void SetDepth(float newDepth)
    {
        // Map from [0,1] to [0,0.25]:
        float mapped = newDepth * 0.25f;
        targetDepth_ = mapped;
 800131c:	f504 3580 	add.w	r5, r4, #65536	; 0x10000
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001320:	ee76 6ae7 	vsub.f32	s13, s13, s15
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001324:	ed9f eab0 	vldr	s28, [pc, #704]	; 80015e8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c4>
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001328:	eea6 7a2c 	vfma.f32	s14, s12, s25
 800132c:	edd4 5a43 	vldr	s11, [r4, #268]	; 0x10c
                    currentFormantQs_[i] * q_mult_);
 8001330:	ed94 da7c 	vldr	s26, [r4, #496]	; 0x1f0
                currentFormantQs_[i] += qDiff * formantRate_;
 8001334:	eee6 7aac 	vfma.f32	s15, s13, s25
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8001338:	ed84 8a46 	vstr	s16, [r4, #280]	; 0x118
        b1_ /= a0_;
 800133c:	ed9f aaab 	vldr	s20, [pc, #684]	; 80015ec <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3c8>
 8001340:	fec8 8a8a 	vmaxnm.f32	s17, s17, s20
            wahPosition_ = pos;
 8001344:	fec8 8ac8 	vminnm.f32	s17, s17, s16
                filters_[i].SetParameters(
 8001348:	ee67 6a2d 	vmul.f32	s13, s14, s27
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 800134c:	ed84 7a6f 	vstr	s14, [r4, #444]	; 0x1bc
                filters_[i].SetParameters(
 8001350:	ee67 9a8d 	vmul.f32	s19, s15, s26
                currentFormantQs_[i] += qDiff * formantRate_;
 8001354:	edc4 7a75 	vstr	s15, [r4, #468]	; 0x1d4
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001358:	ee26 7a8e 	vmul.f32	s14, s13, s28
        centerFrequency_ = centerFrequency;
 800135c:	edc4 6a44 	vstr	s13, [r4, #272]	; 0x110
        Q_ = Q;
 8001360:	edc4 9a45 	vstr	s19, [r4, #276]	; 0x114
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001364:	eec7 ea25 	vdiv.f32	s29, s14, s11
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001368:	eeb0 0a6e 	vmov.f32	s0, s29
 800136c:	f005 fc7c 	bl	8006c68 <sinf>
 8001370:	eeb0 9a40 	vmov.f32	s18, s0
  { return __builtin_cosf(__x); }
 8001374:	eeb0 0a6e 	vmov.f32	s0, s29
 8001378:	f005 fad6 	bl	8006928 <cosf>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 800137c:	ed94 7a70 	vldr	s14, [r4, #448]	; 0x1c0
        float alpha = sin_omega / (2.0f * Q_);
 8001380:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8001384:	edd4 6a73 	vldr	s13, [r4, #460]	; 0x1cc
                a1_ = -2.0f * cos_omega;
 8001388:	ee20 6a0b 	vmul.f32	s12, s0, s22
        b1_ /= a0_;
 800138c:	ed84 aa4b 	vstr	s20, [r4, #300]	; 0x12c
 8001390:	ee76 6ac7 	vsub.f32	s13, s13, s14
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8001394:	ed84 8a55 	vstr	s16, [r4, #340]	; 0x154
        float alpha = sin_omega / (2.0f * Q_);
 8001398:	eec9 7a29 	vdiv.f32	s15, s18, s19
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 800139c:	ed94 9a76 	vldr	s18, [r4, #472]	; 0x1d8
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80013a0:	eeac 7aa6 	vfma.f32	s14, s25, s13
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 80013a4:	edd4 6a79 	vldr	s13, [r4, #484]	; 0x1e4
 80013a8:	ee76 6ac9 	vsub.f32	s13, s13, s18
                currentFormantQs_[i] += qDiff * formantRate_;
 80013ac:	eea6 9aac 	vfma.f32	s18, s13, s25
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 80013b0:	ed84 7a70 	vstr	s14, [r4, #448]	; 0x1c0
                filters_[i].SetParameters(
 80013b4:	ee6d 6a87 	vmul.f32	s13, s27, s14
        centerFrequency_ = centerFrequency;
 80013b8:	edc4 6a53 	vstr	s13, [r4, #332]	; 0x14c
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80013bc:	ee66 6a8e 	vmul.f32	s13, s13, s28
                a0_ = 1.0f + alpha;
 80013c0:	ee77 5a88 	vadd.f32	s11, s15, s16
                currentFormantQs_[i] += qDiff * formantRate_;
 80013c4:	ed84 9a76 	vstr	s18, [r4, #472]	; 0x1d8
                filters_[i].SetParameters(
 80013c8:	ee2d 9a09 	vmul.f32	s18, s26, s18
 80013cc:	ee88 7a25 	vdiv.f32	s14, s16, s11
 80013d0:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
        Q_ = Q;
 80013d4:	ed84 9a54 	vstr	s18, [r4, #336]	; 0x150
        a1_ /= a0_;
 80013d8:	ee26 6a07 	vmul.f32	s12, s12, s14
        b0_ /= a0_;
 80013dc:	ee67 5a87 	vmul.f32	s11, s15, s14
        a1_ /= a0_;
 80013e0:	ed84 6a48 	vstr	s12, [r4, #288]	; 0x120
                a2_ = 1.0f - alpha;
 80013e4:	ee38 6a67 	vsub.f32	s12, s16, s15
        b2_ /= a0_;
 80013e8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
        b0_ /= a0_;
 80013ec:	edc4 5a4a 	vstr	s11, [r4, #296]	; 0x128
        a2_ /= a0_;
 80013f0:	ee26 6a07 	vmul.f32	s12, s12, s14
        b2_ /= a0_;
 80013f4:	edc4 7a4c 	vstr	s15, [r4, #304]	; 0x130
        a2_ /= a0_;
 80013f8:	ed84 6a49 	vstr	s12, [r4, #292]	; 0x124
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 80013fc:	ed94 6a52 	vldr	s12, [r4, #328]	; 0x148
 8001400:	eec6 ea86 	vdiv.f32	s29, s13, s12
  { return __builtin_sinf(__x); }
 8001404:	eeb0 0a6e 	vmov.f32	s0, s29
 8001408:	f005 fc2e 	bl	8006c68 <sinf>
 800140c:	eef0 9a40 	vmov.f32	s19, s0
  { return __builtin_cosf(__x); }
 8001410:	eeb0 0a6e 	vmov.f32	s0, s29
 8001414:	f005 fa88 	bl	8006928 <cosf>
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 8001418:	edd4 5a71 	vldr	s11, [r4, #452]	; 0x1c4
        float alpha = sin_omega / (2.0f * Q_);
 800141c:	ee69 9aaa 	vmul.f32	s19, s19, s21
 8001420:	ed94 7a74 	vldr	s14, [r4, #464]	; 0x1d0
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001424:	ed94 6a77 	vldr	s12, [r4, #476]	; 0x1dc
                a1_ = -2.0f * cos_omega;
 8001428:	ee20 0a0b 	vmul.f32	s0, s0, s22
                float freqDiff = targetFormantFreqs_[i] - currentFormantFreqs_[i];
 800142c:	ee37 7a65 	vsub.f32	s14, s14, s11
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001430:	edd4 6a7a 	vldr	s13, [r4, #488]	; 0x1e8
        float alpha = sin_omega / (2.0f * Q_);
 8001434:	eec9 7a89 	vdiv.f32	s15, s19, s18
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001438:	ed94 5a61 	vldr	s10, [r4, #388]	; 0x184
        b1_ /= a0_;
 800143c:	ed84 aa5a 	vstr	s20, [r4, #360]	; 0x168
        gain_ = std::pow(10.0f, gainDB / 40.0f); // For peak, lowshelf, highshelf
 8001440:	ed84 8a64 	vstr	s16, [r4, #400]	; 0x190
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001444:	eee7 5a2c 	vfma.f32	s11, s14, s25
                float qDiff = targetFormantQs_[i] - currentFormantQs_[i];
 8001448:	ee76 6ac6 	vsub.f32	s13, s13, s12
                currentFormantQs_[i] += qDiff * formantRate_;
 800144c:	eea6 6aac 	vfma.f32	s12, s13, s25
                filters_[i].SetParameters(
 8001450:	ee25 7aad 	vmul.f32	s14, s11, s27
                currentFormantFreqs_[i] += freqDiff * formantRate_;
 8001454:	edc4 5a71 	vstr	s11, [r4, #452]	; 0x1c4
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 8001458:	ee67 6a0e 	vmul.f32	s13, s14, s28
        centerFrequency_ = centerFrequency;
 800145c:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
                filters_[i].SetParameters(
 8001460:	ee26 da0d 	vmul.f32	s26, s12, s26
                currentFormantQs_[i] += qDiff * formantRate_;
 8001464:	ed84 6a77 	vstr	s12, [r4, #476]	; 0x1dc
                a0_ = 1.0f + alpha;
 8001468:	ee77 5a88 	vadd.f32	s11, s15, s16
        float omega = 2.0f * M_PI * centerFrequency_ / sampleRate_;
 800146c:	eec6 ca85 	vdiv.f32	s25, s13, s10
        Q_ = Q;
 8001470:	ed84 da63 	vstr	s26, [r4, #396]	; 0x18c
                a0_ = 1.0f + alpha;
 8001474:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
        b0_ /= a0_;
 8001478:	ee88 7a25 	vdiv.f32	s14, s16, s11
                a2_ = 1.0f - alpha;
 800147c:	ee38 6a67 	vsub.f32	s12, s16, s15
        b0_ /= a0_;
 8001480:	ee67 4a87 	vmul.f32	s9, s15, s14
        a1_ /= a0_;
 8001484:	ee60 5a07 	vmul.f32	s11, s0, s14
        b2_ /= a0_;
 8001488:	ee67 7ac7 	vnmul.f32	s15, s15, s14
        a2_ /= a0_;
 800148c:	ee26 7a07 	vmul.f32	s14, s12, s14
        b0_ /= a0_;
 8001490:	edc4 4a59 	vstr	s9, [r4, #356]	; 0x164
        a1_ /= a0_;
 8001494:	edc4 5a57 	vstr	s11, [r4, #348]	; 0x15c
  { return __builtin_sinf(__x); }
 8001498:	eeb0 0a6c 	vmov.f32	s0, s25
        b2_ /= a0_;
 800149c:	edc4 7a5b 	vstr	s15, [r4, #364]	; 0x16c
        a2_ /= a0_;
 80014a0:	ed84 7a58 	vstr	s14, [r4, #352]	; 0x160
 80014a4:	f005 fbe0 	bl	8006c68 <sinf>
 80014a8:	eef0 9a40 	vmov.f32	s19, s0
  { return __builtin_cosf(__x); }
 80014ac:	eeb0 0a6c 	vmov.f32	s0, s25
 80014b0:	f005 fa3a 	bl	8006928 <cosf>
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80014b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80015f0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3cc>
        float alpha = sin_omega / (2.0f * Q_);
 80014b8:	ee69 9aaa 	vmul.f32	s19, s19, s21
 80014bc:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 80015f4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3d0>
 80014c0:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 80015f8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3d4>
                a1_ = -2.0f * cos_omega;
 80014c4:	ee20 7a0b 	vmul.f32	s14, s0, s22
 80014c8:	eeac 6a26 	vfma.f32	s12, s24, s13
 80014cc:	eddf 5a4b 	vldr	s11, [pc, #300]	; 80015fc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3d8>
        float alpha = sin_omega / (2.0f * Q_);
 80014d0:	eec9 7a8d 	vdiv.f32	s15, s19, s26
        b1_ /= a0_;
 80014d4:	ed84 aa69 	vstr	s20, [r4, #420]	; 0x1a4
            wahPosition_ = pos;
 80014d8:	edc4 8a7f 	vstr	s17, [r4, #508]	; 0x1fc
            if (freq_select_button && !was_freq_select_button_pressed_)
 80014dc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
        float mapped = newDepth * 0.25f;
 80014e0:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80014e4:	eeec 5a05 	vfma.f32	s11, s24, s10
 80014e8:	ee2c ca26 	vmul.f32	s24, s24, s13
                a0_ = 1.0f + alpha;
 80014ec:	ee77 4a88 	vadd.f32	s9, s15, s16
                a2_ = 1.0f - alpha;
 80014f0:	ee38 5a67 	vsub.f32	s10, s16, s15
 80014f4:	eec8 6a24 	vdiv.f32	s13, s16, s9
                a0_ = 1.0f + alpha;
 80014f8:	edc4 4a65 	vstr	s9, [r4, #404]	; 0x194
        a1_ /= a0_;
 80014fc:	ee27 7a26 	vmul.f32	s14, s14, s13
        b0_ /= a0_;
 8001500:	ee67 4aa6 	vmul.f32	s9, s15, s13
        b2_ /= a0_;
 8001504:	ee67 7ae6 	vnmul.f32	s15, s15, s13
        a2_ /= a0_;
 8001508:	ee65 6a26 	vmul.f32	s13, s10, s13
        a1_ /= a0_;
 800150c:	ed84 7a66 	vstr	s14, [r4, #408]	; 0x198
        b0_ /= a0_;
 8001510:	edc4 4a68 	vstr	s9, [r4, #416]	; 0x1a0
        b2_ /= a0_;
 8001514:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8
        a2_ /= a0_;
 8001518:	edc4 6a67 	vstr	s13, [r4, #412]	; 0x19c
        targetDepth_ = mapped;
 800151c:	ed85 caa1 	vstr	s24, [r5, #644]	; 0x284
            delay_feedback_ = mapFloat(vibrato_pot_val, 0.0f, 1.0f, 0.1f, 0.3f);
 8001520:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
            delay_time_ = mapFloat(vibrato_pot_val, 0.0f, 1.0f, 0.02f, 0.6f);
 8001524:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
            if (freq_select_button && !was_freq_select_button_pressed_)
 8001528:	2f00      	cmp	r7, #0
 800152a:	f040 8151 	bne.w	80017d0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5ac>
            else if (!freq_select_button && was_freq_select_button_pressed_)
 800152e:	b12b      	cbz	r3, 800153c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x318>
            if (adsr_state_ != ADSRState::kIdle)
 8001530:	f8d5 32a8 	ldr.w	r3, [r5, #680]	; 0x2a8
 8001534:	b113      	cbz	r3, 800153c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x318>
                adsr_state_ = ADSRState::kRelease;
 8001536:	2304      	movs	r3, #4
 8001538:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
                if (button_pressed && !was_button_pressed_)
 800153c:	2e00      	cmp	r6, #0
 800153e:	f000 82d6 	beq.w	8001aee <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8ca>
 8001542:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 83b0 	beq.w	8001cac <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa88>
                if ((hold && is_note_on_) || (!hold && button_pressed))
 800154c:	f1b9 0f00 	cmp.w	r9, #0
 8001550:	d004      	beq.n	800155c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x338>
 8001552:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 81ed 	beq.w	8001936 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x712>
            if (pot_value < kThresholds[0])
 800155c:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 8001560:	eef4 bae7 	vcmpe.f32	s23, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	f100 8415 	bmi.w	8001d96 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb72>
            else if (pot_value >= kThresholds[kNumThresholds - 1])
 800156c:	eef6 7a0c 	vmov.f32	s15, #108	; 0x3f600000  0.875
 8001570:	eef4 bae7 	vcmpe.f32	s23, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	f280 8418 	bge.w	8001dac <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb88>
                if (pot_value < kThresholds[i])
 800157c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8001580:	eef4 bae7 	vcmpe.f32	s23, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	f100 841e 	bmi.w	8001dc8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xba4>
 800158c:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8001590:	eef4 bae7 	vcmpe.f32	s23, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	f100 8413 	bmi.w	8001dc2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb9e>
 800159c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80015a0:	eef4 bae7 	vcmpe.f32	s23, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	f100 8415 	bmi.w	8001dd6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbb2>
 80015ac:	eef6 7a04 	vmov.f32	s15, #100	; 0x3f200000  0.625
 80015b0:	eef4 bae7 	vcmpe.f32	s23, s15
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	f100 8409 	bmi.w	8001dce <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbaa>
 80015bc:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
            for (int i = 1; i < kNumThresholds; i++)
 80015c0:	eef4 bae7 	vcmpe.f32	s23, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	bf4c      	ite	mi
 80015ca:	f04f 0905 	movmi.w	r9, #5
 80015ce:	f04f 0906 	movpl.w	r9, #6
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3dc>)
 80015d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80015d8:	ed93 8a00 	vldr	s16, [r3]
 80015dc:	e012      	b.n	8001604 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3e0>
 80015de:	bf00      	nop
 80015e0:	3c23d70a 	.word	0x3c23d70a
 80015e4:	080089fc 	.word	0x080089fc
 80015e8:	40c90fdb 	.word	0x40c90fdb
 80015ec:	00000000 	.word	0x00000000
 80015f0:	3f147ae2 	.word	0x3f147ae2
 80015f4:	3ca3d70a 	.word	0x3ca3d70a
 80015f8:	3e4cccce 	.word	0x3e4cccce
 80015fc:	3dcccccd 	.word	0x3dcccccd
 8001600:	080089dc 	.word	0x080089dc
            if (targetIndex != previousTargetIndex_)
 8001604:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001606:	454b      	cmp	r3, r9
 8001608:	d03f      	beq.n	800168a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x466>
                int randomVoice = std::rand() % 3;
 800160a:	f006 fc8f 	bl	8007f2c <rand>
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x594>)
 8001610:	fb83 2300 	smull	r2, r3, r3, r0
 8001614:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8001618:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800161c:	1ac0      	subs	r0, r0, r3
            if (voice < 0 || voice >= VOICE_COUNT)
 800161e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
            currentVoice_ = voice;
 8001622:	bf08      	it	eq
 8001624:	f884 01f8 	strbeq.w	r0, [r4, #504]	; 0x1f8
            int randomIndex = std::rand() % numVowels;
 8001628:	f006 fc80 	bl	8007f2c <rand>
            if (filterMode_ == FILTER_MODE_NORMAL)
 800162c:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
 8001630:	bb4b      	cbnz	r3, 8001686 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x462>
 8001632:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
 8001636:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800163a:	fb83 2300 	smull	r2, r3, r3, r0
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 800163e:	f894 21f8 	ldrb.w	r2, [r4, #504]	; 0x1f8
 8001642:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8001646:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800164a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800165a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800165e:	4b57      	ldr	r3, [pc, #348]	; (80017bc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x598>)
 8001660:	4413      	add	r3, r2
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800167a:	691a      	ldr	r2, [r3, #16]
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 800167c:	695b      	ldr	r3, [r3, #20]
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 800167e:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001682:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
                previousTargetIndex_ = targetIndex;
 8001686:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 800168a:	edd4 8a02 	vldr	s17, [r4, #8]
 800168e:	edd4 7a07 	vldr	s15, [r4, #28]
            if (offsetCounter_ <= 0 ||
 8001692:	6963      	ldr	r3, [r4, #20]
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 8001694:	ee68 8aa7 	vmul.f32	s17, s17, s15
            if (offsetCounter_ <= 0 ||
 8001698:	2b00      	cmp	r3, #0
            float baseTargetFrequency = fundamentalFreq_ * kDiatonicRatios[targetIndex] * freq_mult_;
 800169a:	ee68 8a88 	vmul.f32	s17, s17, s16
            if (offsetCounter_ <= 0 ||
 800169e:	f340 8349 	ble.w	8001d34 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb10>
                std::abs(currentFrequency_ - (baseTargetFrequency + targetFrequencyOffset_)) < frequencyMargin_)
 80016a2:	ed94 9a01 	vldr	s18, [r4, #4]
 80016a6:	edd4 7a03 	vldr	s15, [r4, #12]
            if (offsetCounter_ <= 0 ||
 80016aa:	edd4 6a04 	vldr	s13, [r4, #16]
                std::abs(currentFrequency_ - (baseTargetFrequency + targetFrequencyOffset_)) < frequencyMargin_)
 80016ae:	ee39 7a67 	vsub.f32	s14, s18, s15
 80016b2:	ee37 7a68 	vsub.f32	s14, s14, s17
 80016b6:	eeb0 7ac7 	vabs.f32	s14, s14
            if (offsetCounter_ <= 0 ||
 80016ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	f100 8337 	bmi.w	8001d34 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb10>
            offsetCounter_--;
 80016c6:	3b01      	subs	r3, #1
    {
        //--------------------------------------------------
        // 1) Smooth "depth_" toward "targetDepth_"
        //--------------------------------------------------
        static constexpr float kDepthSmoothing = 0.02f;  // 2% approach each sample
        float dDiff = targetDepth_ - depth_;
 80016c8:	ed95 8aa0 	vldr	s16, [r5, #640]	; 0x280
            float targetFrequency = baseTargetFrequency + targetFrequencyOffset_;
 80016cc:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80016d0:	ed95 7aa1 	vldr	s14, [r5, #644]	; 0x284
        depth_ += dDiff * kDepthSmoothing;
 80016d4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80017c0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x59c>
        float dDiff = targetDepth_ - depth_;
 80016d8:	ee77 7a48 	vsub.f32	s15, s14, s16

        // Keep "depth_" within [0, 0.25] or whatever your max
        if (depth_ < 0.0f)
 80016dc:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80017c4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5a0>
            offsetCounter_--;
 80016e0:	6163      	str	r3, [r4, #20]
        depth_ += dDiff * kDepthSmoothing;
 80016e2:	eea7 8aa6 	vfma.f32	s16, s15, s13
        if (depth_ < 0.0f)
 80016e6:	eeb4 8ac6 	vcmpe.f32	s16, s12
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	f100 834d 	bmi.w	8001d8c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb68>
            depth_ = 0.0f;
        if (depth_ > 0.25f)
 80016f2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80016f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	f340 835d 	ble.w	8001dbc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb98>
            depth_ = 0.25f;
 8001702:	eeb0 8a67 	vmov.f32	s16, s15
 8001706:	edc5 7aa0 	vstr	s15, [r5, #640]	; 0x280
        //    respecting "buildupTime_"
        //--------------------------------------------------
        // We'll compute a per-sample increment factor based on buildupTime_:
        // If buildupTime_ is X seconds, we want to fully go from 0 to 'depth_'
        // in X * sampleRate_ samples => each sample we move an incremental fraction.
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 800170a:	edd5 6a9d 	vldr	s13, [r5, #628]	; 0x274
 800170e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8001712:	ed95 7aa2 	vldr	s14, [r5, #648]	; 0x288
        // We clamp alpha to something smaller if we want a minimum speed
        // but let's keep it as is for now.

        // If buildingUp_ is true, we definitely ramp up from currentDepth_ toward depth_.
        // But also if depth_ changes in the middle, we still approach it (up or down).
        float cdDiff = depth_ - currentDepth_;
 8001716:	edd5 7aa3 	vldr	s15, [r5, #652]	; 0x28c
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 800171a:	ee26 7a87 	vmul.f32	s14, s13, s14

        // Move a fraction of that difference
        currentDepth_ += cdDiff * alpha;

        // If we're close enough, or we've gone past, we can consider we've "caught up"
        if (std::fabs(cdDiff) < 0.0001f)
 800171e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80017c8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5a4>
        float cdDiff = depth_ - currentDepth_;
 8001722:	ee38 6a67 	vsub.f32	s12, s16, s15
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 8001726:	ee84 5a87 	vdiv.f32	s10, s9, s14
  { return __builtin_fabsf(__x); }
 800172a:	eeb0 7ac6 	vabs.f32	s14, s12
        if (std::fabs(cdDiff) < 0.0001f)
 800172e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        currentDepth_ += cdDiff * alpha;
 8001736:	eee6 7a05 	vfma.f32	s15, s12, s10
 800173a:	edc5 7aa3 	vstr	s15, [r5, #652]	; 0x28c
        if (std::fabs(cdDiff) < 0.0001f)
 800173e:	f100 832f 	bmi.w	8001da0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb7c>
            buildingUp_   = false; // We can consider the buildup complete
        }

        // Finally, clamp currentDepth_ so it never goes beyond depth_ in either direction
        // e.g. if depth_ decreased mid-buildup, we want currentDepth_ to smoothly go down.
        if (currentDepth_ < 0.0f)
 8001742:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80017c4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5a0>
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d503      	bpl.n	8001758 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x534>
            currentDepth_ = 0.0f;
 8001750:	eef0 7a47 	vmov.f32	s15, s14
 8001754:	ed85 7aa3 	vstr	s14, [r5, #652]	; 0x28c
        if (currentDepth_ > depth_)
 8001758:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentDepth_ = depth_;
 8001760:	bf54      	ite	pl
 8001762:	eeb0 8a67 	vmovpl.f32	s16, s15
 8001766:	ed85 8aa3 	vstrmi	s16, [r5, #652]	; 0x28c

        //--------------------------------------------------
        // 3) Increment the LFO phase
        //--------------------------------------------------
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 800176a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80017cc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5a8>
 800176e:	edd5 7a9f 	vldr	s15, [r5, #636]	; 0x27c
        phase_ += phaseIncrement;
 8001772:	ed95 6a9e 	vldr	s12, [r5, #632]	; 0x278
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 8001776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177a:	ee87 0aa6 	vdiv.f32	s0, s15, s13
        phase_ += phaseIncrement;
 800177e:	ee30 0a06 	vadd.f32	s0, s0, s12
        if (phase_ >= 2.0f * static_cast<float>(M_PI))
 8001782:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            phase_ -= 2.0f * static_cast<float>(M_PI);
 800178a:	bfa8      	it	ge
 800178c:	ee30 0a47 	vsubge.f32	s0, s0, s14
 8001790:	ed85 0a9e 	vstr	s0, [r5, #632]	; 0x278
  { return __builtin_sinf(__x); }
 8001794:	f005 fa68 	bl	8006c68 <sinf>
        {
            vib *= 0.05f;  // scale down upward range
        }
*/

        float moddedFreq = inputFreq * (1.0f + vib);
 8001798:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            float diff = targetFrequency - currentFrequency_;
 800179c:	eef0 6a49 	vmov.f32	s13, s18
            currentFrequency_ += diff * freq_rate_;
 80017a0:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 80017a4:	eee0 7a08 	vfma.f32	s15, s0, s16
            float diff = targetFrequency - currentFrequency_;
 80017a8:	eed8 6aa7 	vfnms.f32	s13, s17, s15
            currentFrequency_ += diff * freq_rate_;
 80017ac:	eea6 9a87 	vfma.f32	s18, s13, s14
 80017b0:	ed84 9a01 	vstr	s18, [r4, #4]
        }
 80017b4:	e0bf      	b.n	8001936 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x712>
 80017b6:	bf00      	nop
 80017b8:	55555556 	.word	0x55555556
 80017bc:	080089fc 	.word	0x080089fc
 80017c0:	3ca3d70a 	.word	0x3ca3d70a
 80017c4:	00000000 	.word	0x00000000
 80017c8:	38d1b717 	.word	0x38d1b717
 80017cc:	40c90fdb 	.word	0x40c90fdb
            if (freq_select_button && !was_freq_select_button_pressed_)
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 819e 	bne.w	8001b12 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8ee>
            adsr_state_ = ADSRState::kAttack;
 80017d6:	2301      	movs	r3, #1
            adsr_value_ = 0.0f; // Start from 0
 80017d8:	ed85 aaa9 	vstr	s20, [r5, #676]	; 0x2a4
            adsr_state_ = ADSRState::kAttack;
 80017dc:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
            is_note_on_ = true;
 80017e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            if (filterMode_ == FILTER_MODE_NORMAL)
 80017e4:	f1ba 0f00 	cmp.w	sl, #0
 80017e8:	d118      	bne.n	800181c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5f8>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 80017ea:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
 80017ee:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 80017f2:	4bd2      	ldr	r3, [pc, #840]	; (8001b3c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x918>)
 80017f4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80017f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fa:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 80017fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001800:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8001804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001806:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 800180a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800180c:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001814:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001818:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        currentDepth_ = 0.0f;
 800181c:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
        buildingUp_   = true;
 8001820:	2301      	movs	r3, #1
        currentDepth_ = 0.0f;
 8001822:	eeb0 7a67 	vmov.f32	s14, s15
 8001826:	edc5 7aa3 	vstr	s15, [r5, #652]	; 0x28c
        buildingUp_   = true;
 800182a:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
        float dDiff = targetDepth_ - depth_;
 800182e:	ed95 8aa0 	vldr	s16, [r5, #640]	; 0x280
        depth_ += dDiff * kDepthSmoothing;
 8001832:	eddf 5ac3 	vldr	s11, [pc, #780]	; 8001b40 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x91c>
        float dDiff = targetDepth_ - depth_;
 8001836:	ee3c ca48 	vsub.f32	s24, s24, s16
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800183a:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8001b44 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x920>
 800183e:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8001b48 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x924>
 8001842:	ee6b baa7 	vmul.f32	s23, s23, s15
 8001846:	ed9f 5ac1 	vldr	s10, [pc, #772]	; 8001b4c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x928>
        depth_ += dDiff * kDepthSmoothing;
 800184a:	eeac 8a25 	vfma.f32	s16, s24, s11
        if (depth_ < 0.0f)
 800184e:	eddf 4acc 	vldr	s9, [pc, #816]	; 8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
 8001852:	eef0 7a66 	vmov.f32	s15, s13
 8001856:	ed9f 6abe 	vldr	s12, [pc, #760]	; 8001b50 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x92c>
 800185a:	eeeb 7a85 	vfma.f32	s15, s23, s10
 800185e:	ee7b ba86 	vadd.f32	s23, s23, s12
 8001862:	eeb4 8ae4 	vcmpe.f32	s16, s9
                fundamentalFreq_ = mapFloat(pot_value, 0.0f, 1.0f, kMinFundamental, kMaxFundamental);
 8001866:	edc4 ba02 	vstr	s23, [r4, #8]
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            freq_mult_ = freqMult;
 800186e:	edc4 7a7d 	vstr	s15, [r4, #500]	; 0x1f4
 8001872:	f100 81f3 	bmi.w	8001c5c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa38>
        if (depth_ > 0.25f)
 8001876:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800187a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	f340 8298 	ble.w	8001db6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb92>
            depth_ = 0.25f;
 8001886:	eeb0 8a67 	vmov.f32	s16, s15
 800188a:	edc5 7aa0 	vstr	s15, [r5, #640]	; 0x280
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 800188e:	edd5 6a9d 	vldr	s13, [r5, #628]	; 0x274
 8001892:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8001896:	edd5 7aa2 	vldr	s15, [r5, #648]	; 0x288
        float cdDiff = depth_ - currentDepth_;
 800189a:	ee38 6a47 	vsub.f32	s12, s16, s14
        if (std::fabs(cdDiff) < 0.0001f)
 800189e:	eddf 5aad 	vldr	s11, [pc, #692]	; 8001b54 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x930>
        float alpha = 1.0f / (buildupTime_ * sampleRate_);
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
  { return __builtin_fabsf(__x); }
 80018a6:	eeb0 5ac6 	vabs.f32	s10, s12
 80018aa:	eec4 4a27 	vdiv.f32	s9, s8, s15
        currentDepth_ += cdDiff * alpha;
 80018ae:	eef0 7a47 	vmov.f32	s15, s14
        if (std::fabs(cdDiff) < 0.0001f)
 80018b2:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        currentDepth_ += cdDiff * alpha;
 80018ba:	eee4 7a86 	vfma.f32	s15, s9, s12
 80018be:	edc5 7aa3 	vstr	s15, [r5, #652]	; 0x28c
        if (std::fabs(cdDiff) < 0.0001f)
 80018c2:	f100 825d 	bmi.w	8001d80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb5c>
        if (currentDepth_ < 0.0f)
 80018c6:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
 80018ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	f100 8126 	bmi.w	8001b22 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8fe>
        if (currentDepth_ > depth_)
 80018d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentDepth_ = depth_;
 80018de:	bf54      	ite	pl
 80018e0:	eeb0 8a67 	vmovpl.f32	s16, s15
 80018e4:	ed85 8aa3 	vstrmi	s16, [r5, #652]	; 0x28c
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 80018e8:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001b58 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x934>
 80018ec:	edd5 7a9f 	vldr	s15, [r5, #636]	; 0x27c
        phase_ += phaseIncrement;
 80018f0:	ed95 6a9e 	vldr	s12, [r5, #632]	; 0x278
        float phaseIncrement = (2.0f * static_cast<float>(M_PI) * rate_) / sampleRate_;
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	ee87 0aa6 	vdiv.f32	s0, s15, s13
        phase_ += phaseIncrement;
 80018fc:	ee30 0a06 	vadd.f32	s0, s0, s12
        if (phase_ >= 2.0f * static_cast<float>(M_PI))
 8001900:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            phase_ -= 2.0f * static_cast<float>(M_PI);
 8001908:	bfa8      	it	ge
 800190a:	ee30 0a47 	vsubge.f32	s0, s0, s14
 800190e:	ed85 0a9e 	vstr	s0, [r5, #632]	; 0x278
  { return __builtin_sinf(__x); }
 8001912:	f005 f9a9 	bl	8006c68 <sinf>
        float moddedFreq = inputFreq * (1.0f + vib);
 8001916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            float diff = targetFrequency - currentFrequency_;
 800191a:	edd4 7a01 	vldr	s15, [r4, #4]
            currentFrequency_ += diff * freq_rate_;
 800191e:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 8001922:	eea0 7a08 	vfma.f32	s14, s0, s16
            float diff = targetFrequency - currentFrequency_;
 8001926:	eeb0 6a67 	vmov.f32	s12, s15
 800192a:	ee9b 6a87 	vfnms.f32	s12, s23, s14
            currentFrequency_ += diff * freq_rate_;
 800192e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001932:	edc4 7a01 	vstr	s15, [r4, #4]
            float sample = RenderOneSample();
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff f936 	bl	8000ba8 <recorder::SynthEngine::RenderOneSample()>
            sample *= (kAudioOSFactor * kAudioOutputLevel);
 800193c:	2001      	movs	r0, #1
 800193e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001940:	4642      	mov	r2, r8
 8001942:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001b5c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x938>
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001946:	2801      	cmp	r0, #1
            out -= sections_[n].a[1] * x_[n+1][1];
            in = out;
        }

        // Shift final section x state
        x_[num_sections_][2] = x_[num_sections_][1];
 8001948:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800194c:	eddf 4a8c 	vldr	s9, [pc, #560]	; 8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
            sample *= (kAudioOSFactor * kAudioOutputLevel);
 8001950:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001958:	f000 80c3 	beq.w	8001ae2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8be>
        for (int n = 0; n < num_sections_; n++)
 800195c:	2900      	cmp	r1, #0
 800195e:	f340 817a 	ble.w	8001c56 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa32>
 8001962:	eeb0 7a64 	vmov.f32	s14, s9
 8001966:	ed94 5a30 	vldr	s10, [r4, #192]	; 0xc0
 800196a:	2901      	cmp	r1, #1
            out += sections_[n].b[2] * x_[n][2];
 800196c:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8001970:	edd4 5a2f 	vldr	s11, [r4, #188]	; 0xbc
 8001974:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001978:	edd4 2a17 	vldr	s5, [r4, #92]	; 0x5c
            out -= sections_[n].a[0] * x_[n+1][0];
 800197c:	edd4 6a32 	vldr	s13, [r4, #200]	; 0xc8
 8001980:	ed94 3a19 	vldr	s6, [r4, #100]	; 0x64
 8001984:	eee2 7aa5 	vfma.f32	s15, s5, s11
            out -= sections_[n].a[1] * x_[n+1][1];
 8001988:	ed94 6a33 	vldr	s12, [r4, #204]	; 0xcc
 800198c:	edd4 3a1a 	vldr	s7, [r4, #104]	; 0x68
 8001990:	ed94 4a16 	vldr	s8, [r4, #88]	; 0x58
            x_[n][2] = x_[n][1];
 8001994:	ed84 5a31 	vstr	s10, [r4, #196]	; 0xc4
            x_[n][1] = x_[n][0];
 8001998:	edc4 5a30 	vstr	s11, [r4, #192]	; 0xc0
            x_[n][0] = in;
 800199c:	ed84 7a2f 	vstr	s14, [r4, #188]	; 0xbc
 80019a0:	eee6 7ac3 	vfms.f32	s15, s13, s6
 80019a4:	eee6 7a63 	vfms.f32	s15, s12, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 80019a8:	eee7 7a04 	vfma.f32	s15, s14, s8
        for (int n = 0; n < num_sections_; n++)
 80019ac:	f000 8086 	beq.w	8001abc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x898>
            out += sections_[n].b[2] * x_[n][2];
 80019b0:	ed94 7a1d 	vldr	s14, [r4, #116]	; 0x74
        for (int n = 0; n < num_sections_; n++)
 80019b4:	2902      	cmp	r1, #2
 80019b6:	edd4 2a1c 	vldr	s5, [r4, #112]	; 0x70
            out += sections_[n].b[2] * x_[n][2];
 80019ba:	ee26 7a07 	vmul.f32	s14, s12, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 80019be:	edd4 5a35 	vldr	s11, [r4, #212]	; 0xd4
 80019c2:	ed94 3a1e 	vldr	s6, [r4, #120]	; 0x78
            out -= sections_[n].a[1] * x_[n+1][1];
 80019c6:	ed94 5a36 	vldr	s10, [r4, #216]	; 0xd8
 80019ca:	eea2 7aa6 	vfma.f32	s14, s5, s13
 80019ce:	edd4 3a1f 	vldr	s7, [r4, #124]	; 0x7c
 80019d2:	ed94 4a1b 	vldr	s8, [r4, #108]	; 0x6c
            x_[n][0] = in;
 80019d6:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8
            x_[n][2] = x_[n][1];
 80019da:	ed84 6a34 	vstr	s12, [r4, #208]	; 0xd0
            x_[n][1] = x_[n][0];
 80019de:	edc4 6a33 	vstr	s13, [r4, #204]	; 0xcc
 80019e2:	eea5 7ac3 	vfms.f32	s14, s11, s6
 80019e6:	eea5 7a63 	vfms.f32	s14, s10, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 80019ea:	eea4 7a27 	vfma.f32	s14, s8, s15
 80019ee:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 80019f2:	d063      	beq.n	8001abc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x898>
            out += sections_[n].b[2] * x_[n][2];
 80019f4:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
        for (int n = 0; n < num_sections_; n++)
 80019f8:	2903      	cmp	r1, #3
 80019fa:	edd4 2a21 	vldr	s5, [r4, #132]	; 0x84
            out += sections_[n].b[2] * x_[n][2];
 80019fe:	ee25 7a07 	vmul.f32	s14, s10, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8001a02:	edd4 6a38 	vldr	s13, [r4, #224]	; 0xe0
 8001a06:	ed94 3a23 	vldr	s6, [r4, #140]	; 0x8c
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a0a:	ed94 6a39 	vldr	s12, [r4, #228]	; 0xe4
 8001a0e:	eea2 7aa5 	vfma.f32	s14, s5, s11
 8001a12:	edd4 3a24 	vldr	s7, [r4, #144]	; 0x90
 8001a16:	ed94 4a20 	vldr	s8, [r4, #128]	; 0x80
            x_[n][0] = in;
 8001a1a:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
            x_[n][2] = x_[n][1];
 8001a1e:	ed84 5a37 	vstr	s10, [r4, #220]	; 0xdc
            x_[n][1] = x_[n][0];
 8001a22:	edc4 5a36 	vstr	s11, [r4, #216]	; 0xd8
 8001a26:	eea6 7ac3 	vfms.f32	s14, s13, s6
 8001a2a:	eea6 7a63 	vfms.f32	s14, s12, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a2e:	eea4 7a27 	vfma.f32	s14, s8, s15
 8001a32:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8001a36:	d041      	beq.n	8001abc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x898>
            out += sections_[n].b[2] * x_[n][2];
 8001a38:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
        for (int n = 0; n < num_sections_; n++)
 8001a3c:	2904      	cmp	r1, #4
 8001a3e:	edd4 2a26 	vldr	s5, [r4, #152]	; 0x98
            out += sections_[n].b[2] * x_[n][2];
 8001a42:	ee26 7a07 	vmul.f32	s14, s12, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8001a46:	edd4 5a3b 	vldr	s11, [r4, #236]	; 0xec
 8001a4a:	ed94 3a28 	vldr	s6, [r4, #160]	; 0xa0
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a4e:	ed94 5a3c 	vldr	s10, [r4, #240]	; 0xf0
 8001a52:	eea2 7aa6 	vfma.f32	s14, s5, s13
 8001a56:	edd4 3a29 	vldr	s7, [r4, #164]	; 0xa4
 8001a5a:	ed94 4a25 	vldr	s8, [r4, #148]	; 0x94
            x_[n][0] = in;
 8001a5e:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
            x_[n][2] = x_[n][1];
 8001a62:	ed84 6a3a 	vstr	s12, [r4, #232]	; 0xe8
            x_[n][1] = x_[n][0];
 8001a66:	edc4 6a39 	vstr	s13, [r4, #228]	; 0xe4
 8001a6a:	eea5 7ac3 	vfms.f32	s14, s11, s6
 8001a6e:	eea5 7a63 	vfms.f32	s14, s10, s7
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a72:	eea4 7a27 	vfma.f32	s14, s8, s15
 8001a76:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8001a7a:	d01f      	beq.n	8001abc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x898>
            out += sections_[n].b[2] * x_[n][2];
 8001a7c:	ed94 7a2c 	vldr	s14, [r4, #176]	; 0xb0
 8001a80:	edd4 2a2b 	vldr	s5, [r4, #172]	; 0xac
 8001a84:	ee25 7a07 	vmul.f32	s14, s10, s14
 8001a88:	ed94 3a2d 	vldr	s6, [r4, #180]	; 0xb4
 8001a8c:	edd4 3a3e 	vldr	s7, [r4, #248]	; 0xf8
 8001a90:	ed94 4a2e 	vldr	s8, [r4, #184]	; 0xb8
 8001a94:	eea2 7aa5 	vfma.f32	s14, s5, s11
 8001a98:	ed94 6a3f 	vldr	s12, [r4, #252]	; 0xfc
            out -= sections_[n].a[1] * x_[n+1][1];
 8001a9c:	edd4 6a2a 	vldr	s13, [r4, #168]	; 0xa8
            x_[n][0] = in;
 8001aa0:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
            x_[n][2] = x_[n][1];
 8001aa4:	ed84 5a3d 	vstr	s10, [r4, #244]	; 0xf4
            x_[n][1] = x_[n][0];
 8001aa8:	edc4 5a3c 	vstr	s11, [r4, #240]	; 0xf0
 8001aac:	eea3 7a63 	vfms.f32	s14, s6, s7
 8001ab0:	eea4 7a46 	vfms.f32	s14, s8, s12
            out -= sections_[n].a[1] * x_[n+1][1];
 8001ab4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8001ab8:	eef0 7a47 	vmov.f32	s15, s14
        x_[num_sections_][2] = x_[num_sections_][1];
 8001abc:	f8d3 c0c0 	ldr.w	ip, [r3, #192]	; 0xc0
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001ac0:	2803      	cmp	r0, #3
        x_[num_sections_][1] = x_[num_sections_][0];
 8001ac2:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
        x_[num_sections_][2] = x_[num_sections_][1];
 8001ac6:	f8c3 c0c4 	str.w	ip, [r3, #196]	; 0xc4
        x_[num_sections_][0] = in;
 8001aca:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
        x_[num_sections_][1] = x_[num_sections_][0];
 8001ace:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
                block[i] = filtered;
 8001ad2:	edc2 7a00 	vstr	s15, [r2]
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001ad6:	d029      	beq.n	8001b2c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x908>
 8001ad8:	3001      	adds	r0, #1
 8001ada:	3204      	adds	r2, #4
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001adc:	2801      	cmp	r0, #1
 8001ade:	f47f af3d 	bne.w	800195c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x738>
        for (int n = 0; n < num_sections_; n++)
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	f340 813f 	ble.w	8001d66 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xb42>
 8001ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8001aec:	e73b      	b.n	8001966 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x742>
                else if (!hold && !button_pressed && was_button_pressed_)
 8001aee:	f1b9 0f00 	cmp.w	r9, #0
 8001af2:	f47f ad2e 	bne.w	8001552 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x32e>
 8001af6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f43f af1b 	beq.w	8001936 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x712>
            if (adsr_state_ != ADSRState::kIdle)
 8001b00:	f8d5 32a8 	ldr.w	r3, [r5, #680]	; 0x2a8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f43f af16 	beq.w	8001936 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x712>
                adsr_state_ = ADSRState::kRelease;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
 8001b10:	e711      	b.n	8001936 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x712>
                if (!is_note_on_)
 8001b12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f43f ae5d 	beq.w	80017d6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x5b2>
        float cdDiff = depth_ - currentDepth_;
 8001b1c:	ed95 7aa3 	vldr	s14, [r5, #652]	; 0x28c
 8001b20:	e685      	b.n	800182e <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x60a>
            currentDepth_ = 0.0f;
 8001b22:	eef0 7a47 	vmov.f32	s15, s14
 8001b26:	ed85 7aa3 	vstr	s14, [r5, #652]	; 0x28c
 8001b2a:	e6d4      	b.n	80018d6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x6b2>
        }
 8001b2c:	ecbd 8b0e 	vpop	{d8-d14}
            was_button_pressed_ = button_pressed;
 8001b30:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
            was_freq_select_button_pressed_ = freq_select_button;
 8001b34:	f884 7049 	strb.w	r7, [r4, #73]	; 0x49
        }
 8001b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b3c:	080089fc 	.word	0x080089fc
 8001b40:	3ca3d70a 	.word	0x3ca3d70a
 8001b44:	447d7333 	.word	0x447d7333
 8001b48:	3f333333 	.word	0x3f333333
 8001b4c:	3a8e3773 	.word	0x3a8e3773
 8001b50:	4202cccd 	.word	0x4202cccd
 8001b54:	38d1b717 	.word	0x38d1b717
 8001b58:	40c90fdb 	.word	0x40c90fdb
 8001b5c:	40866666 	.word	0x40866666
 8001b60:	3e49ba5e 	.word	0x3e49ba5e
 8001b64:	3b449ba6 	.word	0x3b449ba6
 8001b68:	3dcac083 	.word	0x3dcac083
 8001b6c:	3a83126f 	.word	0x3a83126f
 8001b70:	bcf5c28f 	.word	0xbcf5c28f
 8001b74:	3cf5c28f 	.word	0x3cf5c28f
 8001b78:	3dccc78f 	.word	0x3dccc78f
 8001b7c:	3727c5ac 	.word	0x3727c5ac
 8001b80:	00000000 	.word	0x00000000
 8001b84:	30800000 	.word	0x30800000
 8001b88:	3e99999a 	.word	0x3e99999a
 8001b8c:	3dcccccd 	.word	0x3dcccccd
 8001b90:	3f666666 	.word	0x3f666666
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b94:	ed5f 6a0e 	vldr	s13, [pc, #-56]	; 8001b60 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x93c>
 8001b98:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 8001b64 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x940>
 8001b9c:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 8001b68 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x944>
 8001ba0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8001ba4:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
 8001ba8:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 8001b6c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x948>
            if (duty_cyclerandomization > 0.0f)
 8001bac:	edd0 6a84 	vldr	s13, [r0, #528]	; 0x210
 8001bb0:	eea0 7a86 	vfma.f32	s14, s1, s12
 8001bb4:	eef4 6ae5 	vcmpe.f32	s13, s11
 8001bb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001bbc:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	fec7 7ac6 	vminnm.f32	s15, s15, s12
            base_dutycycle = std::max(0.0f, std::min(1.0f, duty_cycle));
 8001bc8:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
                freq_rate_ = mapFloat(formant_pot_val, 0.0f, 1.0f, 0.001f, 0.1f);
 8001bcc:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
            if (duty_cyclerandomization > 0.0f)
 8001bd0:	dc49      	bgt.n	8001c66 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa42>
                current_dutycycle = base_dutycycle;
 8001bd2:	edc0 7a85 	vstr	s15, [r0, #532]	; 0x214
      if (__b < __a)
 8001bd6:	eefa 6a02 	vmov.f32	s13, #162	; 0xc1100000 -9.0
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001bda:	ed1f 6a1b 	vldr	s12, [pc, #-108]	; 8001b70 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x94c>
 8001bde:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 8001b74 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x950>
 8001be2:	eef4 8ae6 	vcmpe.f32	s17, s13
 8001be6:	eea8 7a86 	vfma.f32	s14, s17, s12
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                freq_wobbliness_ = mapFloat(formant_pot_val, 0.0f, 1.0f, 0.03f, 0.0f);
 8001bee:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
 8001bf2:	f300 8092 	bgt.w	8001d1a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xaf6>
      return __a;
 8001bf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8001bfa:	edc4 7a84 	vstr	s15, [r4, #528]	; 0x210
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8001bfe:	f006 f995 	bl	8007f2c <rand>
 8001c02:	ee07 0a90 	vmov	s15, r0
 8001c06:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001c0a:	ed5f 5a22 	vldr	s11, [pc, #-136]	; 8001b84 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x960>
 8001c0e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 8001c12:	ed94 7a84 	vldr	s14, [r4, #528]	; 0x210
 8001c16:	ed1f 5a24 	vldr	s10, [pc, #-144]	; 8001b88 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x964>
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c1a:	edd4 7a83 	vldr	s15, [r4, #524]	; 0x20c
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8001c1e:	eee6 6a25 	vfma.f32	s13, s12, s11
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c22:	ed5f 5a26 	vldr	s11, [pc, #-152]	; 8001b8c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x968>
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 8001c26:	ee27 7a05 	vmul.f32	s14, s14, s10
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c2a:	ed1f 6a27 	vldr	s12, [pc, #-156]	; 8001b90 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x96c>
 8001c2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001c32:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
 8001c36:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8001c3a:	edc4 7a85 	vstr	s15, [r4, #532]	; 0x214
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c3e:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 8001b78 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x954>
 8001c42:	ed5f ca32 	vldr	s25, [pc, #-200]	; 8001b7c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x958>
                previous_formant_pot_val_ = formant_pot_val;
 8001c46:	edc4 8a14 	vstr	s17, [r4, #80]	; 0x50
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c4a:	eee8 caa7 	vfma.f32	s25, s17, s15
            formantRate_ = rate;
 8001c4e:	edc4 ca7b 	vstr	s25, [r4, #492]	; 0x1ec
                previous_formant_pot_val_ = formant_pot_val;
 8001c52:	f7ff bb07 	b.w	8001264 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x40>
                float filtered = aa_filter_.Process((i == 0) ? sample : 0.0f);
 8001c56:	ed5f 7a36 	vldr	s15, [pc, #-216]	; 8001b80 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x95c>
 8001c5a:	e72f      	b.n	8001abc <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x898>
            depth_ = 0.0f;
 8001c5c:	eeb0 8a64 	vmov.f32	s16, s9
 8001c60:	edc5 4aa0 	vstr	s9, [r5, #640]	; 0x280
        if (depth_ > 0.25f)
 8001c64:	e613      	b.n	800188e <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x66a>
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8001c66:	f006 f961 	bl	8007f2c <rand>
 8001c6a:	ee07 0a90 	vmov	s15, r0
 8001c6e:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8001c72:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8001b84 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x960>
 8001c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 8001c7a:	ed5f 5a3d 	vldr	s11, [pc, #-244]	; 8001b88 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x964>
 8001c7e:	edd4 6a84 	vldr	s13, [r4, #528]	; 0x210
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c82:	edd4 7a83 	vldr	s15, [r4, #524]	; 0x20c
                float random_offset = ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f);
 8001c86:	eea7 6a05 	vfma.f32	s12, s14, s10
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c8a:	ed1f 5a40 	vldr	s10, [pc, #-256]	; 8001b8c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x968>
                float max_offset = 0.3f * duty_cyclerandomization; // Max 30% variation at full randomization
 8001c8e:	ee66 6aa5 	vmul.f32	s13, s13, s11
                current_dutycycle = std::max(0.1f, std::min(0.9f, base_dutycycle + offset));
 8001c92:	ed5f 5a41 	vldr	s11, [pc, #-260]	; 8001b90 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x96c>
 8001c96:	eeb0 7a67 	vmov.f32	s14, s15
 8001c9a:	eea6 7a26 	vfma.f32	s14, s12, s13
 8001c9e:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 8001ca2:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8001ca6:	ed84 7a85 	vstr	s14, [r4, #532]	; 0x214
        }
 8001caa:	e794      	b.n	8001bd6 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x9b2>
                    if (hold)
 8001cac:	f1b9 0f00 	cmp.w	r9, #0
 8001cb0:	d008      	beq.n	8001cc4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xaa0>
                        is_note_on_ = !is_note_on_;
 8001cb2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                        if (is_note_on_)
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f43f af1e 	beq.w	8001b00 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8dc>
            adsr_state_ = ADSRState::kAttack;
 8001cc4:	2301      	movs	r3, #1
            adsr_value_ = 0.0f; // Start from 0
 8001cc6:	2200      	movs	r2, #0
            adsr_state_ = ADSRState::kAttack;
 8001cc8:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
            adsr_value_ = 0.0f; // Start from 0
 8001ccc:	f8c5 22a4 	str.w	r2, [r5, #676]	; 0x2a4
            is_note_on_ = true;
 8001cd0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            if (filterMode_ == FILTER_MODE_NORMAL)
 8001cd4:	f1ba 0f00 	cmp.w	sl, #0
 8001cd8:	d118      	bne.n	8001d0c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xae8>
                targetFormantFreqs_[0] = vowelData[currentVoice_][vowel].F1;
 8001cda:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
 8001cde:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbc8>)
 8001ce4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cea:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
                targetFormantFreqs_[1] = vowelData[currentVoice_][vowel].F2;
 8001cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf0:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
                targetFormantFreqs_[2] = vowelData[currentVoice_][vowel].F3;
 8001cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf6:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
                targetFormantQs_[0] = vowelData[currentVoice_][vowel].Q1;
 8001cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cfc:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                targetFormantQs_[1] = vowelData[currentVoice_][vowel].Q2;
 8001d04:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
                targetFormantQs_[2] = vowelData[currentVoice_][vowel].Q3;
 8001d08:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        buildingUp_   = true;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
        currentDepth_ = 0.0f;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c5 328c 	str.w	r3, [r5, #652]	; 0x28c
 8001d18:	e420      	b.n	800155c <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x338>
      if (__a < __b)
 8001d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d1e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d45a      	bmi.n	8001dde <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbba>
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8001d28:	2300      	movs	r3, #0
                current_dutycycle = base_dutycycle;
 8001d2a:	edc4 7a85 	vstr	s15, [r4, #532]	; 0x214
            duty_cyclerandomization = std::max(0.0f, std::min(1.0f, randomization));
 8001d2e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
                current_dutycycle = base_dutycycle;
 8001d32:	e784      	b.n	8001c3e <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xa1a>
                float maxOffset = baseTargetFrequency * freq_wobbliness_;
 8001d34:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001d38:	ee28 8aa7 	vmul.f32	s16, s17, s15
                    ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f) * maxOffset;
 8001d3c:	f006 f8f6 	bl	8007f2c <rand>
 8001d40:	ee07 0a90 	vmov	s15, r0
 8001d44:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001df0 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbcc>
            float diff = targetFrequency - currentFrequency_;
 8001d48:	ed94 9a01 	vldr	s18, [r4, #4]
 8001d4c:	f240 33e7 	movw	r3, #999	; 0x3e7
                    ((static_cast<float>(std::rand()) / RAND_MAX) * 2.0f - 1.0f) * maxOffset;
 8001d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d54:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d58:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001d5c:	ee68 7a27 	vmul.f32	s15, s16, s15
                targetFrequencyOffset_ =
 8001d60:	edc4 7a03 	vstr	s15, [r4, #12]
                offsetCounter_ = 1000;
 8001d64:	e4b0      	b.n	80016c8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x4a4>
        x_[num_sections_][2] = x_[num_sections_][1];
 8001d66:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 8001d6a:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
        x_[num_sections_][1] = x_[num_sections_][0];
 8001d6e:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
        x_[num_sections_][0] = in;
 8001d72:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
        x_[num_sections_][1] = x_[num_sections_][0];
 8001d76:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
                block[i] = filtered;
 8001d7a:	ed82 0a00 	vstr	s0, [r2]
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8001d7e:	e6ab      	b.n	8001ad8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x8b4>
            buildingUp_   = false; // We can consider the buildup complete
 8001d80:	2300      	movs	r3, #0
            currentDepth_ = depth_;
 8001d82:	ed85 8aa3 	vstr	s16, [r5, #652]	; 0x28c
            buildingUp_   = false; // We can consider the buildup complete
 8001d86:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
        if (currentDepth_ < 0.0f)
 8001d8a:	e5ad      	b.n	80018e8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x6c4>
            depth_ = 0.0f;
 8001d8c:	eeb0 8a46 	vmov.f32	s16, s12
 8001d90:	ed85 6aa0 	vstr	s12, [r5, #640]	; 0x280
        if (depth_ > 0.25f)
 8001d94:	e4b9      	b.n	800170a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x4e6>
 8001d96:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                return 0;
 8001d9a:	f04f 0900 	mov.w	r9, #0
 8001d9e:	e431      	b.n	8001604 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3e0>
            buildingUp_   = false; // We can consider the buildup complete
 8001da0:	2300      	movs	r3, #0
            currentDepth_ = depth_;
 8001da2:	ed85 8aa3 	vstr	s16, [r5, #652]	; 0x28c
            buildingUp_   = false; // We can consider the buildup complete
 8001da6:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
        if (currentDepth_ < 0.0f)
 8001daa:	e4de      	b.n	800176a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x546>
 8001dac:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
                return kNumNotes - 1;
 8001db0:	f04f 0907 	mov.w	r9, #7
 8001db4:	e426      	b.n	8001604 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3e0>
        depth_ += dDiff * kDepthSmoothing;
 8001db6:	ed85 8aa0 	vstr	s16, [r5, #640]	; 0x280
 8001dba:	e568      	b.n	800188e <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x66a>
 8001dbc:	ed85 8aa0 	vstr	s16, [r5, #640]	; 0x280
 8001dc0:	e4a3      	b.n	800170a <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x4e6>
            for (int i = 1; i < kNumThresholds; i++)
 8001dc2:	f04f 0902 	mov.w	r9, #2
 8001dc6:	e404      	b.n	80015d2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3ae>
 8001dc8:	f04f 0901 	mov.w	r9, #1
 8001dcc:	e401      	b.n	80015d2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3ae>
 8001dce:	f04f 0904 	mov.w	r9, #4
 8001dd2:	f7ff bbfe 	b.w	80015d2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3ae>
 8001dd6:	f04f 0903 	mov.w	r9, #3
 8001dda:	f7ff bbfa 	b.w	80015d2 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x3ae>
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001dde:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001df4 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbd0>
 8001de2:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001df8 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0xbd4>
 8001de6:	eee8 7a87 	vfma.f32	s15, s17, s14
 8001dea:	e706      	b.n	8001bfa <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)+0x9d6>
 8001dec:	080089fc 	.word	0x080089fc
 8001df0:	30800000 	.word	0x30800000
 8001df4:	bdcccccd 	.word	0xbdcccccd
 8001df8:	3dcccccd 	.word	0x3dcccccd

08001dfc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
            system::Standby();
        }
    }

    const AudioOutput Process(const AudioInput &audio_in, const PotInput &pot)
    {
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
        ScopedProfilingPin<PROFILE_PROCESS> profile;
        io_.human.in.pot = pot;
        AudioOutput audio_out = {};
 8001dfe:	2300      	movs	r3, #0
    {
 8001e00:	b08d      	sub	sp, #52	; 0x34
        io_.human.in.pot = pot;
 8001e02:	4f1d      	ldr	r7, [pc, #116]	; (8001e78 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7c>)
 8001e04:	468e      	mov	lr, r1
        AudioOutput audio_out = {};
 8001e06:	9308      	str	r3, [sp, #32]
    {
 8001e08:	460c      	mov	r4, r1
        io_.human.in.pot = pot;
 8001e0a:	46bc      	mov	ip, r7
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8001e0c:	4d1b      	ldr	r5, [pc, #108]	; (8001e7c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x80>)
        AudioOutput audio_out = {};
 8001e0e:	ae06      	add	r6, sp, #24
 8001e10:	e9cd 3306 	strd	r3, r3, [sp, #24]
        io_.human.in.pot = pot;
 8001e14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e1c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001e24:	782b      	ldrb	r3, [r5, #0]
 8001e26:	f3bf 8f5b 	dmb	ish
        State state = state_.load(std::memory_order_acquire);

        if (state == STATE_SYNTH)
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d00c      	beq.n	8001e48 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4c>
            float vib = pot[POT_3];
            float formant = pot[POT_2];
            synth_engine_.Process(audio_out[AUDIO_OUT_LINE], button_pressed, pot_value, hold, formant, vib, tune);
        }

        return audio_out;
 8001e2e:	ab0c      	add	r3, sp, #48	; 0x30
 8001e30:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001e34:	e903 0007 	stmdb	r3, {r0, r1, r2}
    }
 8001e38:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 8001e3c:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 8001e40:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8001e44:	b00d      	add	sp, #52	; 0x34
 8001e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return history_ == (1 << kShift);
    }

    bool level(void)
    {
        return history_ & 1;
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x84>)
            synth_engine_.Process(audio_out[AUDIO_OUT_LINE], button_pressed, pot_value, hold, formant, vib, tune);
 8001e4a:	4631      	mov	r1, r6
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x88>)
 8001e4e:	6810      	ldr	r0, [r2, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f000 0001 	and.w	r0, r0, #1
 8001e56:	ed94 1a02 	vldr	s2, [r4, #8]
 8001e5a:	edd4 0a01 	vldr	s1, [r4, #4]
 8001e5e:	f002 0201 	and.w	r2, r2, #1
 8001e62:	f080 0001 	eor.w	r0, r0, #1
 8001e66:	ed94 0a00 	vldr	s0, [r4]
 8001e6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e6e:	9000      	str	r0, [sp, #0]
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8c>)
 8001e72:	f7ff f9d7 	bl	8001224 <recorder::SynthEngine::Process(float (&) [3], bool, float, bool, float, float, bool)>
 8001e76:	e7da      	b.n	8001e2e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x32>
 8001e78:	200106d8 	.word	0x200106d8
 8001e7c:	20010700 	.word	0x20010700
 8001e80:	20000420 	.word	0x20000420
 8001e84:	2000041c 	.word	0x2000041c
 8001e88:	20000428 	.word	0x20000428

08001e8c <recorder::StateMachine(bool)>:
        invert_ = invert;
    }

    uint32_t Read(void)
    {
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001e8c:	4bbd      	ldr	r3, [pc, #756]	; (8002184 <recorder::StateMachine(bool)+0x2f8>)
    {
 8001e8e:	b570      	push	{r4, r5, r6, lr}
 8001e90:	e9d3 1500 	ldrd	r1, r5, [r3]

        if (invert_)
 8001e94:	7a1a      	ldrb	r2, [r3, #8]
 8001e96:	4604      	mov	r4, r0
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001e98:	6909      	ldr	r1, [r1, #16]
 8001e9a:	40e9      	lsrs	r1, r5
 8001e9c:	f001 0101 	and.w	r1, r1, #1
        if (invert_)
 8001ea0:	b10a      	cbz	r2, 8001ea6 <recorder::StateMachine(bool)+0x1a>
        {
            pin ^= 1;
 8001ea2:	f081 0101 	eor.w	r1, r1, #1
        state_ = initial_state;
    }

    T Process(T in)
    {
        if (in != history_)
 8001ea6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8001eaa:	428a      	cmp	r2, r1
 8001eac:	f000 8184 	beq.w	80021b8 <recorder::StateMachine(bool)+0x32c>
        {
            count_ = 0;
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	665a      	str	r2, [r3, #100]	; 0x64
                state_ = in;
            }
        }

        history_ = in;
        return state_;
 8001eb4:	f893 c069 	ldrb.w	ip, [r3, #105]	; 0x69
        history_ = in;
 8001eb8:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    {
        for (uint32_t i = 0; i < NUM_SWITCHES; i++)
        {
            if (kEnableReverse || i != SWITCH_REVERSE)
            {
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8001ebc:	49b2      	ldr	r1, [pc, #712]	; (8002188 <recorder::StateMachine(bool)+0x2fc>)
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ebe:	e9d3 2003 	ldrd	r2, r0, [r3, #12]
 8001ec2:	6912      	ldr	r2, [r2, #16]
 8001ec4:	f881 c020 	strb.w	ip, [r1, #32]
 8001ec8:	40c2      	lsrs	r2, r0
        if (invert_)
 8001eca:	7d18      	ldrb	r0, [r3, #20]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ecc:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001ed0:	b108      	cbz	r0, 8001ed6 <recorder::StateMachine(bool)+0x4a>
            pin ^= 1;
 8001ed2:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001ed6:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8001eda:	4290      	cmp	r0, r2
 8001edc:	f000 8143 	beq.w	8002166 <recorder::StateMachine(bool)+0x2da>
            count_ = 0;
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	6718      	str	r0, [r3, #112]	; 0x70
        history_ = in;
 8001ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001ee8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001eec:	69d8      	ldr	r0, [r3, #28]
 8001eee:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001ef2:	699a      	ldr	r2, [r3, #24]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001ef4:	6912      	ldr	r2, [r2, #16]
 8001ef6:	40c2      	lsrs	r2, r0
        if (invert_)
 8001ef8:	f893 0020 	ldrb.w	r0, [r3, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001efc:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f00:	b108      	cbz	r0, 8001f06 <recorder::StateMachine(bool)+0x7a>
            pin ^= 1;
 8001f02:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f06:	f893 0080 	ldrb.w	r0, [r3, #128]	; 0x80
 8001f0a:	4290      	cmp	r0, r2
 8001f0c:	f000 811c 	beq.w	8002148 <recorder::StateMachine(bool)+0x2bc>
            count_ = 0;
 8001f10:	2000      	movs	r0, #0
 8001f12:	67d8      	str	r0, [r3, #124]	; 0x7c
        history_ = in;
 8001f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001f18:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f1e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f24:	6912      	ldr	r2, [r2, #16]
 8001f26:	40c2      	lsrs	r2, r0
        if (invert_)
 8001f28:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f2c:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f30:	b108      	cbz	r0, 8001f36 <recorder::StateMachine(bool)+0xaa>
            pin ^= 1;
 8001f32:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f36:	f893 008c 	ldrb.w	r0, [r3, #140]	; 0x8c
 8001f3a:	4290      	cmp	r0, r2
 8001f3c:	f000 80f2 	beq.w	8002124 <recorder::StateMachine(bool)+0x298>
            count_ = 0;
 8001f40:	2000      	movs	r0, #0
 8001f42:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
        history_ = in;
 8001f46:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f4c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f4e:	6912      	ldr	r2, [r2, #16]
        return state_;
 8001f50:	f893 e08d 	ldrb.w	lr, [r3, #141]	; 0x8d
 8001f54:	40c2      	lsrs	r2, r0
        if (invert_)
 8001f56:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8001f5a:	f881 e023 	strb.w	lr, [r1, #35]	; 0x23
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f5e:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f62:	b108      	cbz	r0, 8001f68 <recorder::StateMachine(bool)+0xdc>
            pin ^= 1;
 8001f64:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f68:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
 8001f6c:	4290      	cmp	r0, r2
 8001f6e:	f000 80c7 	beq.w	8002100 <recorder::StateMachine(bool)+0x274>
            count_ = 0;
 8001f72:	2000      	movs	r0, #0
 8001f74:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
        history_ = in;
 8001f78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001f7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001f80:	6912      	ldr	r2, [r2, #16]
 8001f82:	40c2      	lsrs	r2, r0
 8001f84:	f893 0099 	ldrb.w	r0, [r3, #153]	; 0x99
 8001f88:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8001f8c:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001f90:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8001f94:	b108      	cbz	r0, 8001f9a <recorder::StateMachine(bool)+0x10e>
            pin ^= 1;
 8001f96:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001f9a:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
 8001f9e:	4290      	cmp	r0, r2
 8001fa0:	f000 809c 	beq.w	80020dc <recorder::StateMachine(bool)+0x250>
            count_ = 0;
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
        history_ = in;
 8001faa:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8001fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8001fb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fb2:	6912      	ldr	r2, [r2, #16]
 8001fb4:	40c2      	lsrs	r2, r0
 8001fb6:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 8001fba:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
 8001fbe:	f002 0201 	and.w	r2, r2, #1
        if (invert_)
 8001fc2:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8001fc6:	b108      	cbz	r0, 8001fcc <recorder::StateMachine(bool)+0x140>
            pin ^= 1;
 8001fc8:	f082 0201 	eor.w	r2, r2, #1
        if (in != history_)
 8001fcc:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
 8001fd0:	4290      	cmp	r0, r2
 8001fd2:	d073      	beq.n	80020bc <recorder::StateMachine(bool)+0x230>
            count_ = 0;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
        history_ = in;
 8001fda:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
            }
        }

        for (uint32_t i = 0; i < NUM_DETECTS; i++)
        {
            in.detect[i] = kEnableLineIn &&
 8001fde:	2000      	movs	r0, #0
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8001fe0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
        history_ = (history_ << kShift) | level;
 8001fe4:	4a69      	ldr	r2, [pc, #420]	; (800218c <recorder::StateMachine(bool)+0x300>)
 8001fe6:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8001fea:	6813      	ldr	r3, [r2, #0]
            in.detect[i] = kEnableLineIn &&
 8001fec:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
 8001ff0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8001ff4:	4966      	ldr	r1, [pc, #408]	; (8002190 <recorder::StateMachine(bool)+0x304>)
 8001ff6:	4d67      	ldr	r5, [pc, #412]	; (8002194 <recorder::StateMachine(bool)+0x308>)
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	680a      	ldr	r2, [r1, #0]
 8001ffc:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8002000:	600a      	str	r2, [r1, #0]
 8002002:	782a      	ldrb	r2, [r5, #0]
        if (state == STATE_IDLE)
 8002004:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002008:	bba2      	cbnz	r2, 8002074 <recorder::StateMachine(bool)+0x1e8>
            if (play_button_.is_high())
 800200a:	07db      	lsls	r3, r3, #31
 800200c:	d543      	bpl.n	8002096 <recorder::StateMachine(bool)+0x20a>
        return state_ == STATE_STOPPED;
    }

    void Start(bool enable_amplifier)
    {
        if (state_ == STATE_STOPPED)
 800200e:	4e62      	ldr	r6, [pc, #392]	; (8002198 <recorder::StateMachine(bool)+0x30c>)
 8002010:	f896 3160 	ldrb.w	r3, [r6, #352]	; 0x160
 8002014:	b9bb      	cbnz	r3, 8002046 <recorder::StateMachine(bool)+0x1ba>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201a:	4a60      	ldr	r2, [pc, #384]	; (800219c <recorder::StateMachine(bool)+0x310>)
        {
            state_ = STATE_STARTING;
            fade_position_ = 0;
 800201c:	2300      	movs	r3, #0
            cue_stop_ = false;

            boost_enable_.Set();
            amp_enable_.Write(enable_amplifier);

            dac_.Start();
 800201e:	f506 70aa 	add.w	r0, r6, #340	; 0x154
 8002022:	6191      	str	r1, [r2, #24]
 8002024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            fade_position_ = 0;
 8002028:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
            state_ = STATE_STARTING;
 800202c:	2301      	movs	r3, #1
 800202e:	f8a6 3160 	strh.w	r3, [r6, #352]	; 0x160
 8002032:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <recorder::StateMachine(bool)+0x314>)
 8002034:	619a      	str	r2, [r3, #24]
            dac_.Start();
 8002036:	f001 fc5f 	bl	80038f8 <recorder::Dac::Start()>
            adc_.Start();
 800203a:	1d30      	adds	r0, r6, #4
 800203c:	f001 f982 	bl	8003344 <recorder::Adc::Start()>
            StartTimer();
 8002040:	4630      	mov	r0, r6
 8002042:	f001 fc45 	bl	80038d0 <recorder::Analog::StartTimer()>
        printf("State: ");
 8002046:	4857      	ldr	r0, [pc, #348]	; (80021a4 <recorder::StateMachine(bool)+0x318>)
 8002048:	f005 feb4 	bl	8007db4 <iprintf>
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }
 800204c:	2301      	movs	r3, #1
 800204e:	f3bf 8f5b 	dmb	ish
 8002052:	702b      	strb	r3, [r5, #0]
 8002054:	f3bf 8f5b 	dmb	ish
            if (standby)
 8002058:	b15c      	cbz	r4, 8002072 <recorder::StateMachine(bool)+0x1e6>
        printf("State: ");
 800205a:	4852      	ldr	r0, [pc, #328]	; (80021a4 <recorder::StateMachine(bool)+0x318>)
 800205c:	f005 feaa 	bl	8007db4 <iprintf>
            printf("STANDBY\n");
 8002060:	4851      	ldr	r0, [pc, #324]	; (80021a8 <recorder::StateMachine(bool)+0x31c>)
 8002062:	f005 ff2d 	bl	8007ec0 <puts>
 8002066:	230a      	movs	r3, #10
 8002068:	f3bf 8f5b 	dmb	ish
 800206c:	702b      	strb	r3, [r5, #0]
 800206e:	f3bf 8f5b 	dmb	ish
    }
 8002072:	bd70      	pop	{r4, r5, r6, pc}
        else if (state == STATE_SYNTH)
 8002074:	2901      	cmp	r1, #1
 8002076:	f000 80ae 	beq.w	80021d6 <recorder::StateMachine(bool)+0x34a>
        else if (state == STATE_STANDBY)
 800207a:	290a      	cmp	r1, #10
 800207c:	d1f9      	bne.n	8002072 <recorder::StateMachine(bool)+0x1e6>
            system::SerialFlushTx();
 800207e:	f002 f9f9 	bl	8004474 <recorder::system::SerialFlushTx(bool)>
        }
    }

    void Stop(void)
    {
        if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8002082:	4b45      	ldr	r3, [pc, #276]	; (8002198 <recorder::StateMachine(bool)+0x30c>)
 8002084:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
 8002088:	2a02      	cmp	r2, #2
 800208a:	f000 80b5 	beq.w	80021f8 <recorder::StateMachine(bool)+0x36c>
    }
 800208e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            system::Standby();
 8002092:	f002 b9f5 	b.w	8004480 <recorder::system::Standby()>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8002096:	4a45      	ldr	r2, [pc, #276]	; (80021ac <recorder::StateMachine(bool)+0x320>)
            else if (kEnableIdleStandby &&
 8002098:	eddf 7a45 	vldr	s15, [pc, #276]	; 80021b0 <recorder::StateMachine(bool)+0x324>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	ee07 3a10 	vmov	s14, r3
            else if (kEnableIdleStandby &&
 80020a4:	6013      	str	r3, [r2, #0]
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 80020a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            else if (kEnableIdleStandby &&
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	ddd1      	ble.n	8002058 <recorder::StateMachine(bool)+0x1cc>
                printf("Idle timeout expired\n");
 80020b4:	483f      	ldr	r0, [pc, #252]	; (80021b4 <recorder::StateMachine(bool)+0x328>)
 80020b6:	f005 ff03 	bl	8007ec0 <puts>
            if (standby)
 80020ba:	e7ce      	b.n	800205a <recorder::StateMachine(bool)+0x1ce>
        else if (in != state_)
 80020bc:	f893 00b1 	ldrb.w	r0, [r3, #177]	; 0xb1
 80020c0:	4290      	cmp	r0, r2
 80020c2:	d08a      	beq.n	8001fda <recorder::StateMachine(bool)+0x14e>
            if (++count_ == duration_)
 80020c4:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80020c8:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 80020cc:	3001      	adds	r0, #1
 80020ce:	42a8      	cmp	r0, r5
 80020d0:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
                state_ = in;
 80020d4:	bf08      	it	eq
 80020d6:	f883 20b1 	strbeq.w	r2, [r3, #177]	; 0xb1
 80020da:	e77e      	b.n	8001fda <recorder::StateMachine(bool)+0x14e>
        else if (in != state_)
 80020dc:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 80020e0:	4290      	cmp	r0, r2
 80020e2:	f43f af62 	beq.w	8001faa <recorder::StateMachine(bool)+0x11e>
            if (++count_ == duration_)
 80020e6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80020ea:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80020ee:	3001      	adds	r0, #1
 80020f0:	42a8      	cmp	r0, r5
 80020f2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
 80020f6:	f47f af58 	bne.w	8001faa <recorder::StateMachine(bool)+0x11e>
                state_ = in;
 80020fa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80020fe:	e754      	b.n	8001faa <recorder::StateMachine(bool)+0x11e>
        else if (in != state_)
 8002100:	f893 0099 	ldrb.w	r0, [r3, #153]	; 0x99
 8002104:	4290      	cmp	r0, r2
 8002106:	f43f af37 	beq.w	8001f78 <recorder::StateMachine(bool)+0xec>
            if (++count_ == duration_)
 800210a:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800210e:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8002112:	3001      	adds	r0, #1
 8002114:	42a8      	cmp	r0, r5
 8002116:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 800211a:	f47f af2d 	bne.w	8001f78 <recorder::StateMachine(bool)+0xec>
                state_ = in;
 800211e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8002122:	e729      	b.n	8001f78 <recorder::StateMachine(bool)+0xec>
        else if (in != state_)
 8002124:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
 8002128:	4290      	cmp	r0, r2
 800212a:	f43f af0c 	beq.w	8001f46 <recorder::StateMachine(bool)+0xba>
            if (++count_ == duration_)
 800212e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002132:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8002136:	3001      	adds	r0, #1
 8002138:	42a8      	cmp	r0, r5
 800213a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 800213e:	f47f af02 	bne.w	8001f46 <recorder::StateMachine(bool)+0xba>
                state_ = in;
 8002142:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8002146:	e6fe      	b.n	8001f46 <recorder::StateMachine(bool)+0xba>
        else if (in != state_)
 8002148:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 800214c:	4290      	cmp	r0, r2
 800214e:	f43f aee1 	beq.w	8001f14 <recorder::StateMachine(bool)+0x88>
            if (++count_ == duration_)
 8002152:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002154:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8002156:	3001      	adds	r0, #1
 8002158:	42a8      	cmp	r0, r5
 800215a:	67d8      	str	r0, [r3, #124]	; 0x7c
 800215c:	f47f aeda 	bne.w	8001f14 <recorder::StateMachine(bool)+0x88>
                state_ = in;
 8002160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8002164:	e6d6      	b.n	8001f14 <recorder::StateMachine(bool)+0x88>
        else if (in != state_)
 8002166:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
 800216a:	4290      	cmp	r0, r2
 800216c:	f43f aeba 	beq.w	8001ee4 <recorder::StateMachine(bool)+0x58>
            if (++count_ == duration_)
 8002170:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002172:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8002174:	3001      	adds	r0, #1
 8002176:	4285      	cmp	r5, r0
 8002178:	6718      	str	r0, [r3, #112]	; 0x70
 800217a:	f47f aeb3 	bne.w	8001ee4 <recorder::StateMachine(bool)+0x58>
                state_ = in;
 800217e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002182:	e6af      	b.n	8001ee4 <recorder::StateMachine(bool)+0x58>
 8002184:	20010994 	.word	0x20010994
 8002188:	200106d8 	.word	0x200106d8
 800218c:	2000041c 	.word	0x2000041c
 8002190:	20000420 	.word	0x20000420
 8002194:	20010700 	.word	0x20010700
 8002198:	20010704 	.word	0x20010704
 800219c:	58021800 	.word	0x58021800
 80021a0:	58020400 	.word	0x58020400
 80021a4:	08008930 	.word	0x08008930
 80021a8:	08008984 	.word	0x08008984
 80021ac:	20000424 	.word	0x20000424
 80021b0:	476a6000 	.word	0x476a6000
 80021b4:	0800898c 	.word	0x0800898c
        else if (in != state_)
 80021b8:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80021bc:	428a      	cmp	r2, r1
 80021be:	f43f ae79 	beq.w	8001eb4 <recorder::StateMachine(bool)+0x28>
            if (++count_ == duration_)
 80021c2:	e9d3 0218 	ldrd	r0, r2, [r3, #96]	; 0x60
 80021c6:	3201      	adds	r2, #1
 80021c8:	4290      	cmp	r0, r2
 80021ca:	665a      	str	r2, [r3, #100]	; 0x64
 80021cc:	f47f ae72 	bne.w	8001eb4 <recorder::StateMachine(bool)+0x28>
                state_ = in;
 80021d0:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
 80021d4:	e66e      	b.n	8001eb4 <recorder::StateMachine(bool)+0x28>
            if (adsr_state_ == ADSRState::kIdle && !delay_.audible())
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <recorder::StateMachine(bool)+0x3b0>)
 80021d8:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
 80021dc:	b942      	cbnz	r2, 80021f0 <recorder::StateMachine(bool)+0x364>
 80021de:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002240 <recorder::StateMachine(bool)+0x3b4>
 80021e2:	ed93 7a96 	vldr	s14, [r3, #600]	; 0x258
 80021e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	d907      	bls.n	8002200 <recorder::StateMachine(bool)+0x374>
                synthReleaseCounter = 0;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <recorder::StateMachine(bool)+0x3b8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    }
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
        {
            cue_stop_ = true;
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 80021fe:	e746      	b.n	800208e <recorder::StateMachine(bool)+0x202>
                if (++synthReleaseCounter >= 50) // 10 seconds @ ~1ms per loop
 8002200:	4c10      	ldr	r4, [pc, #64]	; (8002244 <recorder::StateMachine(bool)+0x3b8>)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	2b31      	cmp	r3, #49	; 0x31
 8002208:	6023      	str	r3, [r4, #0]
 800220a:	f67f af32 	bls.w	8002072 <recorder::StateMachine(bool)+0x1e6>
        if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <recorder::StateMachine(bool)+0x3bc>)
        printf("State: ");
 8002210:	480e      	ldr	r0, [pc, #56]	; (800224c <recorder::StateMachine(bool)+0x3c0>)
 8002212:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
 8002216:	2a02      	cmp	r2, #2
            cue_stop_ = true;
 8002218:	bf08      	it	eq
 800221a:	f883 1161 	strbeq.w	r1, [r3, #353]	; 0x161
 800221e:	f005 fdc9 	bl	8007db4 <iprintf>
            printf("IDLE\n");
 8002222:	480b      	ldr	r0, [pc, #44]	; (8002250 <recorder::StateMachine(bool)+0x3c4>)
 8002224:	f005 fe4c 	bl	8007ec0 <puts>
            idle_timeout_ = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <recorder::StateMachine(bool)+0x3c8>)
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	f3bf 8f5b 	dmb	ish
 8002232:	702b      	strb	r3, [r5, #0]
 8002234:	f3bf 8f5b 	dmb	ish
                    synthReleaseCounter = 0; // reset the counter
 8002238:	6023      	str	r3, [r4, #0]
    }
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	20010428 	.word	0x20010428
 8002240:	3a83126f 	.word	0x3a83126f
 8002244:	20010a54 	.word	0x20010a54
 8002248:	20010704 	.word	0x20010704
 800224c:	08008930 	.word	0x08008930
 8002250:	08008938 	.word	0x08008938
 8002254:	20000424 	.word	0x20000424

08002258 <main>:

    extern "C" int main(void)
    {
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

        system::Init();
        ProfilingPin<PROFILE_MAIN>::Set();

        analog_.Init(Process);
 800225c:	4fb7      	ldr	r7, [pc, #732]	; (800253c <main+0x2e4>)
    {
 800225e:	b08b      	sub	sp, #44	; 0x2c
        system::Init();
 8002260:	f001 fef6 	bl	8004050 <recorder::system::Init()>
        analog_.Init(Process);
 8002264:	49b6      	ldr	r1, [pc, #728]	; (8002540 <main+0x2e8>)
 8002266:	4638      	mov	r0, r7
        gpio_base_ = gpio_base;
 8002268:	4cb6      	ldr	r4, [pc, #728]	; (8002544 <main+0x2ec>)
 800226a:	f001 fa8f 	bl	800378c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800226e:	4bb6      	ldr	r3, [pc, #728]	; (8002548 <main+0x2f0>)
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002270:	49b6      	ldr	r1, [pc, #728]	; (800254c <main+0x2f4>)
        pin_number_ = pin_number;
 8002272:	2500      	movs	r5, #0
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002274:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002278:	2601      	movs	r6, #1
        gpio_base_ = gpio_base;
 800227a:	60e1      	str	r1, [r4, #12]
        pin_number_ = pin_number;
 800227c:	f04f 0c02 	mov.w	ip, #2
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002280:	f042 0201 	orr.w	r2, r2, #1
        duration_ = duration;
 8002284:	f04f 080a 	mov.w	r8, #10
 8002288:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800228c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002290:	f002 0201 	and.w	r2, r2, #1
 8002294:	9203      	str	r2, [sp, #12]
 8002296:	9a03      	ldr	r2, [sp, #12]
 8002298:	68ca      	ldr	r2, [r1, #12]
 800229a:	f022 0203 	bic.w	r2, r2, #3
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022a4:	680a      	ldr	r2, [r1, #0]
 80022a6:	f022 0203 	bic.w	r2, r2, #3
 80022aa:	600a      	str	r2, [r1, #0]
        pin_number_ = pin_number;
 80022ac:	6125      	str	r5, [r4, #16]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80022ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022be:	f002 0201 	and.w	r2, r2, #1
 80022c2:	9204      	str	r2, [sp, #16]
 80022c4:	9a04      	ldr	r2, [sp, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022c6:	68ca      	ldr	r2, [r1, #12]
 80022c8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022cc:	f042 0210 	orr.w	r2, r2, #16
 80022d0:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022d2:	680a      	ldr	r2, [r1, #0]
 80022d4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022d8:	600a      	str	r2, [r1, #0]
        gpio_base_ = gpio_base;
 80022da:	6021      	str	r1, [r4, #0]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 80022dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022e0:	f042 0208 	orr.w	r2, r2, #8
 80022e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 80022ec:	7526      	strb	r6, [r4, #20]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 80022ee:	f002 0208 	and.w	r2, r2, #8
        invert_ = invert;
 80022f2:	7226      	strb	r6, [r4, #8]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 80022f4:	9205      	str	r2, [sp, #20]
 80022f6:	9a05      	ldr	r2, [sp, #20]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022f8:	4a95      	ldr	r2, [pc, #596]	; (8002550 <main+0x2f8>)
 80022fa:	68d0      	ldr	r0, [r2, #12]
 80022fc:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 8002300:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002304:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002306:	6810      	ldr	r0, [r2, #0]
        pin_number_ = pin_number;
 8002308:	f8c4 c004 	str.w	ip, [r4, #4]
 800230c:	f04f 0c0b 	mov.w	ip, #11
 8002310:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 8002314:	6010      	str	r0, [r2, #0]
        gpio_base_ = gpio_base;
 8002316:	61a2      	str	r2, [r4, #24]
 8002318:	63e1      	str	r1, [r4, #60]	; 0x3c
        pin_number_ = pin_number;
 800231a:	6426      	str	r6, [r4, #64]	; 0x40
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800231c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
        invert_ = invert;
 8002320:	f884 6020 	strb.w	r6, [r4, #32]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002324:	f042 0204 	orr.w	r2, r2, #4
        invert_ = invert;
 8002328:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 800232c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002330:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002338:	f002 0204 	and.w	r2, r2, #4
 800233c:	9206      	str	r2, [sp, #24]
 800233e:	9a06      	ldr	r2, [sp, #24]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002340:	4a84      	ldr	r2, [pc, #528]	; (8002554 <main+0x2fc>)
        gpio_base_ = gpio_base;
 8002342:	6262      	str	r2, [r4, #36]	; 0x24
 8002344:	68d0      	ldr	r0, [r2, #12]
 8002346:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800234a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800234e:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002350:	6810      	ldr	r0, [r2, #0]
 8002352:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002356:	6010      	str	r0, [r2, #0]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8002358:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800235c:	4330      	orrs	r0, r6
 800235e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002362:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002366:	4030      	ands	r0, r6
 8002368:	9007      	str	r0, [sp, #28]
 800236a:	9807      	ldr	r0, [sp, #28]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800236c:	68c8      	ldr	r0, [r1, #12]
 800236e:	f020 000c 	bic.w	r0, r0, #12
 8002372:	f040 0004 	orr.w	r0, r0, #4
 8002376:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002378:	6808      	ldr	r0, [r1, #0]
 800237a:	f020 000c 	bic.w	r0, r0, #12
 800237e:	6008      	str	r0, [r1, #0]
        pin_number_ = pin_number;
 8002380:	2004      	movs	r0, #4
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002382:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002386:	f041 0104 	orr.w	r1, r1, #4
 800238a:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 800238e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
        pin_number_ = pin_number;
 8002392:	f8c4 c01c 	str.w	ip, [r4, #28]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8002396:	f001 0104 	and.w	r1, r1, #4
        pin_number_ = pin_number;
 800239a:	62a0      	str	r0, [r4, #40]	; 0x28
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800239c:	9108      	str	r1, [sp, #32]
 800239e:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023a0:	68d1      	ldr	r1, [r2, #12]
        gpio_base_ = gpio_base;
 80023a2:	6562      	str	r2, [r4, #84]	; 0x54
 80023a4:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80023a8:	64a2      	str	r2, [r4, #72]	; 0x48
        pin_number_ = pin_number;
 80023aa:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 80023ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80023b2:	64e0      	str	r0, [r4, #76]	; 0x4c
        invert_ = invert;
 80023b4:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
 80023b8:	60d1      	str	r1, [r2, #12]
        count_ = 0;
 80023ba:	6725      	str	r5, [r4, #112]	; 0x70
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80023bc:	6811      	ldr	r1, [r2, #0]
 80023be:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80023c2:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
        history_ = initial_state;
 80023c6:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
 80023ca:	6011      	str	r1, [r2, #0]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80023cc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80023d0:	4301      	orrs	r1, r0
 80023d2:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023da:	4003      	ands	r3, r0
 80023dc:	9309      	str	r3, [sp, #36]	; 0x24
 80023de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023e0:	68d3      	ldr	r3, [r2, #12]
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ea:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f2:	6013      	str	r3, [r2, #0]
        duration_ = duration;
 80023f4:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
        db_[SWITCH_PLAY].Init(kButtonDebounceDuration_ms,
 80023f8:	f002 f8d2 	bl	80045a0 <recorder::system::WakeupWasPlayButton()>
        history_ = initial_state;
 80023fc:	462b      	mov	r3, r5
        history_ = initial_state ? ((1 << kShift) | 1) : 0;
 80023fe:	4a56      	ldr	r2, [pc, #344]	; (8002558 <main+0x300>)
 8002400:	f360 0307 	bfi	r3, r0, #0, #8
 8002404:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
 8002408:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
 800240c:	f360 230f 	bfi	r3, r0, #8, #8
 8002410:	f8a4 508c 	strh.w	r5, [r4, #140]	; 0x8c
        duration_ = duration;
 8002414:	f8c4 80a8 	str.w	r8, [r4, #168]	; 0xa8
        history_ = initial_state;
 8002418:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <main+0x304>)
        duration_ = duration;
 800241e:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
 8002422:	601d      	str	r5, [r3, #0]
        if (state_ == STATE_STOPPED)
 8002424:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
        count_ = 0;
 8002428:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
        history_ = initial_state;
 800242c:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        count_ = 0;
 8002430:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        history_ = initial_state;
 8002434:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 8002438:	6015      	str	r5, [r2, #0]
        count_ = 0;
 800243a:	e9c4 8518 	strd	r8, r5, [r4, #96]	; 0x60
 800243e:	e9c4 851e 	strd	r8, r5, [r4, #120]	; 0x78
 8002442:	e9c4 8527 	strd	r8, r5, [r4, #156]	; 0x9c
 8002446:	e9c4 8521 	strd	r8, r5, [r4, #132]	; 0x84
 800244a:	b9b3      	cbnz	r3, 800247a <main+0x222>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800244c:	4944      	ldr	r1, [pc, #272]	; (8002560 <main+0x308>)
 800244e:	f44f 7000 	mov.w	r0, #512	; 0x200
            fade_position_ = 0;
 8002452:	2200      	movs	r2, #0
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <main+0x30c>)
 8002456:	6188      	str	r0, [r1, #24]
            dac_.Start();
 8002458:	f507 70aa 	add.w	r0, r7, #340	; 0x154
            fade_position_ = 0;
 800245c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            state_ = STATE_STARTING;
 8002464:	f8a7 6160 	strh.w	r6, [r7, #352]	; 0x160
 8002468:	619a      	str	r2, [r3, #24]
            dac_.Start();
 800246a:	f001 fa45 	bl	80038f8 <recorder::Dac::Start()>
            adc_.Start();
 800246e:	1d38      	adds	r0, r7, #4
 8002470:	f000 ff68 	bl	8003344 <recorder::Adc::Start()>
            StartTimer();
 8002474:	4638      	mov	r0, r7
 8002476:	f001 fa2b 	bl	80038d0 <recorder::Analog::StartTimer()>
class Monitor
{
public:
    void Init(void)
    {
        length_ = 0;
 800247a:	2500      	movs	r5, #0
 800247c:	4c3a      	ldr	r4, [pc, #232]	; (8002568 <main+0x310>)
        play_button_.Init();
        tune_button_.Init();
        analog_.StartPlayback();
        //   recording_.Init();
        //  playback_.Init();
        synth_engine_.Init();
 800247e:	483b      	ldr	r0, [pc, #236]	; (800256c <main+0x314>)
 8002480:	f7fe f942 	bl	8000708 <recorder::SynthEngine::Init()>
    bool sw[NUM_SWITCHES];
    bool detect[NUM_DETECTS];

    void Init(void)
    {
        *this = {};
 8002484:	2228      	movs	r2, #40	; 0x28
 8002486:	4629      	mov	r1, r5
 8002488:	4839      	ldr	r0, [pc, #228]	; (8002570 <main+0x318>)
 800248a:	f005 f908 	bl	800769e <memset>
 800248e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        io_.Init();
        monitor_.Init();
        system::ReloadWatchdog();
 8002492:	f001 fdd5 	bl	8004040 <recorder::system::ReloadWatchdog()>
        printf("State: ");
 8002496:	4837      	ldr	r0, [pc, #220]	; (8002574 <main+0x31c>)
 8002498:	f005 fc8c 	bl	8007db4 <iprintf>
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
 800249c:	4e34      	ldr	r6, [pc, #208]	; (8002570 <main+0x318>)
        //  playback_.Reset();
        //  sample_memory_.Init();
        // ledPin.Init(GPIOPin::SPEED_LOW, GPIOPin::TYPE_PUSHPULL, GPIOPin::PULL_NONE);
        Transition(STATE_SYNTH);

        bool expire_watchdog = false;
 800249e:	9500      	str	r5, [sp, #0]
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }
 80024a0:	2201      	movs	r2, #1
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <main+0x320>)
 80024a4:	f204 1529 	addw	r5, r4, #297	; 0x129
 80024a8:	f3bf 8f5b 	dmb	ish
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	f3bf 8f5b 	dmb	ish
            analog_.Start(false);
        }

        for (;;)
        {
            printf("test");
 80024b2:	4832      	ldr	r0, [pc, #200]	; (800257c <main+0x324>)
 80024b4:	f005 fc7e 	bl	8007db4 <iprintf>
    }

    const Message& Receive(void)
    {
        char* result =
            std::fgets(line_ + length_, sizeof(line_) - length_, stdin);
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <main+0x328>)
      | __memory_order_modifier(__m & __memory_order_modifier_mask));
  }

  _GLIBCXX_ALWAYS_INLINE void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(int(__m)); }
 80024ba:	f3bf 8f5b 	dmb	ish
 80024be:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 80024c8:	4420      	add	r0, r4
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	f002 f874 	bl	80045b8 <fgets>

        if (result != nullptr)
 80024d0:	b1c0      	cbz	r0, 8002504 <main+0x2ac>
        {
            length_ = std::strlen(line_);
 80024d2:	4825      	ldr	r0, [pc, #148]	; (8002568 <main+0x310>)
 80024d4:	f7fd ff04 	bl	80002e0 <strlen>
 80024d8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        }

        if (length_ == 0 || line_[length_ - 1] != '\n')
 80024dc:	b118      	cbz	r0, 80024e6 <main+0x28e>
 80024de:	1e43      	subs	r3, r0, #1
 80024e0:	5ce2      	ldrb	r2, [r4, r3]
 80024e2:	2a0a      	cmp	r2, #10
 80024e4:	d011      	beq.n	800250a <main+0x2b2>
        {
            message_.payload.type = Message::TYPE_NONE;
 80024e6:	2300      	movs	r3, #0
            ProfilingPin<PROFILE_MAIN_LOOP>::Set();
            std::atomic_thread_fence(std::memory_order_acq_rel);

            bool standby = false;
 80024e8:	461f      	mov	r7, r3
 80024ea:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
                printf("Erasing save data... ");
                // sample_memory_.Erase();
                printf("done\n");
            }

            if (!expire_watchdog)
 80024ee:	9b00      	ldr	r3, [sp, #0]
 80024f0:	b90b      	cbnz	r3, 80024f6 <main+0x29e>
            {
                system::ReloadWatchdog();
 80024f2:	f001 fda5 	bl	8004040 <recorder::system::ReloadWatchdog()>
            }

            StateMachine(standby);
 80024f6:	4638      	mov	r0, r7
 80024f8:	f7ff fcc8 	bl	8001e8c <recorder::StateMachine(bool)>
            ProfilingPin<PROFILE_MAIN_LOOP>::Clear();

            system::Delay_ms(1);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f001 ffa3 	bl	8004448 <recorder::system::Delay_ms(unsigned long)>
        }
 8002502:	e7d6      	b.n	80024b2 <main+0x25a>
        if (length_ == 0 || line_[length_ - 1] != '\n')
 8002504:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002508:	e7e8      	b.n	80024dc <main+0x284>
        }
        else
        {
            if (line_[0] == '\xff' && length_ > 1)
 800250a:	f894 c000 	ldrb.w	ip, [r4]
 800250e:	2801      	cmp	r0, #1
 8002510:	f1ac 07ff 	sub.w	r7, ip, #255	; 0xff
 8002514:	fab7 f787 	clz	r7, r7
 8002518:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800251c:	bf08      	it	eq
 800251e:	2700      	moveq	r7, #0
 8002520:	bb87      	cbnz	r7, 8002584 <main+0x32c>
            }
            else
            {
                message_.payload.type = Message::TYPE_TEXT;
                line_[length_ - 1] = '\0';
                std::strncpy(message_.payload.text, line_,
 8002522:	4911      	ldr	r1, [pc, #68]	; (8002568 <main+0x310>)
                message_.payload.type = Message::TYPE_TEXT;
 8002524:	2001      	movs	r0, #1
                std::strncpy(message_.payload.text, line_,
 8002526:	2280      	movs	r2, #128	; 0x80
                line_[length_ - 1] = '\0';
 8002528:	54e7      	strb	r7, [r4, r3]
                message_.payload.type = Message::TYPE_TEXT;
 800252a:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
                std::strncpy(message_.payload.text, line_,
 800252e:	f101 0087 	add.w	r0, r1, #135	; 0x87
 8002532:	f005 fdb8 	bl	80080a6 <strncpy>
                    sizeof(message_.payload.text));
            }

            length_ = 0;
 8002536:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
            else if (message.type == Message::TYPE_RESET)
 800253a:	e7d8      	b.n	80024ee <main+0x296>
 800253c:	20010704 	.word	0x20010704
 8002540:	08001dfd 	.word	0x08001dfd
 8002544:	20010994 	.word	0x20010994
 8002548:	58024400 	.word	0x58024400
 800254c:	58020000 	.word	0x58020000
 8002550:	58020c00 	.word	0x58020c00
 8002554:	58020800 	.word	0x58020800
 8002558:	2000041c 	.word	0x2000041c
 800255c:	20000420 	.word	0x20000420
 8002560:	58021800 	.word	0x58021800
 8002564:	58020400 	.word	0x58020400
 8002568:	20010868 	.word	0x20010868
 800256c:	20000428 	.word	0x20000428
 8002570:	200106d8 	.word	0x200106d8
 8002574:	08008930 	.word	0x08008930
 8002578:	20010700 	.word	0x20010700
 800257c:	080089a4 	.word	0x080089a4
 8002580:	20000008 	.word	0x20000008
                line_[length_ - 1] = '\0';
 8002584:	f04f 0800 	mov.w	r8, #0
}

inline size_t Decode(void* data, size_t size, const char* str)
{
    auto bytes = reinterpret_cast<uint8_t*>(data);
    size_t length = std::strlen(str);
 8002588:	48bd      	ldr	r0, [pc, #756]	; (8002880 <main+0x628>)
 800258a:	f804 8003 	strb.w	r8, [r4, r3]
 800258e:	f7fd fea7 	bl	80002e0 <strlen>
    size_t num_bytes = 0;

    while (length)
 8002592:	2800      	cmp	r0, #0
 8002594:	d051      	beq.n	800263a <main+0x3e2>
    size_t num_bytes = 0;
 8002596:	4642      	mov	r2, r8
        uint32_t word = 0;

        for (size_t i = 0; i < 5; i++)
        {
            word *= 85;
            word += group[i];
 8002598:	f04f 0b55 	mov.w	fp, #85	; 0x55
    while (length)
 800259c:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8002880 <main+0x628>
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80025a0:	2804      	cmp	r0, #4
 80025a2:	f200 8181 	bhi.w	80028a8 <main+0x650>
            group[i] = length ? *str - 33 : 84;
 80025a6:	f898 e000 	ldrb.w	lr, [r8]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80025aa:	4241      	negs	r1, r0
            group[i] = length ? *str - 33 : 84;
 80025ac:	2801      	cmp	r0, #1
 80025ae:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 80025b2:	fa5f f38e 	uxtb.w	r3, lr
 80025b6:	9301      	str	r3, [sp, #4]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80025b8:	4bb2      	ldr	r3, [pc, #712]	; (8002884 <main+0x62c>)
 80025ba:	fba3 ce01 	umull	ip, lr, r3, r1
 80025be:	f02e 0c03 	bic.w	ip, lr, #3
 80025c2:	eb0c 0c9e 	add.w	ip, ip, lr, lsr #2
 80025c6:	eba1 010c 	sub.w	r1, r1, ip
 80025ca:	ea4f 0181 	mov.w	r1, r1, lsl #2
 80025ce:	fba3 3101 	umull	r3, r1, r3, r1
 80025d2:	ea4f 0191 	mov.w	r1, r1, lsr #2
        }

        for (size_t i = 0; i < 4 - padding; i++)
 80025d6:	f1c1 0104 	rsb	r1, r1, #4
            group[i] = length ? *str - 33 : 84;
 80025da:	f040 816d 	bne.w	80028b8 <main+0x660>
                str++;
 80025de:	f04f 0a54 	mov.w	sl, #84	; 0x54
 80025e2:	f108 0801 	add.w	r8, r8, #1
 80025e6:	2000      	movs	r0, #0
 80025e8:	46d6      	mov	lr, sl
 80025ea:	46d4      	mov	ip, sl
 80025ec:	46d1      	mov	r9, sl
            word += group[i];
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	fb1b ee03 	smlabb	lr, fp, r3, lr
            word *= 85;
 80025f4:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80025f8:	eb0e 130e 	add.w	r3, lr, lr, lsl #4
            word += group[i];
 80025fc:	4453      	add	r3, sl
            word *= 85;
 80025fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002602:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8002606:	444b      	add	r3, r9
            word *= 85;
 8002608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800260c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8002610:	4463      	add	r3, ip
        for (size_t i = 0; i < 4 - padding; i++)
 8002612:	f04f 0c00 	mov.w	ip, #0
        {
            if (num_bytes < size)
 8002616:	2a82      	cmp	r2, #130	; 0x82
            {
                bytes[num_bytes] = word >> 24;
 8002618:	ea4f 6913 	mov.w	r9, r3, lsr #24
 800261c:	eb04 0e02 	add.w	lr, r4, r2
        for (size_t i = 0; i < 4 - padding; i++)
 8002620:	f10c 0c01 	add.w	ip, ip, #1
                num_bytes++;
                word <<= 8;
 8002624:	ea4f 2303 	mov.w	r3, r3, lsl #8
            if (num_bytes < size)
 8002628:	d805      	bhi.n	8002636 <main+0x3de>
        for (size_t i = 0; i < 4 - padding; i++)
 800262a:	4561      	cmp	r1, ip
                num_bytes++;
 800262c:	f102 0201 	add.w	r2, r2, #1
                bytes[num_bytes] = word >> 24;
 8002630:	f88e 9084 	strb.w	r9, [lr, #132]	; 0x84
        for (size_t i = 0; i < 4 - padding; i++)
 8002634:	d8ef      	bhi.n	8002616 <main+0x3be>
    while (length)
 8002636:	2800      	cmp	r0, #0
 8002638:	d1b2      	bne.n	80025a0 <main+0x348>
        checksum = 0;
    }

    bool Verify(void)
    {
        if (size > sizeof(T))
 800263a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 800263e:	2b81      	cmp	r3, #129	; 0x81
 8002640:	d820      	bhi.n	8002684 <main+0x42c>
 8002642:	f8df c25c 	ldr.w	ip, [pc, #604]	; 80028a0 <main+0x648>
 8002646:	2200      	movs	r2, #0
        auto bytes = reinterpret_cast<uint8_t*>(&payload);
        uint8_t sum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            sum += bytes[i];
 8002648:	f85c 3b04 	ldr.w	r3, [ip], #4
 800264c:	f003 317f 	and.w	r1, r3, #2139062143	; 0x7f7f7f7f
 8002650:	4053      	eors	r3, r2
 8002652:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8002656:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 800265a:	440a      	add	r2, r1
 800265c:	405a      	eors	r2, r3
        for (uint32_t i = 0; i < sizeof(T); i++)
 800265e:	4b8a      	ldr	r3, [pc, #552]	; (8002888 <main+0x630>)
 8002660:	459c      	cmp	ip, r3
 8002662:	d1f1      	bne.n	8002648 <main+0x3f0>
            sum += bytes[i];
 8002664:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002668:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 800266c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002670:	4413      	add	r3, r2
 8002672:	4403      	add	r3, r0
 8002674:	440b      	add	r3, r1
                if (message_.Verify())
 8002676:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
 800267a:	eb03 6312 	add.w	r3, r3, r2, lsr #24
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4299      	cmp	r1, r3
 8002682:	d006      	beq.n	8002692 <main+0x43a>
                    message_.payload.type = Message::TYPE_NONE;
 8002684:	2300      	movs	r3, #0
            bool standby = false;
 8002686:	461f      	mov	r7, r3
 8002688:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
            length_ = 0;
 800268c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            else if (message.type == Message::TYPE_ERASE)
 8002690:	e72d      	b.n	80024ee <main+0x296>

    Packet<State> state_;

    void Ack(void)
    {
        printf("\xff" "ack\n");
 8002692:	487e      	ldr	r0, [pc, #504]	; (800288c <main+0x634>)
            length_ = 0;
 8002694:	f04f 0800 	mov.w	r8, #0
        printf("\xff" "ack\n");
 8002698:	f005 fc12 	bl	8007ec0 <puts>
            auto message = monitor_.Receive();
 800269c:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
            length_ = 0;
 80026a0:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
            if (message.type == Message::TYPE_QUERY)
 80026a4:	2a71      	cmp	r2, #113	; 0x71
 80026a6:	d008      	beq.n	80026ba <main+0x462>
            else if (message.type == Message::TYPE_STANDBY)
 80026a8:	2a73      	cmp	r2, #115	; 0x73
 80026aa:	f43f af20 	beq.w	80024ee <main+0x296>
            else if (message.type == Message::TYPE_WATCHDOG)
 80026ae:	2a77      	cmp	r2, #119	; 0x77
 80026b0:	f040 8124 	bne.w	80028fc <main+0x6a4>
                expire_watchdog = true;
 80026b4:	9700      	str	r7, [sp, #0]
            bool standby = false;
 80026b6:	4647      	mov	r7, r8
 80026b8:	e71d      	b.n	80024f6 <main+0x29e>
        for (uint32_t i = 0; i < NUM_POTS; i++)
        {
            state.pot[i] = human.pot[i];
        }

        state.play = human.sw[SWITCH_PLAY];
 80026ba:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
        return sum == checksum;
    }

    void Sign(void)
    {
        size = sizeof(T);
 80026be:	f04f 0c21 	mov.w	ip, #33	; 0x21
 80026c2:	f896 2020 	ldrb.w	r2, [r6, #32]
 80026c6:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 80026ca:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80026ce:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
            state.pot[i] = human.pot[i];
 80026d2:	6830      	ldr	r0, [r6, #0]
        state.play = human.sw[SWITCH_PLAY];
 80026d4:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 80026d8:	f896 7027 	ldrb.w	r7, [r6, #39]	; 0x27
            state.pot[i] = human.pot[i];
 80026dc:	f8c4 0109 	str.w	r0, [r4, #265]	; 0x109
 80026e0:	4643      	mov	r3, r8
        state.play = human.sw[SWITCH_PLAY];
 80026e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
            state.pot[i] = human.pot[i];
 80026e6:	6870      	ldr	r0, [r6, #4]
        state.play = human.sw[SWITCH_PLAY];
 80026e8:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 80026ec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
            state.pot[i] = human.pot[i];
 80026f0:	f8c4 010d 	str.w	r0, [r4, #269]	; 0x10d
        state.play = human.sw[SWITCH_PLAY];
 80026f4:	f021 011f 	bic.w	r1, r1, #31
            state.pot[i] = human.pot[i];
 80026f8:	68f0      	ldr	r0, [r6, #12]
        state.play = human.sw[SWITCH_PLAY];
 80026fa:	f002 021f 	and.w	r2, r2, #31
            state.pot[i] = human.pot[i];
 80026fe:	68b7      	ldr	r7, [r6, #8]
 8002700:	f8c4 0115 	str.w	r0, [r4, #277]	; 0x115
        state.play = human.sw[SWITCH_PLAY];
 8002704:	430a      	orrs	r2, r1
            state.pot[i] = human.pot[i];
 8002706:	6930      	ldr	r0, [r6, #16]
 8002708:	f8c4 7111 	str.w	r7, [r4, #273]	; 0x111
        state.play = human.sw[SWITCH_PLAY];
 800270c:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
            state.pot[i] = human.pot[i];
 8002710:	6977      	ldr	r7, [r6, #20]
 8002712:	69f2      	ldr	r2, [r6, #28]
 8002714:	f8c4 0119 	str.w	r0, [r4, #281]	; 0x119
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002718:	495d      	ldr	r1, [pc, #372]	; (8002890 <main+0x638>)
 800271a:	69b0      	ldr	r0, [r6, #24]
 800271c:	f8a4 c107 	strh.w	ip, [r4, #263]	; 0x107
 8002720:	f8c4 711d 	str.w	r7, [r4, #285]	; 0x11d
 8002724:	f8c4 0121 	str.w	r0, [r4, #289]	; 0x121
 8002728:	f8c4 2125 	str.w	r2, [r4, #293]	; 0x125
        auto bytes = reinterpret_cast<uint8_t*>(&(payload));
        checksum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            checksum += bytes[i];
 800272c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002730:	4413      	add	r3, r2
        for (uint32_t i = 0; i < sizeof(T); i++)
 8002732:	42a9      	cmp	r1, r5
            checksum += bytes[i];
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
        for (uint32_t i = 0; i < sizeof(T); i++)
 800273a:	d1f7      	bne.n	800272c <main+0x4d4>
 800273c:	f04f 0c23 	mov.w	ip, #35	; 0x23
    size_t num_chars = 0;
 8002740:	f04f 0800 	mov.w	r8, #0
 8002744:	2321      	movs	r3, #33	; 0x21
    auto bytes = reinterpret_cast<const uint8_t*>(data);
 8002746:	4853      	ldr	r0, [pc, #332]	; (8002894 <main+0x63c>)
            group[4 - i] = (word % 85);
 8002748:	4662      	mov	r2, ip
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 800274a:	46c1      	mov	r9, r8
            group[4 - i] = (word % 85);
 800274c:	f8df a154 	ldr.w	sl, [pc, #340]	; 80028a4 <main+0x64c>
            if (data_size)
 8002750:	2a01      	cmp	r2, #1
 8002752:	d07e      	beq.n	8002852 <main+0x5fa>
                word |= *bytes++;
 8002754:	8803      	ldrh	r3, [r0, #0]
            if (data_size)
 8002756:	2a02      	cmp	r2, #2
 8002758:	ba5b      	rev16	r3, r3
 800275a:	b29b      	uxth	r3, r3
            word <<= 8;
 800275c:	ea4f 2303 	mov.w	r3, r3, lsl #8
            if (data_size)
 8002760:	f000 80df 	beq.w	8002922 <main+0x6ca>
 8002764:	2a03      	cmp	r2, #3
                word |= *bytes++;
 8002766:	7881      	ldrb	r1, [r0, #2]
            if (data_size)
 8002768:	f000 80f4 	beq.w	8002954 <main+0x6fc>
                word |= *bytes++;
 800276c:	f850 3b04 	ldr.w	r3, [r0], #4
                data_size--;
 8002770:	3a04      	subs	r2, #4
 8002772:	ba1b      	rev	r3, r3
            group[4 - i] = (word % 85);
 8002774:	fbaa 1c03 	umull	r1, ip, sl, r3
            if (num_chars < buf_size - 1)
 8002778:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
        for (size_t i = 0; i < 5 - padding; i++)
 800277c:	f1c9 0905 	rsb	r9, r9, #5
            group[4 - i] = (word % 85);
 8002780:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8002784:	fbaa 170c 	umull	r1, r7, sl, ip
 8002788:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800278c:	ea4f 1797 	mov.w	r7, r7, lsr #6
 8002790:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8002794:	eba3 0301 	sub.w	r3, r3, r1
 8002798:	fbaa e107 	umull	lr, r1, sl, r7
 800279c:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
 80027a0:	ea4f 1191 	mov.w	r1, r1, lsr #6
 80027a4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	ebac 0c0e 	sub.w	ip, ip, lr
 80027ae:	fbaa be01 	umull	fp, lr, sl, r1
 80027b2:	eb01 0b81 	add.w	fp, r1, r1, lsl #2
 80027b6:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 80027ba:	eb0b 1b0b 	add.w	fp, fp, fp, lsl #4
 80027be:	fa5f fc8c 	uxtb.w	ip, ip
 80027c2:	eba7 070b 	sub.w	r7, r7, fp
 80027c6:	eb0e 0b8e 	add.w	fp, lr, lr, lsl #2
 80027ca:	fa5f fe8e 	uxtb.w	lr, lr
 80027ce:	eb0b 1b0b 	add.w	fp, fp, fp, lsl #4
 80027d2:	b2ff      	uxtb	r7, r7
 80027d4:	eba1 010b 	sub.w	r1, r1, fp
 80027d8:	b2c9      	uxtb	r1, r1
            if (num_chars < buf_size - 1)
 80027da:	d843      	bhi.n	8002864 <main+0x60c>
                buf[num_chars] = group[i] + 33;
 80027dc:	f10e 0e21 	add.w	lr, lr, #33	; 0x21
 80027e0:	f804 e008 	strb.w	lr, [r4, r8]
                num_chars++;
 80027e4:	f108 0e01 	add.w	lr, r8, #1
            if (num_chars < buf_size - 1)
 80027e8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80027ec:	d836      	bhi.n	800285c <main+0x604>
                buf[num_chars] = group[i] + 33;
 80027ee:	3121      	adds	r1, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 80027f0:	f1b9 0f02 	cmp.w	r9, #2
                buf[num_chars] = group[i] + 33;
 80027f4:	f804 100e 	strb.w	r1, [r4, lr]
                num_chars++;
 80027f8:	f108 0e02 	add.w	lr, r8, #2
        for (size_t i = 0; i < 5 - padding; i++)
 80027fc:	d01e      	beq.n	800283c <main+0x5e4>
            if (num_chars < buf_size - 1)
 80027fe:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 8002802:	d01b      	beq.n	800283c <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 8002804:	3721      	adds	r7, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 8002806:	f1b9 0f03 	cmp.w	r9, #3
                buf[num_chars] = group[i] + 33;
 800280a:	f804 700e 	strb.w	r7, [r4, lr]
                num_chars++;
 800280e:	f108 0e03 	add.w	lr, r8, #3
        for (size_t i = 0; i < 5 - padding; i++)
 8002812:	d013      	beq.n	800283c <main+0x5e4>
            if (num_chars < buf_size - 1)
 8002814:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 8002818:	d010      	beq.n	800283c <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 800281a:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
        for (size_t i = 0; i < 5 - padding; i++)
 800281e:	f1b9 0f05 	cmp.w	r9, #5
                buf[num_chars] = group[i] + 33;
 8002822:	f804 c00e 	strb.w	ip, [r4, lr]
                num_chars++;
 8002826:	f108 0e04 	add.w	lr, r8, #4
        for (size_t i = 0; i < 5 - padding; i++)
 800282a:	d107      	bne.n	800283c <main+0x5e4>
            if (num_chars < buf_size - 1)
 800282c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
 8002830:	d004      	beq.n	800283c <main+0x5e4>
                buf[num_chars] = group[i] + 33;
 8002832:	3321      	adds	r3, #33	; 0x21
 8002834:	f804 300e 	strb.w	r3, [r4, lr]
                num_chars++;
 8002838:	f108 0e05 	add.w	lr, r8, #5
    while (data_size)
 800283c:	b1aa      	cbz	r2, 800286a <main+0x612>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 800283e:	2a03      	cmp	r2, #3
 8002840:	d81b      	bhi.n	800287a <main+0x622>
 8002842:	f1c2 0900 	rsb	r9, r2, #0
 8002846:	f009 0903 	and.w	r9, r9, #3
            if (data_size)
 800284a:	2a01      	cmp	r2, #1
                word |= *bytes++;
 800284c:	46f0      	mov	r8, lr
 800284e:	7803      	ldrb	r3, [r0, #0]
            if (data_size)
 8002850:	d180      	bne.n	8002754 <main+0x4fc>
                word |= *bytes++;
 8002852:	3001      	adds	r0, #1
            word <<= 8;
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	2200      	movs	r2, #0
 800285a:	e78b      	b.n	8002774 <main+0x51c>
        for (size_t i = 0; i < 5 - padding; i++)
 800285c:	f1b9 0f02 	cmp.w	r9, #2
 8002860:	d0ec      	beq.n	800283c <main+0x5e4>
 8002862:	46f0      	mov	r8, lr
 8002864:	46c6      	mov	lr, r8
    while (data_size)
 8002866:	2a00      	cmp	r2, #0
 8002868:	d1e9      	bne.n	800283e <main+0x5e6>
        printf("\xff%s\n", line_);
 800286a:	490b      	ldr	r1, [pc, #44]	; (8002898 <main+0x640>)
 800286c:	4617      	mov	r7, r2
    buf[num_chars] = '\0';
 800286e:	f804 200e 	strb.w	r2, [r4, lr]
 8002872:	480a      	ldr	r0, [pc, #40]	; (800289c <main+0x644>)
 8002874:	f005 fa9e 	bl	8007db4 <iprintf>
    }
 8002878:	e639      	b.n	80024ee <main+0x296>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 800287a:	f04f 0900 	mov.w	r9, #0
 800287e:	e7e4      	b.n	800284a <main+0x5f2>
 8002880:	20010869 	.word	0x20010869
 8002884:	cccccccd 	.word	0xcccccccd
 8002888:	2001096e 	.word	0x2001096e
 800288c:	080089ac 	.word	0x080089ac
 8002890:	20010970 	.word	0x20010970
 8002894:	2001096f 	.word	0x2001096f
 8002898:	20010868 	.word	0x20010868
 800289c:	080089b4 	.word	0x080089b4
 80028a0:	200108ee 	.word	0x200108ee
 80028a4:	c0c0c0c1 	.word	0xc0c0c0c1
            group[i] = length ? *str - 33 : 84;
 80028a8:	f898 e000 	ldrb.w	lr, [r8]
 80028ac:	2104      	movs	r1, #4
 80028ae:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 80028b2:	fa5f f38e 	uxtb.w	r3, lr
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	f898 e001 	ldrb.w	lr, [r8, #1]
 80028bc:	2802      	cmp	r0, #2
 80028be:	f1ae 0e21 	sub.w	lr, lr, #33	; 0x21
 80028c2:	fa5f fe8e 	uxtb.w	lr, lr
 80028c6:	d03d      	beq.n	8002944 <main+0x6ec>
 80028c8:	f898 a002 	ldrb.w	sl, [r8, #2]
 80028cc:	2803      	cmp	r0, #3
 80028ce:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
 80028d2:	fa5f fa8a 	uxtb.w	sl, sl
 80028d6:	d02e      	beq.n	8002936 <main+0x6de>
 80028d8:	f898 9003 	ldrb.w	r9, [r8, #3]
 80028dc:	2804      	cmp	r0, #4
 80028de:	f1a9 0921 	sub.w	r9, r9, #33	; 0x21
 80028e2:	fa5f f989 	uxtb.w	r9, r9
 80028e6:	d020      	beq.n	800292a <main+0x6d2>
 80028e8:	f898 c004 	ldrb.w	ip, [r8, #4]
                length--;
 80028ec:	3805      	subs	r0, #5
                str++;
 80028ee:	f108 0805 	add.w	r8, r8, #5
            group[i] = length ? *str - 33 : 84;
 80028f2:	f1ac 0c21 	sub.w	ip, ip, #33	; 0x21
            word += group[i];
 80028f6:	fa5f fc8c 	uxtb.w	ip, ip
 80028fa:	e678      	b.n	80025ee <main+0x396>
            else if (message.type == Message::TYPE_RESET)
 80028fc:	2a72      	cmp	r2, #114	; 0x72
 80028fe:	d106      	bne.n	800290e <main+0x6b6>
                system::SerialFlushTx();
 8002900:	4640      	mov	r0, r8
            bool standby = false;
 8002902:	4647      	mov	r7, r8
                system::SerialFlushTx();
 8002904:	f001 fdb6 	bl	8004474 <recorder::system::SerialFlushTx(bool)>
                system::Reset();
 8002908:	f001 fe52 	bl	80045b0 <recorder::system::Reset()>
 800290c:	e5ef      	b.n	80024ee <main+0x296>
            else if (message.type == Message::TYPE_ERASE)
 800290e:	2a65      	cmp	r2, #101	; 0x65
 8002910:	d109      	bne.n	8002926 <main+0x6ce>
                printf("Erasing save data... ");
 8002912:	4812      	ldr	r0, [pc, #72]	; (800295c <main+0x704>)
            bool standby = false;
 8002914:	4647      	mov	r7, r8
                printf("Erasing save data... ");
 8002916:	f005 fa4d 	bl	8007db4 <iprintf>
                printf("done\n");
 800291a:	4811      	ldr	r0, [pc, #68]	; (8002960 <main+0x708>)
 800291c:	f005 fad0 	bl	8007ec0 <puts>
 8002920:	e5e5      	b.n	80024ee <main+0x296>
                word |= *bytes++;
 8002922:	3002      	adds	r0, #2
            word <<= 8;
 8002924:	e797      	b.n	8002856 <main+0x5fe>
            bool standby = false;
 8002926:	4647      	mov	r7, r8
 8002928:	e5e1      	b.n	80024ee <main+0x296>
                str++;
 800292a:	f108 0804 	add.w	r8, r8, #4
            word += group[i];
 800292e:	f04f 0c54 	mov.w	ip, #84	; 0x54
 8002932:	2000      	movs	r0, #0
 8002934:	e65b      	b.n	80025ee <main+0x396>
 8002936:	f04f 0c54 	mov.w	ip, #84	; 0x54
                str++;
 800293a:	f108 0803 	add.w	r8, r8, #3
            word += group[i];
 800293e:	2000      	movs	r0, #0
 8002940:	46e1      	mov	r9, ip
 8002942:	e654      	b.n	80025ee <main+0x396>
 8002944:	f04f 0a54 	mov.w	sl, #84	; 0x54
                str++;
 8002948:	f108 0802 	add.w	r8, r8, #2
            word += group[i];
 800294c:	2000      	movs	r0, #0
 800294e:	46d4      	mov	ip, sl
 8002950:	46d1      	mov	r9, sl
 8002952:	e64c      	b.n	80025ee <main+0x396>
                word |= *bytes++;
 8002954:	430b      	orrs	r3, r1
 8002956:	3003      	adds	r0, #3
 8002958:	e77d      	b.n	8002856 <main+0x5fe>
 800295a:	bf00      	nop
 800295c:	080089bc 	.word	0x080089bc
 8002960:	080089d4 	.word	0x080089d4

08002964 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE>:
    }

} // namespace recorder
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
              previous_formant_pot_val_(0.0f) // track the last pot value
 8002966:	4c24      	ldr	r4, [pc, #144]	; (80029f8 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x94>)
                           randomizationperiod(5) // Change random variation every 2 samples
 8002968:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800296c:	2600      	movs	r6, #0
 800296e:	2500      	movs	r5, #0
 8002970:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    class FormantFilter
 8002974:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8002978:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 800297c:	2305      	movs	r3, #5
 800297e:	6166      	str	r6, [r4, #20]
            std::srand(static_cast<unsigned>(std::time(0)));
 8002980:	4630      	mov	r0, r6
 8002982:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
 8002986:	6025      	str	r5, [r4, #0]
 8002988:	60e5      	str	r5, [r4, #12]
 800298a:	6465      	str	r5, [r4, #68]	; 0x44
 800298c:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
 8002990:	6525      	str	r5, [r4, #80]	; 0x50
 8002992:	f8c4 71f0 	str.w	r7, [r4, #496]	; 0x1f0
 8002996:	f8c4 71f4 	str.w	r7, [r4, #500]	; 0x1f4
                           randomizationperiod(5) // Change random variation every 2 samples
 800299a:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
 800299e:	e9c4 6386 	strd	r6, r3, [r4, #536]	; 0x218
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x98>)
 80029a4:	6063      	str	r3, [r4, #4]
 80029a6:	60a3      	str	r3, [r4, #8]
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0x9c>)
 80029aa:	6123      	str	r3, [r4, #16]
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa0>)
 80029ae:	6423      	str	r3, [r4, #64]	; 0x40
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa4>)
 80029b8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
          buildingUp_(false)
 80029bc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            std::srand(static_cast<unsigned>(std::time(0)));
 80029c0:	f005 fb84 	bl	80080cc <time>
 80029c4:	f005 fa84 	bl	8007ed0 <srand>
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xa8>)
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xac>)
 80029cc:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80029d0:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <_GLOBAL__sub_I__ZN8recorder13FormantFilter9vowelDataE+0xb0>)
 80029d6:	f8c4 7288 	str.w	r7, [r4, #648]	; 0x288
 80029da:	f8c4 5278 	str.w	r5, [r4, #632]	; 0x278
 80029de:	f8c4 528c 	str.w	r5, [r4, #652]	; 0x28c
 80029e2:	f884 6290 	strb.w	r6, [r4, #656]	; 0x290
 80029e6:	f8c4 52a4 	str.w	r5, [r4, #676]	; 0x2a4
 80029ea:	f8c4 62a8 	str.w	r6, [r4, #680]	; 0x2a8
 80029ee:	f8c4 227c 	str.w	r2, [r4, #636]	; 0x27c
 80029f2:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 80029f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029f8:	20000428 	.word	0x20000428
 80029fc:	4302cf5c 	.word	0x4302cf5c
 8002a00:	3d4ccccd 	.word	0x3d4ccccd
 8002a04:	3c23d70a 	.word	0x3c23d70a
 8002a08:	3fd9999a 	.word	0x3fd9999a
 8002a0c:	3ca3d70a 	.word	0x3ca3d70a
 8002a10:	40a00000 	.word	0x40a00000
 8002a14:	467a0000 	.word	0x467a0000

08002a18 <recorder::Adc::DMAService()>:
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_STREAM_1);
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
}

void Adc::DMAService(void)
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8002a1a:	49d4      	ldr	r1, [pc, #848]	; (8002d6c <recorder::Adc::DMAService()+0x354>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8002a20:	f44f 6400 	mov.w	r4, #2048	; 0x800
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a24:	4ad2      	ldr	r2, [pc, #840]	; (8002d70 <recorder::Adc::DMAService()+0x358>)
 8002a26:	b08e      	sub	sp, #56	; 0x38
 8002a28:	608c      	str	r4, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8002a2a:	608b      	str	r3, [r1, #8]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	6891      	ldr	r1, [r2, #8]
 8002a30:	0749      	lsls	r1, r1, #29
 8002a32:	f100 808a 	bmi.w	8002b4a <recorder::Adc::DMAService()+0x132>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002a36:	6c10      	ldr	r0, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002a38:	49ce      	ldr	r1, [pc, #824]	; (8002d74 <recorder::Adc::DMAService()+0x35c>)
 8002a3a:	6894      	ldr	r4, [r2, #8]
 8002a3c:	4021      	ands	r1, r4
 8002a3e:	f041 0104 	orr.w	r1, r1, #4
 8002a42:	6091      	str	r1, [r2, #8]
    {
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
        LL_ADC_REG_StartConversion(ADC1);
        ProfilingPin<PROFILE_POT_SAMPLING>::Set();

        if (kEnableReverse && current_pot_ == POT_7)
 8002a44:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a48:	2a06      	cmp	r2, #6
 8002a4a:	f000 8177 	beq.w	8002d3c <recorder::Adc::DMAService()+0x324>
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
 8002a4e:	b280      	uxth	r0, r0
        }

        void Sample(float sample)
        {
            // Expand range a little bit to compensate for resistive losses
            sample = hyst_.Process(0.5 + 1.0025f * (sample - 0.5f));
 8002a50:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8002a54:	eddf 5ac8 	vldr	s11, [pc, #800]	; 8002d78 <recorder::Adc::DMAService()+0x360>
 8002a58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a5c:	ee07 0a90 	vmov	s15, r0
 8002a60:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8002d7c <recorder::Adc::DMAService()+0x364>
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8002a6c:	eea6 7a86 	vfma.f32	s14, s13, s12
        {
            pot = 0;
        }

        pot_filter_[current_pot_].Sample(pot / 0xFFFF);
 8002a70:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002a74:	0090      	lsls	r0, r2, #2
 8002a76:	00c9      	lsls	r1, r1, #3
 8002a78:	f101 0408 	add.w	r4, r1, #8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
    }

    float Process(float input)
    {
        float delta = input - position_;
 8002a7c:	4419      	add	r1, r3
 8002a7e:	edd1 7a08 	vldr	s15, [r1, #32]
 8002a82:	441c      	add	r4, r3

        if (delta >= threshold_)
 8002a84:	edd1 6a07 	vldr	s13, [r1, #28]
        float delta = input - position_;
 8002a88:	ee37 6a67 	vsub.f32	s12, s14, s15
        if (delta >= threshold_)
 8002a8c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	f2c0 8145 	blt.w	8002d22 <recorder::Adc::DMAService()+0x30a>
        {
            position_ = input - threshold_;
 8002a98:	ee77 7a66 	vsub.f32	s15, s14, s13
 8002a9c:	edc1 7a08 	vstr	s15, [r1, #32]
            position_ = input + threshold_;
        }

        // Rescale to full range
        float x = position_;
        x = out_min_ + out_range_ * (x - in_min_) * in_range_inv_;
 8002aa0:	4410      	add	r0, r2
 8002aa2:	3201      	adds	r2, #1
 8002aa4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002aa8:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002aac:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8002ab0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002ab4:	edd0 6a05 	vldr	s13, [r0, #20]
 8002ab8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002abc:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8002ac0:	ed95 6a01 	vldr	s12, [r5, #4]
 8002ac4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002ac8:	eeb0 6a66 	vmov.f32	s12, s13
 8002acc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002ad0:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d80a      	bhi.n	8002af0 <recorder::Adc::DMAService()+0xd8>
 8002ada:	edd1 7a06 	vldr	s15, [r1, #24]
 8002ade:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	bfd4      	ite	le
 8002ae8:	eef0 6a46 	vmovle.f32	s13, s12
        return std::clamp(x, out_min_, out_max_);
 8002aec:	edd0 6a06 	vldrgt	s13, [r0, #24]
        }

        float Position(float sample)
        {
            // Correct for error caused by ADC input impedance
            sample = std::clamp(sample * 64, 0.f, 64.f);
 8002af0:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8002d80 <recorder::Adc::DMAService()+0x368>
 8002af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	f2c0 810c 	blt.w	8002d1c <recorder::Adc::DMAService()+0x304>
 8002b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b08:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	f340 80f5 	ble.w	8002cfe <recorder::Adc::DMAService()+0x2e6>
        increment_ = 0;
    }

    void Sample(float sample)
    {
        increment_ = (sample - history_) * step_;
 8002b14:	edd4 7a00 	vldr	s15, [r4]
 8002b18:	ed94 6a01 	vldr	s12, [r4, #4]
 8002b1c:	ee77 7a67 	vsub.f32	s15, s14, s15

        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8002b20:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002d84 <recorder::Adc::DMAService()+0x36c>
        increment_ = (sample - history_) * step_;
 8002b24:	ee67 7a86 	vmul.f32	s15, s15, s12
  { return __builtin_fabsf(__x); }
 8002b28:	eeb0 6ae7 	vabs.f32	s12, s15
 8002b2c:	edc4 7a02 	vstr	s15, [r4, #8]
        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8002b30:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d803      	bhi.n	8002b42 <recorder::Adc::DMAService()+0x12a>
        {
            history_ = sample;
            increment_ = 0.f;
 8002b3a:	2100      	movs	r1, #0
            history_ = sample;
 8002b3c:	ed84 7a00 	vstr	s14, [r4]
            increment_ = 0.f;
 8002b40:	60a1      	str	r1, [r4, #8]
        current_pot_ = (current_pot_ + 1) % NUM_POTS;
 8002b42:	f002 0207 	and.w	r2, r2, #7
 8002b46:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        }
    }

    float Next(void)
    {
        history_ += increment_;
 8002b4a:	ed93 0a02 	vldr	s0, [r3, #8]
 8002b4e:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 8002b52:	ed93 1a16 	vldr	s2, [r3, #88]	; 0x58
 8002b56:	edd3 1a20 	vldr	s3, [r3, #128]	; 0x80
 8002b5a:	ed93 2a2a 	vldr	s4, [r3, #168]	; 0xa8
 8002b5e:	edd3 2a34 	vldr	s5, [r3, #208]	; 0xd0
 8002b62:	ed93 3a3e 	vldr	s6, [r3, #248]	; 0xf8
 8002b66:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8002b6a:	ed93 4a04 	vldr	s8, [r3, #16]
 8002b6e:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8002b72:	ed93 5a18 	vldr	s10, [r3, #96]	; 0x60
 8002b76:	ee34 4a00 	vadd.f32	s8, s8, s0
 8002b7a:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002b7e:	ee74 4aa0 	vadd.f32	s9, s9, s1
 8002b82:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8002b86:	ee35 5a01 	vadd.f32	s10, s10, s2
 8002b8a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002b8e:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8002b92:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002b96:	ee36 6a02 	vadd.f32	s12, s12, s4
 8002b9a:	edd3 3a4a 	vldr	s7, [r3, #296]	; 0x128
 8002b9e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8002ba2:	ee37 7a03 	vadd.f32	s14, s14, s6

        for (uint32_t idx = 0; idx < kAudioOSFactor; idx++)
        {
            for (uint32_t ch = 0; ch < NUM_AUDIO_INS; ch++)
            {
                float sample = dma_buffer_[read_index_];
 8002ba6:	4e78      	ldr	r6, [pc, #480]	; (8002d88 <recorder::Adc::DMAService()+0x370>)
 8002ba8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8002bac:	ed83 6a2a 	vstr	s12, [r3, #168]	; 0xa8
 8002bb0:	edc3 6a34 	vstr	s13, [r3, #208]	; 0xd0
 8002bb4:	ed83 7a3e 	vstr	s14, [r3, #248]	; 0xf8
 8002bb8:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
 8002bbc:	ed83 4a02 	vstr	s8, [r3, #8]
            pot[i] = pot_filter_[i].Next();
 8002bc0:	ed8d 4a06 	vstr	s8, [sp, #24]
 8002bc4:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8002bc8:	edcd 4a07 	vstr	s9, [sp, #28]
 8002bcc:	ed83 5a16 	vstr	s10, [r3, #88]	; 0x58
 8002bd0:	ed8d 5a08 	vstr	s10, [sp, #32]
 8002bd4:	edc3 5a20 	vstr	s11, [r3, #128]	; 0x80
 8002bd8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8002bdc:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8002be0:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002be4:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 8002be8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
                read_index_ = (read_index_ + 1) % kDMABufferSize;
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002bec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002bf0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002bf4:	4c65      	ldr	r4, [pc, #404]	; (8002d8c <recorder::Adc::DMAService()+0x374>)
 8002bf6:	1c51      	adds	r1, r2, #1
                float sample = dma_buffer_[read_index_];
 8002bf8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002bfc:	eeb0 6a67 	vmov.f32	s12, s15
 8002c00:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002d90 <recorder::Adc::DMAService()+0x378>
                float sample = dma_buffer_[read_index_];
 8002c04:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c08:	fba4 0201 	umull	r0, r2, r4, r1
            }
        }

        callback_(audio, pot);
 8002c0c:	681d      	ldr	r5, [r3, #0]
 8002c0e:	4668      	mov	r0, sp
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c10:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c12:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c1a:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c1e:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
        callback_(audio, pot);
 8002c22:	a906      	add	r1, sp, #24
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c24:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c28:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002c2c:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c30:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c34:	ed8d 6a00 	vstr	s12, [sp]
 8002c38:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c3c:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c3e:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c46:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c4a:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002c4e:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c52:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002c56:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c5a:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c5e:	ed8d 6a03 	vstr	s12, [sp, #12]
 8002c62:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c66:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c68:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c70:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c74:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002c78:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002c7c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002c80:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c84:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c88:	ed8d 6a01 	vstr	s12, [sp, #4]
 8002c8c:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c90:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002c92:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002c9a:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002c9e:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8002ca2:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8002ca6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002caa:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cae:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cb2:	ed8d 6a04 	vstr	s12, [sp, #16]
 8002cb6:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cba:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8002cbc:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cc4:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cc8:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
                float sample = dma_buffer_[read_index_];
 8002ccc:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cd0:	3201      	adds	r2, #1
                float sample = dma_buffer_[read_index_];
 8002cd2:	edd6 6a00 	vldr	s13, [r6]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cd6:	fba4 6402 	umull	r6, r4, r4, r2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cda:	ed8d 6a02 	vstr	s12, [sp, #8]
                float sample = dma_buffer_[read_index_];
 8002cde:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002ce2:	08e4      	lsrs	r4, r4, #3
 8002ce4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002ce8:	eee6 7a87 	vfma.f32	s15, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8002cec:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 8002cf0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8002cf4:	edcd 7a05 	vstr	s15, [sp, #20]
        callback_(audio, pot);
 8002cf8:	47a8      	blx	r5
    }

    PerformCallback();
}
 8002cfa:	b00e      	add	sp, #56	; 0x38
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8002cfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002d0a:	ee17 1a10 	vmov	r1, s14
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	da17      	bge.n	8002d42 <recorder::Adc::DMAService()+0x32a>
            return a + (b - a) * frac;
 8002d12:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002d94 <recorder::Adc::DMAService()+0x37c>
 8002d16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d1a:	e6fb      	b.n	8002b14 <recorder::Adc::DMAService()+0xfc>
 8002d1c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002d98 <recorder::Adc::DMAService()+0x380>
 8002d20:	e6f8      	b.n	8002b14 <recorder::Adc::DMAService()+0xfc>
        else if (delta <= -threshold_)
 8002d22:	eef1 5a66 	vneg.f32	s11, s13
 8002d26:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	f63f aeb7 	bhi.w	8002aa0 <recorder::Adc::DMAService()+0x88>
            position_ = input + threshold_;
 8002d32:	ee76 7a87 	vadd.f32	s15, s13, s14
 8002d36:	edc1 7a08 	vstr	s15, [r1, #32]
 8002d3a:	e6b1      	b.n	8002aa0 <recorder::Adc::DMAService()+0x88>
 8002d3c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d9c <recorder::Adc::DMAService()+0x384>
 8002d40:	e696      	b.n	8002a70 <recorder::Adc::DMAService()+0x58>
 8002d42:	293f      	cmp	r1, #63	; 0x3f
            float a = kPotCorrection[index];
 8002d44:	4816      	ldr	r0, [pc, #88]	; (8002da0 <recorder::Adc::DMAService()+0x388>)
 8002d46:	bfa8      	it	ge
 8002d48:	213f      	movge	r1, #63	; 0x3f
            float frac = sample - index;
 8002d4a:	ee07 1a10 	vmov	s14, r1
            float a = kPotCorrection[index];
 8002d4e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            float frac = sample - index;
 8002d52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            return a + (b - a) * frac;
 8002d56:	edd5 6a01 	vldr	s13, [r5, #4]
            float frac = sample - index;
 8002d5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
            float a = kPotCorrection[index];
 8002d5e:	ed95 7a00 	vldr	s14, [r5]
            return a + (b - a) * frac;
 8002d62:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002d66:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002d6a:	e6d3      	b.n	8002b14 <recorder::Adc::DMAService()+0xfc>
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40022000 	.word	0x40022000
 8002d74:	7fffffc0 	.word	0x7fffffc0
 8002d78:	37800080 	.word	0x37800080
 8002d7c:	3f8051ec 	.word	0x3f8051ec
 8002d80:	42800000 	.word	0x42800000
 8002d84:	34000000 	.word	0x34000000
 8002d88:	38000000 	.word	0x38000000
 8002d8c:	aaaaaaab 	.word	0xaaaaaaab
 8002d90:	38000080 	.word	0x38000080
 8002d94:	3c805439 	.word	0x3c805439
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	baa3d800 	.word	0xbaa3d800
 8002da0:	08008aec 	.word	0x08008aec

08002da4 <recorder::Adc::DMAHandler()>:

void Adc::DMAHandler(void)
{
    instance_->DMAService();
 8002da4:	4b01      	ldr	r3, [pc, #4]	; (8002dac <recorder::Adc::DMAHandler()+0x8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	f7ff be36 	b.w	8002a18 <recorder::Adc::DMAService()>
 8002dac:	20010a58 	.word	0x20010a58

08002db0 <recorder::Adc::InitAudioSequence()>:
    while (LL_ADC_IsCalibrationOnGoing(adc));
    system::Delay_ms(1);
}

void Adc::InitAudioSequence(void)
{
 8002db0:	b530      	push	{r4, r5, lr}
    auto adc = ADC2;
    auto trigger = LL_ADC_REG_TRIG_EXT_TIM15_TRGO;

    LL_ADC_REG_InitTypeDef reg_init =
 8002db2:	2300      	movs	r3, #0
{
 8002db4:	b087      	sub	sp, #28
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8002db6:	4c2c      	ldr	r4, [pc, #176]	; (8002e68 <recorder::Adc::InitAudioSequence()+0xb8>)
    };
 8002db8:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
    LL_ADC_REG_Init(adc, &reg_init);
 8002dbc:	4669      	mov	r1, sp
 8002dbe:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8002dc0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8002e60 <recorder::Adc::InitAudioSequence()+0xb0>
 8002dc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    };
 8002dc8:	2301      	movs	r3, #1
    LL_ADC_REG_InitTypeDef reg_init =
 8002dca:	ed8d 7b04 	vstr	d7, [sp, #16]
    };
 8002dce:	e9cd 2300 	strd	r2, r3, [sp]
    LL_ADC_REG_Init(adc, &reg_init);
 8002dd2:	f002 fffd 	bl	8005dd0 <LL_ADC_REG_Init>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <recorder::Adc::InitAudioSequence()+0xbc>)
 8002dd8:	fa93 f3a3 	rbit	r3, r3

    for (uint32_t i = 0; i < NUM_AUDIO_INS; i++)
    {
        uint32_t channel = kAudioChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002ddc:	2201      	movs	r2, #1
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	69e1      	ldr	r1, [r4, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
  MODIFY_REG(*preg,
 8002de8:	4821      	ldr	r0, [pc, #132]	; (8002e70 <recorder::Adc::InitAudioSequence()+0xc0>)
 8002dea:	430b      	orrs	r3, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dec:	4921      	ldr	r1, [pc, #132]	; (8002e74 <recorder::Adc::InitAudioSequence()+0xc4>)
 8002dee:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(*preg,
 8002df0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8002df4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8002df8:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 8002dfc:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  MODIFY_REG(*preg,
 8002e00:	684b      	ldr	r3, [r1, #4]
 8002e02:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8002e06:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002e0a:	604b      	str	r3, [r1, #4]
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <recorder::Adc::InitAudioSequence()+0xc8>)
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	69e5      	ldr	r5, [r4, #28]
 8002e18:	409a      	lsls	r2, r3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <recorder::Adc::InitAudioSequence()+0xcc>)
 8002e1c:	432a      	orrs	r2, r5
 8002e1e:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8002e20:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 8002e24:	f422 32f8 	bic.w	r2, r2, #126976	; 0x1f000
 8002e28:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
 8002e2c:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
  MODIFY_REG(*preg,
 8002e30:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002e32:	4813      	ldr	r0, [pc, #76]	; (8002e80 <recorder::Adc::InitAudioSequence()+0xd0>)
  MODIFY_REG(*preg,
 8002e34:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002e38:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002e3c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002e3e:	6922      	ldr	r2, [r4, #16]
 8002e40:	4013      	ands	r3, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <recorder::Adc::InitAudioSequence()+0xd4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002e44:	f043 0303 	orr.w	r3, r3, #3
 8002e48:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e50:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002e52:	6923      	ldr	r3, [r4, #16]
 8002e54:	4018      	ands	r0, r3
 8002e56:	4302      	orrs	r2, r0
 8002e58:	6122      	str	r2, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 2, LL_ADC_OVS_SHIFT_RIGHT_1);
}
 8002e5a:	b007      	add	sp, #28
 8002e5c:	bd30      	pop	{r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	00000003 	.word	0x00000003
 8002e64:	00001000 	.word	0x00001000
 8002e68:	40022100 	.word	0x40022100
 8002e6c:	3ef08000 	.word	0x3ef08000
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40022114 	.word	0x40022114
 8002e78:	2e300800 	.word	0x2e300800
 8002e7c:	fffffbfc 	.word	0xfffffbfc
 8002e80:	fc00fe1f 	.word	0xfc00fe1f
 8002e84:	00010020 	.word	0x00010020

08002e88 <recorder::Adc::InitPotSequence()>:

void Adc::InitPotSequence(void)
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    auto adc = ADC1;
    auto trigger = LL_ADC_REG_TRIG_SOFTWARE;

    LL_ADC_REG_InitTypeDef reg_init =
 8002e8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8002e90:	b087      	sub	sp, #28
    LL_ADC_REG_InitTypeDef reg_init =
 8002e92:	f04f 0807 	mov.w	r8, #7
 8002e96:	2300      	movs	r3, #0
 8002e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e9c:	4c35      	ldr	r4, [pc, #212]	; (8002f74 <recorder::Adc::InitPotSequence()+0xec>)
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DR_TRANSFER,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8002e9e:	4669      	mov	r1, sp
    LL_ADC_REG_InitTypeDef reg_init =
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	9205      	str	r2, [sp, #20]
    LL_ADC_REG_Init(adc, &reg_init);
 8002ea4:	f104 0a1c 	add.w	sl, r4, #28
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ea8:	4f33      	ldr	r7, [pc, #204]	; (8002f78 <recorder::Adc::InitPotSequence()+0xf0>)

    for (uint32_t i = 0; i < NUM_POTS; i++)
    {
        uint32_t channel = kPotChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002eaa:	f04f 0901 	mov.w	r9, #1
 8002eae:	4e33      	ldr	r6, [pc, #204]	; (8002f7c <recorder::Adc::InitPotSequence()+0xf4>)
 8002eb0:	4d33      	ldr	r5, [pc, #204]	; (8002f80 <recorder::Adc::InitPotSequence()+0xf8>)
    LL_ADC_REG_InitTypeDef reg_init =
 8002eb2:	e9cd 8001 	strd	r8, r0, [sp, #4]
    LL_ADC_REG_Init(adc, &reg_init);
 8002eb6:	4832      	ldr	r0, [pc, #200]	; (8002f80 <recorder::Adc::InitPotSequence()+0xf8>)
    LL_ADC_REG_InitTypeDef reg_init =
 8002eb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    LL_ADC_REG_Init(adc, &reg_init);
 8002ebc:	f002 ff88 	bl	8005dd0 <LL_ADC_REG_Init>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ec0:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8002f94 <recorder::Adc::InitPotSequence()+0x10c>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <recorder::Adc::InitPotSequence()+0xfc>)
  MODIFY_REG(*preg,
 8002ec6:	f04f 0e1f 	mov.w	lr, #31
 8002eca:	e030      	b.n	8002f2e <recorder::Adc::InitPotSequence()+0xa6>
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002ecc:	fa09 f100 	lsl.w	r1, r9, r0
 8002ed0:	69ea      	ldr	r2, [r5, #28]
    for (uint32_t i = 0; i < NUM_POTS; i++)
 8002ed2:	45a2      	cmp	sl, r4
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002ed4:	ea42 0201 	orr.w	r2, r2, r1
 8002ed8:	61ea      	str	r2, [r5, #28]
        LL_ADC_REG_SetSequencerRanks(adc, kADCRegRank[i], channel);
 8002eda:	f856 2f04 	ldr.w	r2, [r6, #4]!
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ede:	ea4f 1192 	mov.w	r1, r2, lsr #6
  MODIFY_REG(*preg,
 8002ee2:	f002 021f 	and.w	r2, r2, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ee6:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 8002eea:	fa00 f002 	lsl.w	r0, r0, r2
 8002eee:	fa0e f202 	lsl.w	r2, lr, r2
 8002ef2:	f851 b007 	ldr.w	fp, [r1, r7]
 8002ef6:	ea2b 0202 	bic.w	r2, fp, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002efa:	ea4f 5bd3 	mov.w	fp, r3, lsr #23
  MODIFY_REG(*preg,
 8002efe:	f3c3 5304 	ubfx	r3, r3, #20, #5
  MODIFY_REG(*preg,
 8002f02:	ea42 0200 	orr.w	r2, r2, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f06:	f00b 0b04 	and.w	fp, fp, #4
  MODIFY_REG(*preg,
 8002f0a:	f04f 0005 	mov.w	r0, #5
  MODIFY_REG(*preg,
 8002f0e:	51ca      	str	r2, [r1, r7]
  MODIFY_REG(*preg,
 8002f10:	fa08 f103 	lsl.w	r1, r8, r3
 8002f14:	f85b 200c 	ldr.w	r2, [fp, ip]
 8002f18:	fa00 f303 	lsl.w	r3, r0, r3
 8002f1c:	ea22 0201 	bic.w	r2, r2, r1
 8002f20:	ea43 0302 	orr.w	r3, r3, r2
 8002f24:	f84b 300c 	str.w	r3, [fp, ip]
    for (uint32_t i = 0; i < NUM_POTS; i++)
 8002f28:	d010      	beq.n	8002f4c <recorder::Adc::InitPotSequence()+0xc4>
        uint32_t channel = kPotChannels[i];
 8002f2a:	f854 3b04 	ldr.w	r3, [r4], #4
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8002f2e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8002f32:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	d0c8      	beq.n	8002ecc <recorder::Adc::InitPotSequence()+0x44>
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8002f46:	fa09 f102 	lsl.w	r1, r9, r2
 8002f4a:	e7c1      	b.n	8002ed0 <recorder::Adc::InitPotSequence()+0x48>
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002f4c:	6928      	ldr	r0, [r5, #16]
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <recorder::Adc::InitPotSequence()+0x100>)
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <recorder::Adc::InitPotSequence()+0x104>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002f52:	4003      	ands	r3, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <recorder::Adc::InitPotSequence()+0x108>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8002f56:	f043 0303 	orr.w	r3, r3, #3
 8002f5a:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8002f5c:	692b      	ldr	r3, [r5, #16]
 8002f5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f62:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8002f64:	692b      	ldr	r3, [r5, #16]
 8002f66:	4019      	ands	r1, r3
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	612a      	str	r2, [r5, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 16, LL_ADC_OVS_SHIFT_RIGHT_4);
}
 8002f6c:	b007      	add	sp, #28
 8002f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f72:	bf00      	nop
 8002f74:	08008c34 	.word	0x08008c34
 8002f78:	40022030 	.word	0x40022030
 8002f7c:	08008bec 	.word	0x08008bec
 8002f80:	40022000 	.word	0x40022000
 8002f84:	0c900008 	.word	0x0c900008
 8002f88:	fffffbfc 	.word	0xfffffbfc
 8002f8c:	fc00fe1f 	.word	0xfc00fe1f
 8002f90:	000f0080 	.word	0x000f0080
 8002f94:	40022014 	.word	0x40022014

08002f98 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:
// PUBLIC //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Adc::Init(Callback callback)
{
    instance_ = this;
 8002f98:	4ac1      	ldr	r2, [pc, #772]	; (80032a0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x308>)
        history_ = 0;
 8002f9a:	2300      	movs	r3, #0
        out_max_ = max;
 8002f9c:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
{
 8002fa0:	b570      	push	{r4, r5, r6, lr}
        step_ = 1.f / period;
 8002fa2:	f04f 5e78 	mov.w	lr, #1040187392	; 0x3e000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4dbf      	ldr	r5, [pc, #764]	; (80032a4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x30c>)
    instance_ = this;
 8002fa8:	6010      	str	r0, [r2, #0]
    callback_ = callback;
    started_ = false;
 8002faa:	2600      	movs	r6, #0
        threshold_ = threshold;
 8002fac:	4abe      	ldr	r2, [pc, #760]	; (80032a8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x310>)
{
 8002fae:	b094      	sub	sp, #80	; 0x50
    callback_ = callback;
 8002fb0:	6001      	str	r1, [r0, #0]
{
 8002fb2:	4604      	mov	r4, r0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002fb4:	49bd      	ldr	r1, [pc, #756]	; (80032ac <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x314>)
 8002fb6:	f8c0 e00c 	str.w	lr, [r0, #12]
        out_max_ = max;
 8002fba:	f8c0 c018 	str.w	ip, [r0, #24]
        out_range_ = out_max_ - out_min_;
 8002fbe:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8002fc2:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
        out_max_ = max;
 8002fc6:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
        out_range_ = out_max_ - out_min_;
 8002fca:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
 8002fce:	f8c0 e05c 	str.w	lr, [r0, #92]	; 0x5c
        out_max_ = max;
 8002fd2:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
        out_range_ = out_max_ - out_min_;
 8002fd6:	f8c0 c074 	str.w	ip, [r0, #116]	; 0x74
        threshold_ = threshold;
 8002fda:	61c2      	str	r2, [r0, #28]
        in_min_ = out_min_ + threshold_;
 8002fdc:	6282      	str	r2, [r0, #40]	; 0x28
        threshold_ = threshold;
 8002fde:	6442      	str	r2, [r0, #68]	; 0x44
        in_min_ = out_min_ + threshold_;
 8002fe0:	6502      	str	r2, [r0, #80]	; 0x50
        threshold_ = threshold;
 8002fe2:	66c2      	str	r2, [r0, #108]	; 0x6c
        in_min_ = out_min_ + threshold_;
 8002fe4:	6782      	str	r2, [r0, #120]	; 0x78
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8002fe6:	62c1      	str	r1, [r0, #44]	; 0x2c
        history_ = 0;
 8002fe8:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8002fea:	6103      	str	r3, [r0, #16]
        out_min_ = min;
 8002fec:	6143      	str	r3, [r0, #20]
        position_ = initial_value;
 8002fee:	6203      	str	r3, [r0, #32]
        history_ = 0;
 8002ff0:	6303      	str	r3, [r0, #48]	; 0x30
        increment_ = 0;
 8002ff2:	6383      	str	r3, [r0, #56]	; 0x38
        out_min_ = min;
 8002ff4:	63c3      	str	r3, [r0, #60]	; 0x3c
        position_ = initial_value;
 8002ff6:	6483      	str	r3, [r0, #72]	; 0x48
        history_ = 0;
 8002ff8:	6583      	str	r3, [r0, #88]	; 0x58
        increment_ = 0;
 8002ffa:	6603      	str	r3, [r0, #96]	; 0x60
        out_min_ = min;
 8002ffc:	6643      	str	r3, [r0, #100]	; 0x64
        position_ = initial_value;
 8002ffe:	6703      	str	r3, [r0, #112]	; 0x70
    started_ = false;
 8003000:	7106      	strb	r6, [r0, #4]
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8003002:	6541      	str	r1, [r0, #84]	; 0x54
        step_ = 1.f / period;
 8003004:	f8c0 e084 	str.w	lr, [r0, #132]	; 0x84
        out_max_ = max;
 8003008:	f8c0 c090 	str.w	ip, [r0, #144]	; 0x90
        out_range_ = out_max_ - out_min_;
 800300c:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
 8003010:	f8c0 e0ac 	str.w	lr, [r0, #172]	; 0xac
        out_max_ = max;
 8003014:	f8c0 c0b8 	str.w	ip, [r0, #184]	; 0xb8
        out_range_ = out_max_ - out_min_;
 8003018:	f8c0 c0c4 	str.w	ip, [r0, #196]	; 0xc4
 800301c:	f8c0 e0d4 	str.w	lr, [r0, #212]	; 0xd4
        out_max_ = max;
 8003020:	f8c0 c0e0 	str.w	ip, [r0, #224]	; 0xe0
        out_range_ = out_max_ - out_min_;
 8003024:	f8c0 c0ec 	str.w	ip, [r0, #236]	; 0xec
 8003028:	f8c0 e0fc 	str.w	lr, [r0, #252]	; 0xfc
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800302c:	67c1      	str	r1, [r0, #124]	; 0x7c
        threshold_ = threshold;
 800302e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
        in_min_ = out_min_ + threshold_;
 8003032:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8003036:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
        threshold_ = threshold;
 800303a:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
        in_min_ = out_min_ + threshold_;
 800303e:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8003042:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
        threshold_ = threshold;
 8003046:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
        in_min_ = out_min_ + threshold_;
 800304a:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800304e:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
        history_ = 0;
 8003052:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        increment_ = 0;
 8003056:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        out_min_ = min;
 800305a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        position_ = initial_value;
 800305e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
        history_ = 0;
 8003062:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
        increment_ = 0;
 8003066:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        out_min_ = min;
 800306a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        position_ = initial_value;
 800306e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
        history_ = 0;
 8003072:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        increment_ = 0;
 8003076:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        out_min_ = min;
 800307a:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
        position_ = initial_value;
 800307e:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
        history_ = 0;
 8003082:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        increment_ = 0;
 8003086:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
        out_min_ = min;
 800308a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
        position_ = initial_value;
 800308e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
        history_ = 0;
 8003092:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        increment_ = 0;
 8003096:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
        out_min_ = min;
 800309a:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        position_ = initial_value;
 800309e:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
        step_ = 1.f / period;
 80030a2:	f8c0 e124 	str.w	lr, [r0, #292]	; 0x124
        out_max_ = max;
 80030a6:	f8c0 c108 	str.w	ip, [r0, #264]	; 0x108
        out_range_ = out_max_ - out_min_;
 80030aa:	f8c0 c114 	str.w	ip, [r0, #276]	; 0x114
        out_max_ = max;
 80030ae:	f8c0 c130 	str.w	ip, [r0, #304]	; 0x130
        out_range_ = out_max_ - out_min_;
 80030b2:	f8c0 c13c 	str.w	ip, [r0, #316]	; 0x13c
        threshold_ = threshold;
 80030b6:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
        in_min_ = out_min_ + threshold_;
 80030ba:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80030be:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
 80030c2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
        threshold_ = threshold;
 80030c6:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
}

void Adc::Reset(void)
{
    read_index_ = 0;
    current_pot_ = 0;
 80030ca:	e9c0 6652 	strd	r6, r6, [r0, #328]	; 0x148
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        in_min_ = out_min_ + threshold_;
 80030d2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    LL_GPIO_StructInit(&gpio_init);
 80030d6:	a804      	add	r0, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80030e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80030f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	9302      	str	r3, [sp, #8]
 8003102:	9b02      	ldr	r3, [sp, #8]
    LL_GPIO_StructInit(&gpio_init);
 8003104:	f002 ffa6 	bl	8006054 <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_6 |
 8003108:	22ca      	movs	r2, #202	; 0xca
 800310a:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 800310c:	a904      	add	r1, sp, #16
 800310e:	4868      	ldr	r0, [pc, #416]	; (80032b0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x318>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8003110:	9608      	str	r6, [sp, #32]
    gpio_init.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_6 |
 8003112:	e9cd 2304 	strd	r2, r3, [sp, #16]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003116:	f002 ff17 	bl	8005f48 <LL_GPIO_Init>
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 800311a:	231f      	movs	r3, #31
    LL_GPIO_Init(GPIOC, &gpio_init);
 800311c:	a904      	add	r1, sp, #16
 800311e:	4865      	ldr	r0, [pc, #404]	; (80032b4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x31c>)
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8003120:	9304      	str	r3, [sp, #16]
    LL_GPIO_Init(GPIOC, &gpio_init);
 8003122:	f002 ff11 	bl	8005f48 <LL_GPIO_Init>
  *         performance is the same on the full voltage range
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableAnalogBooster(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 8003126:	4a64      	ldr	r2, [pc, #400]	; (80032b8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x320>)
  MODIFY_REG(ADCx->CR,
 8003128:	4964      	ldr	r1, [pc, #400]	; (80032bc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
 800312a:	6853      	ldr	r3, [r2, #4]
 800312c:	4864      	ldr	r0, [pc, #400]	; (80032c0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x328>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	6053      	str	r3, [r2, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003134:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003138:	4a62      	ldr	r2, [pc, #392]	; (80032c4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x32c>)
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8003142:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8003146:	4d60      	ldr	r5, [pc, #384]	; (80032c8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x330>)
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003150:	6893      	ldr	r3, [r2, #8]
 8003152:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800315c:	688a      	ldr	r2, [r1, #8]
 800315e:	4002      	ands	r2, r0
 8003160:	f042 0202 	orr.w	r2, r2, #2
 8003164:	608a      	str	r2, [r1, #8]
 8003166:	4a59      	ldr	r2, [pc, #356]	; (80032cc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 8003168:	6893      	ldr	r3, [r2, #8]
 800316a:	4003      	ands	r3, r0
    system::Delay_ms(1);
 800316c:	2001      	movs	r0, #1
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	6093      	str	r3, [r2, #8]
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8003174:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003176:	4d51      	ldr	r5, [pc, #324]	; (80032bc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8003178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800317c:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x338>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 8003182:	688b      	ldr	r3, [r1, #8]
 8003184:	bf0c      	ite	eq
 8003186:	f443 73e0 	orreq.w	r3, r3, #448	; 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 800318a:	f443 7340 	orrne.w	r3, r3, #768	; 0x300
 800318e:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003190:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8003192:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x33c>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003194:	400a      	ands	r2, r1
 8003196:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8003198:	68aa      	ldr	r2, [r5, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60ab      	str	r3, [r5, #8]
 80031a2:	f001 f951 	bl	8004448 <recorder::system::Delay_ms(unsigned long)>
    LL_ADC_InitTypeDef adc_init =
 80031a6:	2200      	movs	r2, #0
 80031a8:	2300      	movs	r3, #0
    LL_ADC_Init(adc, &adc_init);
 80031aa:	a904      	add	r1, sp, #16
 80031ac:	4628      	mov	r0, r5
    LL_ADC_InitTypeDef adc_init =
 80031ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9306      	str	r3, [sp, #24]
    LL_ADC_Init(adc, &adc_init);
 80031b6:	f002 fdef 	bl	8005d98 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 80031ba:	68ab      	ldr	r3, [r5, #8]
 80031bc:	4a46      	ldr	r2, [pc, #280]	; (80032d8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x340>)
 80031be:	401a      	ands	r2, r3
 80031c0:	4b46      	ldr	r3, [pc, #280]	; (80032dc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x344>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031c6:	68ab      	ldr	r3, [r5, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	dbfc      	blt.n	80031c6 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x22e>
    system::Delay_ms(1);
 80031cc:	2001      	movs	r0, #1
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031ce:	4d3f      	ldr	r5, [pc, #252]	; (80032cc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 80031d0:	f001 f93a 	bl	8004448 <recorder::system::Delay_ms(unsigned long)>
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x330>)
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 80031d6:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
    system::Delay_ms(1);
 80031d8:	2001      	movs	r0, #1
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 80031e4:	6893      	ldr	r3, [r2, #8]
 80031e6:	bf0c      	ite	eq
 80031e8:	f443 73e0 	orreq.w	r3, r3, #448	; 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 80031ec:	f443 7340 	orrne.w	r3, r3, #768	; 0x300
 80031f0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x338>)
 80031f4:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x33c>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031f8:	400a      	ands	r2, r1
 80031fa:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(ADCx->CR,
 80031fc:	68aa      	ldr	r2, [r5, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	60ab      	str	r3, [r5, #8]
 8003206:	f001 f91f 	bl	8004448 <recorder::system::Delay_ms(unsigned long)>
    LL_ADC_InitTypeDef adc_init =
 800320a:	2200      	movs	r2, #0
 800320c:	2300      	movs	r3, #0
    LL_ADC_Init(adc, &adc_init);
 800320e:	a904      	add	r1, sp, #16
 8003210:	4628      	mov	r0, r5
    LL_ADC_InitTypeDef adc_init =
 8003212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003216:	2300      	movs	r3, #0
 8003218:	9306      	str	r3, [sp, #24]
    LL_ADC_Init(adc, &adc_init);
 800321a:	f002 fdbd 	bl	8005d98 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 800321e:	68ab      	ldr	r3, [r5, #8]
 8003220:	4a2d      	ldr	r2, [pc, #180]	; (80032d8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x340>)
 8003222:	401a      	ands	r2, r3
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x344>)
 8003226:	4313      	orrs	r3, r2
 8003228:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800322a:	68ab      	ldr	r3, [r5, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	dbfc      	blt.n	800322a <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x292>
    system::Delay_ms(1);
 8003230:	2001      	movs	r0, #1
 8003232:	f001 f909 	bl	8004448 <recorder::system::Delay_ms(unsigned long)>
    InitAudioSequence();
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff fdba 	bl	8002db0 <recorder::Adc::InitAudioSequence()>
    InitPotSequence();
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff fe23 	bl	8002e88 <recorder::Adc::InitPotSequence()>
  MODIFY_REG(ADCx->CR,
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x324>)
 8003244:	481e      	ldr	r0, [pc, #120]	; (80032c0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x328>)
 8003246:	6891      	ldr	r1, [r2, #8]
 8003248:	4001      	ands	r1, r0
 800324a:	f041 0101 	orr.w	r1, r1, #1
 800324e:	6091      	str	r1, [r2, #8]
 8003250:	68ab      	ldr	r3, [r5, #8]
 8003252:	4003      	ands	r3, r0
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800325a:	6813      	ldr	r3, [r2, #0]
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 800325c:	07d9      	lsls	r1, r3, #31
 800325e:	d5fc      	bpl.n	800325a <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c2>
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x334>)
 8003262:	6813      	ldr	r3, [r2, #0]
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC2));
 8003264:	07db      	lsls	r3, r3, #31
 8003266:	d5fc      	bpl.n	8003262 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2ca>
    LL_DMA_InitTypeDef dma_init =
 8003268:	2234      	movs	r2, #52	; 0x34
 800326a:	2100      	movs	r1, #0
 800326c:	a806      	add	r0, sp, #24
 800326e:	250c      	movs	r5, #12
 8003270:	f004 fa15 	bl	800769e <memset>
 8003274:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003278:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_DMA1_CLK_ENABLE();
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x30c>)
    LL_DMA_InitTypeDef dma_init =
 800327e:	9007      	str	r0, [sp, #28]
 8003280:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003284:	9109      	str	r1, [sp, #36]	; 0x24
 8003286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800328a:	950c      	str	r5, [sp, #48]	; 0x30
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 800328c:	aa04      	add	r2, sp, #16
 800328e:	4c14      	ldr	r4, [pc, #80]	; (80032e0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x348>)
    LL_DMA_InitTypeDef dma_init =
 8003290:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003294:	200a      	movs	r0, #10
 8003296:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800329a:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
 800329e:	e021      	b.n	80032e4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x34c>
 80032a0:	20010a58 	.word	0x20010a58
 80032a4:	58024400 	.word	0x58024400
 80032a8:	3a83126f 	.word	0x3a83126f
 80032ac:	3f8041ab 	.word	0x3f8041ab
 80032b0:	58020000 	.word	0x58020000
 80032b4:	58020800 	.word	0x58020800
 80032b8:	58000400 	.word	0x58000400
 80032bc:	40022000 	.word	0x40022000
 80032c0:	7fffffc0 	.word	0x7fffffc0
 80032c4:	40022300 	.word	0x40022300
 80032c8:	5c001000 	.word	0x5c001000
 80032cc:	40022100 	.word	0x40022100
 80032d0:	5fffffc0 	.word	0x5fffffc0
 80032d4:	6fffffc0 	.word	0x6fffffc0
 80032d8:	3ffeffc0 	.word	0x3ffeffc0
 80032dc:	80010000 	.word	0x80010000
 80032e0:	40020000 	.word	0x40020000
    };
 80032e4:	4814      	ldr	r0, [pc, #80]	; (8003338 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a0>)
 80032e6:	4915      	ldr	r1, [pc, #84]	; (800333c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a4>)
 80032e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80032ec:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80032f0:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 80032f2:	f041 0101 	orr.w	r1, r1, #1
 80032f6:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80032fa:	2101      	movs	r1, #1
    __HAL_RCC_DMA1_CLK_ENABLE();
 80032fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	9b03      	ldr	r3, [sp, #12]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8003308:	f002 fdcc 	bl	8005ea4 <LL_DMA_Init>
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  register uint32_t dma_base_addr = (uint32_t)DMAx;

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800330c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    irq::RegisterHandler(DMA1_Stream1_IRQn, DMAHandler);
 800330e:	4628      	mov	r0, r5
 8003310:	490b      	ldr	r1, [pc, #44]	; (8003340 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x3a8>)
 8003312:	f023 0310 	bic.w	r3, r3, #16
 8003316:	62a3      	str	r3, [r4, #40]	; 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003318:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800331a:	f023 0308 	bic.w	r3, r3, #8
 800331e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003320:	f000 fc34 	bl	8003b8c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream1_IRQn, kADCIRQPriority);
 8003324:	4628      	mov	r0, r5
 8003326:	2101      	movs	r1, #1
 8003328:	f000 fc6c 	bl	8003c04 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream1_IRQn);
 800332c:	4628      	mov	r0, r5
}
 800332e:	b014      	add	sp, #80	; 0x50
 8003330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    irq::Enable(DMA1_Stream1_IRQn);
 8003334:	f000 bc4c 	b.w	8003bd0 <recorder::irq::Enable(IRQn_Type)>
 8003338:	40022140 	.word	0x40022140
 800333c:	38000000 	.word	0x38000000
 8003340:	08002da5 	.word	0x08002da5

08003344 <recorder::Adc::Start()>:
    }
}

void Adc::Start(void)
{
    if (!started_)
 8003344:	7903      	ldrb	r3, [r0, #4]
 8003346:	bb53      	cbnz	r3, 800339e <recorder::Adc::Start()+0x5a>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <recorder::Adc::Start()+0x5c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 800334a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800334e:	4915      	ldr	r1, [pc, #84]	; (80033a4 <recorder::Adc::Start()+0x60>)
{
 8003350:	b430      	push	{r4, r5}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8003352:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8003356:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003358:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800335a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335c:	f042 0210 	orr.w	r2, r2, #16
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003364:	f042 0208 	orr.w	r2, r2, #8
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
 800336a:	688b      	ldr	r3, [r1, #8]
 800336c:	075b      	lsls	r3, r3, #29
 800336e:	d4fc      	bmi.n	800336a <recorder::Adc::Start()+0x26>
  MODIFY_REG(ADCx->CR,
 8003370:	688a      	ldr	r2, [r1, #8]
 8003372:	4d0d      	ldr	r5, [pc, #52]	; (80033a8 <recorder::Adc::Start()+0x64>)
 8003374:	4c0d      	ldr	r4, [pc, #52]	; (80033ac <recorder::Adc::Start()+0x68>)
 8003376:	402a      	ands	r2, r5
 8003378:	f042 0204 	orr.w	r2, r2, #4
 800337c:	608a      	str	r2, [r1, #8]
        LL_ADC_REG_StartConversion(ADC2);

        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);

        started_ = true;
 800337e:	2101      	movs	r1, #1
 8003380:	68a3      	ldr	r3, [r4, #8]
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <recorder::Adc::Start()+0x5c>)
 8003384:	402b      	ands	r3, r5
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	60a3      	str	r3, [r4, #8]
 800338c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003390:	6093      	str	r3, [r2, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8003392:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003394:	430b      	orrs	r3, r1
    }
}
 8003396:	bc30      	pop	{r4, r5}
 8003398:	6293      	str	r3, [r2, #40]	; 0x28
        started_ = true;
 800339a:	7101      	strb	r1, [r0, #4]
}
 800339c:	4770      	bx	lr
 800339e:	4770      	bx	lr
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40022000 	.word	0x40022000
 80033a8:	7fffffc0 	.word	0x7fffffc0
 80033ac:	40022100 	.word	0x40022100

080033b0 <recorder::Adc::Stop()>:

void Adc::Stop(void)
{
    if (started_)
 80033b0:	7903      	ldrb	r3, [r0, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04c      	beq.n	8003450 <recorder::Adc::Stop()+0xa0>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <recorder::Adc::Stop()+0xa4>)
 80033b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80033ba:	f023 0301 	bic.w	r3, r3, #1
{
 80033be:	b430      	push	{r4, r5}
 80033c0:	6293      	str	r3, [r2, #40]	; 0x28
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 80033c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    {
        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
        while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_1));
 80033c4:	07d9      	lsls	r1, r3, #31
 80033c6:	d4fc      	bmi.n	80033c2 <recorder::Adc::Stop()+0x12>
  MODIFY_REG(ADCx->CR,
 80033c8:	4923      	ldr	r1, [pc, #140]	; (8003458 <recorder::Adc::Stop()+0xa8>)
 80033ca:	4d24      	ldr	r5, [pc, #144]	; (800345c <recorder::Adc::Stop()+0xac>)
 80033cc:	688a      	ldr	r2, [r1, #8]
 80033ce:	4c24      	ldr	r4, [pc, #144]	; (8003460 <recorder::Adc::Stop()+0xb0>)
 80033d0:	402a      	ands	r2, r5
 80033d2:	f042 0210 	orr.w	r2, r2, #16
 80033d6:	608a      	str	r2, [r1, #8]
 80033d8:	68a3      	ldr	r3, [r4, #8]
 80033da:	402b      	ands	r3, r5
 80033dc:	f043 0310 	orr.w	r3, r3, #16
 80033e0:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033e2:	688b      	ldr	r3, [r1, #8]
 80033e4:	075b      	lsls	r3, r3, #29
 80033e6:	d4fc      	bmi.n	80033e2 <recorder::Adc::Stop()+0x32>
 80033e8:	491d      	ldr	r1, [pc, #116]	; (8003460 <recorder::Adc::Stop()+0xb0>)
 80033ea:	688a      	ldr	r2, [r1, #8]
 80033ec:	f012 0204 	ands.w	r2, r2, #4
 80033f0:	d1fb      	bne.n	80033ea <recorder::Adc::Stop()+0x3a>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80033f2:	4918      	ldr	r1, [pc, #96]	; (8003454 <recorder::Adc::Stop()+0xa4>)
        history_ = 0;
 80033f4:	2300      	movs	r3, #0
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80033f6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80033fa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80033fc:	f024 0410 	bic.w	r4, r4, #16
 8003400:	628c      	str	r4, [r1, #40]	; 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003402:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003404:	f024 0408 	bic.w	r4, r4, #8
 8003408:	628c      	str	r4, [r1, #40]	; 0x28
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 800340a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800340e:	608d      	str	r5, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8003410:	608c      	str	r4, [r1, #8]
 8003412:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8003414:	6103      	str	r3, [r0, #16]
        history_ = 0;
 8003416:	6303      	str	r3, [r0, #48]	; 0x30
        increment_ = 0;
 8003418:	6383      	str	r3, [r0, #56]	; 0x38
        history_ = 0;
 800341a:	6583      	str	r3, [r0, #88]	; 0x58
        increment_ = 0;
 800341c:	6603      	str	r3, [r0, #96]	; 0x60
        history_ = 0;
 800341e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
        increment_ = 0;
 8003422:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        history_ = 0;
 8003426:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
        increment_ = 0;
 800342a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        history_ = 0;
 800342e:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        increment_ = 0;
 8003432:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        history_ = 0;
 8003436:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        increment_ = 0;
 800343a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
        history_ = 0;
 800343e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        increment_ = 0;
 8003442:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
        LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
        LL_DMA_ClearFlag_TC1(DMA1);
        LL_DMA_ClearFlag_HT1(DMA1);

        Reset();
        started_ = false;
 8003446:	7102      	strb	r2, [r0, #4]
    }
}
 8003448:	bc30      	pop	{r4, r5}
    current_pot_ = 0;
 800344a:	e9c0 2252 	strd	r2, r2, [r0, #328]	; 0x148
}
 800344e:	4770      	bx	lr
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40020000 	.word	0x40020000
 8003458:	40022000 	.word	0x40022000
 800345c:	7fffffc0 	.word	0x7fffffc0
 8003460:	40022100 	.word	0x40022100

08003464 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
    static void TimerHandler(void);

    static inline
    void AdcCallback(const AudioInput& in, const PotInput& pot)
    {
        instance_->Service(in, pot);
 8003464:	4bbb      	ldr	r3, [pc, #748]	; (8003754 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f0>)
    void AdcCallback(const AudioInput& in, const PotInput& pot)
 8003466:	b530      	push	{r4, r5, lr}
        instance_->Service(in, pot);
 8003468:	681c      	ldr	r4, [r3, #0]

    void Service(const AudioInput& in, const PotInput& pot)
    {
        AudioOutput out;

        if (state_ == STATE_STARTING)
 800346a:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 800346e:	2b01      	cmp	r3, #1
    void AdcCallback(const AudioInput& in, const PotInput& pot)
 8003470:	ed2d 8b08 	vpush	{d8-d11}
 8003474:	b085      	sub	sp, #20
        if (state_ == STATE_STARTING)
 8003476:	f000 80a8 	beq.w	80035ca <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x166>
            if (fade_position_ >= 1)
            {
                state_ = STATE_RUNNING;
            }
        }
        else if (state_ == STATE_RUNNING)
 800347a:	2b02      	cmp	r3, #2
 800347c:	f000 8085 	beq.w	800358a <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x126>
                // Disable the amplifier at the start of the soft-off curve
                // instead of the end, otherwise the speaker will pop.
                amp_enable_.Clear();
            }
        }
        else if (state_ == STATE_STOPPING)
 8003480:	2b03      	cmp	r3, #3
 8003482:	f000 80ff 	beq.w	8003684 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x220>
    void Process(const AudioOutput& audio)
    {
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            float sample = audio[AUDIO_OUT_LINE][i];
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 800348a:	ed9d 6a01 	vldr	s12, [sp, #4]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800348e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003492:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 8003496:	ee36 7a26 	vadd.f32	s14, s12, s13
 800349a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	f2c0 808e 	blt.w	80035c6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x162>
 80034aa:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	f300 80e4 	bgt.w	800367e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x21a>
            uint32_t code = 0.5 + 0xFFF * sample;
 80034b6:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8003758 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 80034ba:	eee7 7a26 	vfma.f32	s15, s14, s13
 80034be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c2:	ee17 2a90 	vmov	r2, s15
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 80034ca:	ed9d 6a02 	vldr	s12, [sp, #8]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            dma_buffer_[write_index_] = code;
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80034d2:	1c69      	adds	r1, r5, #1
 80034d4:	4ba1      	ldr	r3, [pc, #644]	; (800375c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034d6:	ee36 7a26 	vadd.f32	s14, s12, s13
            dma_buffer_[write_index_] = code;
 80034da:	48a1      	ldr	r0, [pc, #644]	; (8003760 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2fc>)
 80034dc:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80034e0:	ee27 7a27 	vmul.f32	s14, s14, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80034e4:	fba3 2301 	umull	r2, r3, r3, r1
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80034ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80034fa:	db62      	blt.n	80035c2 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x15e>
 80034fc:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	f300 80b8 	bgt.w	8003678 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x214>
            uint32_t code = 0.5 + 0xFFF * sample;
 8003508:	eddf 6a93 	vldr	s13, [pc, #588]	; 8003758 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 800350c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8003510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003514:	ee17 2a90 	vmov	r2, s15
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            float sample = audio[AUDIO_OUT_LINE][i];
 800351c:	ed9d 6a03 	vldr	s12, [sp, #12]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003520:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003524:	1c59      	adds	r1, r3, #1
            dma_buffer_[write_index_] = code;
 8003526:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800352a:	ee36 7a26 	vadd.f32	s14, s12, s13
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
 8003530:	fba3 2301 	umull	r2, r3, r3, r1
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8003534:	ee27 7a27 	vmul.f32	s14, s14, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800353e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003542:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	db38      	blt.n	80035be <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x15a>
 800354c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	f300 808d 	bgt.w	8003672 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20e>
            uint32_t code = 0.5 + 0xFFF * sample;
 8003558:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003758 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f4>
 800355c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8003560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003564:	ee17 1a90 	vmov	r1, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8003568:	1c5a      	adds	r2, r3, #1
            dma_buffer_[write_index_] = code;
 800356a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800356e:	4b7b      	ldr	r3, [pc, #492]	; (800375c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f8>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800357a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 800357e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    }
 8003582:	b005      	add	sp, #20
 8003584:	ecbd 8b08 	vpop	{d8-d11}
 8003588:	bd30      	pop	{r4, r5, pc}
            out = callback_(in, pot);
 800358a:	4b76      	ldr	r3, [pc, #472]	; (8003764 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x300>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4798      	blx	r3
            if (cue_stop_)
 8003590:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
            out = callback_(in, pot);
 8003594:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003598:	edcd 0a02 	vstr	s1, [sp, #8]
 800359c:	ed8d 1a03 	vstr	s2, [sp, #12]
            if (cue_stop_)
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f43f af70 	beq.w	8003486 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
                fade_position_ = 1;
 80035a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
                state_ = STATE_STOPPING;
 80035aa:	2003      	movs	r0, #3
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 80035ac:	4b6e      	ldr	r3, [pc, #440]	; (8003768 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x304>)
 80035ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b2:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
                fade_position_ = 1;
 80035b6:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
 80035ba:	619a      	str	r2, [r3, #24]
    }
 80035bc:	e763      	b.n	8003486 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 80035be:	2100      	movs	r1, #0
 80035c0:	e7d2      	b.n	8003568 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x104>
 80035c2:	2200      	movs	r2, #0
 80035c4:	e7a8      	b.n	8003518 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4>
 80035c6:	2200      	movs	r2, #0
 80035c8:	e77d      	b.n	80034c6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x62>
 80035ca:	ed94 9a57 	vldr	s18, [r4, #348]	; 0x15c
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035ce:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                fade_position_ += 1 / kFadeDuration;
 80035d2:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800376c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x308>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035d6:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 80035da:	ed9f ba65 	vldr	s22, [pc, #404]	; 8003770 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30c>
 80035de:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
                fade_position_ += 1 / kFadeDuration;
 80035e2:	ee39 0a00 	vadd.f32	s0, s18, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035e6:	eddf aa63 	vldr	s21, [pc, #396]	; 8003774 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x310>
                fade_position_ += 1 / kFadeDuration;
 80035ea:	eddf 9a63 	vldr	s19, [pc, #396]	; 8003778 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x314>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80035ee:	fe80 0a48 	vminnm.f32	s0, s0, s16
 80035f2:	fe80 0a0b 	vmaxnm.f32	s0, s0, s22
  { return __builtin_cosf(__x); }
 80035f6:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80035fa:	f003 f995 	bl	8006928 <cosf>
 80035fe:	eeb0 7a68 	vmov.f32	s14, s17
 8003602:	ee38 0a40 	vsub.f32	s0, s16, s0
                fade_position_ += 1 / kFadeDuration;
 8003606:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800377c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x318>
 800360a:	ee79 9a29 	vadd.f32	s19, s18, s19
 800360e:	ee79 7a27 	vadd.f32	s15, s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003612:	eea0 7a0a 	vfma.f32	s14, s0, s20
 8003616:	fec7 7ac8 	vminnm.f32	s15, s15, s16
 800361a:	fec7 7a8b 	vmaxnm.f32	s15, s15, s22
 800361e:	ee27 0aaa 	vmul.f32	s0, s15, s21
                    out[ch][i] = FadeCurve(fade_position_);
 8003622:	ed8d 7a01 	vstr	s14, [sp, #4]
 8003626:	f003 f97f 	bl	8006928 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800362a:	eef0 7a68 	vmov.f32	s15, s17
 800362e:	ee38 0a40 	vsub.f32	s0, s16, s0
 8003632:	eee0 7a0a 	vfma.f32	s15, s0, s20
 8003636:	fe89 0ac8 	vminnm.f32	s0, s19, s16
 800363a:	fe80 0a0b 	vmaxnm.f32	s0, s0, s22
 800363e:	ee20 0a2a 	vmul.f32	s0, s0, s21
                    out[ch][i] = FadeCurve(fade_position_);
 8003642:	edcd 7a02 	vstr	s15, [sp, #8]
 8003646:	f003 f96f 	bl	8006928 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800364a:	ee38 0a40 	vsub.f32	s0, s16, s0
            if (fade_position_ >= 1)
 800364e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003780 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31c>
 8003652:	edc4 9a57 	vstr	s19, [r4, #348]	; 0x15c
 8003656:	eeb4 9ae7 	vcmpe.f32	s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800365a:	eee0 8a0a 	vfma.f32	s17, s0, s20
            if (fade_position_ >= 1)
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    out[ch][i] = FadeCurve(fade_position_);
 8003662:	edcd 8a03 	vstr	s17, [sp, #12]
            if (fade_position_ >= 1)
 8003666:	f6ff af0e 	blt.w	8003486 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
                state_ = STATE_RUNNING;
 800366a:	2302      	movs	r3, #2
 800366c:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8003670:	e709      	b.n	8003486 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 8003672:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003676:	e777      	b.n	8003568 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x104>
 8003678:	f640 72ff 	movw	r2, #4095	; 0xfff
 800367c:	e74c      	b.n	8003518 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4>
 800367e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003682:	e720      	b.n	80034c6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x62>
 8003684:	ed94 9a57 	vldr	s18, [r4, #348]	; 0x15c
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003688:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
        {
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
            {
                fade_position_ -= 1 / kFadeDuration;
 800368c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800376c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x308>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003690:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8003694:	eddf aa36 	vldr	s21, [pc, #216]	; 8003770 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x30c>
 8003698:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
                fade_position_ -= 1 / kFadeDuration;
 800369c:	ee39 0a40 	vsub.f32	s0, s18, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036a0:	ed9f aa34 	vldr	s20, [pc, #208]	; 8003774 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x310>
                fade_position_ -= 1 / kFadeDuration;
 80036a4:	ed9f ba34 	vldr	s22, [pc, #208]	; 8003778 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x314>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036a8:	fe80 0a48 	vminnm.f32	s0, s0, s16
 80036ac:	fe80 0a2a 	vmaxnm.f32	s0, s0, s21
 80036b0:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80036b4:	f003 f938 	bl	8006928 <cosf>
 80036b8:	eeb0 7a68 	vmov.f32	s14, s17
 80036bc:	ee38 0a40 	vsub.f32	s0, s16, s0
                fade_position_ -= 1 / kFadeDuration;
 80036c0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800377c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x318>
 80036c4:	ee79 ba4b 	vsub.f32	s23, s18, s22
 80036c8:	ee79 7a67 	vsub.f32	s15, s18, s15
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036cc:	eea0 7a29 	vfma.f32	s14, s0, s19
 80036d0:	fec7 7ac8 	vminnm.f32	s15, s15, s16
 80036d4:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
 80036d8:	ee27 0a8a 	vmul.f32	s0, s15, s20

                for (uint32_t ch = 0; ch < NUM_AUDIO_OUTS; ch++)
                {
                    out[ch][i] = FadeCurve(fade_position_);
 80036dc:	ed8d 7a01 	vstr	s14, [sp, #4]
 80036e0:	f003 f922 	bl	8006928 <cosf>
 80036e4:	eef0 7a40 	vmov.f32	s15, s0
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80036e8:	fe8b 0ac8 	vminnm.f32	s0, s23, s16
 80036ec:	eeb0 7a68 	vmov.f32	s14, s17
 80036f0:	fe80 0a2a 	vmaxnm.f32	s0, s0, s21
 80036f4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80036f8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80036fc:	eea7 7aa9 	vfma.f32	s14, s15, s19
                    out[ch][i] = FadeCurve(fade_position_);
 8003700:	ed8d 7a02 	vstr	s14, [sp, #8]
 8003704:	f003 f910 	bl	8006928 <cosf>
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003708:	ee38 0a40 	vsub.f32	s0, s16, s0
 800370c:	edc4 ba57 	vstr	s23, [r4, #348]	; 0x15c
                }
            }

            if (fade_position_ <= 0)
 8003710:	eeb4 9acb 	vcmpe.f32	s18, s22
        return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8003714:	eee0 8a29 	vfma.f32	s17, s0, s19
            if (fade_position_ <= 0)
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    out[ch][i] = FadeCurve(fade_position_);
 800371c:	edcd 8a03 	vstr	s17, [sp, #12]
            if (fade_position_ <= 0)
 8003720:	f63f aeb1 	bhi.w	8003486 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003724:	4a17      	ldr	r2, [pc, #92]	; (8003784 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x320>)
            {
                state_ = STATE_STOPPED;
 8003726:	2100      	movs	r1, #0
                StopTimer();
                adc_.Stop();
 8003728:	1d20      	adds	r0, r4, #4
 800372a:	6813      	ldr	r3, [r2, #0]
                state_ = STATE_STOPPED;
 800372c:	f884 1160 	strb.w	r1, [r4, #352]	; 0x160
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6013      	str	r3, [r2, #0]
                adc_.Stop();
 8003736:	f7ff fe3b 	bl	80033b0 <recorder::Adc::Stop()>
                dac_.Stop();
 800373a:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 800373e:	f000 f917 	bl	8003970 <recorder::Dac::Stop()>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8003742:	4909      	ldr	r1, [pc, #36]	; (8003768 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x304>)
 8003744:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x324>)
 800374a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800374e:	6188      	str	r0, [r1, #24]
 8003750:	619a      	str	r2, [r3, #24]
    }
 8003752:	e698      	b.n	8003486 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22>
 8003754:	20010a60 	.word	0x20010a60
 8003758:	457ff000 	.word	0x457ff000
 800375c:	aaaaaaab 	.word	0xaaaaaaab
 8003760:	38000030 	.word	0x38000030
 8003764:	20010a5c 	.word	0x20010a5c
 8003768:	58020400 	.word	0x58020400
 800376c:	39da740e 	.word	0x39da740e
 8003770:	00000000 	.word	0x00000000
 8003774:	40490fdb 	.word	0x40490fdb
 8003778:	3aa3d70a 	.word	0x3aa3d70a
 800377c:	3a5a740e 	.word	0x3a5a740e
 8003780:	3f7fae14 	.word	0x3f7fae14
 8003784:	40014000 	.word	0x40014000
 8003788:	58021800 	.word	0x58021800

0800378c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:

namespace recorder
{

void Analog::Init(Callback callback)
{
 800378c:	b570      	push	{r4, r5, r6, lr}
    instance_ = this;
 800378e:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x128>)
{
 8003790:	b08a      	sub	sp, #40	; 0x28
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8003792:	4c49      	ldr	r4, [pc, #292]	; (80038b8 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x12c>)
 8003794:	4605      	mov	r5, r0
    instance_ = this;
 8003796:	6010      	str	r0, [r2, #0]
    adc_enable_.Init();
    adc_enable_.Set();
    boost_enable_.Init();
    amp_enable_.Init();

    adc_.Init(AdcCallback);
 8003798:	3004      	adds	r0, #4
 800379a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0

void Analog::InitTimer(void)
{
    float period = system::kSystemClock / kAudioOSRate;

    LL_TIM_InitTypeDef timer_init =
 800379e:	2600      	movs	r6, #0
    callback_ = callback;
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x130>)
 80037a2:	f042 0202 	orr.w	r2, r2, #2
 80037a6:	6019      	str	r1, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80037a8:	2102      	movs	r1, #2
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 80037aa:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 80037ae:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80037b2:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x134>)
 80037b4:	f002 0202 	and.w	r2, r2, #2
 80037b8:	9204      	str	r2, [sp, #16]
 80037ba:	9a04      	ldr	r2, [sp, #16]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	f022 020c 	bic.w	r2, r2, #12
 80037c2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	f022 020c 	bic.w	r2, r2, #12
 80037ca:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	f022 0202 	bic.w	r2, r2, #2
 80037d2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f022 020c 	bic.w	r2, r2, #12
 80037da:	f042 0204 	orr.w	r2, r2, #4
 80037de:	601a      	str	r2, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80037e0:	6199      	str	r1, [r3, #24]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 80037e2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80037e6:	4a37      	ldr	r2, [pc, #220]	; (80038c4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x138>)
 80037e8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80037ec:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 80037f0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80037f4:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80037f8:	9103      	str	r1, [sp, #12]
 80037fa:	9903      	ldr	r1, [sp, #12]
 80037fc:	6891      	ldr	r1, [r2, #8]
 80037fe:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8003802:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003804:	68d1      	ldr	r1, [r2, #12]
 8003806:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 800380a:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800380c:	6851      	ldr	r1, [r2, #4]
 800380e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003812:	6051      	str	r1, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003814:	6811      	ldr	r1, [r2, #0]
 8003816:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 800381a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800381e:	6011      	str	r1, [r2, #0]
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8003820:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    adc_.Init(AdcCallback);
 8003824:	4928      	ldr	r1, [pc, #160]	; (80038c8 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x13c>)
 8003826:	f042 0202 	orr.w	r2, r2, #2
 800382a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800382e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8003832:	f002 0202 	and.w	r2, r2, #2
 8003836:	9202      	str	r2, [sp, #8]
 8003838:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003840:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003848:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003850:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003858:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f7ff fb9b 	bl	8002f98 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
    dac_.Init();
 8003862:	f505 70aa 	add.w	r0, r5, #340	; 0x154
 8003866:	f000 f909 	bl	8003a7c <recorder::Dac::Init()>
        .Prescaler         = 0,
        .CounterMode       = LL_TIM_COUNTERMODE_UP,
        .Autoreload        = static_cast<uint32_t>(period + 0.5) - 1,
        .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0,
    };
 800386a:	f240 5334 	movw	r3, #1332	; 0x534
    LL_TIM_InitTypeDef timer_init =
 800386e:	9609      	str	r6, [sp, #36]	; 0x24

    __HAL_RCC_TIM15_CLK_ENABLE();
    LL_TIM_Init(TIM15, &timer_init);
 8003870:	a905      	add	r1, sp, #20
    LL_TIM_InitTypeDef timer_init =
 8003872:	e9cd 6605 	strd	r6, r6, [sp, #20]
 8003876:	e9cd 3607 	strd	r3, r6, [sp, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
 800387a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8003886:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    LL_TIM_Init(TIM15, &timer_init);
 800388a:	4c10      	ldr	r4, [pc, #64]	; (80038cc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x140>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    LL_TIM_Init(TIM15, &timer_init);
 8003890:	4620      	mov	r0, r4
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM15, &timer_init);
 8003896:	f002 ff35 	bl	8006704 <LL_TIM_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800389a:	6863      	ldr	r3, [r4, #4]
    fade_position_ = 0;
 800389c:	2200      	movs	r2, #0
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	f043 0320 	orr.w	r3, r3, #32
 80038a6:	6063      	str	r3, [r4, #4]
 80038a8:	f8c5 215c 	str.w	r2, [r5, #348]	; 0x15c
    state_ = STATE_STOPPED;
 80038ac:	f8a5 6160 	strh.w	r6, [r5, #352]	; 0x160
}
 80038b0:	b00a      	add	sp, #40	; 0x28
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	20010a60 	.word	0x20010a60
 80038b8:	58024400 	.word	0x58024400
 80038bc:	20010a5c 	.word	0x20010a5c
 80038c0:	58020400 	.word	0x58020400
 80038c4:	58021800 	.word	0x58021800
 80038c8:	08003465 	.word	0x08003465
 80038cc:	40014000 	.word	0x40014000

080038d0 <recorder::Analog::StartTimer()>:
  WRITE_REG(TIMx->CNT, Counter);
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <recorder::Analog::StartTimer()+0x10>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM15);
    }

    LL_TIM_SetCounter(TIM15, 0);
    LL_TIM_EnableCounter(TIM15);
}
 80038de:	4770      	bx	lr
 80038e0:	40014000 	.word	0x40014000

080038e4 <recorder::Dac::DMAHandler()>:
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <recorder::Dac::DMAHandler()+0x10>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80038e6:	2210      	movs	r2, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80038e8:	2120      	movs	r1, #32
 80038ea:	6099      	str	r1, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80038ec:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 80038ee:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 80038f0:	681b      	ldr	r3, [r3, #0]
    ScopedProfilingPin<PROFILE_DAC_DMA_SERVICE> profile;
    LL_DMA_ClearFlag_TC0(DMA1);
    LL_DMA_ClearFlag_HT0(DMA1);
    LL_DMA_IsActiveFlag_TC0(DMA1);
    LL_DMA_IsActiveFlag_HT0(DMA1);
}
 80038f2:	4770      	bx	lr
 80038f4:	40020000 	.word	0x40020000

080038f8 <recorder::Dac::Start()>:
    if (!started_)
 80038f8:	7903      	ldrb	r3, [r0, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d12e      	bne.n	800395c <recorder::Dac::Start()+0x64>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <recorder::Dac::Start()+0x68>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8003900:	2110      	movs	r1, #16
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <recorder::Dac::Start()+0x6c>)
{
 8003904:	b430      	push	{r4, r5}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8003906:	2420      	movs	r4, #32
 8003908:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 800390a:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800390c:	6919      	ldr	r1, [r3, #16]
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 800390e:	4c16      	ldr	r4, [pc, #88]	; (8003968 <recorder::Dac::Start()+0x70>)
 8003910:	f041 0110 	orr.w	r1, r1, #16
 8003914:	6119      	str	r1, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003916:	6919      	ldr	r1, [r3, #16]
 8003918:	f041 0108 	orr.w	r1, r1, #8
 800391c:	6119      	str	r1, [r3, #16]
  SET_BIT(DACx->CR,
 800391e:	6811      	ldr	r1, [r2, #0]
 8003920:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003924:	6011      	str	r1, [r2, #0]
  MODIFY_REG(DACx->CR,
 8003926:	6811      	ldr	r1, [r2, #0]
 8003928:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800392c:	6011      	str	r1, [r2, #0]

  MODIFY_REG(*preg,
 800392e:	490f      	ldr	r1, [pc, #60]	; (800396c <recorder::Dac::Start()+0x74>)
 8003930:	68e5      	ldr	r5, [r4, #12]
 8003932:	4029      	ands	r1, r5
 8003934:	60e1      	str	r1, [r4, #12]
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 8003936:	247d      	movs	r4, #125	; 0x7d
  SET_BIT(DACx->SWTRIGR,
 8003938:	6851      	ldr	r1, [r2, #4]
 800393a:	f041 0102 	orr.w	r1, r1, #2
 800393e:	6051      	str	r1, [r2, #4]
  MODIFY_REG(DACx->CR,
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003946:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800394a:	6011      	str	r1, [r2, #0]
        started_ = true;
 800394c:	2101      	movs	r1, #1
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 800394e:	609c      	str	r4, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	430a      	orrs	r2, r1
}
 8003954:	bc30      	pop	{r4, r5}
 8003956:	611a      	str	r2, [r3, #16]
        started_ = true;
 8003958:	7101      	strb	r1, [r0, #4]
}
 800395a:	4770      	bx	lr
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40020000 	.word	0x40020000
 8003964:	40007400 	.word	0x40007400
 8003968:	40007408 	.word	0x40007408
 800396c:	fffff000 	.word	0xfffff000

08003970 <recorder::Dac::Stop()>:
    if (started_)
 8003970:	7903      	ldrb	r3, [r0, #4]
 8003972:	b32b      	cbz	r3, 80039c0 <recorder::Dac::Stop()+0x50>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <recorder::Dac::Stop()+0x54>)
 8003976:	6913      	ldr	r3, [r2, #16]
 8003978:	f023 0301 	bic.w	r3, r3, #1
{
 800397c:	b430      	push	{r4, r5}
 800397e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 8003980:	6913      	ldr	r3, [r2, #16]
        while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_0));
 8003982:	f013 0301 	ands.w	r3, r3, #1
 8003986:	d1fb      	bne.n	8003980 <recorder::Dac::Stop()+0x10>
  CLEAR_BIT(DACx->CR,
 8003988:	4c0f      	ldr	r4, [pc, #60]	; (80039c8 <recorder::Dac::Stop()+0x58>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800398a:	2520      	movs	r5, #32
 800398c:	6821      	ldr	r1, [r4, #0]
 800398e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003992:	6021      	str	r1, [r4, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003994:	6914      	ldr	r4, [r2, #16]
        dma_buffer_[i] = 0;
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <recorder::Dac::Stop()+0x5c>)
 8003998:	f024 0410 	bic.w	r4, r4, #16
 800399c:	6114      	str	r4, [r2, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800399e:	6914      	ldr	r4, [r2, #16]
 80039a0:	f024 0408 	bic.w	r4, r4, #8
 80039a4:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80039a6:	2410      	movs	r4, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80039a8:	6095      	str	r5, [r2, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80039aa:	6094      	str	r4, [r2, #8]
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 80039ac:	6003      	str	r3, [r0, #0]
        dma_buffer_[i] = 0;
 80039ae:	614b      	str	r3, [r1, #20]
 80039b0:	600b      	str	r3, [r1, #0]
 80039b2:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80039b6:	e9c1 3303 	strd	r3, r3, [r1, #12]
}
 80039ba:	bc30      	pop	{r4, r5}
        started_ = false;
 80039bc:	7103      	strb	r3, [r0, #4]
}
 80039be:	4770      	bx	lr
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40007400 	.word	0x40007400
 80039cc:	38000030 	.word	0x38000030

080039d0 <recorder::Dac::InitDMA()>:
{
 80039d0:	b510      	push	{r4, lr}
 80039d2:	b092      	sub	sp, #72	; 0x48
    LL_DMA_InitTypeDef dma_init =
 80039d4:	222c      	movs	r2, #44	; 0x2c
 80039d6:	2100      	movs	r1, #0
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80039d8:	4c23      	ldr	r4, [pc, #140]	; (8003a68 <recorder::Dac::InitDMA()+0x98>)
    LL_DMA_InitTypeDef dma_init =
 80039da:	a806      	add	r0, sp, #24
 80039dc:	f003 fe5f 	bl	800769e <memset>
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <recorder::Dac::InitDMA()+0x9c>)
 80039e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ea:	9203      	str	r2, [sp, #12]
 80039ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    __HAL_RCC_DMA1_CLK_ENABLE();
 80039f0:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <recorder::Dac::InitDMA()+0xa0>)
    LL_DMA_InitTypeDef dma_init =
 80039f2:	e9cd 0207 	strd	r0, r2, [sp, #28]
 80039f6:	2206      	movs	r2, #6
 80039f8:	2044      	movs	r0, #68	; 0x44
 80039fa:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8003a60 <recorder::Dac::InitDMA()+0x90>
 80039fe:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8003a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, ((DAC_Channel >> (Register & 0x1FUL)) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0))));
 8003a06:	491b      	ldr	r1, [pc, #108]	; (8003a74 <recorder::Dac::InitDMA()+0xa4>)
 8003a08:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a0c:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
    };
 8003a10:	9102      	str	r1, [sp, #8]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a12:	aa02      	add	r2, sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a14:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a18:	2100      	movs	r1, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a1a:	f040 0001 	orr.w	r0, r0, #1
 8003a1e:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a22:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	9b01      	ldr	r3, [sp, #4]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8003a30:	f002 fa38 	bl	8005ea4 <LL_DMA_Init>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8003a34:	6923      	ldr	r3, [r4, #16]
    irq::RegisterHandler(DMA1_Stream0_IRQn, DMAHandler);
 8003a36:	200b      	movs	r0, #11
 8003a38:	490f      	ldr	r1, [pc, #60]	; (8003a78 <recorder::Dac::InitDMA()+0xa8>)
 8003a3a:	f023 0310 	bic.w	r3, r3, #16
 8003a3e:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	f023 0308 	bic.w	r3, r3, #8
 8003a46:	6123      	str	r3, [r4, #16]
 8003a48:	f000 f8a0 	bl	8003b8c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream0_IRQn, kProfileIRQPriority);
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	200b      	movs	r0, #11
 8003a50:	f000 f8d8 	bl	8003c04 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream0_IRQn);
 8003a54:	200b      	movs	r0, #11
 8003a56:	f000 f8bb 	bl	8003bd0 <recorder::irq::Enable(IRQn_Type)>
}
 8003a5a:	b012      	add	sp, #72	; 0x48
 8003a5c:	bd10      	pop	{r4, pc}
 8003a5e:	bf00      	nop
 8003a60:	00000040 	.word	0x00000040
 8003a64:	00000100 	.word	0x00000100
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	38000030 	.word	0x38000030
 8003a70:	58024400 	.word	0x58024400
 8003a74:	40007414 	.word	0x40007414
 8003a78:	080038e5 	.word	0x080038e5

08003a7c <recorder::Dac::Init()>:
{
 8003a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        dma_buffer_[i] = 0;
 8003a80:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <recorder::Dac::Init()+0xa0>)
    started_ = false;
 8003a82:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a84:	4e26      	ldr	r6, [pc, #152]	; (8003b20 <recorder::Dac::Init()+0xa4>)
{
 8003a86:	b088      	sub	sp, #32
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8003a88:	6004      	str	r4, [r0, #0]
{
 8003a8a:	4680      	mov	r8, r0
        dma_buffer_[i] = 0;
 8003a8c:	601c      	str	r4, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    started_ = false;
 8003a92:	7104      	strb	r4, [r0, #4]
    LL_GPIO_StructInit(&gpio_init);
 8003a94:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a96:	f042 0201 	orr.w	r2, r2, #1
        dma_buffer_[i] = 0;
 8003a9a:	615c      	str	r4, [r3, #20]
    LL_DAC_InitTypeDef dac_init =
 8003a9c:	4d21      	ldr	r5, [pc, #132]	; (8003b24 <recorder::Dac::Init()+0xa8>)
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003a9e:	4f22      	ldr	r7, [pc, #136]	; (8003b28 <recorder::Dac::Init()+0xac>)
        dma_buffer_[i] = 0;
 8003aa0:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8003aa4:	e9c3 4403 	strd	r4, r4, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa8:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 8003aac:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	9b01      	ldr	r3, [sp, #4]
    LL_GPIO_StructInit(&gpio_init);
 8003ab8:	f002 facc 	bl	8006054 <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_5;
 8003abc:	2220      	movs	r2, #32
 8003abe:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003ac0:	a902      	add	r1, sp, #8
 8003ac2:	481a      	ldr	r0, [pc, #104]	; (8003b2c <recorder::Dac::Init()+0xb0>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8003ac4:	9406      	str	r4, [sp, #24]
    LL_DAC_InitTypeDef dac_init =
 8003ac6:	ac02      	add	r4, sp, #8
    gpio_init.Pin = LL_GPIO_PIN_5;
 8003ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8003acc:	f002 fa3c 	bl	8005f48 <LL_GPIO_Init>
    LL_DAC_InitTypeDef dac_init =
 8003ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003ad8:	aa02      	add	r2, sp, #8
    LL_DAC_InitTypeDef dac_init =
 8003ada:	e884 0003 	stmia.w	r4, {r0, r1}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003ade:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	4912      	ldr	r1, [pc, #72]	; (8003b30 <recorder::Dac::Init()+0xb4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003ae6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aea:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 8003aee:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
 8003af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	9b00      	ldr	r3, [sp, #0]
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8003afa:	f002 f999 	bl	8005e30 <LL_DAC_Init>
  SET_BIT(DACx->CR,
 8003afe:	683b      	ldr	r3, [r7, #0]
    InitDMA();
 8003b00:	4640      	mov	r0, r8
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	603b      	str	r3, [r7, #0]
  SET_BIT(DACx->CR,
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	603b      	str	r3, [r7, #0]
}
 8003b10:	b008      	add	sp, #32
 8003b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    InitDMA();
 8003b16:	f7ff bf5b 	b.w	80039d0 <recorder::Dac::InitDMA()>
 8003b1a:	bf00      	nop
 8003b1c:	38000030 	.word	0x38000030
 8003b20:	58024400 	.word	0x58024400
 8003b24:	080088f8 	.word	0x080088f8
 8003b28:	40007400 	.word	0x40007400
 8003b2c:	58020000 	.word	0x58020000
 8003b30:	35400072 	.word	0x35400072

08003b34 <recorder::irq::Init()>:
static Vector RAMVectorTable[kNumVectors]
    __attribute__ ((aligned(kAlignment)));

void Init(void)
{
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <recorder::irq::Init()+0x4c>)
 8003b36:	689a      	ldr	r2, [r3, #8]

    for (uint32_t i = 0; i < kNumVectors; i++)
 8003b38:	0753      	lsls	r3, r2, #29
 8003b3a:	f102 0104 	add.w	r1, r2, #4
{
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	4c10      	ldr	r4, [pc, #64]	; (8003b84 <recorder::irq::Init()+0x50>)
 8003b42:	d111      	bne.n	8003b68 <recorder::irq::Init()+0x34>
 8003b44:	428c      	cmp	r4, r1
 8003b46:	d00f      	beq.n	8003b68 <recorder::irq::Init()+0x34>
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8003b48:	4623      	mov	r3, r4
 8003b4a:	f504 7e26 	add.w	lr, r4, #664	; 0x298
    {
        RAMVectorTable[i] = src[i];
 8003b4e:	eba2 0c04 	sub.w	ip, r2, r4
 8003b52:	eb03 020c 	add.w	r2, r3, ip
 8003b56:	e9d2 0100 	ldrd	r0, r1, [r2]
 8003b5a:	e8e3 0102 	strd	r0, r1, [r3], #8
    for (uint32_t i = 0; i < kNumVectors; i++)
 8003b5e:	4573      	cmp	r3, lr
 8003b60:	d1f7      	bne.n	8003b52 <recorder::irq::Init()+0x1e>
    }

    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <recorder::irq::Init()+0x4c>)
 8003b64:	609c      	str	r4, [r3, #8]
}
 8003b66:	bd10      	pop	{r4, pc}
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <recorder::irq::Init()+0x54>)
        RAMVectorTable[i] = src[i];
 8003b6a:	1b09      	subs	r1, r1, r4
 8003b6c:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8003b70:	58ca      	ldr	r2, [r1, r3]
 8003b72:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < kNumVectors; i++)
 8003b76:	4283      	cmp	r3, r0
 8003b78:	d1fa      	bne.n	8003b70 <recorder::irq::Init()+0x3c>
    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8003b7a:	4b01      	ldr	r3, [pc, #4]	; (8003b80 <recorder::irq::Init()+0x4c>)
 8003b7c:	609c      	str	r4, [r3, #8]
}
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	e000ed00 	.word	0xe000ed00
 8003b84:	20010c00 	.word	0x20010c00
 8003b88:	20010bfc 	.word	0x20010bfc

08003b8c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>:

void RegisterHandler(IRQn_Type irqn, Vector handler)
{
    assert(irqn >= NonMaskableInt_IRQn);
 8003b8c:	f110 0f0e 	cmn.w	r0, #14
{
 8003b90:	b508      	push	{r3, lr}
    assert(irqn >= NonMaskableInt_IRQn);
 8003b92:	db06      	blt.n	8003ba2 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x16>

    uint32_t exception_num = irqn + 16;
 8003b94:	3010      	adds	r0, #16
    assert(exception_num < kNumVectors);
 8003b96:	28a5      	cmp	r0, #165	; 0xa5
 8003b98:	dc09      	bgt.n	8003bae <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x22>

    RAMVectorTable[exception_num] = handler;
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x30>)
 8003b9c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8003ba0:	bd08      	pop	{r3, pc}
    assert(irqn >= NonMaskableInt_IRQn);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x34>)
 8003ba4:	211c      	movs	r1, #28
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8003ba8:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8003baa:	f003 fb11 	bl	80071d0 <__assert_func>
    assert(exception_num < kNumVectors);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x40>)
 8003bb0:	211f      	movs	r1, #31
 8003bb2:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8003bb4:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8003bb6:	f003 fb0b 	bl	80071d0 <__assert_func>
 8003bba:	bf00      	nop
 8003bbc:	20010c00 	.word	0x20010c00
 8003bc0:	08008c50 	.word	0x08008c50
 8003bc4:	08008c6c 	.word	0x08008c6c
 8003bc8:	08008cb4 	.word	0x08008cb4
 8003bcc:	08008cc4 	.word	0x08008cc4

08003bd0 <recorder::irq::Enable(IRQn_Type)>:

void Enable(IRQn_Type irqn)
{
    assert(irqn >= 0);
 8003bd0:	2800      	cmp	r0, #0
{
 8003bd2:	b508      	push	{r3, lr}
    assert(irqn >= 0);
 8003bd4:	db08      	blt.n	8003be8 <recorder::irq::Enable(IRQn_Type)+0x18>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003bd6:	f000 011f 	and.w	r1, r0, #31
 8003bda:	2301      	movs	r3, #1
 8003bdc:	0940      	lsrs	r0, r0, #5
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <recorder::irq::Enable(IRQn_Type)+0x24>)
 8003be0:	408b      	lsls	r3, r1
 8003be2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC_EnableIRQ(irqn);
}
 8003be6:	bd08      	pop	{r3, pc}
    assert(irqn >= 0);
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <recorder::irq::Enable(IRQn_Type)+0x28>)
 8003bea:	2126      	movs	r1, #38	; 0x26
 8003bec:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <recorder::irq::Enable(IRQn_Type)+0x2c>)
 8003bee:	4804      	ldr	r0, [pc, #16]	; (8003c00 <recorder::irq::Enable(IRQn_Type)+0x30>)
 8003bf0:	f003 faee 	bl	80071d0 <__assert_func>
 8003bf4:	e000e100 	.word	0xe000e100
 8003bf8:	08008ce0 	.word	0x08008ce0
 8003bfc:	08008cec 	.word	0x08008cec
 8003c00:	08008cb4 	.word	0x08008cb4

08003c04 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x54>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c10:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c12:	f1bc 0f04 	cmp.w	ip, #4
 8003c16:	bf28      	it	cs
 8003c18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1c:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c22:	bf8c      	ite	hi
 8003c24:	3b03      	subhi	r3, #3
 8003c26:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	fa02 f20c 	lsl.w	r2, r2, ip
  if ((int32_t)(IRQn) >= 0)
 8003c2c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2e:	ea21 0102 	bic.w	r1, r1, r2
 8003c32:	fa01 f103 	lsl.w	r1, r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003c36:	db06      	blt.n	8003c46 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	0109      	lsls	r1, r1, #4
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x58>)
 8003c3c:	b2c9      	uxtb	r1, r1
 8003c3e:	4403      	add	r3, r0
 8003c40:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8003c44:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c46:	f000 000f 	and.w	r0, r0, #15
 8003c4a:	0109      	lsls	r1, r1, #4
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x5c>)
 8003c4e:	b2c9      	uxtb	r1, r1
 8003c50:	4403      	add	r3, r0
 8003c52:	7619      	strb	r1, [r3, #24]
void SetPriority(IRQn_Type irqn, uint32_t priority)
{
    uint32_t group = NVIC_GetPriorityGrouping();
    priority = NVIC_EncodePriority(group, priority, 0);
    NVIC_SetPriority(irqn, priority);
}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ecfc 	.word	0xe000ecfc

08003c64 <recorder::Serial::Init(unsigned long)>:

void Serial::Init(uint32_t baud)
{
    instance_ = this;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c64:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <recorder::Serial::Init(unsigned long)+0x13c>)
    instance_ = this;
 8003c66:	4a4f      	ldr	r2, [pc, #316]	; (8003da4 <recorder::Serial::Init(unsigned long)+0x140>)
{
 8003c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    instance_ = this;
 8003c6c:	6010      	str	r0, [r2, #0]
{
 8003c6e:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    __HAL_RCC_USART1_CLK_ENABLE();

    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8003c74:	26c0      	movs	r6, #192	; 0xc0
{
 8003c76:	460d      	mov	r5, r1

    while (pins != 0)
    {
        uint32_t pin = 1 << POSITION_VAL(pins);
 8003c78:	2701      	movs	r7, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7a:	f042 0202 	orr.w	r2, r2, #2
 8003c7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c86:	f002 0202 	and.w	r2, r2, #2
 8003c8a:	9200      	str	r2, [sp, #0]
 8003c8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003c92:	f042 0210 	orr.w	r2, r2, #16
 8003c96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003ca6:	4b40      	ldr	r3, [pc, #256]	; (8003da8 <recorder::Serial::Init(unsigned long)+0x144>)
 8003ca8:	e01f      	b.n	8003cea <recorder::Serial::Init(unsigned long)+0x86>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8003cb0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8003cb4:	ea22 0204 	bic.w	r2, r2, r4
 8003cb8:	ea42 0208 	orr.w	r2, r2, r8
 8003cbc:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003cbe:	681c      	ldr	r4, [r3, #0]
 8003cc0:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8003cc4:	ea24 040c 	bic.w	r4, r4, ip
 8003cc8:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 8003ccc:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	ea22 020c 	bic.w	r2, r2, ip
 8003cd4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	ea22 020c 	bic.w	r2, r2, ip
 8003cdc:	ea42 020e 	orr.w	r2, r2, lr
 8003ce0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4011      	ands	r1, r2
 8003ce6:	6059      	str	r1, [r3, #4]
    while (pins != 0)
 8003ce8:	b33e      	cbz	r6, 8003d3a <recorder::Serial::Init(unsigned long)+0xd6>
 8003cea:	fa96 fca6 	rbit	ip, r6
        uint32_t pin = 1 << POSITION_VAL(pins);
 8003cee:	fabc fc8c 	clz	ip, ip
 8003cf2:	fa07 f40c 	lsl.w	r4, r7, ip
        CLEAR_BIT(pins, pin);
 8003cf6:	43e1      	mvns	r1, r4
 8003cf8:	ea26 0604 	bic.w	r6, r6, r4
 8003cfc:	fa94 f9a4 	rbit	r9, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d00:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d04:	0a22      	lsrs	r2, r4, #8

        // Set alternate function first to avoid spurious events
        if (POSITION_VAL(pin) < 8)
 8003d06:	fab9 f989 	clz	r9, r9
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d0a:	fa0e f80c 	lsl.w	r8, lr, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d0e:	fb02 f202 	mul.w	r2, r2, r2
 8003d12:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d16:	fa08 f80c 	lsl.w	r8, r8, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d1a:	fb02 f202 	mul.w	r2, r2, r2
 8003d1e:	ddc4      	ble.n	8003caa <recorder::Serial::Init(unsigned long)+0x46>
 8003d20:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8003d24:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003d28:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003d2c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003d30:	ea28 0409 	bic.w	r4, r8, r9
 8003d34:	4322      	orrs	r2, r4
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8003d38:	e7c1      	b.n	8003cbe <recorder::Serial::Init(unsigned long)+0x5a>
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    LL_USART_Init(USART1, &uart_init);
 8003d3a:	4c1c      	ldr	r4, [pc, #112]	; (8003dac <recorder::Serial::Init(unsigned long)+0x148>)
    LL_USART_InitTypeDef uart_init =
 8003d3c:	2220      	movs	r2, #32
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 8003d3e:	6006      	str	r6, [r0, #0]
 8003d40:	4631      	mov	r1, r6
 8003d42:	6046      	str	r6, [r0, #4]
 8003d44:	6486      	str	r6, [r0, #72]	; 0x48
 8003d46:	64c6      	str	r6, [r0, #76]	; 0x4c
 8003d48:	a802      	add	r0, sp, #8
 8003d4a:	f003 fca8 	bl	800769e <memset>
 8003d4e:	230c      	movs	r3, #12
    LL_USART_Init(USART1, &uart_init);
 8003d50:	a902      	add	r1, sp, #8
 8003d52:	4620      	mov	r0, r4
    LL_USART_InitTypeDef uart_init =
 8003d54:	9307      	str	r3, [sp, #28]
    };
 8003d56:	9503      	str	r5, [sp, #12]
    LL_USART_Init(USART1, &uart_init);
 8003d58:	f002 fd58 	bl	800680c <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8003d5c:	68a3      	ldr	r3, [r4, #8]

    LL_USART_RequestRxDataFlush(USART1);
    LL_USART_EnableIT_RXNE(USART1);
    LL_USART_DisableIT_TXE(USART1);

    irq::RegisterHandler(USART1_IRQn, InterruptHandler);
 8003d5e:	2025      	movs	r0, #37	; 0x25
 8003d60:	4913      	ldr	r1, [pc, #76]	; (8003db0 <recorder::Serial::Init(unsigned long)+0x14c>)
 8003d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d66:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8003d70:	69a3      	ldr	r3, [r4, #24]
 8003d72:	f043 0308 	orr.w	r3, r3, #8
 8003d76:	61a3      	str	r3, [r4, #24]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	f043 0320 	orr.w	r3, r3, #32
 8003d7e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	f7ff ff00 	bl	8003b8c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(USART1_IRQn, kSerialIRQPriority);
 8003d8c:	210b      	movs	r1, #11
 8003d8e:	2025      	movs	r0, #37	; 0x25
 8003d90:	f7ff ff38 	bl	8003c04 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(USART1_IRQn);
 8003d94:	2025      	movs	r0, #37	; 0x25
 8003d96:	f7ff ff1b 	bl	8003bd0 <recorder::irq::Enable(IRQn_Type)>
}
 8003d9a:	b00b      	add	sp, #44	; 0x2c
 8003d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003da0:	58024400 	.word	0x58024400
 8003da4:	20010e98 	.word	0x20010e98
 8003da8:	58020400 	.word	0x58020400
 8003dac:	40011000 	.word	0x40011000
 8003db0:	08003f11 	.word	0x08003f11

08003db4 <recorder::Serial::BytesAvailable()>:
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8003db4:	6803      	ldr	r3, [r0, #0]
 8003db6:	6840      	ldr	r0, [r0, #4]
 8003db8:	f3bf 8f5b 	dmb	ish

uint32_t Serial::BytesAvailable(void)
{
    return rx_fifo_.available();
}
 8003dbc:	1ac0      	subs	r0, r0, r3
 8003dbe:	4770      	bx	lr

08003dc0 <recorder::Serial::GetByteBlocking()>:

uint8_t Serial::GetByteBlocking(void)
{
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	3004      	adds	r0, #4
 8003dc4:	6813      	ldr	r3, [r2, #0]
 8003dc6:	6801      	ldr	r1, [r0, #0]
 8003dc8:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	d0f9      	beq.n	8003dc4 <recorder::Serial::GetByteBlocking()+0x4>
        {
            return false;
        }

        item = data_[head % size];
 8003dd0:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        head_.store(head + 1, std::memory_order_release);
 8003dd4:	3301      	adds	r3, #1
        item = data_[head % size];
 8003dd6:	4411      	add	r1, r2
 8003dd8:	7a08      	ldrb	r0, [r1, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8003dda:	f3bf 8f5b 	dmb	ish
 8003dde:	6013      	str	r3, [r2, #0]
    uint8_t byte = 0;
    while (!rx_fifo_.Pop(byte));
    return byte;
}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop

08003de4 <recorder::Serial::Write(unsigned char, bool)>:

uint32_t Serial::Write(uint8_t byte, bool blocking)
{
 8003de4:	4684      	mov	ip, r0

uint32_t Serial::Write(const uint8_t* buffer, uint32_t length, bool blocking)
{
    uint32_t i = 0;

    while (i < length && (!tx_fifo_.full() || blocking))
 8003de6:	3048      	adds	r0, #72	; 0x48
{
 8003de8:	b510      	push	{r4, lr}
	return __atomic_load_n(&_M_i, int(__m));
 8003dea:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
 8003dee:	f10c 0e4c 	add.w	lr, ip, #76	; 0x4c
 8003df2:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8003df6:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8003dfa:	1b1b      	subs	r3, r3, r4
    while (i < length && (!tx_fifo_.full() || blocking))
 8003dfc:	2bff      	cmp	r3, #255	; 0xff
 8003dfe:	d900      	bls.n	8003e02 <recorder::Serial::Write(unsigned char, bool)+0x1e>
 8003e00:	b1ba      	cbz	r2, 8003e32 <recorder::Serial::Write(unsigned char, bool)+0x4e>
 8003e02:	f8de 3000 	ldr.w	r3, [lr]
 8003e06:	6802      	ldr	r2, [r0, #0]
 8003e08:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8003e0c:	1a9a      	subs	r2, r3, r2
 8003e0e:	2aff      	cmp	r2, #255	; 0xff
 8003e10:	d8f7      	bhi.n	8003e02 <recorder::Serial::Write(unsigned char, bool)+0x1e>
            data_[(tail + i) % size] = buffer[i];
 8003e12:	fa5c f283 	uxtab	r2, ip, r3
 8003e16:	2001      	movs	r0, #1
        tail_.store(tail + length, std::memory_order_release);
 8003e18:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8003e1a:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
	__atomic_store_n(&_M_i, __i, int(__m));
 8003e1e:	f3bf 8f5b 	dmb	ish
 8003e22:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e26:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <recorder::Serial::Write(unsigned char, bool)+0x54>)
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	4610      	mov	r0, r2
 8003e34:	e7f7      	b.n	8003e26 <recorder::Serial::Write(unsigned char, bool)+0x42>
 8003e36:	bf00      	nop
 8003e38:	40011000 	.word	0x40011000

08003e3c <recorder::Serial::FlushTx(bool)>:
    return i;
}

void Serial::FlushTx(bool discard)
{
    if (discard)
 8003e3c:	b989      	cbnz	r1, 8003e62 <recorder::Serial::FlushTx(bool)+0x26>
 8003e3e:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8003e42:	304c      	adds	r0, #76	; 0x4c
	return __atomic_load_n(&_M_i, int(__m));
 8003e44:	680a      	ldr	r2, [r1, #0]
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	f3bf 8f5b 	dmb	ish
        LL_USART_DisableIT_TXE(USART1);
        tx_fifo_.Init();
    }
    else
    {
        while (tx_fifo_.available());
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1f9      	bne.n	8003e44 <recorder::Serial::FlushTx(bool)+0x8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <recorder::Serial::FlushTx(bool)+0x38>)
 8003e52:	69d3      	ldr	r3, [r2, #28]
 8003e54:	0619      	lsls	r1, r3, #24
 8003e56:	d5fc      	bpl.n	8003e52 <recorder::Serial::FlushTx(bool)+0x16>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <recorder::Serial::FlushTx(bool)+0x38>)
 8003e5a:	69d3      	ldr	r3, [r2, #28]
 8003e5c:	065b      	lsls	r3, r3, #25
 8003e5e:	d5fc      	bpl.n	8003e5a <recorder::Serial::FlushTx(bool)+0x1e>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
}
 8003e60:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e62:	4904      	ldr	r1, [pc, #16]	; (8003e74 <recorder::Serial::FlushTx(bool)+0x38>)
	__atomic_store_n(&_M_i, __i, int(__m));
 8003e64:	2200      	movs	r2, #0
 8003e66:	680b      	ldr	r3, [r1, #0]
 8003e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6c:	600b      	str	r3, [r1, #0]
 8003e6e:	6482      	str	r2, [r0, #72]	; 0x48
 8003e70:	64c2      	str	r2, [r0, #76]	; 0x4c
    }
 8003e72:	4770      	bx	lr
 8003e74:	40011000 	.word	0x40011000

08003e78 <recorder::Serial::InterruptService()>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <recorder::Serial::InterruptService()+0x94>)
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	0692      	lsls	r2, r2, #26
 8003e7e:	d516      	bpl.n	8003eae <recorder::Serial::InterruptService()+0x36>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8003e80:	6a59      	ldr	r1, [r3, #36]	; 0x24
	return __atomic_load_n(&_M_i, int(__m));
 8003e82:	6843      	ldr	r3, [r0, #4]
 8003e84:	6802      	ldr	r2, [r0, #0]
 8003e86:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8003e8a:	1a9b      	subs	r3, r3, r2
    if (LL_USART_IsActiveFlag_RXNE(USART1))
    {
        ScopedProfilingPin<PROFILE_SERIAL_RX> profile;
        uint8_t byte = LL_USART_ReceiveData8(USART1);

        if (rx_fifo_.full())
 8003e8c:	2b3f      	cmp	r3, #63	; 0x3f
 8003e8e:	d82c      	bhi.n	8003eea <recorder::Serial::InterruptService()+0x72>
 8003e90:	6843      	ldr	r3, [r0, #4]
 8003e92:	6802      	ldr	r2, [r0, #0]
 8003e94:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8003e98:	1a9a      	subs	r2, r3, r2
 8003e9a:	2a3f      	cmp	r2, #63	; 0x3f
 8003e9c:	d807      	bhi.n	8003eae <recorder::Serial::InterruptService()+0x36>
            data_[(tail + i) % size] = buffer[i];
 8003e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        tail_.store(tail + length, std::memory_order_release);
 8003ea2:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8003ea4:	4402      	add	r2, r0
 8003ea6:	7211      	strb	r1, [r2, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8003ea8:	f3bf 8f5b 	dmb	ish
 8003eac:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <recorder::Serial::InterruptService()+0x94>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	0611      	lsls	r1, r2, #24
 8003eb4:	d518      	bpl.n	8003ee8 <recorder::Serial::InterruptService()+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	0612      	lsls	r2, r2, #24
 8003eba:	d515      	bpl.n	8003ee8 <recorder::Serial::InterruptService()+0x70>
	return __atomic_load_n(&_M_i, int(__m));
 8003ebc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003ebe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003ec0:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003ec4:	428a      	cmp	r2, r1
 8003ec6:	d01b      	beq.n	8003f00 <recorder::Serial::InterruptService()+0x88>
        item = data_[head % size];
 8003ec8:	fa50 f282 	uxtab	r2, r0, r2
  USARTx->TDR = Value;
 8003ecc:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003ed4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003ed6:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <recorder::Serial::InterruptService()+0x70>
        head_.store(head + 1, std::memory_order_release);
 8003ede:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003ee0:	f3bf 8f5b 	dmb	ish
 8003ee4:	6483      	str	r3, [r0, #72]	; 0x48
        else
        {
            LL_USART_DisableIT_TXE(USART1);
        }
    }
}
 8003ee6:	4770      	bx	lr
 8003ee8:	4770      	bx	lr
	return __atomic_load_n(&_M_i, int(__m));
 8003eea:	6803      	ldr	r3, [r0, #0]
 8003eec:	6842      	ldr	r2, [r0, #4]
 8003eee:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d0cc      	beq.n	8003e90 <recorder::Serial::InterruptService()+0x18>
        head_.store(head + 1, std::memory_order_release);
 8003ef6:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003ef8:	f3bf 8f5b 	dmb	ish
 8003efc:	6003      	str	r3, [r0, #0]
        return true;
 8003efe:	e7c7      	b.n	8003e90 <recorder::Serial::InterruptService()+0x18>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40011000 	.word	0x40011000

08003f10 <recorder::Serial::InterruptHandler()>:

void Serial::InterruptHandler(void)
{
    ScopedProfilingPin<PROFILE_SERIAL_IRQ> profile;
    instance_->InterruptService();
 8003f10:	4b01      	ldr	r3, [pc, #4]	; (8003f18 <recorder::Serial::InterruptHandler()+0x8>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	f7ff bfb0 	b.w	8003e78 <recorder::Serial::InterruptService()>
 8003f18:	20010e98 	.word	0x20010e98

08003f1c <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003f1c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f20:	4905      	ldr	r1, [pc, #20]	; (8003f38 <NVIC_SystemReset+0x1c>)
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <NVIC_SystemReset+0x20>)
 8003f24:	68ca      	ldr	r2, [r1, #12]
 8003f26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f2a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f2c:	60cb      	str	r3, [r1, #12]
 8003f2e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f32:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003f34:	e7fd      	b.n	8003f32 <NVIC_SystemReset+0x16>
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00
 8003f3c:	05fa0004 	.word	0x05fa0004

08003f40 <TickHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <TickHandler+0x14>)
 8003f42:	f06f 0101 	mvn.w	r1, #1
	return __atomic_load_n(&_M_i, int(__m));
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <TickHandler+0x18>)
 8003f48:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	6813      	ldr	r3, [r2, #0]
{
    ScopedProfilingPin<PROFILE_TICK> profile;
    LL_TIM_ClearFlag_UPDATE(TIM7);
    LL_TIM_IsActiveFlag_UPDATE(TIM7);
    uint32_t ticks = ticks_.load(std::memory_order_relaxed);
    ticks_.store(ticks + 1, std::memory_order_relaxed);
 8003f4e:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	4770      	bx	lr
 8003f54:	40001400 	.word	0x40001400
 8003f58:	20010ea0 	.word	0x20010ea0

08003f5c <recorder::system::ConfigureClocks()>:
{
 8003f5c:	b510      	push	{r4, lr}
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f5e:	2002      	movs	r0, #2
{
 8003f60:	b0cc      	sub	sp, #304	; 0x130
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f62:	f000 fc79 	bl	8004858 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(power_scaling);
 8003f66:	4b30      	ldr	r3, [pc, #192]	; (8004028 <recorder::system::ConfigureClocks()+0xcc>)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4a30      	ldr	r2, [pc, #192]	; (800402c <recorder::system::ConfigureClocks()+0xd0>)
 8003f6c:	9101      	str	r1, [sp, #4]
 8003f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f70:	f021 0101 	bic.w	r1, r1, #1
 8003f74:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	6993      	ldr	r3, [r2, #24]
 8003f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6193      	str	r3, [r2, #24]
 8003f8a:	6993      	ldr	r3, [r2, #24]
 8003f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	9b01      	ldr	r3, [sp, #4]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY));
 8003f94:	6993      	ldr	r3, [r2, #24]
 8003f96:	049b      	lsls	r3, r3, #18
 8003f98:	d5fc      	bpl.n	8003f94 <recorder::system::ConfigureClocks()+0x38>
    RCC_OscInitTypeDef osc_init = {};
 8003f9a:	2248      	movs	r2, #72	; 0x48
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	a80b      	add	r0, sp, #44	; 0x2c
 8003fa0:	f003 fb7d 	bl	800769e <memset>
    osc_init.HSIState = RCC_HSI_DIV1;
 8003fa4:	2301      	movs	r3, #1
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fa6:	2202      	movs	r2, #2
    osc_init.HSIState = RCC_HSI_DIV1;
 8003fa8:	930d      	str	r3, [sp, #52]	; 0x34
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003faa:	920a      	str	r2, [sp, #40]	; 0x28
    if (HAL_GetREVID() <= REV_ID_Y)
 8003fac:	f000 fc28 	bl	8004800 <HAL_GetREVID>
 8003fb0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fb4:	4298      	cmp	r0, r3
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <recorder::system::ConfigureClocks()+0xd4>)
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003fb8:	a80a      	add	r0, sp, #40	; 0x28
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8003fba:	685b      	ldr	r3, [r3, #4]
                >> HAL_RCC_REV_Y_HSITRIM_Pos;
 8003fbc:	bf94      	ite	ls
 8003fbe:	f3c3 3305 	ubfxls	r3, r3, #12, #6
                >> RCC_HSICFGR_HSITRIM_Pos;
 8003fc2:	f3c3 6306 	ubfxhi	r3, r3, #24, #7
 8003fc6:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003fc8:	f000 fc6c 	bl	80048a4 <HAL_RCC_OscConfig>
 8003fcc:	b100      	cbz	r0, 8003fd0 <recorder::system::ConfigureClocks()+0x74>
        while (1);
 8003fce:	e7fe      	b.n	8003fce <recorder::system::ConfigureClocks()+0x72>
    clk_init.ClockType =
 8003fd0:	233f      	movs	r3, #63	; 0x3f
    RCC_ClkInitTypeDef clk_init = {};
 8003fd2:	9009      	str	r0, [sp, #36]	; 0x24
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8003fd4:	2101      	movs	r1, #1
    clk_init.ClockType =
 8003fd6:	9302      	str	r3, [sp, #8]
    RCC_ClkInitTypeDef clk_init = {};
 8003fd8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003fdc:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8003fe0:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8003fe4:	a802      	add	r0, sp, #8
 8003fe6:	f000 ff8b 	bl	8004f00 <HAL_RCC_ClockConfig>
 8003fea:	b100      	cbz	r0, 8003fee <recorder::system::ConfigureClocks()+0x92>
        while (1);
 8003fec:	e7fe      	b.n	8003fec <recorder::system::ConfigureClocks()+0x90>
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8003fee:	4601      	mov	r1, r0
 8003ff0:	22b8      	movs	r2, #184	; 0xb8
 8003ff2:	a81e      	add	r0, sp, #120	; 0x78
    periph_clk_init.PLL3 =
 8003ff4:	4c0f      	ldr	r4, [pc, #60]	; (8004034 <recorder::system::ConfigureClocks()+0xd8>)
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8003ff6:	f003 fb52 	bl	800769e <memset>
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8003ffa:	490f      	ldr	r1, [pc, #60]	; (8004038 <recorder::system::ConfigureClocks()+0xdc>)
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8003ffc:	2210      	movs	r2, #16
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8003ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    periph_clk_init.PLL3 =
 8004002:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8004006:	911d      	str	r1, [sp, #116]	; 0x74
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8004008:	923b      	str	r2, [sp, #236]	; 0xec
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800400a:	9345      	str	r3, [sp, #276]	; 0x114
    periph_clk_init.PLL3 =
 800400c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004012:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004016:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HAL_RCCEx_PeriphCLKConfig(&periph_clk_init) != HAL_OK)
 800401a:	a81d      	add	r0, sp, #116	; 0x74
 800401c:	f001 f97e 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 8004020:	b908      	cbnz	r0, 8004026 <recorder::system::ConfigureClocks()+0xca>
}
 8004022:	b04c      	add	sp, #304	; 0x130
 8004024:	bd10      	pop	{r4, pc}
        while (1);
 8004026:	e7fe      	b.n	8004026 <recorder::system::ConfigureClocks()+0xca>
 8004028:	58000400 	.word	0x58000400
 800402c:	58024800 	.word	0x58024800
 8004030:	58024400 	.word	0x58024400
 8004034:	08008910 	.word	0x08008910
 8004038:	02080001 	.word	0x02080001

0800403c <HAL_InitTick>:
HAL_StatusTypeDef HAL_InitTick(uint32_t)
{
    // This is called from HAL_RCC_ClockConfig() but we don't want to use
    // SysTick, so override it and do nothing.
    return HAL_OK;
}
 800403c:	2000      	movs	r0, #0
 800403e:	4770      	bx	lr

08004040 <recorder::system::ReloadWatchdog()>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8004040:	4b02      	ldr	r3, [pc, #8]	; (800404c <recorder::system::ReloadWatchdog()+0xc>)
 8004042:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004046:	601a      	str	r2, [r3, #0]

void ReloadWatchdog(void)
{
    ScopedProfilingPin<PROFILE_WATCHDOG> profile;
    LL_IWDG_ReloadCounter(IWDG1);
}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	58004800 	.word	0x58004800

08004050 <recorder::system::Init()>:

void Init(void)
{
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	b08c      	sub	sp, #48	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8004054:	b672      	cpsid	i
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8004056:	4cb6      	ldr	r4, [pc, #728]	; (8004330 <recorder::system::Init()+0x2e0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004058:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800405c:	4bb5      	ldr	r3, [pc, #724]	; (8004334 <recorder::system::Init()+0x2e4>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800405e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  reg_value  =  (reg_value                                   |
 8004062:	4ab5      	ldr	r2, [pc, #724]	; (8004338 <recorder::system::Init()+0x2e8>)
 8004064:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    __disable_irq();

    InitFPU();

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    SystemCoreClock = kSystemClock;
 8004068:	4db4      	ldr	r5, [pc, #720]	; (800433c <recorder::system::Init()+0x2ec>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800406a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800406e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004070:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 8004074:	6359      	str	r1, [r3, #52]	; 0x34
    FPU->FPDSCR |= FPU_FPDSCR_FZ_Msk;
 8004076:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004078:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800407c:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR |= FPU_FPDSCR_AHP_Msk;
 800407e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004080:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8004084:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR &= ~FPU_FPDSCR_RMode_Msk;
 8004086:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004088:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800408c:	63d9      	str	r1, [r3, #60]	; 0x3c
    FPU->FPDSCR |= (2 << FPU_FPDSCR_RMode_Pos);
 800408e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004090:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004094:	63d9      	str	r1, [r3, #60]	; 0x3c
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004096:	68e3      	ldr	r3, [r4, #12]
    SystemCoreClock = kSystemClock;
 8004098:	49a9      	ldr	r1, [pc, #676]	; (8004340 <recorder::system::Init()+0x2f0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409a:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 800409c:	431a      	orrs	r2, r3
    SystemD2Clock = kSystemClock;
 800409e:	4ba9      	ldr	r3, [pc, #676]	; (8004344 <recorder::system::Init()+0x2f4>)
  SCB->AIRCR =  reg_value;
 80040a0:	60e2      	str	r2, [r4, #12]
    SystemCoreClock = kSystemClock;
 80040a2:	6029      	str	r1, [r5, #0]
    SystemD2Clock = kSystemClock;
 80040a4:	6019      	str	r1, [r3, #0]

    ConfigureClocks();
 80040a6:	f7ff ff59 	bl	8003f5c <recorder::system::ConfigureClocks()>
  __ASM volatile ("dsb 0xF":::"memory");
 80040aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040ae:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80040b2:	2600      	movs	r6, #0
 80040b4:	f8c4 6250 	str.w	r6, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80040b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80040c0:	6963      	ldr	r3, [r4, #20]
 80040c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80040c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	4c9d      	ldr	r4, [pc, #628]	; (8004348 <recorder::system::Init()+0x2f8>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80040d2:	4b9e      	ldr	r3, [pc, #632]	; (800434c <recorder::system::Init()+0x2fc>)
 80040d4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80040d8:	4a9d      	ldr	r2, [pc, #628]	; (8004350 <recorder::system::Init()+0x300>)
 80040da:	f041 0102 	orr.w	r1, r1, #2
    LL_TIM_Init(TIM7, &timer_init);
 80040de:	4d9d      	ldr	r5, [pc, #628]	; (8004354 <recorder::system::Init()+0x304>)
 80040e0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 80040e4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80040e8:	f001 0102 	and.w	r1, r1, #2
 80040ec:	9106      	str	r1, [sp, #24]
 80040ee:	9906      	ldr	r1, [sp, #24]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80040f6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80040fa:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004102:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800410a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004112:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004116:	6019      	str	r1, [r3, #0]
 8004118:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800411c:	f041 0102 	orr.w	r1, r1, #2
 8004120:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8004124:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004128:	f001 0102 	and.w	r1, r1, #2
 800412c:	9105      	str	r1, [sp, #20]
 800412e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8004136:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800413a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800413c:	68d9      	ldr	r1, [r3, #12]
 800413e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8004142:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800414a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8004152:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004156:	6019      	str	r1, [r3, #0]
 8004158:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800415c:	f041 0102 	orr.w	r1, r1, #2
 8004160:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8004164:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8004168:	f001 0102 	and.w	r1, r1, #2
 800416c:	9104      	str	r1, [sp, #16]
 800416e:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8004176:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800417a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800417c:	68d9      	ldr	r1, [r3, #12]
 800417e:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8004182:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800418a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8004192:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004196:	6019      	str	r1, [r3, #0]
 8004198:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800419c:	f041 0102 	orr.w	r1, r1, #2
 80041a0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 80041a4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80041a8:	f001 0102 	and.w	r1, r1, #2
 80041ac:	9103      	str	r1, [sp, #12]
 80041ae:	9903      	ldr	r1, [sp, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80041b0:	6899      	ldr	r1, [r3, #8]
 80041b2:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80041b6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80041ba:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80041bc:	68d9      	ldr	r1, [r3, #12]
 80041be:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80041c2:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80041ca:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80041d2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80041d6:	6019      	str	r1, [r3, #0]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 80041d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80041dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80041e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	9b02      	ldr	r3, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80041f0:	6893      	ldr	r3, [r2, #8]
 80041f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80041fc:	68d3      	ldr	r3, [r2, #12]
 80041fe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004202:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004204:	6853      	ldr	r3, [r2, #4]
 8004206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800420c:	6813      	ldr	r3, [r2, #0]
 800420e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	6013      	str	r3, [r2, #0]
    // Leave DCache disabled or else DMA won't work
    SCB_EnableICache();

    profiling::Init();
    ScopedProfilingPin<PROFILE_SYSTEM_INIT> profile;
    irq::Init();
 8004218:	f7ff fc8c 	bl	8003b34 <recorder::irq::Init()>
    serial_.Init(115200);
 800421c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004220:	484d      	ldr	r0, [pc, #308]	; (8004358 <recorder::system::Init()+0x308>)
 8004222:	f7ff fd1f 	bl	8003c64 <recorder::Serial::Init(unsigned long)>
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <recorder::system::Init()+0x30c>)
    LL_TIM_Init(TIM7, &timer_init);
 8004228:	a907      	add	r1, sp, #28
 800422a:	4628      	mov	r0, r5
 800422c:	601e      	str	r6, [r3, #0]
    LL_TIM_InitTypeDef timer_init =
 800422e:	2310      	movs	r3, #16
 8004230:	9607      	str	r6, [sp, #28]
 8004232:	9308      	str	r3, [sp, #32]
    };
 8004234:	f641 03ff 	movw	r3, #6399	; 0x18ff
    LL_TIM_InitTypeDef timer_init =
 8004238:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    };
 800423c:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_TIM7_CLK_ENABLE();
 800423e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004242:	f043 0320 	orr.w	r3, r3, #32
 8004246:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800424a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM7, &timer_init);
 8004256:	f002 fa55 	bl	8006704 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800425a:	68eb      	ldr	r3, [r5, #12]
    irq::RegisterHandler(TIM7_IRQn, TickHandler);
 800425c:	2037      	movs	r0, #55	; 0x37
 800425e:	4940      	ldr	r1, [pc, #256]	; (8004360 <recorder::system::Init()+0x310>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	f7ff fc8d 	bl	8003b8c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(TIM7_IRQn, kTickIRQPriority);
 8004272:	210a      	movs	r1, #10
 8004274:	2037      	movs	r0, #55	; 0x37
 8004276:	f7ff fcc5 	bl	8003c04 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(TIM7_IRQn);
 800427a:	2037      	movs	r0, #55	; 0x37
 800427c:	f7ff fca8 	bl	8003bd0 <recorder::irq::Enable(IRQn_Type)>
    if ((FLASH->OPTSR_CUR & mask) != value)
 8004280:	4a38      	ldr	r2, [pc, #224]	; (8004364 <recorder::system::Init()+0x314>)
 8004282:	4b39      	ldr	r3, [pc, #228]	; (8004368 <recorder::system::Init()+0x318>)
 8004284:	69d1      	ldr	r1, [r2, #28]
 8004286:	400b      	ands	r3, r1
 8004288:	2b10      	cmp	r3, #16
 800428a:	d010      	beq.n	80042ae <recorder::system::Init()+0x25e>
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800428c:	4937      	ldr	r1, [pc, #220]	; (800436c <recorder::system::Init()+0x31c>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800428e:	4838      	ldr	r0, [pc, #224]	; (8004370 <recorder::system::Init()+0x320>)
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 8004290:	4b38      	ldr	r3, [pc, #224]	; (8004374 <recorder::system::Init()+0x324>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8004292:	6090      	str	r0, [r2, #8]
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8004294:	6091      	str	r1, [r2, #8]
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 8004296:	6a11      	ldr	r1, [r2, #32]
 8004298:	400b      	ands	r3, r1
 800429a:	f043 0310 	orr.w	r3, r3, #16
 800429e:	6213      	str	r3, [r2, #32]
        FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80042a0:	6993      	ldr	r3, [r2, #24]
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	6193      	str	r3, [r2, #24]
        while (FLASH->OPTSR_CUR & FLASH_OPTSR_OPT_BUSY);
 80042a8:	69d3      	ldr	r3, [r2, #28]
 80042aa:	07d8      	lsls	r0, r3, #31
 80042ac:	d4fc      	bmi.n	80042a8 <recorder::system::Init()+0x258>
    __HAL_DBGMCU_FREEZE_IWDG1();
 80042ae:	4932      	ldr	r1, [pc, #200]	; (8004378 <recorder::system::Init()+0x328>)
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80042b0:	f64c 44cc 	movw	r4, #52428	; 0xcccc
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <recorder::system::Init()+0x32c>)
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80042b6:	f245 5055 	movw	r0, #21845	; 0x5555
 80042ba:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042c0:	654a      	str	r2, [r1, #84]	; 0x54
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80042c2:	2103      	movs	r1, #3
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80042c4:	2264      	movs	r2, #100	; 0x64
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80042c6:	601c      	str	r4, [r3, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80042c8:	6018      	str	r0, [r3, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80042ca:	6059      	str	r1, [r3, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80042cc:	609a      	str	r2, [r3, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	0751      	lsls	r1, r2, #29
 80042d2:	d1fc      	bne.n	80042ce <recorder::system::Init()+0x27e>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80042d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80042d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042da:	b662      	cpsie	i
    InitTimer(kSystemClock / 10000);

    InitWatchdog(100);
    __enable_irq();

    uint32_t reset_flags = RCC->RSR;
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <recorder::system::Init()+0x2f8>)
    LL_RCC_ClearResetFlags();
    printf("Reset source was ");
 80042de:	4828      	ldr	r0, [pc, #160]	; (8004380 <recorder::system::Init()+0x330>)
    uint32_t reset_flags = RCC->RSR;
 80042e0:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80042e4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80042e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    printf("Reset source was ");
 80042f0:	f003 fd60 	bl	8007db4 <iprintf>

    switch (reset_flags >> 16)
 80042f4:	0c23      	lsrs	r3, r4, #16
 80042f6:	2bfe      	cmp	r3, #254	; 0xfe
 80042f8:	f000 808b 	beq.w	8004412 <recorder::system::Init()+0x3c2>
 80042fc:	d94e      	bls.n	800439c <recorder::system::Init()+0x34c>
 80042fe:	f241 0246 	movw	r2, #4166	; 0x1046
 8004302:	4293      	cmp	r3, r2
 8004304:	d070      	beq.n	80043e8 <recorder::system::Init()+0x398>
 8004306:	d952      	bls.n	80043ae <recorder::system::Init()+0x35e>
 8004308:	f244 0246 	movw	r2, #16454	; 0x4046
 800430c:	4293      	cmp	r3, r2
 800430e:	d17b      	bne.n	8004408 <recorder::system::Init()+0x3b8>
        case 0x0146: printf("SFT\n");   break;
        case 0x0006: printf("CPU\n");   break;
        case 0x1046: printf("WWDG1\n"); break;
        case 0x0446: printf("IWDG1\n"); break;
        case 0x001E: printf("WAKE\n");  break;
        case 0x4046: printf("LPWR\n");  break;
 8004310:	481c      	ldr	r0, [pc, #112]	; (8004384 <recorder::system::Init()+0x334>)
 8004312:	f003 fdd5 	bl	8007ec0 <puts>
        default: printf("unknown: 0x%08lX\n", reset_flags);
    }

    wakeup_flags_ = PWR->WKUPFR;
 8004316:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <recorder::system::Init()+0x338>)
 8004318:	4c1c      	ldr	r4, [pc, #112]	; (800438c <recorder::system::Init()+0x33c>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 800431c:	07da      	lsls	r2, r3, #31
    wakeup_flags_ = PWR->WKUPFR;
 800431e:	6023      	str	r3, [r4, #0]
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 8004320:	d458      	bmi.n	80043d4 <recorder::system::Init()+0x384>
    {
        printf("Wakeup event was record button\n");
    }

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 8004322:	079b      	lsls	r3, r3, #30
 8004324:	d45c      	bmi.n	80043e0 <recorder::system::Init()+0x390>
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <recorder::system::Init()+0x2f8>)
 8004328:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
 800432c:	e030      	b.n	8004390 <recorder::system::Init()+0x340>
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	e000ef00 	.word	0xe000ef00
 8004338:	05fa0300 	.word	0x05fa0300
 800433c:	20000000 	.word	0x20000000
 8004340:	03d09000 	.word	0x03d09000
 8004344:	20000004 	.word	0x20000004
 8004348:	58024400 	.word	0x58024400
 800434c:	58020400 	.word	0x58020400
 8004350:	58021800 	.word	0x58021800
 8004354:	40001400 	.word	0x40001400
 8004358:	20010ea4 	.word	0x20010ea4
 800435c:	20010ea0 	.word	0x20010ea0
 8004360:	08003f41 	.word	0x08003f41
 8004364:	52002000 	.word	0x52002000
 8004368:	00060010 	.word	0x00060010
 800436c:	4c5d6e7f 	.word	0x4c5d6e7f
 8004370:	08192a3b 	.word	0x08192a3b
 8004374:	fff9ffef 	.word	0xfff9ffef
 8004378:	5c001000 	.word	0x5c001000
 800437c:	58004800 	.word	0x58004800
 8004380:	08008d14 	.word	0x08008d14
 8004384:	08008d58 	.word	0x08008d58
 8004388:	58024800 	.word	0x58024800
 800438c:	20010e9c 	.word	0x20010e9c
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    {
        printf("Wakeup event was play button\n");
    }

    LL_RCC_ClearResetFlags();
}
 8004398:	b00c      	add	sp, #48	; 0x30
 800439a:	bd70      	pop	{r4, r5, r6, pc}
    switch (reset_flags >> 16)
 800439c:	2b46      	cmp	r3, #70	; 0x46
 800439e:	d02f      	beq.n	8004400 <recorder::system::Init()+0x3b0>
 80043a0:	d910      	bls.n	80043c4 <recorder::system::Init()+0x374>
 80043a2:	2b66      	cmp	r3, #102	; 0x66
 80043a4:	d130      	bne.n	8004408 <recorder::system::Init()+0x3b8>
        case 0x0066: printf("BOR\n");   break;
 80043a6:	481d      	ldr	r0, [pc, #116]	; (800441c <recorder::system::Init()+0x3cc>)
 80043a8:	f003 fd8a 	bl	8007ec0 <puts>
 80043ac:	e7b3      	b.n	8004316 <recorder::system::Init()+0x2c6>
    switch (reset_flags >> 16)
 80043ae:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 80043b2:	d01d      	beq.n	80043f0 <recorder::system::Init()+0x3a0>
 80043b4:	f240 4246 	movw	r2, #1094	; 0x446
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d125      	bne.n	8004408 <recorder::system::Init()+0x3b8>
        case 0x0446: printf("IWDG1\n"); break;
 80043bc:	4818      	ldr	r0, [pc, #96]	; (8004420 <recorder::system::Init()+0x3d0>)
 80043be:	f003 fd7f 	bl	8007ec0 <puts>
 80043c2:	e7a8      	b.n	8004316 <recorder::system::Init()+0x2c6>
    switch (reset_flags >> 16)
 80043c4:	2b06      	cmp	r3, #6
 80043c6:	d017      	beq.n	80043f8 <recorder::system::Init()+0x3a8>
 80043c8:	2b1e      	cmp	r3, #30
 80043ca:	d11d      	bne.n	8004408 <recorder::system::Init()+0x3b8>
        case 0x001E: printf("WAKE\n");  break;
 80043cc:	4815      	ldr	r0, [pc, #84]	; (8004424 <recorder::system::Init()+0x3d4>)
 80043ce:	f003 fd77 	bl	8007ec0 <puts>
 80043d2:	e7a0      	b.n	8004316 <recorder::system::Init()+0x2c6>
        printf("Wakeup event was record button\n");
 80043d4:	4814      	ldr	r0, [pc, #80]	; (8004428 <recorder::system::Init()+0x3d8>)
 80043d6:	f003 fd73 	bl	8007ec0 <puts>
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	079b      	lsls	r3, r3, #30
 80043de:	d5a2      	bpl.n	8004326 <recorder::system::Init()+0x2d6>
        printf("Wakeup event was play button\n");
 80043e0:	4812      	ldr	r0, [pc, #72]	; (800442c <recorder::system::Init()+0x3dc>)
 80043e2:	f003 fd6d 	bl	8007ec0 <puts>
 80043e6:	e79e      	b.n	8004326 <recorder::system::Init()+0x2d6>
        case 0x1046: printf("WWDG1\n"); break;
 80043e8:	4811      	ldr	r0, [pc, #68]	; (8004430 <recorder::system::Init()+0x3e0>)
 80043ea:	f003 fd69 	bl	8007ec0 <puts>
 80043ee:	e792      	b.n	8004316 <recorder::system::Init()+0x2c6>
        case 0x0146: printf("SFT\n");   break;
 80043f0:	4810      	ldr	r0, [pc, #64]	; (8004434 <recorder::system::Init()+0x3e4>)
 80043f2:	f003 fd65 	bl	8007ec0 <puts>
 80043f6:	e78e      	b.n	8004316 <recorder::system::Init()+0x2c6>
        case 0x0006: printf("CPU\n");   break;
 80043f8:	480f      	ldr	r0, [pc, #60]	; (8004438 <recorder::system::Init()+0x3e8>)
 80043fa:	f003 fd61 	bl	8007ec0 <puts>
 80043fe:	e78a      	b.n	8004316 <recorder::system::Init()+0x2c6>
        case 0x0046: printf("NRST\n");  break;
 8004400:	480e      	ldr	r0, [pc, #56]	; (800443c <recorder::system::Init()+0x3ec>)
 8004402:	f003 fd5d 	bl	8007ec0 <puts>
 8004406:	e786      	b.n	8004316 <recorder::system::Init()+0x2c6>
        default: printf("unknown: 0x%08lX\n", reset_flags);
 8004408:	4621      	mov	r1, r4
 800440a:	480d      	ldr	r0, [pc, #52]	; (8004440 <recorder::system::Init()+0x3f0>)
 800440c:	f003 fcd2 	bl	8007db4 <iprintf>
 8004410:	e781      	b.n	8004316 <recorder::system::Init()+0x2c6>
        case 0x00FE: printf("POR\n");   break;
 8004412:	480c      	ldr	r0, [pc, #48]	; (8004444 <recorder::system::Init()+0x3f4>)
 8004414:	f003 fd54 	bl	8007ec0 <puts>
 8004418:	e77d      	b.n	8004316 <recorder::system::Init()+0x2c6>
 800441a:	bf00      	nop
 800441c:	08008d34 	.word	0x08008d34
 8004420:	08008d48 	.word	0x08008d48
 8004424:	08008d50 	.word	0x08008d50
 8004428:	08008d74 	.word	0x08008d74
 800442c:	08008d94 	.word	0x08008d94
 8004430:	08008d40 	.word	0x08008d40
 8004434:	08008d38 	.word	0x08008d38
 8004438:	08008d3c 	.word	0x08008d3c
 800443c:	08008d2c 	.word	0x08008d2c
 8004440:	08008d60 	.word	0x08008d60
 8004444:	08008d28 	.word	0x08008d28

08004448 <recorder::system::Delay_ms(unsigned long)>:
{
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
}

void Delay_ms(uint32_t ms)
{
 8004448:	b570      	push	{r4, r5, r6, lr}
    uint32_t start = ticks_.load(std::memory_order_acquire);

    while (TickDelta(start) < ms * 10)
 800444a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return __atomic_load_n(&_M_i, int(__m));
 800444e:	4d08      	ldr	r5, [pc, #32]	; (8004470 <recorder::system::Delay_ms(unsigned long)+0x28>)
 8004450:	0044      	lsls	r4, r0, #1
 8004452:	682e      	ldr	r6, [r5, #0]
 8004454:	f3bf 8f5b 	dmb	ish
 8004458:	e001      	b.n	800445e <recorder::system::Delay_ms(unsigned long)+0x16>
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
}

void Sleep(void)
{
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800445a:	f000 f9ef 	bl	800483c <HAL_PWR_EnterSLEEPMode>
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	2101      	movs	r1, #1
 8004462:	2000      	movs	r0, #0
 8004464:	f3bf 8f5b 	dmb	ish
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
 8004468:	1b9b      	subs	r3, r3, r6
    while (TickDelta(start) < ms * 10)
 800446a:	429c      	cmp	r4, r3
 800446c:	d8f5      	bhi.n	800445a <recorder::system::Delay_ms(unsigned long)+0x12>
}
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	20010ea0 	.word	0x20010ea0

08004474 <recorder::system::SerialFlushTx(bool)>:
{
 8004474:	4601      	mov	r1, r0
    serial_.FlushTx(discard);
 8004476:	4801      	ldr	r0, [pc, #4]	; (800447c <recorder::system::SerialFlushTx(bool)+0x8>)
 8004478:	f7ff bce0 	b.w	8003e3c <recorder::Serial::FlushTx(bool)>
 800447c:	20010ea4 	.word	0x20010ea4

08004480 <recorder::system::Standby()>:
{
 8004480:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid f" : : : "memory");
 8004482:	b671      	cpsid	f
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  * @rmtoll CPUCR     RUN_D3       LL_PWR_CPU_DisableD3RunInLowPowerMode\n
  * @retval None
  */
__STATIC_INLINE void LL_PWR_CPU_DisableD3RunInLowPowerMode(void)
{
  CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_RUN_D3);
 800448c:	4c41      	ldr	r4, [pc, #260]	; (8004594 <recorder::system::Standby()+0x114>)
 800448e:	4a42      	ldr	r2, [pc, #264]	; (8004598 <recorder::system::Standby()+0x118>)
 8004490:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8004494:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
        NVIC->ICER[i] = 0xFFFFFFFF;
 8004498:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800449c:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044a0:	f8c3 5188 	str.w	r5, [r3, #392]	; 0x188
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044a4:	f8c3 5288 	str.w	r5, [r3, #648]	; 0x288
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044a8:	f8c3 518c 	str.w	r5, [r3, #396]	; 0x18c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044ac:	f8c3 528c 	str.w	r5, [r3, #652]	; 0x28c
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044b0:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044b4:	f8c3 5290 	str.w	r5, [r3, #656]	; 0x290
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044b8:	f8c3 5194 	str.w	r5, [r3, #404]	; 0x194
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044bc:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044c0:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044c4:	f8c3 5298 	str.w	r5, [r3, #664]	; 0x298
        NVIC->ICER[i] = 0xFFFFFFFF;
 80044c8:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80044cc:	f8c3 529c 	str.w	r5, [r3, #668]	; 0x29c
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044d6:	6123      	str	r3, [r4, #16]
    HAL_DisableDBGSleepMode();
 80044d8:	f000 f998 	bl	800480c <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DisableDBGStopMode();
 80044dc:	f000 f99e 	bl	800481c <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DisableDBGStandbyMode();
 80044e0:	f000 f9a4 	bl	800482c <HAL_DBGMCU_DisableDBGStandbyMode>
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 80044e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	2201      	movs	r2, #1
 80044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ec:	62a3      	str	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPullUp(uint32_t WakeUpPin)
{
  MODIFY_REG(PWR->WKUPEPR, \
 80044ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044f0:	fa92 f1a2 	rbit	r1, r2
 80044f4:	fab1 f181 	clz	r1, r1
 80044f8:	fa92 f3a2 	rbit	r3, r2
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	4091      	lsls	r1, r2
 8004502:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8004506:	3308      	adds	r3, #8
 8004508:	f001 011e 	and.w	r1, r1, #30
 800450c:	4093      	lsls	r3, r2
 800450e:	fa0c f101 	lsl.w	r1, ip, r1
 8004512:	f003 031e 	and.w	r3, r3, #30
 8004516:	ea20 0101 	bic.w	r1, r0, r1
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	430b      	orrs	r3, r1
 8004520:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 8004522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004524:	4313      	orrs	r3, r2
 8004526:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 8004528:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800452a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004530:	2302      	movs	r3, #2
  MODIFY_REG(PWR->WKUPEPR, \
 8004532:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004534:	fa93 f1a3 	rbit	r1, r3
 8004538:	fab1 f181 	clz	r1, r1
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	4091      	lsls	r1, r2
 8004546:	3308      	adds	r3, #8
 8004548:	f001 011e 	and.w	r1, r1, #30
 800454c:	4093      	lsls	r3, r2
 800454e:	fa0c f101 	lsl.w	r1, ip, r1
 8004552:	f003 031e 	and.w	r3, r3, #30
 8004556:	ea20 0101 	bic.w	r1, r0, r1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800455e:	4a0f      	ldr	r2, [pc, #60]	; (800459c <recorder::system::Standby()+0x11c>)
 8004560:	430b      	orrs	r3, r1
 8004562:	62a3      	str	r3, [r4, #40]	; 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 8004564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004566:	f043 0302 	orr.w	r3, r3, #2
 800456a:	62a3      	str	r3, [r4, #40]	; 0x28
    PWR->WKUPCR = 0xFFFFFFFF;
 800456c:	6225      	str	r5, [r4, #32]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D1, PDMode);
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6123      	str	r3, [r4, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D2, PDMode);
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	6123      	str	r3, [r4, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D3 , PDMode);
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6123      	str	r3, [r4, #16]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8004586:	6913      	ldr	r3, [r2, #16]
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6113      	str	r3, [r2, #16]
    __WFI();
 800458e:	bf30      	wfi
}

void Reset(void)
{
    NVIC_SystemReset();
 8004590:	f7ff fcc4 	bl	8003f1c <NVIC_SystemReset>
 8004594:	58024800 	.word	0x58024800
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <recorder::system::WakeupWasPlayButton()>:
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
 80045a0:	4b02      	ldr	r3, [pc, #8]	; (80045ac <recorder::system::WakeupWasPlayButton()+0xc>)
 80045a2:	6818      	ldr	r0, [r3, #0]
}
 80045a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20010e9c 	.word	0x20010e9c

080045b0 <recorder::system::Reset()>:
{
 80045b0:	b508      	push	{r3, lr}
    NVIC_SystemReset();
 80045b2:	f7ff fcb3 	bl	8003f1c <NVIC_SystemReset>
 80045b6:	bf00      	nop

080045b8 <fgets>:
}

extern "C"
char* fgets(char* str, int count, std::FILE* stream)
{
 80045b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (count < 2)
 80045bc:	2901      	cmp	r1, #1
{
 80045be:	b083      	sub	sp, #12
 80045c0:	9001      	str	r0, [sp, #4]
    if (count < 2)
 80045c2:	dd33      	ble.n	800462c <fgets+0x74>
 80045c4:	4616      	mov	r6, r2
        return nullptr;
    }

    int i;

    for (i = 0; i < count - 1; i++)
 80045c6:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 80045ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80045ce:	f04f 0a00 	mov.w	sl, #0
    {
        char byte = std::getc(stream);
 80045d2:	4630      	mov	r0, r6
 80045d4:	f002 ffea 	bl	80075ac <getc>
 80045d8:	4605      	mov	r5, r0
        bool error = std::ferror(stream);
 80045da:	4630      	mov	r0, r6
 80045dc:	f002 fe8c 	bl	80072f8 <ferror>
 80045e0:	4607      	mov	r7, r0
        bool eof = std::feof(stream);
 80045e2:	4630      	mov	r0, r6
        char byte = std::getc(stream);
 80045e4:	b2ed      	uxtb	r5, r5
        bool eof = std::feof(stream);
 80045e6:	f002 fe51 	bl	800728c <feof>
 80045ea:	4604      	mov	r4, r0
        std::clearerr(stream);
 80045ec:	4630      	mov	r0, r6
        bool eof = std::feof(stream);
 80045ee:	f1b4 0b00 	subs.w	fp, r4, #0
 80045f2:	bf18      	it	ne
 80045f4:	f04f 0b01 	movne.w	fp, #1
        std::clearerr(stream);
 80045f8:	f002 fe08 	bl	800720c <clearerr>

        if (error || (eof && i == 0))
 80045fc:	b9b7      	cbnz	r7, 800462c <fgets+0x74>
 80045fe:	f1ba 0f00 	cmp.w	sl, #0
 8004602:	d102      	bne.n	800460a <fgets+0x52>
 8004604:	f1bb 0f00 	cmp.w	fp, #0
 8004608:	d110      	bne.n	800462c <fgets+0x74>
        {
            return nullptr;
        }
        else if (eof)
 800460a:	b99c      	cbnz	r4, 8004634 <fgets+0x7c>
        }
        else
        {
            str[i] = byte;

            if (byte == '\n')
 800460c:	2d0a      	cmp	r5, #10
            str[i] = byte;
 800460e:	f808 5f01 	strb.w	r5, [r8, #1]!
            if (byte == '\n')
 8004612:	d003      	beq.n	800461c <fgets+0x64>
    for (i = 0; i < count - 1; i++)
 8004614:	f10a 0a01 	add.w	sl, sl, #1
 8004618:	45ca      	cmp	sl, r9
 800461a:	d1da      	bne.n	80045d2 <fgets+0x1a>
                break;
            }
        }
    }

    str[i + 1] = '\0';
 800461c:	9801      	ldr	r0, [sp, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	eb00 030a 	add.w	r3, r0, sl
 8004624:	705a      	strb	r2, [r3, #1]
    return str;
}
 8004626:	b003      	add	sp, #12
 8004628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nullptr;
 800462c:	2000      	movs	r0, #0
}
 800462e:	b003      	add	sp, #12
 8004630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return str;
 8004634:	9b01      	ldr	r3, [sp, #4]
            str[i] = '\0';
 8004636:	2200      	movs	r2, #0
            return str;
 8004638:	4618      	mov	r0, r3
            str[i] = '\0';
 800463a:	f803 200a 	strb.w	r2, [r3, sl]
}
 800463e:	b003      	add	sp, #12
 8004640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004644 <_read>:

extern "C"
int _read(int file, char* ptr, int len)
{
 8004644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool prev_was_cr = false;

    if (file == STDIN_FILENO)
 8004648:	bb18      	cbnz	r0, 8004692 <_read+0x4e>
    {
        int i = 0;

        while (i < len && serial_.BytesAvailable())
 800464a:	2a00      	cmp	r2, #0
 800464c:	4604      	mov	r4, r0
 800464e:	4616      	mov	r6, r2
 8004650:	dd1c      	ble.n	800468c <_read+0x48>
 8004652:	4688      	mov	r8, r1
 8004654:	4d13      	ldr	r5, [pc, #76]	; (80046a4 <_read+0x60>)
 8004656:	4f14      	ldr	r7, [pc, #80]	; (80046a8 <_read+0x64>)
 8004658:	e009      	b.n	800466e <_read+0x2a>
            if (is_cr)
            {
                ch = '\n';
            }

            if (!(is_lf && prev_was_cr))
 800465a:	280a      	cmp	r0, #10
 800465c:	d101      	bne.n	8004662 <_read+0x1e>
 800465e:	783a      	ldrb	r2, [r7, #0]
 8004660:	b912      	cbnz	r2, 8004668 <_read+0x24>
            {
                ptr[i++] = ch;
 8004662:	f808 0004 	strb.w	r0, [r8, r4]
 8004666:	3401      	adds	r4, #1
        while (i < len && serial_.BytesAvailable())
 8004668:	42b4      	cmp	r4, r6
            }

            prev_was_cr = is_cr;
 800466a:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 800466c:	da0e      	bge.n	800468c <_read+0x48>
 800466e:	4628      	mov	r0, r5
 8004670:	f7ff fba0 	bl	8003db4 <recorder::Serial::BytesAvailable()>
 8004674:	4603      	mov	r3, r0
            char ch = serial_.GetByteBlocking();
 8004676:	4628      	mov	r0, r5
        while (i < len && serial_.BytesAvailable())
 8004678:	b143      	cbz	r3, 800468c <_read+0x48>
            char ch = serial_.GetByteBlocking();
 800467a:	f7ff fba1 	bl	8003dc0 <recorder::Serial::GetByteBlocking()>
            bool is_cr = (ch == '\r');
 800467e:	280d      	cmp	r0, #13
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
            if (is_cr)
 8004686:	d1e8      	bne.n	800465a <_read+0x16>
                ch = '\n';
 8004688:	200a      	movs	r0, #10
 800468a:	e7ea      	b.n	8004662 <_read+0x1e>
 800468c:	4620      	mov	r0, r4
        return i;
    }

    errno = ENOENT;
    return -1;
}
 800468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8004692:	f002 fdf5 	bl	8007280 <__errno>
 8004696:	2202      	movs	r2, #2
 8004698:	4603      	mov	r3, r0
    return -1;
 800469a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOENT;
 800469e:	601a      	str	r2, [r3, #0]
    return -1;
 80046a0:	e7f5      	b.n	800468e <_read+0x4a>
 80046a2:	bf00      	nop
 80046a4:	20010ea4 	.word	0x20010ea4
 80046a8:	20010ff4 	.word	0x20010ff4

080046ac <_write>:
extern "C"
int _write(int file, char* ptr, int len)
{
    static char prev = '\0';

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80046ac:	1e43      	subs	r3, r0, #1
 80046ae:	2b01      	cmp	r3, #1
{
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80046b4:	d822      	bhi.n	80046fc <_write+0x50>
    {
        for (int i = 0; i < len; i++)
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	4690      	mov	r8, r2
 80046ba:	dd1c      	ble.n	80046f6 <_write+0x4a>
 80046bc:	1e4c      	subs	r4, r1, #1
 80046be:	4e13      	ldr	r6, [pc, #76]	; (800470c <_write+0x60>)
        {
            if (ptr[i] == '\n' && prev != '\r')
            {
                serial_.Write('\r', true);
 80046c0:	4d13      	ldr	r5, [pc, #76]	; (8004710 <_write+0x64>)
 80046c2:	18a7      	adds	r7, r4, r2
 80046c4:	e008      	b.n	80046d8 <_write+0x2c>
            }

            serial_.Write(ptr[i], true);
 80046c6:	4619      	mov	r1, r3
 80046c8:	2201      	movs	r2, #1
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7ff fb8a 	bl	8003de4 <recorder::Serial::Write(unsigned char, bool)>
            prev = ptr[i];
 80046d0:	7823      	ldrb	r3, [r4, #0]
        for (int i = 0; i < len; i++)
 80046d2:	42bc      	cmp	r4, r7
            prev = ptr[i];
 80046d4:	7033      	strb	r3, [r6, #0]
        for (int i = 0; i < len; i++)
 80046d6:	d00e      	beq.n	80046f6 <_write+0x4a>
            if (ptr[i] == '\n' && prev != '\r')
 80046d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046dc:	2b0a      	cmp	r3, #10
 80046de:	d1f2      	bne.n	80046c6 <_write+0x1a>
 80046e0:	f896 c000 	ldrb.w	ip, [r6]
                serial_.Write('\r', true);
 80046e4:	210d      	movs	r1, #13
 80046e6:	2201      	movs	r2, #1
 80046e8:	4628      	mov	r0, r5
            if (ptr[i] == '\n' && prev != '\r')
 80046ea:	458c      	cmp	ip, r1
 80046ec:	d0eb      	beq.n	80046c6 <_write+0x1a>
                serial_.Write('\r', true);
 80046ee:	f7ff fb79 	bl	8003de4 <recorder::Serial::Write(unsigned char, bool)>
            serial_.Write(ptr[i], true);
 80046f2:	7823      	ldrb	r3, [r4, #0]
 80046f4:	e7e7      	b.n	80046c6 <_write+0x1a>

        return len;
    }

    errno = ENOENT;
    return -1;
 80046f6:	4640      	mov	r0, r8
}
 80046f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 80046fc:	f002 fdc0 	bl	8007280 <__errno>
 8004700:	2202      	movs	r2, #2
 8004702:	4603      	mov	r3, r0
    return -1;
 8004704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOENT;
 8004708:	601a      	str	r2, [r3, #0]
    return -1;
 800470a:	e7f5      	b.n	80046f8 <_write+0x4c>
 800470c:	20010ff5 	.word	0x20010ff5
 8004710:	20010ea4 	.word	0x20010ea4

08004714 <_GLOBAL__sub_I_TickHandler>:
      __atomic_base() noexcept = default;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <_GLOBAL__sub_I_TickHandler+0x10>)
 8004716:	2200      	movs	r2, #0
 8004718:	e9c3 2200 	strd	r2, r2, [r3]
 800471c:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48

}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20010ea4 	.word	0x20010ea4

08004728 <Default_Handler>:
 8004728:	e7fe      	b.n	8004728 <Default_Handler>
 800472a:	bf00      	nop

0800472c <Reset_Handler>:
 800472c:	480b      	ldr	r0, [pc, #44]	; (800475c <Reset_Handler+0x30>)
 800472e:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <Reset_Handler+0x34>)
 8004730:	4290      	cmp	r0, r2
 8004732:	d003      	beq.n	800473c <Reset_Handler+0x10>
 8004734:	1a12      	subs	r2, r2, r0
 8004736:	490b      	ldr	r1, [pc, #44]	; (8004764 <Reset_Handler+0x38>)
 8004738:	f002 ffa3 	bl	8007682 <memcpy>
 800473c:	480a      	ldr	r0, [pc, #40]	; (8004768 <Reset_Handler+0x3c>)
 800473e:	4a0b      	ldr	r2, [pc, #44]	; (800476c <Reset_Handler+0x40>)
 8004740:	4290      	cmp	r0, r2
 8004742:	d003      	beq.n	800474c <Reset_Handler+0x20>
 8004744:	1a12      	subs	r2, r2, r0
 8004746:	2100      	movs	r1, #0
 8004748:	f002 ffa9 	bl	800769e <memset>
 800474c:	f000 f810 	bl	8004770 <SystemInit>
 8004750:	f002 ff70 	bl	8007634 <__libc_init_array>
 8004754:	f7fd fd80 	bl	8002258 <main>
 8004758:	e7fe      	b.n	8004758 <Reset_Handler+0x2c>
 800475a:	bf00      	nop
 800475c:	20000000 	.word	0x20000000
 8004760:	2000006c 	.word	0x2000006c
 8004764:	08009314 	.word	0x08009314
 8004768:	20000400 	.word	0x20000400
 800476c:	20011010 	.word	0x20011010

08004770 <SystemInit>:
 8004770:	b410      	push	{r4}
 8004772:	4c1a      	ldr	r4, [pc, #104]	; (80047dc <SystemInit+0x6c>)
 8004774:	2200      	movs	r2, #0
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <SystemInit+0x70>)
 8004778:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800477c:	4819      	ldr	r0, [pc, #100]	; (80047e4 <SystemInit+0x74>)
 800477e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004782:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	4c17      	ldr	r4, [pc, #92]	; (80047e8 <SystemInit+0x78>)
 800478a:	f041 0101 	orr.w	r1, r1, #1
 800478e:	6019      	str	r1, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	4008      	ands	r0, r1
 8004796:	4915      	ldr	r1, [pc, #84]	; (80047ec <SystemInit+0x7c>)
 8004798:	6018      	str	r0, [r3, #0]
 800479a:	619a      	str	r2, [r3, #24]
 800479c:	61da      	str	r2, [r3, #28]
 800479e:	621a      	str	r2, [r3, #32]
 80047a0:	629a      	str	r2, [r3, #40]	; 0x28
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
 80047a6:	635a      	str	r2, [r3, #52]	; 0x34
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
 80047aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
 80047ae:	645a      	str	r2, [r3, #68]	; 0x44
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80047b6:	6018      	str	r0, [r3, #0]
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	4019      	ands	r1, r3
 80047be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80047c2:	d203      	bcs.n	80047cc <SystemInit+0x5c>
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <SystemInit+0x80>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <SystemInit+0x6c>)
 80047ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00
 80047e0:	58024400 	.word	0x58024400
 80047e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80047e8:	5c001000 	.word	0x5c001000
 80047ec:	ffff0000 	.word	0xffff0000
 80047f0:	51008000 	.word	0x51008000

080047f4 <HAL_GetTick>:
 80047f4:	4b01      	ldr	r3, [pc, #4]	; (80047fc <HAL_GetTick+0x8>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20010ff8 	.word	0x20010ff8

08004800 <HAL_GetREVID>:
 8004800:	4b01      	ldr	r3, [pc, #4]	; (8004808 <HAL_GetREVID+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	0c00      	lsrs	r0, r0, #16
 8004806:	4770      	bx	lr
 8004808:	5c001000 	.word	0x5c001000

0800480c <HAL_DBGMCU_DisableDBGSleepMode>:
 800480c:	4a02      	ldr	r2, [pc, #8]	; (8004818 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800480e:	6853      	ldr	r3, [r2, #4]
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6053      	str	r3, [r2, #4]
 8004816:	4770      	bx	lr
 8004818:	5c001000 	.word	0x5c001000

0800481c <HAL_DBGMCU_DisableDBGStopMode>:
 800481c:	4a02      	ldr	r2, [pc, #8]	; (8004828 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800481e:	6853      	ldr	r3, [r2, #4]
 8004820:	f023 0302 	bic.w	r3, r3, #2
 8004824:	6053      	str	r3, [r2, #4]
 8004826:	4770      	bx	lr
 8004828:	5c001000 	.word	0x5c001000

0800482c <HAL_DBGMCU_DisableDBGStandbyMode>:
 800482c:	4a02      	ldr	r2, [pc, #8]	; (8004838 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800482e:	6853      	ldr	r3, [r2, #4]
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	6053      	str	r3, [r2, #4]
 8004836:	4770      	bx	lr
 8004838:	5c001000 	.word	0x5c001000

0800483c <HAL_PWR_EnterSLEEPMode>:
 800483c:	4a05      	ldr	r2, [pc, #20]	; (8004854 <HAL_PWR_EnterSLEEPMode+0x18>)
 800483e:	2901      	cmp	r1, #1
 8004840:	6913      	ldr	r3, [r2, #16]
 8004842:	f023 0304 	bic.w	r3, r3, #4
 8004846:	6113      	str	r3, [r2, #16]
 8004848:	d001      	beq.n	800484e <HAL_PWR_EnterSLEEPMode+0x12>
 800484a:	bf20      	wfe
 800484c:	4770      	bx	lr
 800484e:	bf30      	wfi
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <HAL_PWREx_ConfigSupply>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <HAL_PWREx_ConfigSupply+0x48>)
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	0752      	lsls	r2, r2, #29
 8004860:	d404      	bmi.n	800486c <HAL_PWREx_ConfigSupply+0x14>
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4283      	cmp	r3, r0
 800486a:	d114      	bne.n	8004896 <HAL_PWREx_ConfigSupply+0x3e>
 800486c:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <HAL_PWREx_ConfigSupply+0x48>)
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	f023 0307 	bic.w	r3, r3, #7
 8004874:	4318      	orrs	r0, r3
 8004876:	60e0      	str	r0, [r4, #12]
 8004878:	f7ff ffbc 	bl	80047f4 <HAL_GetTick>
 800487c:	4605      	mov	r5, r0
 800487e:	e005      	b.n	800488c <HAL_PWREx_ConfigSupply+0x34>
 8004880:	f7ff ffb8 	bl	80047f4 <HAL_GetTick>
 8004884:	1b40      	subs	r0, r0, r5
 8004886:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800488a:	d806      	bhi.n	800489a <HAL_PWREx_ConfigSupply+0x42>
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	049b      	lsls	r3, r3, #18
 8004890:	d5f6      	bpl.n	8004880 <HAL_PWREx_ConfigSupply+0x28>
 8004892:	2000      	movs	r0, #0
 8004894:	bd38      	pop	{r3, r4, r5, pc}
 8004896:	2001      	movs	r0, #1
 8004898:	bd38      	pop	{r3, r4, r5, pc}
 800489a:	2003      	movs	r0, #3
 800489c:	bd38      	pop	{r3, r4, r5, pc}
 800489e:	bf00      	nop
 80048a0:	58024800 	.word	0x58024800

080048a4 <HAL_RCC_OscConfig>:
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f000 81de 	beq.w	8004c66 <HAL_RCC_OscConfig+0x3c2>
 80048aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ac:	6803      	ldr	r3, [r0, #0]
 80048ae:	4604      	mov	r4, r0
 80048b0:	07d8      	lsls	r0, r3, #31
 80048b2:	d530      	bpl.n	8004916 <HAL_RCC_OscConfig+0x72>
 80048b4:	499f      	ldr	r1, [pc, #636]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 80048b6:	690a      	ldr	r2, [r1, #16]
 80048b8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80048ba:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80048be:	2a10      	cmp	r2, #16
 80048c0:	f000 8100 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x220>
 80048c4:	2a18      	cmp	r2, #24
 80048c6:	f000 80f8 	beq.w	8004aba <HAL_RCC_OscConfig+0x216>
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	f000 8120 	beq.w	8004b14 <HAL_RCC_OscConfig+0x270>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 815e 	beq.w	8004b96 <HAL_RCC_OscConfig+0x2f2>
 80048da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048de:	4b95      	ldr	r3, [pc, #596]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	f000 822f 	beq.w	8004d44 <HAL_RCC_OscConfig+0x4a0>
 80048e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f7ff ff7e 	bl	80047f4 <HAL_GetTick>
 80048f8:	4e8e      	ldr	r6, [pc, #568]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 80048fa:	f241 3788 	movw	r7, #5000	; 0x1388
 80048fe:	4605      	mov	r5, r0
 8004900:	e005      	b.n	800490e <HAL_RCC_OscConfig+0x6a>
 8004902:	f7ff ff77 	bl	80047f4 <HAL_GetTick>
 8004906:	1b40      	subs	r0, r0, r5
 8004908:	42b8      	cmp	r0, r7
 800490a:	f200 8142 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 800490e:	6833      	ldr	r3, [r6, #0]
 8004910:	039a      	lsls	r2, r3, #14
 8004912:	d5f6      	bpl.n	8004902 <HAL_RCC_OscConfig+0x5e>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079d      	lsls	r5, r3, #30
 8004918:	f100 8085 	bmi.w	8004a26 <HAL_RCC_OscConfig+0x182>
 800491c:	06d9      	lsls	r1, r3, #27
 800491e:	d52f      	bpl.n	8004980 <HAL_RCC_OscConfig+0xdc>
 8004920:	4a84      	ldr	r2, [pc, #528]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004922:	6913      	ldr	r3, [r2, #16]
 8004924:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800492a:	2b08      	cmp	r3, #8
 800492c:	f000 80da 	beq.w	8004ae4 <HAL_RCC_OscConfig+0x240>
 8004930:	2b18      	cmp	r3, #24
 8004932:	f000 80d2 	beq.w	8004ada <HAL_RCC_OscConfig+0x236>
 8004936:	69e3      	ldr	r3, [r4, #28]
 8004938:	4d7e      	ldr	r5, [pc, #504]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8165 	beq.w	8004c0a <HAL_RCC_OscConfig+0x366>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	f7ff ff54 	bl	80047f4 <HAL_GetTick>
 800494c:	4606      	mov	r6, r0
 800494e:	e005      	b.n	800495c <HAL_RCC_OscConfig+0xb8>
 8004950:	f7ff ff50 	bl	80047f4 <HAL_GetTick>
 8004954:	1b80      	subs	r0, r0, r6
 8004956:	2802      	cmp	r0, #2
 8004958:	f200 811b 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	05db      	lsls	r3, r3, #23
 8004960:	d5f6      	bpl.n	8004950 <HAL_RCC_OscConfig+0xac>
 8004962:	f7ff ff4d 	bl	8004800 <HAL_GetREVID>
 8004966:	f241 0303 	movw	r3, #4099	; 0x1003
 800496a:	4298      	cmp	r0, r3
 800496c:	f200 820b 	bhi.w	8004d86 <HAL_RCC_OscConfig+0x4e2>
 8004970:	686b      	ldr	r3, [r5, #4]
 8004972:	6a22      	ldr	r2, [r4, #32]
 8004974:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004978:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800497c:	606b      	str	r3, [r5, #4]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	071d      	lsls	r5, r3, #28
 8004982:	d516      	bpl.n	80049b2 <HAL_RCC_OscConfig+0x10e>
 8004984:	6963      	ldr	r3, [r4, #20]
 8004986:	4d6b      	ldr	r5, [pc, #428]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 811c 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x322>
 800498e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	676b      	str	r3, [r5, #116]	; 0x74
 8004996:	f7ff ff2d 	bl	80047f4 <HAL_GetTick>
 800499a:	4606      	mov	r6, r0
 800499c:	e005      	b.n	80049aa <HAL_RCC_OscConfig+0x106>
 800499e:	f7ff ff29 	bl	80047f4 <HAL_GetTick>
 80049a2:	1b80      	subs	r0, r0, r6
 80049a4:	2802      	cmp	r0, #2
 80049a6:	f200 80f4 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 80049aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80049ac:	0798      	lsls	r0, r3, #30
 80049ae:	d5f6      	bpl.n	800499e <HAL_RCC_OscConfig+0xfa>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	069a      	lsls	r2, r3, #26
 80049b4:	d516      	bpl.n	80049e4 <HAL_RCC_OscConfig+0x140>
 80049b6:	69a3      	ldr	r3, [r4, #24]
 80049b8:	4d5e      	ldr	r5, [pc, #376]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8114 	beq.w	8004be8 <HAL_RCC_OscConfig+0x344>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	f7ff ff14 	bl	80047f4 <HAL_GetTick>
 80049cc:	4606      	mov	r6, r0
 80049ce:	e005      	b.n	80049dc <HAL_RCC_OscConfig+0x138>
 80049d0:	f7ff ff10 	bl	80047f4 <HAL_GetTick>
 80049d4:	1b80      	subs	r0, r0, r6
 80049d6:	2802      	cmp	r0, #2
 80049d8:	f200 80db 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	049f      	lsls	r7, r3, #18
 80049e0:	d5f6      	bpl.n	80049d0 <HAL_RCC_OscConfig+0x12c>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	0759      	lsls	r1, r3, #29
 80049e6:	f100 809b 	bmi.w	8004b20 <HAL_RCC_OscConfig+0x27c>
 80049ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ec:	b1cb      	cbz	r3, 8004a22 <HAL_RCC_OscConfig+0x17e>
 80049ee:	4d51      	ldr	r5, [pc, #324]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 80049f0:	692a      	ldr	r2, [r5, #16]
 80049f2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80049f6:	2a18      	cmp	r2, #24
 80049f8:	d06d      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x232>
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f000 8139 	beq.w	8004c7a <HAL_RCC_OscConfig+0x3d6>
 8004a08:	f7ff fef4 	bl	80047f4 <HAL_GetTick>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	e005      	b.n	8004a1c <HAL_RCC_OscConfig+0x178>
 8004a10:	f7ff fef0 	bl	80047f4 <HAL_GetTick>
 8004a14:	1b00      	subs	r0, r0, r4
 8004a16:	2802      	cmp	r0, #2
 8004a18:	f200 80bb 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	019b      	lsls	r3, r3, #6
 8004a20:	d4f6      	bmi.n	8004a10 <HAL_RCC_OscConfig+0x16c>
 8004a22:	2000      	movs	r0, #0
 8004a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a26:	4a43      	ldr	r2, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004a28:	6913      	ldr	r3, [r2, #16]
 8004a2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a2c:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004a30:	d129      	bne.n	8004a86 <HAL_RCC_OscConfig+0x1e2>
 8004a32:	4b40      	ldr	r3, [pc, #256]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004a34:	68e2      	ldr	r2, [r4, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0759      	lsls	r1, r3, #29
 8004a3a:	d501      	bpl.n	8004a40 <HAL_RCC_OscConfig+0x19c>
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	d04a      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x232>
 8004a40:	4d3c      	ldr	r5, [pc, #240]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	f023 0319 	bic.w	r3, r3, #25
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	f7ff fed2 	bl	80047f4 <HAL_GetTick>
 8004a50:	4606      	mov	r6, r0
 8004a52:	e005      	b.n	8004a60 <HAL_RCC_OscConfig+0x1bc>
 8004a54:	f7ff fece 	bl	80047f4 <HAL_GetTick>
 8004a58:	1b80      	subs	r0, r0, r6
 8004a5a:	2802      	cmp	r0, #2
 8004a5c:	f200 8099 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	075b      	lsls	r3, r3, #29
 8004a64:	d5f6      	bpl.n	8004a54 <HAL_RCC_OscConfig+0x1b0>
 8004a66:	f7ff fecb 	bl	8004800 <HAL_GetREVID>
 8004a6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004a6e:	6922      	ldr	r2, [r4, #16]
 8004a70:	4298      	cmp	r0, r3
 8004a72:	686b      	ldr	r3, [r5, #4]
 8004a74:	f200 80f0 	bhi.w	8004c58 <HAL_RCC_OscConfig+0x3b4>
 8004a78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a7c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004a80:	606b      	str	r3, [r5, #4]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	e74a      	b.n	800491c <HAL_RCC_OscConfig+0x78>
 8004a86:	2b18      	cmp	r3, #24
 8004a88:	f000 80e2 	beq.w	8004c50 <HAL_RCC_OscConfig+0x3ac>
 8004a8c:	4d29      	ldr	r5, [pc, #164]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004a8e:	68e2      	ldr	r2, [r4, #12]
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f000 80cb 	beq.w	8004c2e <HAL_RCC_OscConfig+0x38a>
 8004a98:	f023 0319 	bic.w	r3, r3, #25
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	f7ff fea8 	bl	80047f4 <HAL_GetTick>
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCC_OscConfig+0x20e>
 8004aa8:	f7ff fea4 	bl	80047f4 <HAL_GetTick>
 8004aac:	1b80      	subs	r0, r0, r6
 8004aae:	2802      	cmp	r0, #2
 8004ab0:	d86f      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	075f      	lsls	r7, r3, #29
 8004ab6:	d5f7      	bpl.n	8004aa8 <HAL_RCC_OscConfig+0x204>
 8004ab8:	e7d5      	b.n	8004a66 <HAL_RCC_OscConfig+0x1c2>
 8004aba:	f001 0103 	and.w	r1, r1, #3
 8004abe:	2902      	cmp	r1, #2
 8004ac0:	f47f af03 	bne.w	80048ca <HAL_RCC_OscConfig+0x26>
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	0391      	lsls	r1, r2, #14
 8004aca:	f57f af24 	bpl.w	8004916 <HAL_RCC_OscConfig+0x72>
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	f47f af20 	bne.w	8004916 <HAL_RCC_OscConfig+0x72>
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ada:	f002 0203 	and.w	r2, r2, #3
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	f47f af29 	bne.w	8004936 <HAL_RCC_OscConfig+0x92>
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	05da      	lsls	r2, r3, #23
 8004aea:	d502      	bpl.n	8004af2 <HAL_RCC_OscConfig+0x24e>
 8004aec:	69e3      	ldr	r3, [r4, #28]
 8004aee:	2b80      	cmp	r3, #128	; 0x80
 8004af0:	d1f1      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x232>
 8004af2:	f7ff fe85 	bl	8004800 <HAL_GetREVID>
 8004af6:	f241 0303 	movw	r3, #4099	; 0x1003
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004afc:	4298      	cmp	r0, r3
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	f200 80b3 	bhi.w	8004c6a <HAL_RCC_OscConfig+0x3c6>
 8004b04:	6853      	ldr	r3, [r2, #4]
 8004b06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b0a:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8004b0e:	6053      	str	r3, [r2, #4]
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	e735      	b.n	8004980 <HAL_RCC_OscConfig+0xdc>
 8004b14:	4a07      	ldr	r2, [pc, #28]	; (8004b34 <HAL_RCC_OscConfig+0x290>)
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e6e9      	b.n	80048f4 <HAL_RCC_OscConfig+0x50>
 8004b20:	4d05      	ldr	r5, [pc, #20]	; (8004b38 <HAL_RCC_OscConfig+0x294>)
 8004b22:	682b      	ldr	r3, [r5, #0]
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	f7ff fe63 	bl	80047f4 <HAL_GetTick>
 8004b2e:	4606      	mov	r6, r0
 8004b30:	e009      	b.n	8004b46 <HAL_RCC_OscConfig+0x2a2>
 8004b32:	bf00      	nop
 8004b34:	58024400 	.word	0x58024400
 8004b38:	58024800 	.word	0x58024800
 8004b3c:	f7ff fe5a 	bl	80047f4 <HAL_GetTick>
 8004b40:	1b80      	subs	r0, r0, r6
 8004b42:	2864      	cmp	r0, #100	; 0x64
 8004b44:	d825      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	05da      	lsls	r2, r3, #23
 8004b4a:	d5f7      	bpl.n	8004b3c <HAL_RCC_OscConfig+0x298>
 8004b4c:	68a3      	ldr	r3, [r4, #8]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	f000 8122 	beq.w	8004d98 <HAL_RCC_OscConfig+0x4f4>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80fd 	beq.w	8004d54 <HAL_RCC_OscConfig+0x4b0>
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	4b95      	ldr	r3, [pc, #596]	; (8004db4 <HAL_RCC_OscConfig+0x510>)
 8004b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b60:	f000 8120 	beq.w	8004da4 <HAL_RCC_OscConfig+0x500>
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	671a      	str	r2, [r3, #112]	; 0x70
 8004b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b6c:	f022 0204 	bic.w	r2, r2, #4
 8004b70:	671a      	str	r2, [r3, #112]	; 0x70
 8004b72:	f7ff fe3f 	bl	80047f4 <HAL_GetTick>
 8004b76:	4e8f      	ldr	r6, [pc, #572]	; (8004db4 <HAL_RCC_OscConfig+0x510>)
 8004b78:	f241 3788 	movw	r7, #5000	; 0x1388
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	e004      	b.n	8004b8a <HAL_RCC_OscConfig+0x2e6>
 8004b80:	f7ff fe38 	bl	80047f4 <HAL_GetTick>
 8004b84:	1b40      	subs	r0, r0, r5
 8004b86:	42b8      	cmp	r0, r7
 8004b88:	d803      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004b8a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004b8c:	079b      	lsls	r3, r3, #30
 8004b8e:	d5f7      	bpl.n	8004b80 <HAL_RCC_OscConfig+0x2dc>
 8004b90:	e72b      	b.n	80049ea <HAL_RCC_OscConfig+0x146>
 8004b92:	2003      	movs	r0, #3
 8004b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b96:	4d87      	ldr	r5, [pc, #540]	; (8004db4 <HAL_RCC_OscConfig+0x510>)
 8004b98:	f241 3788 	movw	r7, #5000	; 0x1388
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7ff fe22 	bl	80047f4 <HAL_GetTick>
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	e004      	b.n	8004bbe <HAL_RCC_OscConfig+0x31a>
 8004bb4:	f7ff fe1e 	bl	80047f4 <HAL_GetTick>
 8004bb8:	1b80      	subs	r0, r0, r6
 8004bba:	42b8      	cmp	r0, r7
 8004bbc:	d8e9      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	039b      	lsls	r3, r3, #14
 8004bc2:	d4f7      	bmi.n	8004bb4 <HAL_RCC_OscConfig+0x310>
 8004bc4:	e6a6      	b.n	8004914 <HAL_RCC_OscConfig+0x70>
 8004bc6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	676b      	str	r3, [r5, #116]	; 0x74
 8004bce:	f7ff fe11 	bl	80047f4 <HAL_GetTick>
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	e004      	b.n	8004be0 <HAL_RCC_OscConfig+0x33c>
 8004bd6:	f7ff fe0d 	bl	80047f4 <HAL_GetTick>
 8004bda:	1b80      	subs	r0, r0, r6
 8004bdc:	2802      	cmp	r0, #2
 8004bde:	d8d8      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004be0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004be2:	0799      	lsls	r1, r3, #30
 8004be4:	d4f7      	bmi.n	8004bd6 <HAL_RCC_OscConfig+0x332>
 8004be6:	e6e3      	b.n	80049b0 <HAL_RCC_OscConfig+0x10c>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7ff fe00 	bl	80047f4 <HAL_GetTick>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	e004      	b.n	8004c02 <HAL_RCC_OscConfig+0x35e>
 8004bf8:	f7ff fdfc 	bl	80047f4 <HAL_GetTick>
 8004bfc:	1b80      	subs	r0, r0, r6
 8004bfe:	2802      	cmp	r0, #2
 8004c00:	d8c7      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	0498      	lsls	r0, r3, #18
 8004c06:	d4f7      	bmi.n	8004bf8 <HAL_RCC_OscConfig+0x354>
 8004c08:	e6eb      	b.n	80049e2 <HAL_RCC_OscConfig+0x13e>
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	f7ff fdef 	bl	80047f4 <HAL_GetTick>
 8004c16:	4606      	mov	r6, r0
 8004c18:	e004      	b.n	8004c24 <HAL_RCC_OscConfig+0x380>
 8004c1a:	f7ff fdeb 	bl	80047f4 <HAL_GetTick>
 8004c1e:	1b80      	subs	r0, r0, r6
 8004c20:	2802      	cmp	r0, #2
 8004c22:	d8b6      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	05df      	lsls	r7, r3, #23
 8004c28:	d4f7      	bmi.n	8004c1a <HAL_RCC_OscConfig+0x376>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	e6a8      	b.n	8004980 <HAL_RCC_OscConfig+0xdc>
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7ff fdde 	bl	80047f4 <HAL_GetTick>
 8004c38:	4606      	mov	r6, r0
 8004c3a:	e004      	b.n	8004c46 <HAL_RCC_OscConfig+0x3a2>
 8004c3c:	f7ff fdda 	bl	80047f4 <HAL_GetTick>
 8004c40:	1b80      	subs	r0, r0, r6
 8004c42:	2802      	cmp	r0, #2
 8004c44:	d8a5      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	0758      	lsls	r0, r3, #29
 8004c4a:	d4f7      	bmi.n	8004c3c <HAL_RCC_OscConfig+0x398>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	e665      	b.n	800491c <HAL_RCC_OscConfig+0x78>
 8004c50:	0790      	lsls	r0, r2, #30
 8004c52:	f47f af1b 	bne.w	8004a8c <HAL_RCC_OscConfig+0x1e8>
 8004c56:	e6ec      	b.n	8004a32 <HAL_RCC_OscConfig+0x18e>
 8004c58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c60:	606b      	str	r3, [r5, #4]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	e65a      	b.n	800491c <HAL_RCC_OscConfig+0x78>
 8004c66:	2001      	movs	r0, #1
 8004c68:	4770      	bx	lr
 8004c6a:	68d3      	ldr	r3, [r2, #12]
 8004c6c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004c70:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c74:	60d3      	str	r3, [r2, #12]
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	e682      	b.n	8004980 <HAL_RCC_OscConfig+0xdc>
 8004c7a:	f7ff fdbb 	bl	80047f4 <HAL_GetTick>
 8004c7e:	4606      	mov	r6, r0
 8004c80:	e004      	b.n	8004c8c <HAL_RCC_OscConfig+0x3e8>
 8004c82:	f7ff fdb7 	bl	80047f4 <HAL_GetTick>
 8004c86:	1b80      	subs	r0, r0, r6
 8004c88:	2802      	cmp	r0, #2
 8004c8a:	d882      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	0199      	lsls	r1, r3, #6
 8004c90:	d4f7      	bmi.n	8004c82 <HAL_RCC_OscConfig+0x3de>
 8004c92:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004c94:	4b48      	ldr	r3, [pc, #288]	; (8004db8 <HAL_RCC_OscConfig+0x514>)
 8004c96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c98:	400b      	ands	r3, r1
 8004c9a:	4948      	ldr	r1, [pc, #288]	; (8004dbc <HAL_RCC_OscConfig+0x518>)
 8004c9c:	4e45      	ldr	r6, [pc, #276]	; (8004db4 <HAL_RCC_OscConfig+0x510>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ca2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004ca6:	62ab      	str	r3, [r5, #40]	; 0x28
 8004ca8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004cac:	3b01      	subs	r3, #1
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	0412      	lsls	r2, r2, #16
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0612      	lsls	r2, r2, #24
 8004ccc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	632b      	str	r3, [r5, #48]	; 0x30
 8004cd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004cdc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004cde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004ce0:	4011      	ands	r1, r2
 8004ce2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004ce6:	6369      	str	r1, [r5, #52]	; 0x34
 8004ce8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cec:	f023 030c 	bic.w	r3, r3, #12
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004cf4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004cf8:	f023 0302 	bic.w	r3, r3, #2
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d06:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d16:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7ff fd64 	bl	80047f4 <HAL_GetTick>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	e005      	b.n	8004d3c <HAL_RCC_OscConfig+0x498>
 8004d30:	f7ff fd60 	bl	80047f4 <HAL_GetTick>
 8004d34:	1b00      	subs	r0, r0, r4
 8004d36:	2802      	cmp	r0, #2
 8004d38:	f63f af2b 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004d3c:	6833      	ldr	r3, [r6, #0]
 8004d3e:	019a      	lsls	r2, r3, #6
 8004d40:	d5f6      	bpl.n	8004d30 <HAL_RCC_OscConfig+0x48c>
 8004d42:	e66e      	b.n	8004a22 <HAL_RCC_OscConfig+0x17e>
 8004d44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e5cf      	b.n	80048f4 <HAL_RCC_OscConfig+0x50>
 8004d54:	4d17      	ldr	r5, [pc, #92]	; (8004db4 <HAL_RCC_OscConfig+0x510>)
 8004d56:	f241 3788 	movw	r7, #5000	; 0x1388
 8004d5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	672b      	str	r3, [r5, #112]	; 0x70
 8004d62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	672b      	str	r3, [r5, #112]	; 0x70
 8004d6a:	f7ff fd43 	bl	80047f4 <HAL_GetTick>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	e005      	b.n	8004d7e <HAL_RCC_OscConfig+0x4da>
 8004d72:	f7ff fd3f 	bl	80047f4 <HAL_GetTick>
 8004d76:	1b80      	subs	r0, r0, r6
 8004d78:	42b8      	cmp	r0, r7
 8004d7a:	f63f af0a 	bhi.w	8004b92 <HAL_RCC_OscConfig+0x2ee>
 8004d7e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d80:	0798      	lsls	r0, r3, #30
 8004d82:	d4f6      	bmi.n	8004d72 <HAL_RCC_OscConfig+0x4ce>
 8004d84:	e631      	b.n	80049ea <HAL_RCC_OscConfig+0x146>
 8004d86:	68eb      	ldr	r3, [r5, #12]
 8004d88:	6a22      	ldr	r2, [r4, #32]
 8004d8a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004d8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d92:	60eb      	str	r3, [r5, #12]
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	e5f3      	b.n	8004980 <HAL_RCC_OscConfig+0xdc>
 8004d98:	4a06      	ldr	r2, [pc, #24]	; (8004db4 <HAL_RCC_OscConfig+0x510>)
 8004d9a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	e6e6      	b.n	8004b72 <HAL_RCC_OscConfig+0x2ce>
 8004da4:	f042 0204 	orr.w	r2, r2, #4
 8004da8:	671a      	str	r2, [r3, #112]	; 0x70
 8004daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	671a      	str	r2, [r3, #112]	; 0x70
 8004db2:	e6de      	b.n	8004b72 <HAL_RCC_OscConfig+0x2ce>
 8004db4:	58024400 	.word	0x58024400
 8004db8:	fffffc0c 	.word	0xfffffc0c
 8004dbc:	ffff0007 	.word	0xffff0007

08004dc0 <HAL_RCC_GetSysClockFreq>:
 8004dc0:	4a47      	ldr	r2, [pc, #284]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x120>)
 8004dc2:	6913      	ldr	r3, [r2, #16]
 8004dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d004      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x16>
 8004dcc:	2b18      	cmp	r3, #24
 8004dce:	d00d      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x2c>
 8004dd0:	b11b      	cbz	r3, 8004dda <HAL_RCC_GetSysClockFreq+0x1a>
 8004dd2:	4844      	ldr	r0, [pc, #272]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x124>)
 8004dd4:	4770      	bx	lr
 8004dd6:	4844      	ldr	r0, [pc, #272]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x128>)
 8004dd8:	4770      	bx	lr
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	0699      	lsls	r1, r3, #26
 8004dde:	d54a      	bpl.n	8004e76 <HAL_RCC_GetSysClockFreq+0xb6>
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	4842      	ldr	r0, [pc, #264]	; (8004eec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004de4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004de8:	40d8      	lsrs	r0, r3
 8004dea:	4770      	bx	lr
 8004dec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004dee:	b430      	push	{r4, r5}
 8004df0:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004df2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004df4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004df8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004dfa:	f3c4 1005 	ubfx	r0, r4, #4, #6
 8004dfe:	d038      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0xb2>
 8004e00:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004e04:	f005 0501 	and.w	r5, r5, #1
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	fb05 f101 	mul.w	r1, r5, r1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	ee07 1a90 	vmov	s15, r1
 8004e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e1a:	d002      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x62>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d02c      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0xba>
 8004e20:	b393      	cbz	r3, 8004e88 <HAL_RCC_GetSysClockFreq+0xc8>
 8004e22:	ee07 0a90 	vmov	s15, r0
 8004e26:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004ef0 <HAL_RCC_GetSysClockFreq+0x130>
 8004e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004e30:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004e34:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x134>
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	ee06 3a90 	vmov	s13, r3
 8004e40:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004e44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004e48:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004e4c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004e50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004e54:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x120>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6e:	ee17 0a90 	vmov	r0, s15
 8004e72:	bc30      	pop	{r4, r5}
 8004e74:	4770      	bx	lr
 8004e76:	481d      	ldr	r0, [pc, #116]	; (8004eec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e78:	4770      	bx	lr
 8004e7a:	ee07 0a90 	vmov	s15, r0
 8004e7e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x138>
 8004e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e86:	e7d2      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x6e>
 8004e88:	6813      	ldr	r3, [r2, #0]
 8004e8a:	069b      	lsls	r3, r3, #26
 8004e8c:	d520      	bpl.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x110>
 8004e8e:	6814      	ldr	r4, [r2, #0]
 8004e90:	ee07 0a90 	vmov	s15, r0
 8004e94:	4915      	ldr	r1, [pc, #84]	; (8004eec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004e9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004e9c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8004ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x134>
 8004ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eac:	40e1      	lsrs	r1, r4
 8004eae:	ee06 3a90 	vmov	s13, r3
 8004eb2:	ee05 1a90 	vmov	s11, r1
 8004eb6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004eba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004ebe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004ec2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004ec6:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004eca:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004ece:	e7c1      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x94>
 8004ed0:	ee07 0a90 	vmov	s15, r0
 8004ed4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004efc <HAL_RCC_GetSysClockFreq+0x13c>
 8004ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004edc:	e7a7      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x6e>
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	003d0900 	.word	0x003d0900
 8004ee8:	00f42400 	.word	0x00f42400
 8004eec:	03d09000 	.word	0x03d09000
 8004ef0:	4a742400 	.word	0x4a742400
 8004ef4:	39000000 	.word	0x39000000
 8004ef8:	4b742400 	.word	0x4b742400
 8004efc:	4c742400 	.word	0x4c742400

08004f00 <HAL_RCC_ClockConfig>:
 8004f00:	2800      	cmp	r0, #0
 8004f02:	f000 8102 	beq.w	800510a <HAL_RCC_ClockConfig+0x20a>
 8004f06:	4a87      	ldr	r2, [pc, #540]	; (8005124 <HAL_RCC_ClockConfig+0x224>)
 8004f08:	6813      	ldr	r3, [r2, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	4604      	mov	r4, r0
 8004f16:	460d      	mov	r5, r1
 8004f18:	d20c      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x34>
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	f023 030f 	bic.w	r3, r3, #15
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d002      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x34>
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	075f      	lsls	r7, r3, #29
 8004f38:	d50b      	bpl.n	8004f52 <HAL_RCC_ClockConfig+0x52>
 8004f3a:	497b      	ldr	r1, [pc, #492]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004f3c:	6920      	ldr	r0, [r4, #16]
 8004f3e:	698a      	ldr	r2, [r1, #24]
 8004f40:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f44:	4290      	cmp	r0, r2
 8004f46:	d904      	bls.n	8004f52 <HAL_RCC_ClockConfig+0x52>
 8004f48:	698a      	ldr	r2, [r1, #24]
 8004f4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f4e:	4302      	orrs	r2, r0
 8004f50:	618a      	str	r2, [r1, #24]
 8004f52:	071e      	lsls	r6, r3, #28
 8004f54:	d50b      	bpl.n	8004f6e <HAL_RCC_ClockConfig+0x6e>
 8004f56:	4974      	ldr	r1, [pc, #464]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004f58:	6960      	ldr	r0, [r4, #20]
 8004f5a:	69ca      	ldr	r2, [r1, #28]
 8004f5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f60:	4290      	cmp	r0, r2
 8004f62:	d904      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x6e>
 8004f64:	69ca      	ldr	r2, [r1, #28]
 8004f66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f6a:	4302      	orrs	r2, r0
 8004f6c:	61ca      	str	r2, [r1, #28]
 8004f6e:	06d8      	lsls	r0, r3, #27
 8004f70:	d50b      	bpl.n	8004f8a <HAL_RCC_ClockConfig+0x8a>
 8004f72:	496d      	ldr	r1, [pc, #436]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004f74:	69a0      	ldr	r0, [r4, #24]
 8004f76:	69ca      	ldr	r2, [r1, #28]
 8004f78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004f7c:	4290      	cmp	r0, r2
 8004f7e:	d904      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x8a>
 8004f80:	69ca      	ldr	r2, [r1, #28]
 8004f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f86:	4302      	orrs	r2, r0
 8004f88:	61ca      	str	r2, [r1, #28]
 8004f8a:	0699      	lsls	r1, r3, #26
 8004f8c:	d50b      	bpl.n	8004fa6 <HAL_RCC_ClockConfig+0xa6>
 8004f8e:	4966      	ldr	r1, [pc, #408]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004f90:	69e0      	ldr	r0, [r4, #28]
 8004f92:	6a0a      	ldr	r2, [r1, #32]
 8004f94:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f98:	4290      	cmp	r0, r2
 8004f9a:	d904      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0xa6>
 8004f9c:	6a0a      	ldr	r2, [r1, #32]
 8004f9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fa2:	4302      	orrs	r2, r0
 8004fa4:	620a      	str	r2, [r1, #32]
 8004fa6:	079a      	lsls	r2, r3, #30
 8004fa8:	f140 80a1 	bpl.w	80050ee <HAL_RCC_ClockConfig+0x1ee>
 8004fac:	485e      	ldr	r0, [pc, #376]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004fae:	68e1      	ldr	r1, [r4, #12]
 8004fb0:	6982      	ldr	r2, [r0, #24]
 8004fb2:	f002 020f 	and.w	r2, r2, #15
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	d904      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0xc4>
 8004fba:	6982      	ldr	r2, [r0, #24]
 8004fbc:	f022 020f 	bic.w	r2, r2, #15
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	6182      	str	r2, [r0, #24]
 8004fc4:	07d8      	lsls	r0, r3, #31
 8004fc6:	d530      	bpl.n	800502a <HAL_RCC_ClockConfig+0x12a>
 8004fc8:	4a57      	ldr	r2, [pc, #348]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004fca:	68a1      	ldr	r1, [r4, #8]
 8004fcc:	6993      	ldr	r3, [r2, #24]
 8004fce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6193      	str	r3, [r2, #24]
 8004fd6:	6861      	ldr	r1, [r4, #4]
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	2902      	cmp	r1, #2
 8004fdc:	f000 8097 	beq.w	800510e <HAL_RCC_ClockConfig+0x20e>
 8004fe0:	2903      	cmp	r1, #3
 8004fe2:	f000 808e 	beq.w	8005102 <HAL_RCC_ClockConfig+0x202>
 8004fe6:	2901      	cmp	r1, #1
 8004fe8:	f000 8097 	beq.w	800511a <HAL_RCC_ClockConfig+0x21a>
 8004fec:	0758      	lsls	r0, r3, #29
 8004fee:	d59e      	bpl.n	8004f2e <HAL_RCC_ClockConfig+0x2e>
 8004ff0:	4e4d      	ldr	r6, [pc, #308]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8004ff2:	f241 3888 	movw	r8, #5000	; 0x1388
 8004ff6:	6933      	ldr	r3, [r6, #16]
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6133      	str	r3, [r6, #16]
 8005000:	f7ff fbf8 	bl	80047f4 <HAL_GetTick>
 8005004:	4607      	mov	r7, r0
 8005006:	e005      	b.n	8005014 <HAL_RCC_ClockConfig+0x114>
 8005008:	f7ff fbf4 	bl	80047f4 <HAL_GetTick>
 800500c:	1bc0      	subs	r0, r0, r7
 800500e:	4540      	cmp	r0, r8
 8005010:	f200 8081 	bhi.w	8005116 <HAL_RCC_ClockConfig+0x216>
 8005014:	6933      	ldr	r3, [r6, #16]
 8005016:	6862      	ldr	r2, [r4, #4]
 8005018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005020:	d1f2      	bne.n	8005008 <HAL_RCC_ClockConfig+0x108>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	0799      	lsls	r1, r3, #30
 8005026:	d506      	bpl.n	8005036 <HAL_RCC_ClockConfig+0x136>
 8005028:	68e1      	ldr	r1, [r4, #12]
 800502a:	483f      	ldr	r0, [pc, #252]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 800502c:	6982      	ldr	r2, [r0, #24]
 800502e:	f002 020f 	and.w	r2, r2, #15
 8005032:	428a      	cmp	r2, r1
 8005034:	d85f      	bhi.n	80050f6 <HAL_RCC_ClockConfig+0x1f6>
 8005036:	493b      	ldr	r1, [pc, #236]	; (8005124 <HAL_RCC_ClockConfig+0x224>)
 8005038:	680a      	ldr	r2, [r1, #0]
 800503a:	f002 020f 	and.w	r2, r2, #15
 800503e:	42aa      	cmp	r2, r5
 8005040:	d90a      	bls.n	8005058 <HAL_RCC_ClockConfig+0x158>
 8005042:	680a      	ldr	r2, [r1, #0]
 8005044:	f022 020f 	bic.w	r2, r2, #15
 8005048:	432a      	orrs	r2, r5
 800504a:	600a      	str	r2, [r1, #0]
 800504c:	680a      	ldr	r2, [r1, #0]
 800504e:	f002 020f 	and.w	r2, r2, #15
 8005052:	42aa      	cmp	r2, r5
 8005054:	f47f af6b 	bne.w	8004f2e <HAL_RCC_ClockConfig+0x2e>
 8005058:	075a      	lsls	r2, r3, #29
 800505a:	d50b      	bpl.n	8005074 <HAL_RCC_ClockConfig+0x174>
 800505c:	4932      	ldr	r1, [pc, #200]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 800505e:	6920      	ldr	r0, [r4, #16]
 8005060:	698a      	ldr	r2, [r1, #24]
 8005062:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005066:	4290      	cmp	r0, r2
 8005068:	d204      	bcs.n	8005074 <HAL_RCC_ClockConfig+0x174>
 800506a:	698a      	ldr	r2, [r1, #24]
 800506c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005070:	4302      	orrs	r2, r0
 8005072:	618a      	str	r2, [r1, #24]
 8005074:	071f      	lsls	r7, r3, #28
 8005076:	d50b      	bpl.n	8005090 <HAL_RCC_ClockConfig+0x190>
 8005078:	492b      	ldr	r1, [pc, #172]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 800507a:	6960      	ldr	r0, [r4, #20]
 800507c:	69ca      	ldr	r2, [r1, #28]
 800507e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005082:	4290      	cmp	r0, r2
 8005084:	d204      	bcs.n	8005090 <HAL_RCC_ClockConfig+0x190>
 8005086:	69ca      	ldr	r2, [r1, #28]
 8005088:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800508c:	4302      	orrs	r2, r0
 800508e:	61ca      	str	r2, [r1, #28]
 8005090:	06de      	lsls	r6, r3, #27
 8005092:	d50b      	bpl.n	80050ac <HAL_RCC_ClockConfig+0x1ac>
 8005094:	4924      	ldr	r1, [pc, #144]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 8005096:	69a0      	ldr	r0, [r4, #24]
 8005098:	69ca      	ldr	r2, [r1, #28]
 800509a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800509e:	4290      	cmp	r0, r2
 80050a0:	d204      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x1ac>
 80050a2:	69ca      	ldr	r2, [r1, #28]
 80050a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050a8:	4302      	orrs	r2, r0
 80050aa:	61ca      	str	r2, [r1, #28]
 80050ac:	069d      	lsls	r5, r3, #26
 80050ae:	d50b      	bpl.n	80050c8 <HAL_RCC_ClockConfig+0x1c8>
 80050b0:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 80050b2:	69e1      	ldr	r1, [r4, #28]
 80050b4:	6a13      	ldr	r3, [r2, #32]
 80050b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ba:	4299      	cmp	r1, r3
 80050bc:	d204      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x1c8>
 80050be:	6a13      	ldr	r3, [r2, #32]
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6213      	str	r3, [r2, #32]
 80050c8:	f7ff fe7a 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <HAL_RCC_ClockConfig+0x228>)
 80050ce:	4603      	mov	r3, r0
 80050d0:	4816      	ldr	r0, [pc, #88]	; (800512c <HAL_RCC_ClockConfig+0x22c>)
 80050d2:	6992      	ldr	r2, [r2, #24]
 80050d4:	4916      	ldr	r1, [pc, #88]	; (8005130 <HAL_RCC_ClockConfig+0x230>)
 80050d6:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80050da:	5c82      	ldrb	r2, [r0, r2]
 80050dc:	200e      	movs	r0, #14
 80050de:	f002 021f 	and.w	r2, r2, #31
 80050e2:	40d3      	lsrs	r3, r2
 80050e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e8:	600b      	str	r3, [r1, #0]
 80050ea:	f7fe bfa7 	b.w	800403c <HAL_InitTick>
 80050ee:	07da      	lsls	r2, r3, #31
 80050f0:	f53f af6a 	bmi.w	8004fc8 <HAL_RCC_ClockConfig+0xc8>
 80050f4:	e79f      	b.n	8005036 <HAL_RCC_ClockConfig+0x136>
 80050f6:	6982      	ldr	r2, [r0, #24]
 80050f8:	f022 020f 	bic.w	r2, r2, #15
 80050fc:	4311      	orrs	r1, r2
 80050fe:	6181      	str	r1, [r0, #24]
 8005100:	e799      	b.n	8005036 <HAL_RCC_ClockConfig+0x136>
 8005102:	019f      	lsls	r7, r3, #6
 8005104:	f53f af74 	bmi.w	8004ff0 <HAL_RCC_ClockConfig+0xf0>
 8005108:	e711      	b.n	8004f2e <HAL_RCC_ClockConfig+0x2e>
 800510a:	2001      	movs	r0, #1
 800510c:	4770      	bx	lr
 800510e:	039b      	lsls	r3, r3, #14
 8005110:	f53f af6e 	bmi.w	8004ff0 <HAL_RCC_ClockConfig+0xf0>
 8005114:	e70b      	b.n	8004f2e <HAL_RCC_ClockConfig+0x2e>
 8005116:	2003      	movs	r0, #3
 8005118:	e70a      	b.n	8004f30 <HAL_RCC_ClockConfig+0x30>
 800511a:	05de      	lsls	r6, r3, #23
 800511c:	f53f af68 	bmi.w	8004ff0 <HAL_RCC_ClockConfig+0xf0>
 8005120:	e705      	b.n	8004f2e <HAL_RCC_ClockConfig+0x2e>
 8005122:	bf00      	nop
 8005124:	52002000 	.word	0x52002000
 8005128:	58024400 	.word	0x58024400
 800512c:	08008db4 	.word	0x08008db4
 8005130:	20000000 	.word	0x20000000

08005134 <RCCEx_PLL2_Config>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	4c3a      	ldr	r4, [pc, #232]	; (8005220 <RCCEx_PLL2_Config+0xec>)
 8005138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d067      	beq.n	8005212 <RCCEx_PLL2_Config+0xde>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	4606      	mov	r6, r0
 8005146:	460f      	mov	r7, r1
 8005148:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	f7ff fb51 	bl	80047f4 <HAL_GetTick>
 8005152:	4605      	mov	r5, r0
 8005154:	e004      	b.n	8005160 <RCCEx_PLL2_Config+0x2c>
 8005156:	f7ff fb4d 	bl	80047f4 <HAL_GetTick>
 800515a:	1b43      	subs	r3, r0, r5
 800515c:	2b02      	cmp	r3, #2
 800515e:	d856      	bhi.n	800520e <RCCEx_PLL2_Config+0xda>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	011a      	lsls	r2, r3, #4
 8005164:	d4f7      	bmi.n	8005156 <RCCEx_PLL2_Config+0x22>
 8005166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800516e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005172:	62a3      	str	r3, [r4, #40]	; 0x28
 8005174:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005178:	3b01      	subs	r3, #1
 800517a:	3a01      	subs	r2, #1
 800517c:	025b      	lsls	r3, r3, #9
 800517e:	0412      	lsls	r2, r2, #16
 8005180:	b29b      	uxth	r3, r3
 8005182:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005186:	4313      	orrs	r3, r2
 8005188:	6872      	ldr	r2, [r6, #4]
 800518a:	3a01      	subs	r2, #1
 800518c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005190:	4313      	orrs	r3, r2
 8005192:	6932      	ldr	r2, [r6, #16]
 8005194:	3a01      	subs	r2, #1
 8005196:	0612      	lsls	r2, r2, #24
 8005198:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800519c:	4313      	orrs	r3, r2
 800519e:	63a3      	str	r3, [r4, #56]	; 0x38
 80051a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051a2:	6972      	ldr	r2, [r6, #20]
 80051a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051a8:	4313      	orrs	r3, r2
 80051aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051ae:	69b3      	ldr	r3, [r6, #24]
 80051b0:	f022 0220 	bic.w	r2, r2, #32
 80051b4:	431a      	orrs	r2, r3
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <RCCEx_PLL2_Config+0xf0>)
 80051b8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80051ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051bc:	f022 0210 	bic.w	r2, r2, #16
 80051c0:	62e2      	str	r2, [r4, #44]	; 0x2c
 80051c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051c4:	69f2      	ldr	r2, [r6, #28]
 80051c6:	400b      	ands	r3, r1
 80051c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80051cc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80051ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051d0:	f043 0310 	orr.w	r3, r3, #16
 80051d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051d8:	b1ef      	cbz	r7, 8005216 <RCCEx_PLL2_Config+0xe2>
 80051da:	2f01      	cmp	r7, #1
 80051dc:	bf0c      	ite	eq
 80051de:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80051e2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80051e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051e8:	4c0d      	ldr	r4, [pc, #52]	; (8005220 <RCCEx_PLL2_Config+0xec>)
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	f7ff faff 	bl	80047f4 <HAL_GetTick>
 80051f6:	4605      	mov	r5, r0
 80051f8:	e004      	b.n	8005204 <RCCEx_PLL2_Config+0xd0>
 80051fa:	f7ff fafb 	bl	80047f4 <HAL_GetTick>
 80051fe:	1b40      	subs	r0, r0, r5
 8005200:	2802      	cmp	r0, #2
 8005202:	d804      	bhi.n	800520e <RCCEx_PLL2_Config+0xda>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	d5f7      	bpl.n	80051fa <RCCEx_PLL2_Config+0xc6>
 800520a:	2000      	movs	r0, #0
 800520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520e:	2003      	movs	r0, #3
 8005210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005212:	2001      	movs	r0, #1
 8005214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800521a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800521c:	e7e4      	b.n	80051e8 <RCCEx_PLL2_Config+0xb4>
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	ffff0007 	.word	0xffff0007

08005228 <RCCEx_PLL3_Config>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	4c3a      	ldr	r4, [pc, #232]	; (8005314 <RCCEx_PLL3_Config+0xec>)
 800522c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d067      	beq.n	8005306 <RCCEx_PLL3_Config+0xde>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	4606      	mov	r6, r0
 800523a:	460f      	mov	r7, r1
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	f7ff fad7 	bl	80047f4 <HAL_GetTick>
 8005246:	4605      	mov	r5, r0
 8005248:	e004      	b.n	8005254 <RCCEx_PLL3_Config+0x2c>
 800524a:	f7ff fad3 	bl	80047f4 <HAL_GetTick>
 800524e:	1b43      	subs	r3, r0, r5
 8005250:	2b02      	cmp	r3, #2
 8005252:	d856      	bhi.n	8005302 <RCCEx_PLL3_Config+0xda>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	009a      	lsls	r2, r3, #2
 8005258:	d4f7      	bmi.n	800524a <RCCEx_PLL3_Config+0x22>
 800525a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005262:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005266:	62a3      	str	r3, [r4, #40]	; 0x28
 8005268:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800526c:	3b01      	subs	r3, #1
 800526e:	3a01      	subs	r2, #1
 8005270:	025b      	lsls	r3, r3, #9
 8005272:	0412      	lsls	r2, r2, #16
 8005274:	b29b      	uxth	r3, r3
 8005276:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800527a:	4313      	orrs	r3, r2
 800527c:	6872      	ldr	r2, [r6, #4]
 800527e:	3a01      	subs	r2, #1
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	4313      	orrs	r3, r2
 8005286:	6932      	ldr	r2, [r6, #16]
 8005288:	3a01      	subs	r2, #1
 800528a:	0612      	lsls	r2, r2, #24
 800528c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005290:	4313      	orrs	r3, r2
 8005292:	6423      	str	r3, [r4, #64]	; 0x40
 8005294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005296:	6972      	ldr	r2, [r6, #20]
 8005298:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800529c:	4313      	orrs	r3, r2
 800529e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052a2:	69b3      	ldr	r3, [r6, #24]
 80052a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052a8:	431a      	orrs	r2, r3
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <RCCEx_PLL3_Config+0xf0>)
 80052ac:	62e2      	str	r2, [r4, #44]	; 0x2c
 80052ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80052b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80052b8:	69f2      	ldr	r2, [r6, #28]
 80052ba:	400b      	ands	r3, r1
 80052bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80052c0:	6463      	str	r3, [r4, #68]	; 0x44
 80052c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052cc:	b1ef      	cbz	r7, 800530a <RCCEx_PLL3_Config+0xe2>
 80052ce:	2f01      	cmp	r7, #1
 80052d0:	bf0c      	ite	eq
 80052d2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
 80052d6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80052da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052dc:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <RCCEx_PLL3_Config+0xec>)
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	f7ff fa85 	bl	80047f4 <HAL_GetTick>
 80052ea:	4605      	mov	r5, r0
 80052ec:	e004      	b.n	80052f8 <RCCEx_PLL3_Config+0xd0>
 80052ee:	f7ff fa81 	bl	80047f4 <HAL_GetTick>
 80052f2:	1b40      	subs	r0, r0, r5
 80052f4:	2802      	cmp	r0, #2
 80052f6:	d804      	bhi.n	8005302 <RCCEx_PLL3_Config+0xda>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	d5f7      	bpl.n	80052ee <RCCEx_PLL3_Config+0xc6>
 80052fe:	2000      	movs	r0, #0
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	2003      	movs	r0, #3
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005306:	2001      	movs	r0, #1
 8005308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800530e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005310:	e7e4      	b.n	80052dc <RCCEx_PLL3_Config+0xb4>
 8005312:	bf00      	nop
 8005314:	58024400 	.word	0x58024400
 8005318:	ffff0007 	.word	0xffff0007

0800531c <HAL_RCCEx_PeriphCLKConfig>:
 800531c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005320:	6803      	ldr	r3, [r0, #0]
 8005322:	4604      	mov	r4, r0
 8005324:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8005328:	d022      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800532a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800532c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005330:	f000 84ce 	beq.w	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8005334:	d811      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8005336:	2a00      	cmp	r2, #0
 8005338:	f000 84f8 	beq.w	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xa10>
 800533c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005340:	f040 84f1 	bne.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005344:	2102      	movs	r1, #2
 8005346:	3004      	adds	r0, #4
 8005348:	f7ff fef4 	bl	8005134 <RCCEx_PLL2_Config>
 800534c:	4606      	mov	r6, r0
 800534e:	2e00      	cmp	r6, #0
 8005350:	f040 8486 	bne.w	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005354:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x46>
 800535a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800535e:	f040 84e2 	bne.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005362:	48a8      	ldr	r0, [pc, #672]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005364:	2600      	movs	r6, #0
 8005366:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005368:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800536c:	430a      	orrs	r2, r1
 800536e:	6502      	str	r2, [r0, #80]	; 0x50
 8005370:	05dd      	lsls	r5, r3, #23
 8005372:	d50a      	bpl.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005374:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005376:	2a04      	cmp	r2, #4
 8005378:	d806      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800537a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800537e:	04a2      	.short	0x04a2
 8005380:	049a0493 	.word	0x049a0493
 8005384:	02df02df 	.word	0x02df02df
 8005388:	2601      	movs	r6, #1
 800538a:	4635      	mov	r5, r6
 800538c:	0598      	lsls	r0, r3, #22
 800538e:	d51b      	bpl.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005390:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005392:	2a80      	cmp	r2, #128	; 0x80
 8005394:	f000 845b 	beq.w	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8005398:	f200 80ec 	bhi.w	8005574 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800539c:	2a00      	cmp	r2, #0
 800539e:	f000 838b 	beq.w	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 80053a2:	2a40      	cmp	r2, #64	; 0x40
 80053a4:	f040 80ed 	bne.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80053a8:	2100      	movs	r1, #0
 80053aa:	1d20      	adds	r0, r4, #4
 80053ac:	f7ff fec2 	bl	8005134 <RCCEx_PLL2_Config>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	4605      	mov	r5, r0
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	f040 8367 	bne.w	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 80053ba:	4992      	ldr	r1, [pc, #584]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053be:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80053c0:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80053c4:	4302      	orrs	r2, r0
 80053c6:	650a      	str	r2, [r1, #80]	; 0x50
 80053c8:	0559      	lsls	r1, r3, #21
 80053ca:	d51f      	bpl.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80053cc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80053d0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80053d4:	f000 8447 	beq.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80053d8:	f200 80d6 	bhi.w	8005588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053dc:	2a00      	cmp	r2, #0
 80053de:	f000 8371 	beq.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80053e2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80053e6:	f040 80d7 	bne.w	8005598 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053ea:	2100      	movs	r1, #0
 80053ec:	1d20      	adds	r0, r4, #4
 80053ee:	f7ff fea1 	bl	8005134 <RCCEx_PLL2_Config>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	4605      	mov	r5, r0
 80053f6:	2d00      	cmp	r5, #0
 80053f8:	f040 8344 	bne.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80053fc:	4981      	ldr	r1, [pc, #516]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053fe:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8005402:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005404:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005408:	4302      	orrs	r2, r0
 800540a:	658a      	str	r2, [r1, #88]	; 0x58
 800540c:	051a      	lsls	r2, r3, #20
 800540e:	d51f      	bpl.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005410:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8005414:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005418:	f000 842e 	beq.w	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800541c:	f200 80bf 	bhi.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8005420:	2a00      	cmp	r2, #0
 8005422:	f000 8355 	beq.w	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8005426:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800542a:	f040 80c0 	bne.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800542e:	2100      	movs	r1, #0
 8005430:	1d20      	adds	r0, r4, #4
 8005432:	f7ff fe7f 	bl	8005134 <RCCEx_PLL2_Config>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	4605      	mov	r5, r0
 800543a:	2d00      	cmp	r5, #0
 800543c:	f040 832a 	bne.w	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8005440:	4970      	ldr	r1, [pc, #448]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005442:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8005446:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005448:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800544c:	4302      	orrs	r2, r0
 800544e:	658a      	str	r2, [r1, #88]	; 0x58
 8005450:	019f      	lsls	r7, r3, #6
 8005452:	d518      	bpl.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005454:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005456:	2a20      	cmp	r2, #32
 8005458:	f000 83da 	beq.w	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800545c:	f200 80aa 	bhi.w	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005460:	b13a      	cbz	r2, 8005472 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005462:	2a10      	cmp	r2, #16
 8005464:	f040 80a9 	bne.w	80055ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8005468:	4966      	ldr	r1, [pc, #408]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800546a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800546c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005470:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005472:	2d00      	cmp	r5, #0
 8005474:	f040 8359 	bne.w	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005478:	4962      	ldr	r1, [pc, #392]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800547a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800547c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800547e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005482:	4302      	orrs	r2, r0
 8005484:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005486:	04d8      	lsls	r0, r3, #19
 8005488:	d51d      	bpl.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800548a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800548c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005490:	f000 83fb 	beq.w	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005494:	f200 8094 	bhi.w	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8005498:	2a00      	cmp	r2, #0
 800549a:	f000 831f 	beq.w	8005adc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800549e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80054a2:	f040 8095 	bne.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054a6:	2100      	movs	r1, #0
 80054a8:	1d20      	adds	r0, r4, #4
 80054aa:	f7ff fe43 	bl	8005134 <RCCEx_PLL2_Config>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	4605      	mov	r5, r0
 80054b2:	2d00      	cmp	r5, #0
 80054b4:	f040 82ec 	bne.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x774>
 80054b8:	4952      	ldr	r1, [pc, #328]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80054bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80054be:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80054c2:	4302      	orrs	r2, r0
 80054c4:	650a      	str	r2, [r1, #80]	; 0x50
 80054c6:	0499      	lsls	r1, r3, #18
 80054c8:	d51a      	bpl.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80054ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80054cc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80054d0:	f000 8374 	beq.w	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80054d4:	d87f      	bhi.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80054d6:	b14a      	cbz	r2, 80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80054d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80054dc:	f040 8083 	bne.w	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054e0:	2101      	movs	r1, #1
 80054e2:	1d20      	adds	r0, r4, #4
 80054e4:	f7ff fe26 	bl	8005134 <RCCEx_PLL2_Config>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	4605      	mov	r5, r0
 80054ec:	2d00      	cmp	r5, #0
 80054ee:	f040 831e 	bne.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80054f2:	4944      	ldr	r1, [pc, #272]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80054f6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80054f8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80054fc:	4302      	orrs	r2, r0
 80054fe:	650a      	str	r2, [r1, #80]	; 0x50
 8005500:	045a      	lsls	r2, r3, #17
 8005502:	d51b      	bpl.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005504:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8005508:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800550c:	f000 8360 	beq.w	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005510:	d86c      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005512:	b142      	cbz	r2, 8005526 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005514:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005518:	d170      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 800551a:	2101      	movs	r1, #1
 800551c:	1d20      	adds	r0, r4, #4
 800551e:	f7ff fe09 	bl	8005134 <RCCEx_PLL2_Config>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	4605      	mov	r5, r0
 8005526:	2d00      	cmp	r5, #0
 8005528:	f040 8303 	bne.w	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800552c:	4935      	ldr	r1, [pc, #212]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800552e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8005532:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005534:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005538:	4302      	orrs	r2, r0
 800553a:	658a      	str	r2, [r1, #88]	; 0x58
 800553c:	041f      	lsls	r7, r3, #16
 800553e:	d50d      	bpl.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005540:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005542:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005546:	f000 8331 	beq.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0x890>
 800554a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800554e:	f000 8201 	beq.w	8005954 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8005552:	2a00      	cmp	r2, #0
 8005554:	f000 8204 	beq.w	8005960 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8005558:	2601      	movs	r6, #1
 800555a:	4635      	mov	r5, r6
 800555c:	01d8      	lsls	r0, r3, #7
 800555e:	d55d      	bpl.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005560:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005562:	2a03      	cmp	r2, #3
 8005564:	f200 840a 	bhi.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005568:	e8df f012 	tbh	[pc, r2, lsl #1]
 800556c:	03170054 	.word	0x03170054
 8005570:	0054004e 	.word	0x0054004e
 8005574:	2ac0      	cmp	r2, #192	; 0xc0
 8005576:	f43f af1d 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800557a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800557e:	f43f af19 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005582:	2601      	movs	r6, #1
 8005584:	4635      	mov	r5, r6
 8005586:	e71f      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005588:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800558c:	f43f af33 	beq.w	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005590:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005594:	f43f af2f 	beq.w	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005598:	2601      	movs	r6, #1
 800559a:	4635      	mov	r5, r6
 800559c:	e736      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800559e:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80055a2:	f43f af4a 	beq.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80055a6:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80055aa:	f43f af46 	beq.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80055ae:	2601      	movs	r6, #1
 80055b0:	4635      	mov	r5, r6
 80055b2:	e74d      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80055b4:	2a30      	cmp	r2, #48	; 0x30
 80055b6:	f43f af5c 	beq.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80055ba:	2601      	movs	r6, #1
 80055bc:	4635      	mov	r5, r6
 80055be:	e762      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80055c0:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80055c4:	f43f af75 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055c8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80055cc:	f43f af71 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055d0:	2601      	movs	r6, #1
 80055d2:	4635      	mov	r5, r6
 80055d4:	e777      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80055d6:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80055da:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80055de:	d085      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80055e0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80055e4:	d082      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80055e6:	2601      	movs	r6, #1
 80055e8:	4635      	mov	r5, r6
 80055ea:	e789      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80055ec:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80055f0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80055f4:	d097      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80055f6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80055fa:	d094      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80055fc:	2601      	movs	r6, #1
 80055fe:	4635      	mov	r5, r6
 8005600:	e79c      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005602:	bf00      	nop
 8005604:	58024400 	.word	0x58024400
 8005608:	2102      	movs	r1, #2
 800560a:	1d20      	adds	r0, r4, #4
 800560c:	f7ff fd92 	bl	8005134 <RCCEx_PLL2_Config>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	4605      	mov	r5, r0
 8005614:	2d00      	cmp	r5, #0
 8005616:	f000 826b 	beq.w	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 800561a:	462e      	mov	r6, r5
 800561c:	0259      	lsls	r1, r3, #9
 800561e:	f100 81f0 	bmi.w	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8005622:	07df      	lsls	r7, r3, #31
 8005624:	d52f      	bpl.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005626:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005628:	2a28      	cmp	r2, #40	; 0x28
 800562a:	d82a      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800562c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005630:	002901d3 	.word	0x002901d3
 8005634:	00290029 	.word	0x00290029
 8005638:	00290029 	.word	0x00290029
 800563c:	00290029 	.word	0x00290029
 8005640:	0029036d 	.word	0x0029036d
 8005644:	00290029 	.word	0x00290029
 8005648:	00290029 	.word	0x00290029
 800564c:	00290029 	.word	0x00290029
 8005650:	002901cc 	.word	0x002901cc
 8005654:	00290029 	.word	0x00290029
 8005658:	00290029 	.word	0x00290029
 800565c:	00290029 	.word	0x00290029
 8005660:	002901d3 	.word	0x002901d3
 8005664:	00290029 	.word	0x00290029
 8005668:	00290029 	.word	0x00290029
 800566c:	00290029 	.word	0x00290029
 8005670:	002901d3 	.word	0x002901d3
 8005674:	00290029 	.word	0x00290029
 8005678:	00290029 	.word	0x00290029
 800567c:	00290029 	.word	0x00290029
 8005680:	01d3      	.short	0x01d3
 8005682:	2601      	movs	r6, #1
 8005684:	4635      	mov	r5, r6
 8005686:	0798      	lsls	r0, r3, #30
 8005688:	d516      	bpl.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800568a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800568c:	2a05      	cmp	r2, #5
 800568e:	f200 8378 	bhi.w	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8005692:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005696:	000d      	.short	0x000d
 8005698:	00060330 	.word	0x00060330
 800569c:	000d000d 	.word	0x000d000d
 80056a0:	000d      	.short	0x000d
 80056a2:	2101      	movs	r1, #1
 80056a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056a8:	f7ff fdbe 	bl	8005228 <RCCEx_PLL3_Config>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	4605      	mov	r5, r0
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	f000 8225 	beq.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80056b6:	462e      	mov	r6, r5
 80056b8:	0759      	lsls	r1, r3, #29
 80056ba:	d517      	bpl.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80056bc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80056c0:	2a05      	cmp	r2, #5
 80056c2:	f200 8361 	bhi.w	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80056c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80056ca:	000d      	.short	0x000d
 80056cc:	0006030c 	.word	0x0006030c
 80056d0:	000d000d 	.word	0x000d000d
 80056d4:	000d      	.short	0x000d
 80056d6:	2101      	movs	r1, #1
 80056d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056dc:	f7ff fda4 	bl	8005228 <RCCEx_PLL3_Config>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	4605      	mov	r5, r0
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	f000 8213 	beq.w	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 80056ea:	462e      	mov	r6, r5
 80056ec:	069a      	lsls	r2, r3, #26
 80056ee:	d51d      	bpl.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80056f0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80056f4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80056f8:	f000 8245 	beq.w	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80056fc:	f200 80dc 	bhi.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005700:	b14a      	cbz	r2, 8005716 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005702:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005706:	f040 80e1 	bne.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 800570a:	2100      	movs	r1, #0
 800570c:	1d20      	adds	r0, r4, #4
 800570e:	f7ff fd11 	bl	8005134 <RCCEx_PLL2_Config>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	4605      	mov	r5, r0
 8005716:	2d00      	cmp	r5, #0
 8005718:	f040 8205 	bne.w	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800571c:	49a9      	ldr	r1, [pc, #676]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800571e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005722:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005724:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005728:	4302      	orrs	r2, r0
 800572a:	654a      	str	r2, [r1, #84]	; 0x54
 800572c:	065f      	lsls	r7, r3, #25
 800572e:	d51d      	bpl.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005730:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005734:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005738:	f000 8254 	beq.w	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800573c:	f200 80c9 	bhi.w	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8005740:	b14a      	cbz	r2, 8005756 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005742:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005746:	f040 80ce 	bne.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800574a:	2100      	movs	r1, #0
 800574c:	1d20      	adds	r0, r4, #4
 800574e:	f7ff fcf1 	bl	8005134 <RCCEx_PLL2_Config>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	4605      	mov	r5, r0
 8005756:	2d00      	cmp	r5, #0
 8005758:	f040 81c8 	bne.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800575c:	4999      	ldr	r1, [pc, #612]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800575e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8005762:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005764:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005768:	4302      	orrs	r2, r0
 800576a:	658a      	str	r2, [r1, #88]	; 0x58
 800576c:	0618      	lsls	r0, r3, #24
 800576e:	d51d      	bpl.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005770:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8005774:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005778:	f000 823f 	beq.w	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800577c:	f200 80b6 	bhi.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005780:	b14a      	cbz	r2, 8005796 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005782:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005786:	f040 80bb 	bne.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800578a:	2100      	movs	r1, #0
 800578c:	1d20      	adds	r0, r4, #4
 800578e:	f7ff fcd1 	bl	8005134 <RCCEx_PLL2_Config>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	4605      	mov	r5, r0
 8005796:	2d00      	cmp	r5, #0
 8005798:	f040 81a6 	bne.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800579c:	4989      	ldr	r1, [pc, #548]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800579e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80057a2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80057a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057a8:	4302      	orrs	r2, r0
 80057aa:	658a      	str	r2, [r1, #88]	; 0x58
 80057ac:	0719      	lsls	r1, r3, #28
 80057ae:	d50b      	bpl.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80057b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80057b4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80057b8:	f000 823e 	beq.w	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80057bc:	4881      	ldr	r0, [pc, #516]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80057be:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80057c4:	430a      	orrs	r2, r1
 80057c6:	6542      	str	r2, [r0, #84]	; 0x54
 80057c8:	06da      	lsls	r2, r3, #27
 80057ca:	d50b      	bpl.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 80057cc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80057d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80057d4:	f000 8225 	beq.w	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x906>
 80057d8:	487a      	ldr	r0, [pc, #488]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80057da:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80057dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057e0:	430a      	orrs	r2, r1
 80057e2:	6582      	str	r2, [r0, #88]	; 0x58
 80057e4:	031f      	lsls	r7, r3, #12
 80057e6:	d50e      	bpl.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80057e8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80057ec:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80057f0:	f000 80d4 	beq.w	800599c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80057f4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80057f8:	f000 80d7 	beq.w	80059aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80057fc:	2900      	cmp	r1, #0
 80057fe:	f000 81ba 	beq.w	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8005802:	2601      	movs	r6, #1
 8005804:	4635      	mov	r5, r6
 8005806:	0358      	lsls	r0, r3, #13
 8005808:	d50f      	bpl.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 800580a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800580e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005812:	f000 80b0 	beq.w	8005976 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8005816:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800581a:	f000 80b3 	beq.w	8005984 <HAL_RCCEx_PeriphCLKConfig+0x668>
 800581e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005822:	f000 81a0 	beq.w	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8005826:	2601      	movs	r6, #1
 8005828:	4635      	mov	r5, r6
 800582a:	03d9      	lsls	r1, r3, #15
 800582c:	d509      	bpl.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800582e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005830:	2a00      	cmp	r2, #0
 8005832:	f000 8186 	beq.w	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x826>
 8005836:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800583a:	f000 812d 	beq.w	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 800583e:	2601      	movs	r6, #1
 8005840:	4635      	mov	r5, r6
 8005842:	009a      	lsls	r2, r3, #2
 8005844:	f100 80d2 	bmi.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005848:	039f      	lsls	r7, r3, #14
 800584a:	d45c      	bmi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800584c:	1e30      	subs	r0, r6, #0
 800584e:	bf18      	it	ne
 8005850:	2001      	movne	r0, #1
 8005852:	02de      	lsls	r6, r3, #11
 8005854:	d506      	bpl.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005856:	495b      	ldr	r1, [pc, #364]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005858:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800585a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800585c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005860:	432a      	orrs	r2, r5
 8005862:	650a      	str	r2, [r1, #80]	; 0x50
 8005864:	00dd      	lsls	r5, r3, #3
 8005866:	d507      	bpl.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8005868:	4956      	ldr	r1, [pc, #344]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800586a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800586e:	690a      	ldr	r2, [r1, #16]
 8005870:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005874:	432a      	orrs	r2, r5
 8005876:	610a      	str	r2, [r1, #16]
 8005878:	0299      	lsls	r1, r3, #10
 800587a:	d506      	bpl.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800587c:	4951      	ldr	r1, [pc, #324]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800587e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8005880:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005882:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005886:	432a      	orrs	r2, r5
 8005888:	650a      	str	r2, [r1, #80]	; 0x50
 800588a:	005a      	lsls	r2, r3, #1
 800588c:	d509      	bpl.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800588e:	4a4d      	ldr	r2, [pc, #308]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005890:	6911      	ldr	r1, [r2, #16]
 8005892:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8005896:	6111      	str	r1, [r2, #16]
 8005898:	6911      	ldr	r1, [r2, #16]
 800589a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800589e:	4329      	orrs	r1, r5
 80058a0:	6111      	str	r1, [r2, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da06      	bge.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80058a6:	4a47      	ldr	r2, [pc, #284]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80058a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80058aa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80058ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80058b0:	430b      	orrs	r3, r1
 80058b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80058bc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80058c0:	f43f af29 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80058c4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80058c8:	f43f af25 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80058cc:	2601      	movs	r6, #1
 80058ce:	4635      	mov	r5, r6
 80058d0:	e72c      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80058d2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80058d6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80058da:	f43f af3c 	beq.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80058de:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80058e2:	f43f af38 	beq.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80058e6:	2601      	movs	r6, #1
 80058e8:	4635      	mov	r5, r6
 80058ea:	e73f      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x450>
 80058ec:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80058f0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80058f4:	f43f af4f 	beq.w	8005796 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80058f8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80058fc:	f43f af4b 	beq.w	8005796 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005900:	2601      	movs	r6, #1
 8005902:	4635      	mov	r5, r6
 8005904:	e752      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005906:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005908:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800590c:	f000 8122 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005910:	d906      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005912:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8005916:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800591a:	d003      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800591c:	2001      	movs	r0, #1
 800591e:	e798      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005920:	2a00      	cmp	r2, #0
 8005922:	d1fb      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005924:	2d00      	cmp	r5, #0
 8005926:	d1f9      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005928:	4d26      	ldr	r5, [pc, #152]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800592a:	1e30      	subs	r0, r6, #0
 800592c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800592e:	bf18      	it	ne
 8005930:	2001      	movne	r0, #1
 8005932:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005936:	430a      	orrs	r2, r1
 8005938:	656a      	str	r2, [r5, #84]	; 0x54
 800593a:	e78a      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800593c:	4635      	mov	r5, r6
 800593e:	2d00      	cmp	r5, #0
 8005940:	f040 80a4 	bne.w	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005944:	491f      	ldr	r1, [pc, #124]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005948:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800594a:	f022 0207 	bic.w	r2, r2, #7
 800594e:	4302      	orrs	r2, r0
 8005950:	650a      	str	r2, [r1, #80]	; 0x50
 8005952:	e51b      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005954:	2101      	movs	r1, #1
 8005956:	1d20      	adds	r0, r4, #4
 8005958:	f7ff fbec 	bl	8005134 <RCCEx_PLL2_Config>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	4605      	mov	r5, r0
 8005960:	2d00      	cmp	r5, #0
 8005962:	f040 80de 	bne.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8005966:	4917      	ldr	r1, [pc, #92]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8005968:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800596a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800596c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005970:	4302      	orrs	r2, r0
 8005972:	650a      	str	r2, [r1, #80]	; 0x50
 8005974:	e5f2      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005976:	2101      	movs	r1, #1
 8005978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800597c:	f7ff fc54 	bl	8005228 <RCCEx_PLL3_Config>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	4605      	mov	r5, r0
 8005984:	2d00      	cmp	r5, #0
 8005986:	f040 80da 	bne.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x822>
 800598a:	490e      	ldr	r1, [pc, #56]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800598c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005990:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005992:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005996:	4302      	orrs	r2, r0
 8005998:	654a      	str	r2, [r1, #84]	; 0x54
 800599a:	e746      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 800599c:	2102      	movs	r1, #2
 800599e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059a2:	f7ff fc41 	bl	8005228 <RCCEx_PLL3_Config>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4605      	mov	r5, r0
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	f040 80c5 	bne.w	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80059b0:	4904      	ldr	r1, [pc, #16]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80059b2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80059b6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80059b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80059bc:	4302      	orrs	r2, r0
 80059be:	658a      	str	r2, [r1, #88]	; 0x58
 80059c0:	e721      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	2101      	movs	r1, #1
 80059ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059ce:	f7ff fc2b 	bl	8005228 <RCCEx_PLL3_Config>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	4605      	mov	r5, r0
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	f040 80ad 	bne.w	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80059dc:	49af      	ldr	r1, [pc, #700]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80059de:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80059e0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80059e2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80059e6:	4302      	orrs	r2, r0
 80059e8:	654a      	str	r2, [r1, #84]	; 0x54
 80059ea:	e64c      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80059ec:	2102      	movs	r1, #2
 80059ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059f2:	f7ff fc19 	bl	8005228 <RCCEx_PLL3_Config>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f43f af25 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80059fe:	2601      	movs	r6, #1
 8005a00:	e722      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005a02:	4fa7      	ldr	r7, [pc, #668]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	f7fe fef2 	bl	80047f4 <HAL_GetTick>
 8005a10:	4680      	mov	r8, r0
 8005a12:	e006      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8005a14:	f7fe feee 	bl	80047f4 <HAL_GetTick>
 8005a18:	eba0 0008 	sub.w	r0, r0, r8
 8005a1c:	2864      	cmp	r0, #100	; 0x64
 8005a1e:	f200 817e 	bhi.w	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	05da      	lsls	r2, r3, #23
 8005a26:	d5f5      	bpl.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	f040 81a4 	bne.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8005a2e:	4a9b      	ldr	r2, [pc, #620]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005a30:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005a34:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a36:	4059      	eors	r1, r3
 8005a38:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005a3c:	d00b      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005a3e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a40:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005a42:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005a46:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005a4a:	6710      	str	r0, [r2, #112]	; 0x70
 8005a4c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005a4e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005a52:	6710      	str	r0, [r2, #112]	; 0x70
 8005a54:	6711      	str	r1, [r2, #112]	; 0x70
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5a:	f000 816e 	beq.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005a5e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005a62:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005a66:	f000 817c 	beq.w	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8005a6a:	498c      	ldr	r1, [pc, #560]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005a6c:	690a      	ldr	r2, [r1, #16]
 8005a6e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005a72:	610a      	str	r2, [r1, #16]
 8005a74:	4a89      	ldr	r2, [pc, #548]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	e5ce      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005a84:	462e      	mov	r6, r5
 8005a86:	e4c1      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005a88:	462e      	mov	r6, r5
 8005a8a:	e49d      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005a8c:	462e      	mov	r6, r5
 8005a8e:	e47d      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005a90:	462e      	mov	r6, r5
 8005a92:	e518      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a94:	462e      	mov	r6, r5
 8005a96:	e4db      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005a98:	2102      	movs	r1, #2
 8005a9a:	1d20      	adds	r0, r4, #4
 8005a9c:	f7ff fb4a 	bl	8005134 <RCCEx_PLL2_Config>
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	d153      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8005aa8:	497c      	ldr	r1, [pc, #496]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005aaa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005aac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ab2:	4302      	orrs	r2, r0
 8005ab4:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005ab6:	e6c4      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005ab8:	4978      	ldr	r1, [pc, #480]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005aba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005abc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ac0:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ac2:	e477      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ac4:	4975      	ldr	r1, [pc, #468]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005ac6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ac8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005acc:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ace:	e492      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005ad0:	4972      	ldr	r1, [pc, #456]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005ad2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ad4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ad8:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ada:	e4ae      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005adc:	496f      	ldr	r1, [pc, #444]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005ade:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ae0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ae4:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ae6:	e4e4      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ae8:	462e      	mov	r6, r5
 8005aea:	e65f      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005aec:	462e      	mov	r6, r5
 8005aee:	e63d      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005af0:	496a      	ldr	r1, [pc, #424]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005af2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005af4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005af6:	f022 0203 	bic.w	r2, r2, #3
 8005afa:	4302      	orrs	r2, r0
 8005afc:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005afe:	e58d      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005b00:	4966      	ldr	r1, [pc, #408]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b02:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005b04:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005b06:	f022 0207 	bic.w	r2, r2, #7
 8005b0a:	4302      	orrs	r2, r0
 8005b0c:	654a      	str	r2, [r1, #84]	; 0x54
 8005b0e:	e5d3      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005b10:	4962      	ldr	r1, [pc, #392]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b12:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005b16:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005b18:	f022 0207 	bic.w	r2, r2, #7
 8005b1c:	4302      	orrs	r2, r0
 8005b1e:	658a      	str	r2, [r1, #88]	; 0x58
 8005b20:	e5e4      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005b22:	462e      	mov	r6, r5
 8005b24:	e51a      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005b26:	462e      	mov	r6, r5
 8005b28:	e600      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005b2a:	462e      	mov	r6, r5
 8005b2c:	e4ab      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005b2e:	462e      	mov	r6, r5
 8005b30:	e4e6      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005b32:	462e      	mov	r6, r5
 8005b34:	e502      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005b36:	462e      	mov	r6, r5
 8005b38:	e5a5      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005b3a:	462e      	mov	r6, r5
 8005b3c:	e663      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005b3e:	462e      	mov	r6, r5
 8005b40:	e673      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005b42:	4956      	ldr	r1, [pc, #344]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b4a:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d0ab      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
 8005b50:	462e      	mov	r6, r5
 8005b52:	e676      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005b54:	4851      	ldr	r0, [pc, #324]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b58:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005b5c:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	f47f aedc 	bne.w	800591c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005b64:	e6e0      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b66:	494d      	ldr	r1, [pc, #308]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b68:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b6e:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	d1e4      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x822>
 8005b74:	e709      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b76:	1d20      	adds	r0, r4, #4
 8005b78:	f7ff fadc 	bl	8005134 <RCCEx_PLL2_Config>
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	2d00      	cmp	r5, #0
 8005b82:	d1da      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005b84:	e714      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8005b86:	2102      	movs	r1, #2
 8005b88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b8c:	f7ff fb4c 	bl	8005228 <RCCEx_PLL3_Config>
 8005b90:	4605      	mov	r5, r0
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	d1c6      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005b98:	e5c0      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005b9a:	4940      	ldr	r1, [pc, #256]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005b9c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ba2:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	f47f ad38 	bne.w	800561a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005baa:	e7a1      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8005bac:	493b      	ldr	r1, [pc, #236]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8005bae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005bb4:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	d1b3      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8005bba:	e6d4      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bc2:	f7ff fb31 	bl	8005228 <RCCEx_PLL3_Config>
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	2d00      	cmp	r5, #0
 8005bcc:	d1af      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005bce:	e490      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bd6:	f7ff fb27 	bl	8005228 <RCCEx_PLL3_Config>
 8005bda:	4605      	mov	r5, r0
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	d1a7      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005be2:	e4a3      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005be4:	2102      	movs	r1, #2
 8005be6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bea:	f7ff fb1d 	bl	8005228 <RCCEx_PLL3_Config>
 8005bee:	4605      	mov	r5, r0
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	f47f af7a 	bne.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005bf8:	e5b0      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c00:	f7ff fb12 	bl	8005228 <RCCEx_PLL3_Config>
 8005c04:	4605      	mov	r5, r0
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	f47f af6d 	bne.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005c0e:	e5c5      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005c10:	2102      	movs	r1, #2
 8005c12:	1d20      	adds	r0, r4, #4
 8005c14:	f7ff fa8e 	bl	8005134 <RCCEx_PLL2_Config>
 8005c18:	4605      	mov	r5, r0
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	d184      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005c20:	e42a      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c22:	2102      	movs	r1, #2
 8005c24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c28:	f7ff fafe 	bl	8005228 <RCCEx_PLL3_Config>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f43f add8 	beq.w	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8005c34:	2601      	movs	r6, #1
 8005c36:	e5d5      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8005c38:	2102      	movs	r1, #2
 8005c3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c3e:	f7ff faf3 	bl	8005228 <RCCEx_PLL3_Config>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f43f adbf 	beq.w	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005c4a:	2601      	movs	r6, #1
 8005c4c:	e5bc      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005c4e:	2100      	movs	r1, #0
 8005c50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c54:	f7ff fae8 	bl	8005228 <RCCEx_PLL3_Config>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	f7ff bbaa 	b.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	f7ff bb85 	b.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005c66:	2100      	movs	r1, #0
 8005c68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c6c:	f7ff fadc 	bl	8005228 <RCCEx_PLL3_Config>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	4605      	mov	r5, r0
 8005c74:	f7ff bbbf 	b.w	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005c78:	2100      	movs	r1, #0
 8005c7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c7e:	f7ff fad3 	bl	8005228 <RCCEx_PLL3_Config>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	4605      	mov	r5, r0
 8005c86:	f7ff bbd8 	b.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c90:	f7ff faca 	bl	8005228 <RCCEx_PLL3_Config>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	4605      	mov	r5, r0
 8005c98:	e40b      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c9a:	bf00      	nop
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	58024800 	.word	0x58024800
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	1d20      	adds	r0, r4, #4
 8005ca8:	f7ff fa44 	bl	8005134 <RCCEx_PLL2_Config>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	4605      	mov	r5, r0
 8005cb0:	e645      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005cb8:	f7ff fab6 	bl	8005228 <RCCEx_PLL3_Config>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	e63d      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005cc2:	4933      	ldr	r1, [pc, #204]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005cc4:	4635      	mov	r5, r6
 8005cc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005cc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ccc:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005cce:	e636      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	3024      	adds	r0, #36	; 0x24
 8005cd4:	f7ff faa8 	bl	8005228 <RCCEx_PLL3_Config>
 8005cd8:	4606      	mov	r6, r0
 8005cda:	2e00      	cmp	r6, #0
 8005cdc:	f43f ab3a 	beq.w	8005354 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8005ce0:	e7be      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	1d20      	adds	r0, r4, #4
 8005ce6:	f7ff fa25 	bl	8005134 <RCCEx_PLL2_Config>
 8005cea:	4605      	mov	r5, r0
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	f47f acfb 	bne.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005cf4:	e70c      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	1d20      	adds	r0, r4, #4
 8005cfa:	f7ff fa1b 	bl	8005134 <RCCEx_PLL2_Config>
 8005cfe:	4605      	mov	r5, r0
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	f47f acd7 	bne.w	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005d08:	e6fa      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	1d20      	adds	r0, r4, #4
 8005d0e:	f7ff fa11 	bl	8005134 <RCCEx_PLL2_Config>
 8005d12:	4605      	mov	r5, r0
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	f47f af0d 	bne.w	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005d1c:	e65e      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005d1e:	2603      	movs	r6, #3
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	4635      	mov	r5, r6
 8005d24:	e47d      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005d26:	2601      	movs	r6, #1
 8005d28:	f7ff bb22 	b.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005d2c:	4818      	ldr	r0, [pc, #96]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005d2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d30:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005d34:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005d36:	f7ff bb14 	b.w	8005362 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005d3a:	f7fe fd5b 	bl	80047f4 <HAL_GetTick>
 8005d3e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d42:	4607      	mov	r7, r0
 8005d44:	f241 3988 	movw	r9, #5000	; 0x1388
 8005d48:	e004      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8005d4a:	f7fe fd53 	bl	80047f4 <HAL_GetTick>
 8005d4e:	1bc0      	subs	r0, r0, r7
 8005d50:	4548      	cmp	r0, r9
 8005d52:	d8e4      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8005d54:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005d58:	079b      	lsls	r3, r3, #30
 8005d5a:	d5f6      	bpl.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8005d5c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005d60:	e67d      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x742>
 8005d62:	480b      	ldr	r0, [pc, #44]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005d66:	6901      	ldr	r1, [r0, #16]
 8005d68:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005d6c:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005d70:	430a      	orrs	r2, r1
 8005d72:	6102      	str	r2, [r0, #16]
 8005d74:	e67e      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	462e      	mov	r6, r5
 8005d7a:	e452      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005d7c:	2601      	movs	r6, #1
 8005d7e:	4635      	mov	r5, r6
 8005d80:	e44c      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d82:	2601      	movs	r6, #1
 8005d84:	4635      	mov	r5, r6
 8005d86:	e497      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8005d88:	2601      	movs	r6, #1
 8005d8a:	4635      	mov	r5, r6
 8005d8c:	e4ae      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005d8e:	bf00      	nop
 8005d90:	58024400 	.word	0x58024400
 8005d94:	00ffffcf 	.word	0x00ffffcf

08005d98 <LL_ADC_Init>:
 8005d98:	6882      	ldr	r2, [r0, #8]
 8005d9a:	07d3      	lsls	r3, r2, #31
 8005d9c:	d413      	bmi.n	8005dc6 <LL_ADC_Init+0x2e>
 8005d9e:	68c2      	ldr	r2, [r0, #12]
 8005da0:	4603      	mov	r3, r0
 8005da2:	6808      	ldr	r0, [r1, #0]
 8005da4:	b430      	push	{r4, r5}
 8005da6:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
 8005daa:	ea40 0104 	orr.w	r1, r0, r4
 8005dae:	4c07      	ldr	r4, [pc, #28]	; (8005dcc <LL_ADC_Init+0x34>)
 8005db0:	2001      	movs	r0, #1
 8005db2:	4014      	ands	r4, r2
 8005db4:	4321      	orrs	r1, r4
 8005db6:	60d9      	str	r1, [r3, #12]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dbe:	432a      	orrs	r2, r5
 8005dc0:	bc30      	pop	{r4, r5}
 8005dc2:	611a      	str	r2, [r3, #16]
 8005dc4:	4770      	bx	lr
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	ffffbfe3 	.word	0xffffbfe3

08005dd0 <LL_ADC_REG_Init>:
 8005dd0:	6882      	ldr	r2, [r0, #8]
 8005dd2:	07d3      	lsls	r3, r2, #31
 8005dd4:	d418      	bmi.n	8005e08 <LL_ADC_REG_Init+0x38>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	b430      	push	{r4, r5}
 8005dda:	684c      	ldr	r4, [r1, #4]
 8005ddc:	b9b4      	cbnz	r4, 8005e0c <LL_ADC_REG_Init+0x3c>
 8005dde:	68c2      	ldr	r2, [r0, #12]
 8005de0:	4812      	ldr	r0, [pc, #72]	; (8005e2c <LL_ADC_REG_Init+0x5c>)
 8005de2:	4010      	ands	r0, r2
 8005de4:	680a      	ldr	r2, [r1, #0]
 8005de6:	4310      	orrs	r0, r2
 8005de8:	68ca      	ldr	r2, [r1, #12]
 8005dea:	4310      	orrs	r0, r2
 8005dec:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 8005df0:	ea40 0105 	orr.w	r1, r0, r5
 8005df4:	4311      	orrs	r1, r2
 8005df6:	60d9      	str	r1, [r3, #12]
 8005df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	f022 020f 	bic.w	r2, r2, #15
 8005e00:	4322      	orrs	r2, r4
 8005e02:	bc30      	pop	{r4, r5}
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
 8005e06:	4770      	bx	lr
 8005e08:	2000      	movs	r0, #0
 8005e0a:	4770      	bx	lr
 8005e0c:	68c0      	ldr	r0, [r0, #12]
 8005e0e:	4a07      	ldr	r2, [pc, #28]	; (8005e2c <LL_ADC_REG_Init+0x5c>)
 8005e10:	4002      	ands	r2, r0
 8005e12:	6808      	ldr	r0, [r1, #0]
 8005e14:	4302      	orrs	r2, r0
 8005e16:	6888      	ldr	r0, [r1, #8]
 8005e18:	4302      	orrs	r2, r0
 8005e1a:	68c8      	ldr	r0, [r1, #12]
 8005e1c:	4302      	orrs	r2, r0
 8005e1e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005e22:	4302      	orrs	r2, r0
 8005e24:	430a      	orrs	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	e7e6      	b.n	8005df8 <LL_ADC_REG_Init+0x28>
 8005e2a:	bf00      	nop
 8005e2c:	fff0c01c 	.word	0xfff0c01c

08005e30 <LL_DAC_Init>:
 8005e30:	f04f 0c01 	mov.w	ip, #1
 8005e34:	f001 0110 	and.w	r1, r1, #16
 8005e38:	4603      	mov	r3, r0
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	fa0c fc01 	lsl.w	ip, ip, r1
 8005e40:	ea3c 0000 	bics.w	r0, ip, r0
 8005e44:	d02b      	beq.n	8005e9e <LL_DAC_Init+0x6e>
 8005e46:	6850      	ldr	r0, [r2, #4]
 8005e48:	b470      	push	{r4, r5, r6}
 8005e4a:	b9d0      	cbnz	r0, 8005e82 <LL_DAC_Init+0x52>
 8005e4c:	24fc      	movs	r4, #252	; 0xfc
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	408c      	lsls	r4, r1
 8005e52:	ea20 0004 	bic.w	r0, r0, r4
 8005e56:	6814      	ldr	r4, [r2, #0]
 8005e58:	408c      	lsls	r4, r1
 8005e5a:	4320      	orrs	r0, r4
 8005e5c:	6018      	str	r0, [r3, #0]
 8005e5e:	6955      	ldr	r5, [r2, #20]
 8005e60:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8005e62:	e9d2 0603 	ldrd	r0, r6, [r2, #12]
 8005e66:	ea40 0206 	orr.w	r2, r0, r6
 8005e6a:	2007      	movs	r0, #7
 8005e6c:	432a      	orrs	r2, r5
 8005e6e:	4088      	lsls	r0, r1
 8005e70:	fa02 f101 	lsl.w	r1, r2, r1
 8005e74:	ea24 0200 	bic.w	r2, r4, r0
 8005e78:	2001      	movs	r0, #1
 8005e7a:	4311      	orrs	r1, r2
 8005e7c:	bc70      	pop	{r4, r5, r6}
 8005e7e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8005e80:	4770      	bx	lr
 8005e82:	6815      	ldr	r5, [r2, #0]
 8005e84:	681c      	ldr	r4, [r3, #0]
 8005e86:	4328      	orrs	r0, r5
 8005e88:	6895      	ldr	r5, [r2, #8]
 8005e8a:	4328      	orrs	r0, r5
 8005e8c:	f640 75fc 	movw	r5, #4092	; 0xffc
 8005e90:	408d      	lsls	r5, r1
 8005e92:	4088      	lsls	r0, r1
 8005e94:	ea24 0405 	bic.w	r4, r4, r5
 8005e98:	4320      	orrs	r0, r4
 8005e9a:	6018      	str	r0, [r3, #0]
 8005e9c:	e7df      	b.n	8005e5e <LL_DAC_Init+0x2e>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <LL_DMA_Init>:
 8005ea4:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <LL_DMA_Init+0x90>)
 8005ea6:	b4f0      	push	{r4, r5, r6, r7}
 8005ea8:	5c5c      	ldrb	r4, [r3, r1]
 8005eaa:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8005eac:	5907      	ldr	r7, [r0, r4]
 8005eae:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8005eb2:	4333      	orrs	r3, r6
 8005eb4:	6916      	ldr	r6, [r2, #16]
 8005eb6:	4333      	orrs	r3, r6
 8005eb8:	6956      	ldr	r6, [r2, #20]
 8005eba:	4333      	orrs	r3, r6
 8005ebc:	6996      	ldr	r6, [r2, #24]
 8005ebe:	4333      	orrs	r3, r6
 8005ec0:	69d6      	ldr	r6, [r2, #28]
 8005ec2:	4333      	orrs	r3, r6
 8005ec4:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8005ec6:	4333      	orrs	r3, r6
 8005ec8:	4e1b      	ldr	r6, [pc, #108]	; (8005f38 <LL_DMA_Init+0x94>)
 8005eca:	403e      	ands	r6, r7
 8005ecc:	4333      	orrs	r3, r6
 8005ece:	5103      	str	r3, [r0, r4]
 8005ed0:	1903      	adds	r3, r0, r4
 8005ed2:	b195      	cbz	r5, 8005efa <LL_DMA_Init+0x56>
 8005ed4:	695e      	ldr	r6, [r3, #20]
 8005ed6:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005ed8:	f026 0607 	bic.w	r6, r6, #7
 8005edc:	433d      	orrs	r5, r7
 8005ede:	4335      	orrs	r5, r6
 8005ee0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005ee2:	615d      	str	r5, [r3, #20]
 8005ee4:	5905      	ldr	r5, [r0, r4]
 8005ee6:	f025 75c0 	bic.w	r5, r5, #25165824	; 0x1800000
 8005eea:	4335      	orrs	r5, r6
 8005eec:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8005eee:	5105      	str	r5, [r0, r4]
 8005ef0:	5905      	ldr	r5, [r0, r4]
 8005ef2:	f425 05c0 	bic.w	r5, r5, #6291456	; 0x600000
 8005ef6:	4335      	orrs	r5, r6
 8005ef8:	5105      	str	r5, [r0, r4]
 8005efa:	6854      	ldr	r4, [r2, #4]
 8005efc:	60dc      	str	r4, [r3, #12]
 8005efe:	6814      	ldr	r4, [r2, #0]
 8005f00:	609c      	str	r4, [r3, #8]
 8005f02:	4c0e      	ldr	r4, [pc, #56]	; (8005f3c <LL_DMA_Init+0x98>)
 8005f04:	685d      	ldr	r5, [r3, #4]
 8005f06:	402c      	ands	r4, r5
 8005f08:	6a15      	ldr	r5, [r2, #32]
 8005f0a:	432c      	orrs	r4, r5
 8005f0c:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <LL_DMA_Init+0x9c>)
 8005f10:	605c      	str	r4, [r3, #4]
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <LL_DMA_Init+0xa0>)
 8005f14:	4290      	cmp	r0, r2
 8005f16:	f04f 0001 	mov.w	r0, #1
 8005f1a:	440b      	add	r3, r1
 8005f1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005f20:	bf18      	it	ne
 8005f22:	3320      	addne	r3, #32
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f2a:	432a      	orrs	r2, r5
 8005f2c:	bcf0      	pop	{r4, r5, r6, r7}
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	08008dc4 	.word	0x08008dc4
 8005f38:	fffc801f 	.word	0xfffc801f
 8005f3c:	ffff0000 	.word	0xffff0000
 8005f40:	40020000 	.word	0x40020000
 8005f44:	10008200 	.word	0x10008200

08005f48 <LL_GPIO_Init>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	680c      	ldr	r4, [r1, #0]
 8005f4e:	b083      	sub	sp, #12
 8005f50:	fa94 fca4 	rbit	ip, r4
 8005f54:	fabc fc8c 	clz	ip, ip
 8005f58:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005f5c:	d075      	beq.n	800604a <LL_GPIO_Init+0x102>
 8005f5e:	684f      	ldr	r7, [r1, #4]
 8005f60:	2601      	movs	r6, #1
 8005f62:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 8005f66:	e00d      	b.n	8005f84 <LL_GPIO_Init+0x3c>
 8005f68:	68c3      	ldr	r3, [r0, #12]
 8005f6a:	ea08 0803 	and.w	r8, r8, r3
 8005f6e:	690b      	ldr	r3, [r1, #16]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	ea43 0308 	orr.w	r3, r3, r8
 8005f78:	60c3      	str	r3, [r0, #12]
 8005f7a:	f10c 0c01 	add.w	ip, ip, #1
 8005f7e:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005f82:	d048      	beq.n	8006016 <LL_GPIO_Init+0xce>
 8005f84:	fa06 f30c 	lsl.w	r3, r6, ip
 8005f88:	4023      	ands	r3, r4
 8005f8a:	fb03 f203 	mul.w	r2, r3, r3
 8005f8e:	d0f4      	beq.n	8005f7a <LL_GPIO_Init+0x32>
 8005f90:	6805      	ldr	r5, [r0, #0]
 8005f92:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8005f96:	fb07 f902 	mul.w	r9, r7, r2
 8005f9a:	f1bb 0f01 	cmp.w	fp, #1
 8005f9e:	ea25 0e08 	bic.w	lr, r5, r8
 8005fa2:	ea6f 0808 	mvn.w	r8, r8
 8005fa6:	ea4e 0509 	orr.w	r5, lr, r9
 8005faa:	6005      	str	r5, [r0, #0]
 8005fac:	d8dc      	bhi.n	8005f68 <LL_GPIO_Init+0x20>
 8005fae:	0a1d      	lsrs	r5, r3, #8
 8005fb0:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8005fb4:	fb02 fe02 	mul.w	lr, r2, r2
 8005fb8:	2f02      	cmp	r7, #2
 8005fba:	fb05 f505 	mul.w	r5, r5, r5
 8005fbe:	ea08 0909 	and.w	r9, r8, r9
 8005fc2:	fb05 f505 	mul.w	r5, r5, r5
 8005fc6:	9500      	str	r5, [sp, #0]
 8005fc8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005fcc:	9501      	str	r5, [sp, #4]
 8005fce:	688d      	ldr	r5, [r1, #8]
 8005fd0:	fb05 fa02 	mul.w	sl, r5, r2
 8005fd4:	690d      	ldr	r5, [r1, #16]
 8005fd6:	ea4a 0909 	orr.w	r9, sl, r9
 8005fda:	fb05 f202 	mul.w	r2, r5, r2
 8005fde:	f8c0 9008 	str.w	r9, [r0, #8]
 8005fe2:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005fe6:	ea08 0809 	and.w	r8, r8, r9
 8005fea:	ea42 0208 	orr.w	r2, r2, r8
 8005fee:	60c2      	str	r2, [r0, #12]
 8005ff0:	d1c3      	bne.n	8005f7a <LL_GPIO_Init+0x32>
 8005ff2:	2bff      	cmp	r3, #255	; 0xff
 8005ff4:	d81e      	bhi.n	8006034 <LL_GPIO_Init+0xec>
 8005ff6:	694b      	ldr	r3, [r1, #20]
 8005ff8:	f10c 0c01 	add.w	ip, ip, #1
 8005ffc:	6a02      	ldr	r2, [r0, #32]
 8005ffe:	fb03 f30e 	mul.w	r3, r3, lr
 8006002:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8006006:	ea22 0e0e 	bic.w	lr, r2, lr
 800600a:	ea4e 0303 	orr.w	r3, lr, r3
 800600e:	6203      	str	r3, [r0, #32]
 8006010:	fa34 f30c 	lsrs.w	r3, r4, ip
 8006014:	d1b6      	bne.n	8005f84 <LL_GPIO_Init+0x3c>
 8006016:	f1bb 0f01 	cmp.w	fp, #1
 800601a:	d807      	bhi.n	800602c <LL_GPIO_Init+0xe4>
 800601c:	6843      	ldr	r3, [r0, #4]
 800601e:	68ca      	ldr	r2, [r1, #12]
 8006020:	ea23 0304 	bic.w	r3, r3, r4
 8006024:	fb02 f404 	mul.w	r4, r2, r4
 8006028:	431c      	orrs	r4, r3
 800602a:	6044      	str	r4, [r0, #4]
 800602c:	2001      	movs	r0, #1
 800602e:	b003      	add	sp, #12
 8006030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006034:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	9d00      	ldr	r5, [sp, #0]
 800603a:	ea22 0203 	bic.w	r2, r2, r3
 800603e:	694b      	ldr	r3, [r1, #20]
 8006040:	fb05 f303 	mul.w	r3, r5, r3
 8006044:	4313      	orrs	r3, r2
 8006046:	6243      	str	r3, [r0, #36]	; 0x24
 8006048:	e797      	b.n	8005f7a <LL_GPIO_Init+0x32>
 800604a:	684b      	ldr	r3, [r1, #4]
 800604c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006050:	e7e1      	b.n	8006016 <LL_GPIO_Init+0xce>
 8006052:	bf00      	nop

08006054 <LL_GPIO_StructInit>:
 8006054:	2300      	movs	r3, #0
 8006056:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800605a:	2203      	movs	r2, #3
 800605c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8006060:	e9c0 1200 	strd	r1, r2, [r0]
 8006064:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop

0800606c <LL_RCC_GetPLL1ClockFreq>:
 800606c:	495c      	ldr	r1, [pc, #368]	; (80061e0 <LL_RCC_GetPLL1ClockFreq+0x174>)
 800606e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b01      	cmp	r3, #1
 8006076:	b430      	push	{r4, r5}
 8006078:	f000 80aa 	beq.w	80061d0 <LL_RCC_GetPLL1ClockFreq+0x164>
 800607c:	2b02      	cmp	r3, #2
 800607e:	f000 80a0 	beq.w	80061c2 <LL_RCC_GetPLL1ClockFreq+0x156>
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8092 	beq.w	80061ac <LL_RCC_GetPLL1ClockFreq+0x140>
 8006088:	2200      	movs	r2, #0
 800608a:	2300      	movs	r3, #0
 800608c:	4d54      	ldr	r5, [pc, #336]	; (80061e0 <LL_RCC_GetPLL1ClockFreq+0x174>)
 800608e:	e9c0 3300 	strd	r3, r3, [r0]
 8006092:	6083      	str	r3, [r0, #8]
 8006094:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006096:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8006098:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800609a:	f3c1 1105 	ubfx	r1, r1, #4, #6
 800609e:	f013 0301 	ands.w	r3, r3, #1
 80060a2:	d002      	beq.n	80060aa <LL_RCC_GetPLL1ClockFreq+0x3e>
 80060a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80060a6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80060aa:	2900      	cmp	r1, #0
 80060ac:	d07c      	beq.n	80061a8 <LL_RCC_GetPLL1ClockFreq+0x13c>
 80060ae:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80060b2:	3401      	adds	r4, #1
 80060b4:	ee07 4a10 	vmov	s14, r4
 80060b8:	4c49      	ldr	r4, [pc, #292]	; (80061e0 <LL_RCC_GetPLL1ClockFreq+0x174>)
 80060ba:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80060bc:	03ed      	lsls	r5, r5, #15
 80060be:	d523      	bpl.n	8006108 <LL_RCC_GetPLL1ClockFreq+0x9c>
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80060c8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80060ca:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80060ce:	ee07 2a90 	vmov	s15, r2
 80060d2:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80061e4 <LL_RCC_GetPLL1ClockFreq+0x178>
 80060d6:	f3c4 2446 	ubfx	r4, r4, #9, #7
 80060da:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80060de:	ee07 1a90 	vmov	s15, r1
 80060e2:	eea4 6a85 	vfma.f32	s12, s9, s10
 80060e6:	3401      	adds	r4, #1
 80060e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ec:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80060f0:	ee07 4a90 	vmov	s15, r4
 80060f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f8:	ee26 6a86 	vmul.f32	s12, s13, s12
 80060fc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006100:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006104:	edc0 6a00 	vstr	s13, [r0]
 8006108:	4c35      	ldr	r4, [pc, #212]	; (80061e0 <LL_RCC_GetPLL1ClockFreq+0x174>)
 800610a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800610c:	03ad      	lsls	r5, r5, #14
 800610e:	d523      	bpl.n	8006158 <LL_RCC_GetPLL1ClockFreq+0xec>
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006118:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800611a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800611e:	ee07 2a90 	vmov	s15, r2
 8006122:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80061e4 <LL_RCC_GetPLL1ClockFreq+0x178>
 8006126:	f3c4 4406 	ubfx	r4, r4, #16, #7
 800612a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800612e:	ee07 1a90 	vmov	s15, r1
 8006132:	eea4 6a85 	vfma.f32	s12, s9, s10
 8006136:	3401      	adds	r4, #1
 8006138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800613c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006140:	ee07 4a90 	vmov	s15, r4
 8006144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006148:	ee26 6a86 	vmul.f32	s12, s13, s12
 800614c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006150:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006154:	edc0 6a01 	vstr	s13, [r0, #4]
 8006158:	4c21      	ldr	r4, [pc, #132]	; (80061e0 <LL_RCC_GetPLL1ClockFreq+0x174>)
 800615a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800615c:	036d      	lsls	r5, r5, #13
 800615e:	d523      	bpl.n	80061a8 <LL_RCC_GetPLL1ClockFreq+0x13c>
 8006160:	ee07 2a90 	vmov	s15, r2
 8006164:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006168:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 80061e4 <LL_RCC_GetPLL1ClockFreq+0x178>
 800616c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006170:	ee07 1a90 	vmov	s15, r1
 8006174:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800617e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006182:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8006186:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800618a:	3301      	adds	r3, #1
 800618c:	eea7 7a85 	vfma.f32	s14, s15, s10
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006198:	ee25 7a87 	vmul.f32	s14, s11, s14
 800619c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80061a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80061a4:	edc0 6a02 	vstr	s13, [r0, #8]
 80061a8:	bc30      	pop	{r4, r5}
 80061aa:	4770      	bx	lr
 80061ac:	680a      	ldr	r2, [r1, #0]
 80061ae:	f012 0204 	ands.w	r2, r2, #4
 80061b2:	f43f af6a 	beq.w	800608a <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061b6:	680b      	ldr	r3, [r1, #0]
 80061b8:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80061ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80061be:	40da      	lsrs	r2, r3
 80061c0:	e763      	b.n	800608a <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061c2:	680a      	ldr	r2, [r1, #0]
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <LL_RCC_GetPLL1ClockFreq+0x180>)
 80061c6:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80061ca:	bf18      	it	ne
 80061cc:	461a      	movne	r2, r3
 80061ce:	e75c      	b.n	800608a <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061d0:	680a      	ldr	r2, [r1, #0]
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <LL_RCC_GetPLL1ClockFreq+0x184>)
 80061d4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80061d8:	bf18      	it	ne
 80061da:	461a      	movne	r2, r3
 80061dc:	e755      	b.n	800608a <LL_RCC_GetPLL1ClockFreq+0x1e>
 80061de:	bf00      	nop
 80061e0:	58024400 	.word	0x58024400
 80061e4:	39000000 	.word	0x39000000
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	00f42400 	.word	0x00f42400
 80061f0:	003d0900 	.word	0x003d0900

080061f4 <LL_RCC_GetPLL2ClockFreq>:
 80061f4:	495c      	ldr	r1, [pc, #368]	; (8006368 <LL_RCC_GetPLL2ClockFreq+0x174>)
 80061f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	b430      	push	{r4, r5}
 8006200:	f000 80aa 	beq.w	8006358 <LL_RCC_GetPLL2ClockFreq+0x164>
 8006204:	2b02      	cmp	r3, #2
 8006206:	f000 80a0 	beq.w	800634a <LL_RCC_GetPLL2ClockFreq+0x156>
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8092 	beq.w	8006334 <LL_RCC_GetPLL2ClockFreq+0x140>
 8006210:	2200      	movs	r2, #0
 8006212:	2300      	movs	r3, #0
 8006214:	4d54      	ldr	r5, [pc, #336]	; (8006368 <LL_RCC_GetPLL2ClockFreq+0x174>)
 8006216:	e9c0 3300 	strd	r3, r3, [r0]
 800621a:	6083      	str	r3, [r0, #8]
 800621c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800621e:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8006220:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006222:	f3c1 3105 	ubfx	r1, r1, #12, #6
 8006226:	f013 0310 	ands.w	r3, r3, #16
 800622a:	d002      	beq.n	8006232 <LL_RCC_GetPLL2ClockFreq+0x3e>
 800622c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800622e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8006232:	2900      	cmp	r1, #0
 8006234:	d07c      	beq.n	8006330 <LL_RCC_GetPLL2ClockFreq+0x13c>
 8006236:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800623a:	3401      	adds	r4, #1
 800623c:	ee07 4a10 	vmov	s14, r4
 8006240:	4c49      	ldr	r4, [pc, #292]	; (8006368 <LL_RCC_GetPLL2ClockFreq+0x174>)
 8006242:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006244:	032d      	lsls	r5, r5, #12
 8006246:	d523      	bpl.n	8006290 <LL_RCC_GetPLL2ClockFreq+0x9c>
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006250:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006252:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8006256:	ee07 2a90 	vmov	s15, r2
 800625a:	ed9f 5a44 	vldr	s10, [pc, #272]	; 800636c <LL_RCC_GetPLL2ClockFreq+0x178>
 800625e:	f3c4 2446 	ubfx	r4, r4, #9, #7
 8006262:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8006266:	ee07 1a90 	vmov	s15, r1
 800626a:	eea4 6a85 	vfma.f32	s12, s9, s10
 800626e:	3401      	adds	r4, #1
 8006270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006274:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006278:	ee07 4a90 	vmov	s15, r4
 800627c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006280:	ee26 6a86 	vmul.f32	s12, s13, s12
 8006284:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006288:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800628c:	edc0 6a00 	vstr	s13, [r0]
 8006290:	4c35      	ldr	r4, [pc, #212]	; (8006368 <LL_RCC_GetPLL2ClockFreq+0x174>)
 8006292:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006294:	02ed      	lsls	r5, r5, #11
 8006296:	d523      	bpl.n	80062e0 <LL_RCC_GetPLL2ClockFreq+0xec>
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80062a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80062a2:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80062a6:	ee07 2a90 	vmov	s15, r2
 80062aa:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800636c <LL_RCC_GetPLL2ClockFreq+0x178>
 80062ae:	f3c4 4406 	ubfx	r4, r4, #16, #7
 80062b2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80062b6:	ee07 1a90 	vmov	s15, r1
 80062ba:	eea4 6a85 	vfma.f32	s12, s9, s10
 80062be:	3401      	adds	r4, #1
 80062c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80062c8:	ee07 4a90 	vmov	s15, r4
 80062cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062d0:	ee26 6a86 	vmul.f32	s12, s13, s12
 80062d4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80062d8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062dc:	edc0 6a01 	vstr	s13, [r0, #4]
 80062e0:	4c21      	ldr	r4, [pc, #132]	; (8006368 <LL_RCC_GetPLL2ClockFreq+0x174>)
 80062e2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80062e4:	02ad      	lsls	r5, r5, #10
 80062e6:	d523      	bpl.n	8006330 <LL_RCC_GetPLL2ClockFreq+0x13c>
 80062e8:	ee07 2a90 	vmov	s15, r2
 80062ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062f0:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 800636c <LL_RCC_GetPLL2ClockFreq+0x178>
 80062f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062f8:	ee07 1a90 	vmov	s15, r1
 80062fc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800630a:	eec6 5a86 	vdiv.f32	s11, s13, s12
 800630e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006312:	3301      	adds	r3, #1
 8006314:	eea7 7a85 	vfma.f32	s14, s15, s10
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006320:	ee25 7a87 	vmul.f32	s14, s11, s14
 8006324:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006328:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800632c:	edc0 6a02 	vstr	s13, [r0, #8]
 8006330:	bc30      	pop	{r4, r5}
 8006332:	4770      	bx	lr
 8006334:	680a      	ldr	r2, [r1, #0]
 8006336:	f012 0204 	ands.w	r2, r2, #4
 800633a:	f43f af6a 	beq.w	8006212 <LL_RCC_GetPLL2ClockFreq+0x1e>
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	4a0b      	ldr	r2, [pc, #44]	; (8006370 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8006342:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006346:	40da      	lsrs	r2, r3
 8006348:	e763      	b.n	8006212 <LL_RCC_GetPLL2ClockFreq+0x1e>
 800634a:	680a      	ldr	r2, [r1, #0]
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <LL_RCC_GetPLL2ClockFreq+0x180>)
 800634e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8006352:	bf18      	it	ne
 8006354:	461a      	movne	r2, r3
 8006356:	e75c      	b.n	8006212 <LL_RCC_GetPLL2ClockFreq+0x1e>
 8006358:	680a      	ldr	r2, [r1, #0]
 800635a:	4b07      	ldr	r3, [pc, #28]	; (8006378 <LL_RCC_GetPLL2ClockFreq+0x184>)
 800635c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8006360:	bf18      	it	ne
 8006362:	461a      	movne	r2, r3
 8006364:	e755      	b.n	8006212 <LL_RCC_GetPLL2ClockFreq+0x1e>
 8006366:	bf00      	nop
 8006368:	58024400 	.word	0x58024400
 800636c:	39000000 	.word	0x39000000
 8006370:	03d09000 	.word	0x03d09000
 8006374:	00f42400 	.word	0x00f42400
 8006378:	003d0900 	.word	0x003d0900

0800637c <LL_RCC_GetPLL3ClockFreq>:
 800637c:	4a62      	ldr	r2, [pc, #392]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 800637e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b01      	cmp	r3, #1
 8006386:	b410      	push	{r4}
 8006388:	f000 80a5 	beq.w	80064d6 <LL_RCC_GetPLL3ClockFreq+0x15a>
 800638c:	2b02      	cmp	r3, #2
 800638e:	f000 809b 	beq.w	80064c8 <LL_RCC_GetPLL3ClockFreq+0x14c>
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 808c 	beq.w	80064b0 <LL_RCC_GetPLL3ClockFreq+0x134>
 8006398:	4c5b      	ldr	r4, [pc, #364]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 800639a:	2300      	movs	r3, #0
 800639c:	e9c0 3300 	strd	r3, r3, [r0]
 80063a0:	6083      	str	r3, [r0, #8]
 80063a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80063a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063a6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80063a8:	f3c2 5205 	ubfx	r2, r2, #20, #6
 80063ac:	05e4      	lsls	r4, r4, #23
 80063ae:	d57c      	bpl.n	80064aa <LL_RCC_GetPLL3ClockFreq+0x12e>
 80063b0:	ee06 3a90 	vmov	s13, r3
 80063b4:	4c54      	ldr	r4, [pc, #336]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80063b6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80063b8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 80063bc:	ee07 4a10 	vmov	s14, r4
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	d072      	beq.n	80064aa <LL_RCC_GetPLL3ClockFreq+0x12e>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d070      	beq.n	80064aa <LL_RCC_GetPLL3ClockFreq+0x12e>
 80063c8:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80063ca:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80063ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80063d0:	3101      	adds	r1, #1
 80063d2:	ee07 1a90 	vmov	s15, r1
 80063d6:	0261      	lsls	r1, r4, #9
 80063d8:	d51f      	bpl.n	800641a <LL_RCC_GetPLL3ClockFreq+0x9e>
 80063da:	ee06 2a10 	vmov	s12, r2
 80063de:	eef8 4ae6 	vcvt.f32.s32	s9, s13
 80063e2:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80063ec:	ed9f 4a47 	vldr	s8, [pc, #284]	; 800650c <LL_RCC_GetPLL3ClockFreq+0x190>
 80063f0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80063f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80063f8:	eec4 5a86 	vdiv.f32	s11, s9, s12
 80063fc:	3301      	adds	r3, #1
 80063fe:	ee06 3a10 	vmov	s12, r3
 8006402:	eea3 5a84 	vfma.f32	s10, s7, s8
 8006406:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800640a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800640e:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8006412:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8006416:	edc0 5a00 	vstr	s11, [r0]
 800641a:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 800641c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800641e:	020c      	lsls	r4, r1, #8
 8006420:	d51f      	bpl.n	8006462 <LL_RCC_GetPLL3ClockFreq+0xe6>
 8006422:	ee06 2a10 	vmov	s12, r2
 8006426:	eef8 4ae6 	vcvt.f32.s32	s9, s13
 800642a:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006434:	ed9f 4a35 	vldr	s8, [pc, #212]	; 800650c <LL_RCC_GetPLL3ClockFreq+0x190>
 8006438:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800643c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006440:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8006444:	3301      	adds	r3, #1
 8006446:	ee06 3a10 	vmov	s12, r3
 800644a:	eea3 5a84 	vfma.f32	s10, s7, s8
 800644e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006452:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006456:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800645a:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 800645e:	edc0 5a01 	vstr	s11, [r0, #4]
 8006462:	4b29      	ldr	r3, [pc, #164]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8006464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006466:	01c9      	lsls	r1, r1, #7
 8006468:	d51f      	bpl.n	80064aa <LL_RCC_GetPLL3ClockFreq+0x12e>
 800646a:	ee06 2a10 	vmov	s12, r2
 800646e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006472:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	eeb8 5ac6 	vcvt.f32.s32	s10, s12
 800647c:	eddf 5a23 	vldr	s11, [pc, #140]	; 800650c <LL_RCC_GetPLL3ClockFreq+0x190>
 8006480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006484:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006488:	ee86 6a85 	vdiv.f32	s12, s13, s10
 800648c:	3301      	adds	r3, #1
 800648e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006492:	ee07 3a10 	vmov	s14, r3
 8006496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800649a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800649e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80064a6:	edc0 6a02 	vstr	s13, [r0, #8]
 80064aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	0759      	lsls	r1, r3, #29
 80064b4:	f57f af70 	bpl.w	8006398 <LL_RCC_GetPLL3ClockFreq+0x1c>
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <LL_RCC_GetPLL3ClockFreq+0x194>)
 80064bc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80064c0:	40d3      	lsrs	r3, r2
 80064c2:	ee06 3a90 	vmov	s13, r3
 80064c6:	e00c      	b.n	80064e2 <LL_RCC_GetPLL3ClockFreq+0x166>
 80064c8:	6813      	ldr	r3, [r2, #0]
 80064ca:	039c      	lsls	r4, r3, #14
 80064cc:	f57f af64 	bpl.w	8006398 <LL_RCC_GetPLL3ClockFreq+0x1c>
 80064d0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8006514 <LL_RCC_GetPLL3ClockFreq+0x198>
 80064d4:	e005      	b.n	80064e2 <LL_RCC_GetPLL3ClockFreq+0x166>
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	05db      	lsls	r3, r3, #23
 80064da:	f57f af5d 	bpl.w	8006398 <LL_RCC_GetPLL3ClockFreq+0x1c>
 80064de:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006518 <LL_RCC_GetPLL3ClockFreq+0x19c>
 80064e2:	2200      	movs	r2, #0
 80064e4:	4b08      	ldr	r3, [pc, #32]	; (8006508 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80064e6:	e9c0 2200 	strd	r2, r2, [r0]
 80064ea:	6082      	str	r2, [r0, #8]
 80064ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	f3c2 5205 	ubfx	r2, r2, #20, #6
 80064f6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80064fa:	ee07 3a10 	vmov	s14, r3
 80064fe:	f04f 0301 	mov.w	r3, #1
 8006502:	f43f af5d 	beq.w	80063c0 <LL_RCC_GetPLL3ClockFreq+0x44>
 8006506:	e755      	b.n	80063b4 <LL_RCC_GetPLL3ClockFreq+0x38>
 8006508:	58024400 	.word	0x58024400
 800650c:	39000000 	.word	0x39000000
 8006510:	03d09000 	.word	0x03d09000
 8006514:	00f42400 	.word	0x00f42400
 8006518:	003d0900 	.word	0x003d0900

0800651c <LL_RCC_GetUSARTClockFreq>:
 800651c:	4a6e      	ldr	r2, [pc, #440]	; (80066d8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800651e:	f3c0 2104 	ubfx	r1, r0, #8, #5
 8006522:	0e03      	lsrs	r3, r0, #24
 8006524:	fa52 f280 	uxtab	r2, r2, r0
 8006528:	408b      	lsls	r3, r1
 800652a:	f8d2 244c 	ldr.w	r2, [r2, #1100]	; 0x44c
 800652e:	4013      	ands	r3, r2
 8006530:	40cb      	lsrs	r3, r1
 8006532:	b510      	push	{r4, lr}
 8006534:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006538:	4c68      	ldr	r4, [pc, #416]	; (80066dc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800653a:	b084      	sub	sp, #16
 800653c:	42a0      	cmp	r0, r4
 800653e:	d00c      	beq.n	800655a <LL_RCC_GetUSARTClockFreq+0x3e>
 8006540:	d83d      	bhi.n	80065be <LL_RCC_GetUSARTClockFreq+0xa2>
 8006542:	4b67      	ldr	r3, [pc, #412]	; (80066e0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006544:	4298      	cmp	r0, r3
 8006546:	f000 8086 	beq.w	8006656 <LL_RCC_GetUSARTClockFreq+0x13a>
 800654a:	d91f      	bls.n	800658c <LL_RCC_GetUSARTClockFreq+0x70>
 800654c:	4b65      	ldr	r3, [pc, #404]	; (80066e4 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800654e:	4298      	cmp	r0, r3
 8006550:	d012      	beq.n	8006578 <LL_RCC_GetUSARTClockFreq+0x5c>
 8006552:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8006556:	4298      	cmp	r0, r3
 8006558:	d10a      	bne.n	8006570 <LL_RCC_GetUSARTClockFreq+0x54>
 800655a:	4b63      	ldr	r3, [pc, #396]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006562:	d003      	beq.n	800656c <LL_RCC_GetUSARTClockFreq+0x50>
 8006564:	a801      	add	r0, sp, #4
 8006566:	f7ff ff09 	bl	800637c <LL_RCC_GetPLL3ClockFreq>
 800656a:	9802      	ldr	r0, [sp, #8]
 800656c:	b004      	add	sp, #16
 800656e:	bd10      	pop	{r4, pc}
 8006570:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006574:	4298      	cmp	r0, r3
 8006576:	d156      	bne.n	8006626 <LL_RCC_GetUSARTClockFreq+0x10a>
 8006578:	4b5b      	ldr	r3, [pc, #364]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006580:	d0f4      	beq.n	800656c <LL_RCC_GetUSARTClockFreq+0x50>
 8006582:	a801      	add	r0, sp, #4
 8006584:	f7ff fe36 	bl	80061f4 <LL_RCC_GetPLL2ClockFreq>
 8006588:	9802      	ldr	r0, [sp, #8]
 800658a:	e7ef      	b.n	800656c <LL_RCC_GetUSARTClockFreq+0x50>
 800658c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8006590:	4298      	cmp	r0, r3
 8006592:	d148      	bne.n	8006626 <LL_RCC_GetUSARTClockFreq+0x10a>
 8006594:	4b54      	ldr	r3, [pc, #336]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800659c:	2b18      	cmp	r3, #24
 800659e:	d845      	bhi.n	800662c <LL_RCC_GetUSARTClockFreq+0x110>
 80065a0:	e8df f003 	tbb	[pc, r3]
 80065a4:	44444488 	.word	0x44444488
 80065a8:	44444444 	.word	0x44444444
 80065ac:	44444498 	.word	0x44444498
 80065b0:	44444444 	.word	0x44444444
 80065b4:	4444448f 	.word	0x4444448f
 80065b8:	44444444 	.word	0x44444444
 80065bc:	91          	.byte	0x91
 80065bd:	00          	.byte	0x00
 80065be:	4b4b      	ldr	r3, [pc, #300]	; (80066ec <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80065c0:	4298      	cmp	r0, r3
 80065c2:	d018      	beq.n	80065f6 <LL_RCC_GetUSARTClockFreq+0xda>
 80065c4:	d90f      	bls.n	80065e6 <LL_RCC_GetUSARTClockFreq+0xca>
 80065c6:	4b4a      	ldr	r3, [pc, #296]	; (80066f0 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 80065c8:	4298      	cmp	r0, r3
 80065ca:	d003      	beq.n	80065d4 <LL_RCC_GetUSARTClockFreq+0xb8>
 80065cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80065d0:	4298      	cmp	r0, r3
 80065d2:	d128      	bne.n	8006626 <LL_RCC_GetUSARTClockFreq+0x10a>
 80065d4:	4b44      	ldr	r3, [pc, #272]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80065d6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80065d8:	f010 0002 	ands.w	r0, r0, #2
 80065dc:	bf18      	it	ne
 80065de:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80065e2:	b004      	add	sp, #16
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80065ea:	4298      	cmp	r0, r3
 80065ec:	d010      	beq.n	8006610 <LL_RCC_GetUSARTClockFreq+0xf4>
 80065ee:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80065f2:	4298      	cmp	r0, r3
 80065f4:	d108      	bne.n	8006608 <LL_RCC_GetUSARTClockFreq+0xec>
 80065f6:	4a3c      	ldr	r2, [pc, #240]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80065f8:	4b3e      	ldr	r3, [pc, #248]	; (80066f4 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80065fa:	6810      	ldr	r0, [r2, #0]
 80065fc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006600:	bf18      	it	ne
 8006602:	4618      	movne	r0, r3
 8006604:	b004      	add	sp, #16
 8006606:	bd10      	pop	{r4, pc}
 8006608:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800660c:	4298      	cmp	r0, r3
 800660e:	d10a      	bne.n	8006626 <LL_RCC_GetUSARTClockFreq+0x10a>
 8006610:	4b35      	ldr	r3, [pc, #212]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	f010 0004 	ands.w	r0, r0, #4
 8006618:	d0a8      	beq.n	800656c <LL_RCC_GetUSARTClockFreq+0x50>
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4836      	ldr	r0, [pc, #216]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 800661e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006622:	40d8      	lsrs	r0, r3
 8006624:	e7a2      	b.n	800656c <LL_RCC_GetUSARTClockFreq+0x50>
 8006626:	2000      	movs	r0, #0
 8006628:	b004      	add	sp, #16
 800662a:	bd10      	pop	{r4, pc}
 800662c:	2300      	movs	r3, #0
 800662e:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006630:	6990      	ldr	r0, [r2, #24]
 8006632:	6994      	ldr	r4, [r2, #24]
 8006634:	69d2      	ldr	r2, [r2, #28]
 8006636:	f3c0 2003 	ubfx	r0, r0, #8, #4
 800663a:	f004 040f 	and.w	r4, r4, #15
 800663e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006642:	492e      	ldr	r1, [pc, #184]	; (80066fc <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8006644:	5c08      	ldrb	r0, [r1, r0]
 8006646:	5d0c      	ldrb	r4, [r1, r4]
 8006648:	fa23 f000 	lsr.w	r0, r3, r0
 800664c:	5c8a      	ldrb	r2, [r1, r2]
 800664e:	40e0      	lsrs	r0, r4
 8006650:	40d0      	lsrs	r0, r2
 8006652:	b004      	add	sp, #16
 8006654:	bd10      	pop	{r4, pc}
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665e:	2b18      	cmp	r3, #24
 8006660:	d80e      	bhi.n	8006680 <LL_RCC_GetUSARTClockFreq+0x164>
 8006662:	e8df f003 	tbb	[pc, r3]
 8006666:	0d20      	.short	0x0d20
 8006668:	0d0d0d0d 	.word	0x0d0d0d0d
 800666c:	0d350d0d 	.word	0x0d350d0d
 8006670:	0d0d0d0d 	.word	0x0d0d0d0d
 8006674:	0d1e0d0d 	.word	0x0d1e0d0d
 8006678:	0d0d0d0d 	.word	0x0d0d0d0d
 800667c:	0d0d      	.short	0x0d0d
 800667e:	19          	.byte	0x19
 800667f:	00          	.byte	0x00
 8006680:	2300      	movs	r3, #0
 8006682:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8006684:	6990      	ldr	r0, [r2, #24]
 8006686:	6994      	ldr	r4, [r2, #24]
 8006688:	69d2      	ldr	r2, [r2, #28]
 800668a:	f3c0 2003 	ubfx	r0, r0, #8, #4
 800668e:	f004 040f 	and.w	r4, r4, #15
 8006692:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006696:	e7d4      	b.n	8006642 <LL_RCC_GetUSARTClockFreq+0x126>
 8006698:	a801      	add	r0, sp, #4
 800669a:	f7ff fce7 	bl	800606c <LL_RCC_GetPLL1ClockFreq>
 800669e:	9b01      	ldr	r3, [sp, #4]
 80066a0:	e7ef      	b.n	8006682 <LL_RCC_GetUSARTClockFreq+0x166>
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 80066a4:	e7ed      	b.n	8006682 <LL_RCC_GetUSARTClockFreq+0x166>
 80066a6:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80066a8:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80066b0:	40d3      	lsrs	r3, r2
 80066b2:	e7e6      	b.n	8006682 <LL_RCC_GetUSARTClockFreq+0x166>
 80066b4:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80066be:	40d3      	lsrs	r3, r2
 80066c0:	e7b5      	b.n	800662e <LL_RCC_GetUSARTClockFreq+0x112>
 80066c2:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 80066c4:	e7b3      	b.n	800662e <LL_RCC_GetUSARTClockFreq+0x112>
 80066c6:	a801      	add	r0, sp, #4
 80066c8:	f7ff fcd0 	bl	800606c <LL_RCC_GetPLL1ClockFreq>
 80066cc:	9b01      	ldr	r3, [sp, #4]
 80066ce:	e7ae      	b.n	800662e <LL_RCC_GetUSARTClockFreq+0x112>
 80066d0:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80066d2:	e7d6      	b.n	8006682 <LL_RCC_GetUSARTClockFreq+0x166>
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80066d6:	e7aa      	b.n	800662e <LL_RCC_GetUSARTClockFreq+0x112>
 80066d8:	58024000 	.word	0x58024000
 80066dc:	07020308 	.word	0x07020308
 80066e0:	07000308 	.word	0x07000308
 80066e4:	07010308 	.word	0x07010308
 80066e8:	58024400 	.word	0x58024400
 80066ec:	07040308 	.word	0x07040308
 80066f0:	07050008 	.word	0x07050008
 80066f4:	003d0900 	.word	0x003d0900
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	08008dcc 	.word	0x08008dcc
 8006700:	00f42400 	.word	0x00f42400

08006704 <LL_TIM_Init>:
 8006704:	4a3b      	ldr	r2, [pc, #236]	; (80067f4 <LL_TIM_Init+0xf0>)
 8006706:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800670a:	6803      	ldr	r3, [r0, #0]
 800670c:	eba0 0202 	sub.w	r2, r0, r2
 8006710:	fab2 f282 	clz	r2, r2
 8006714:	b430      	push	{r4, r5}
 8006716:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800671a:	d01f      	beq.n	800675c <LL_TIM_Init+0x58>
 800671c:	b9f2      	cbnz	r2, 800675c <LL_TIM_Init+0x58>
 800671e:	4c36      	ldr	r4, [pc, #216]	; (80067f8 <LL_TIM_Init+0xf4>)
 8006720:	42a0      	cmp	r0, r4
 8006722:	d042      	beq.n	80067aa <LL_TIM_Init+0xa6>
 8006724:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006728:	42a0      	cmp	r0, r4
 800672a:	d03e      	beq.n	80067aa <LL_TIM_Init+0xa6>
 800672c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006730:	42a0      	cmp	r0, r4
 8006732:	d044      	beq.n	80067be <LL_TIM_Init+0xba>
 8006734:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8006738:	42a0      	cmp	r0, r4
 800673a:	d040      	beq.n	80067be <LL_TIM_Init+0xba>
 800673c:	4c2f      	ldr	r4, [pc, #188]	; (80067fc <LL_TIM_Init+0xf8>)
 800673e:	4a30      	ldr	r2, [pc, #192]	; (8006800 <LL_TIM_Init+0xfc>)
 8006740:	4290      	cmp	r0, r2
 8006742:	bf18      	it	ne
 8006744:	42a0      	cmpne	r0, r4
 8006746:	d04a      	beq.n	80067de <LL_TIM_Init+0xda>
 8006748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800674c:	4290      	cmp	r0, r2
 800674e:	d046      	beq.n	80067de <LL_TIM_Init+0xda>
 8006750:	688c      	ldr	r4, [r1, #8]
 8006752:	880a      	ldrh	r2, [r1, #0]
 8006754:	6003      	str	r3, [r0, #0]
 8006756:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006758:	6282      	str	r2, [r0, #40]	; 0x28
 800675a:	e01f      	b.n	800679c <LL_TIM_Init+0x98>
 800675c:	684c      	ldr	r4, [r1, #4]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	4323      	orrs	r3, r4
 8006764:	4c27      	ldr	r4, [pc, #156]	; (8006804 <LL_TIM_Init+0x100>)
 8006766:	1b04      	subs	r4, r0, r4
 8006768:	fab4 f484 	clz	r4, r4
 800676c:	0964      	lsrs	r4, r4, #5
 800676e:	68cd      	ldr	r5, [r1, #12]
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006774:	432b      	orrs	r3, r5
 8006776:	6003      	str	r3, [r0, #0]
 8006778:	688b      	ldr	r3, [r1, #8]
 800677a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800677c:	880b      	ldrh	r3, [r1, #0]
 800677e:	6283      	str	r3, [r0, #40]	; 0x28
 8006780:	b952      	cbnz	r2, 8006798 <LL_TIM_Init+0x94>
 8006782:	b94c      	cbnz	r4, 8006798 <LL_TIM_Init+0x94>
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <LL_TIM_Init+0xf8>)
 8006786:	4b1e      	ldr	r3, [pc, #120]	; (8006800 <LL_TIM_Init+0xfc>)
 8006788:	4298      	cmp	r0, r3
 800678a:	bf18      	it	ne
 800678c:	4290      	cmpne	r0, r2
 800678e:	d003      	beq.n	8006798 <LL_TIM_Init+0x94>
 8006790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006794:	4298      	cmp	r0, r3
 8006796:	d101      	bne.n	800679c <LL_TIM_Init+0x98>
 8006798:	7c0b      	ldrb	r3, [r1, #16]
 800679a:	6303      	str	r3, [r0, #48]	; 0x30
 800679c:	6943      	ldr	r3, [r0, #20]
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	bc30      	pop	{r4, r5}
 80067a4:	6143      	str	r3, [r0, #20]
 80067a6:	2001      	movs	r0, #1
 80067a8:	4770      	bx	lr
 80067aa:	4c16      	ldr	r4, [pc, #88]	; (8006804 <LL_TIM_Init+0x100>)
 80067ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b0:	684d      	ldr	r5, [r1, #4]
 80067b2:	1b04      	subs	r4, r0, r4
 80067b4:	432b      	orrs	r3, r5
 80067b6:	fab4 f484 	clz	r4, r4
 80067ba:	0964      	lsrs	r4, r4, #5
 80067bc:	e7d7      	b.n	800676e <LL_TIM_Init+0x6a>
 80067be:	684d      	ldr	r5, [r1, #4]
 80067c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c4:	4c0f      	ldr	r4, [pc, #60]	; (8006804 <LL_TIM_Init+0x100>)
 80067c6:	432b      	orrs	r3, r5
 80067c8:	4d0f      	ldr	r5, [pc, #60]	; (8006808 <LL_TIM_Init+0x104>)
 80067ca:	1b04      	subs	r4, r0, r4
 80067cc:	42a8      	cmp	r0, r5
 80067ce:	fab4 f484 	clz	r4, r4
 80067d2:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80067d6:	d0ca      	beq.n	800676e <LL_TIM_Init+0x6a>
 80067d8:	2c00      	cmp	r4, #0
 80067da:	d1c8      	bne.n	800676e <LL_TIM_Init+0x6a>
 80067dc:	e7ae      	b.n	800673c <LL_TIM_Init+0x38>
 80067de:	68cc      	ldr	r4, [r1, #12]
 80067e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e4:	688a      	ldr	r2, [r1, #8]
 80067e6:	4323      	orrs	r3, r4
 80067e8:	6003      	str	r3, [r0, #0]
 80067ea:	880b      	ldrh	r3, [r1, #0]
 80067ec:	62c2      	str	r2, [r0, #44]	; 0x2c
 80067ee:	6283      	str	r3, [r0, #40]	; 0x28
 80067f0:	e7c8      	b.n	8006784 <LL_TIM_Init+0x80>
 80067f2:	bf00      	nop
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40010400 	.word	0x40010400
 8006808:	40000c00 	.word	0x40000c00

0800680c <LL_USART_Init>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4604      	mov	r4, r0
 8006810:	6800      	ldr	r0, [r0, #0]
 8006812:	f010 0001 	ands.w	r0, r0, #1
 8006816:	d13d      	bne.n	8006894 <LL_USART_Init+0x88>
 8006818:	690a      	ldr	r2, [r1, #16]
 800681a:	460d      	mov	r5, r1
 800681c:	688b      	ldr	r3, [r1, #8]
 800681e:	6821      	ldr	r1, [r4, #0]
 8006820:	4313      	orrs	r3, r2
 8006822:	696a      	ldr	r2, [r5, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	69ea      	ldr	r2, [r5, #28]
 8006828:	4313      	orrs	r3, r2
 800682a:	4a37      	ldr	r2, [pc, #220]	; (8006908 <LL_USART_Init+0xfc>)
 800682c:	400a      	ands	r2, r1
 800682e:	68e9      	ldr	r1, [r5, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	6862      	ldr	r2, [r4, #4]
 8006836:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800683a:	430a      	orrs	r2, r1
 800683c:	69a9      	ldr	r1, [r5, #24]
 800683e:	6062      	str	r2, [r4, #4]
 8006840:	68a3      	ldr	r3, [r4, #8]
 8006842:	4a32      	ldr	r2, [pc, #200]	; (800690c <LL_USART_Init+0x100>)
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	4294      	cmp	r4, r2
 800684a:	ea43 0301 	orr.w	r3, r3, r1
 800684e:	60a3      	str	r3, [r4, #8]
 8006850:	d043      	beq.n	80068da <LL_USART_Init+0xce>
 8006852:	4b2f      	ldr	r3, [pc, #188]	; (8006910 <LL_USART_Init+0x104>)
 8006854:	429c      	cmp	r4, r3
 8006856:	d01f      	beq.n	8006898 <LL_USART_Init+0x8c>
 8006858:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <LL_USART_Init+0x108>)
 800685a:	429c      	cmp	r4, r3
 800685c:	d01c      	beq.n	8006898 <LL_USART_Init+0x8c>
 800685e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006862:	429c      	cmp	r4, r3
 8006864:	d018      	beq.n	8006898 <LL_USART_Init+0x8c>
 8006866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686a:	429c      	cmp	r4, r3
 800686c:	d014      	beq.n	8006898 <LL_USART_Init+0x8c>
 800686e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006872:	429c      	cmp	r4, r3
 8006874:	d031      	beq.n	80068da <LL_USART_Init+0xce>
 8006876:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 800687a:	429c      	cmp	r4, r3
 800687c:	d00c      	beq.n	8006898 <LL_USART_Init+0x8c>
 800687e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006882:	429c      	cmp	r4, r3
 8006884:	d008      	beq.n	8006898 <LL_USART_Init+0x8c>
 8006886:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006888:	8829      	ldrh	r1, [r5, #0]
 800688a:	f023 030f 	bic.w	r3, r3, #15
 800688e:	430b      	orrs	r3, r1
 8006890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	2000      	movs	r0, #0
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	481f      	ldr	r0, [pc, #124]	; (8006918 <LL_USART_Init+0x10c>)
 800689a:	f7ff fe3f 	bl	800651c <LL_RCC_GetUSARTClockFreq>
 800689e:	b1a0      	cbz	r0, 80068ca <LL_USART_Init+0xbe>
 80068a0:	686b      	ldr	r3, [r5, #4]
 80068a2:	b193      	cbz	r3, 80068ca <LL_USART_Init+0xbe>
 80068a4:	69ea      	ldr	r2, [r5, #28]
 80068a6:	6829      	ldr	r1, [r5, #0]
 80068a8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80068ac:	4a1b      	ldr	r2, [pc, #108]	; (800691c <LL_USART_Init+0x110>)
 80068ae:	b289      	uxth	r1, r1
 80068b0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80068b4:	d017      	beq.n	80068e6 <LL_USART_Init+0xda>
 80068b6:	fbb0 f2f2 	udiv	r2, r0, r2
 80068ba:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80068be:	2001      	movs	r0, #1
 80068c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068c4:	b292      	uxth	r2, r2
 80068c6:	60e2      	str	r2, [r4, #12]
 80068c8:	e001      	b.n	80068ce <LL_USART_Init+0xc2>
 80068ca:	8829      	ldrh	r1, [r5, #0]
 80068cc:	2000      	movs	r0, #0
 80068ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068d0:	f023 030f 	bic.w	r3, r3, #15
 80068d4:	430b      	orrs	r3, r1
 80068d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068d8:	bd38      	pop	{r3, r4, r5, pc}
 80068da:	4811      	ldr	r0, [pc, #68]	; (8006920 <LL_USART_Init+0x114>)
 80068dc:	f7ff fe1e 	bl	800651c <LL_RCC_GetUSARTClockFreq>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d1dd      	bne.n	80068a0 <LL_USART_Init+0x94>
 80068e4:	e7f1      	b.n	80068ca <LL_USART_Init+0xbe>
 80068e6:	fbb0 f0f2 	udiv	r0, r0, r2
 80068ea:	085a      	lsrs	r2, r3, #1
 80068ec:	f64f 75f0 	movw	r5, #65520	; 0xfff0
 80068f0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80068f4:	fbb0 f2f3 	udiv	r2, r0, r3
 80068f8:	ea02 0005 	and.w	r0, r2, r5
 80068fc:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8006900:	4303      	orrs	r3, r0
 8006902:	2001      	movs	r0, #1
 8006904:	60e3      	str	r3, [r4, #12]
 8006906:	e7e2      	b.n	80068ce <LL_USART_Init+0xc2>
 8006908:	efff69f3 	.word	0xefff69f3
 800690c:	40011000 	.word	0x40011000
 8006910:	40004400 	.word	0x40004400
 8006914:	40004800 	.word	0x40004800
 8006918:	07000008 	.word	0x07000008
 800691c:	08008ddc 	.word	0x08008ddc
 8006920:	07000308 	.word	0x07000308
 8006924:	00000000 	.word	0x00000000

08006928 <cosf>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	ee10 4a10 	vmov	r4, s0
 800692e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006932:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006936:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800693a:	d21e      	bcs.n	800697a <cosf+0x52>
 800693c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006940:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006944:	d36f      	bcc.n	8006a26 <cosf+0xfe>
 8006946:	ee27 1b07 	vmul.f64	d1, d7, d7
 800694a:	4b63      	ldr	r3, [pc, #396]	; (8006ad8 <cosf+0x1b0>)
 800694c:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006950:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 8006954:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006958:	eea7 5b02 	vfma.f64	d5, d7, d2
 800695c:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006960:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006964:	eea7 0b03 	vfma.f64	d0, d7, d3
 8006968:	ee27 7b01 	vmul.f64	d7, d7, d1
 800696c:	eea1 0b04 	vfma.f64	d0, d1, d4
 8006970:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006974:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	f240 422e 	movw	r2, #1070	; 0x42e
 800697e:	4293      	cmp	r3, r2
 8006980:	d854      	bhi.n	8006a2c <cosf+0x104>
 8006982:	4955      	ldr	r1, [pc, #340]	; (8006ad8 <cosf+0x1b0>)
 8006984:	ed91 6b08 	vldr	d6, [r1, #32]
 8006988:	ee27 6b06 	vmul.f64	d6, d7, d6
 800698c:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8006990:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
 8006994:	ee16 3a90 	vmov	r3, s13
 8006998:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 800699c:	161b      	asrs	r3, r3, #24
 800699e:	f013 0f02 	tst.w	r3, #2
 80069a2:	ee06 3a90 	vmov	s13, r3
 80069a6:	f101 0270 	add.w	r2, r1, #112	; 0x70
 80069aa:	bf08      	it	eq
 80069ac:	460a      	moveq	r2, r1
 80069ae:	07d8      	lsls	r0, r3, #31
 80069b0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80069b4:	eea6 7b45 	vfms.f64	d7, d6, d5
 80069b8:	ee27 6b07 	vmul.f64	d6, d7, d7
 80069bc:	d51a      	bpl.n	80069f4 <cosf+0xcc>
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80069c6:	ed93 2b00 	vldr	d2, [r3]
 80069ca:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
 80069ce:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
 80069d2:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
 80069d6:	eea6 5b04 	vfma.f64	d5, d6, d4
 80069da:	ee27 7b02 	vmul.f64	d7, d7, d2
 80069de:	ee27 4b06 	vmul.f64	d4, d7, d6
 80069e2:	ee26 6b04 	vmul.f64	d6, d6, d4
 80069e6:	eea4 7b03 	vfma.f64	d7, d4, d3
 80069ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80069ee:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
 80069f8:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
 80069fc:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
 8006a00:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
 8006a04:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
 8006a08:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006a0c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006a10:	eea6 0b03 	vfma.f64	d0, d6, d3
 8006a14:	ee26 6b05 	vmul.f64	d6, d6, d5
 8006a18:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006a1c:	eea7 0b06 	vfma.f64	d0, d7, d6
 8006a20:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a24:	bd38      	pop	{r3, r4, r5, pc}
 8006a26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006a30:	d23d      	bcs.n	8006aae <cosf+0x186>
 8006a32:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <cosf+0x1b4>)
 8006a34:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006a38:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006a3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a40:	690d      	ldr	r5, [r1, #16]
 8006a42:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006a46:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a4e:	4083      	lsls	r3, r0
 8006a50:	6a08      	ldr	r0, [r1, #32]
 8006a52:	fb03 f202 	mul.w	r2, r3, r2
 8006a56:	fba3 1000 	umull	r1, r0, r3, r0
 8006a5a:	fbe3 0205 	umlal	r0, r2, r3, r5
 8006a5e:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8006a62:	0f8d      	lsrs	r5, r1, #30
 8006a64:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8006a68:	1a51      	subs	r1, r2, r1
 8006a6a:	f7f9 fe1f 	bl	80006ac <__aeabi_l2d>
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <cosf+0x1b8>)
 8006a70:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8006ad0 <cosf+0x1a8>
 8006a74:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006a78:	ec41 0b16 	vmov	d6, r0, r1
 8006a7c:	f014 0f02 	tst.w	r4, #2
 8006a80:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8006a84:	bf08      	it	eq
 8006a86:	4613      	moveq	r3, r2
 8006a88:	07e9      	lsls	r1, r5, #31
 8006a8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a8e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006a92:	d510      	bpl.n	8006ab6 <cosf+0x18e>
 8006a94:	f004 0403 	and.w	r4, r4, #3
 8006a98:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8006a9c:	ed94 2b00 	vldr	d2, [r4]
 8006aa0:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8006aa4:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006aa8:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
 8006aac:	e793      	b.n	80069d6 <cosf+0xae>
 8006aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab2:	f000 b857 	b.w	8006b64 <__math_invalidf>
 8006ab6:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006aba:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006abe:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006ac2:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006ac6:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006aca:	e79d      	b.n	8006a08 <cosf+0xe0>
 8006acc:	f3af 8000 	nop.w
 8006ad0:	54442d18 	.word	0x54442d18
 8006ad4:	3c1921fb 	.word	0x3c1921fb
 8006ad8:	08008fa0 	.word	0x08008fa0
 8006adc:	08008f40 	.word	0x08008f40
 8006ae0:	08009010 	.word	0x08009010

08006ae4 <with_errnof>:
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006aec:	4604      	mov	r4, r0
 8006aee:	f000 fbc7 	bl	8007280 <__errno>
 8006af2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006af6:	6004      	str	r4, [r0, #0]
 8006af8:	b002      	add	sp, #8
 8006afa:	bd10      	pop	{r4, pc}

08006afc <xflowf>:
 8006afc:	b130      	cbz	r0, 8006b0c <xflowf+0x10>
 8006afe:	eef1 7a40 	vneg.f32	s15, s0
 8006b02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b06:	2022      	movs	r0, #34	; 0x22
 8006b08:	f7ff bfec 	b.w	8006ae4 <with_errnof>
 8006b0c:	eef0 7a40 	vmov.f32	s15, s0
 8006b10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b14:	2022      	movs	r0, #34	; 0x22
 8006b16:	f7ff bfe5 	b.w	8006ae4 <with_errnof>
 8006b1a:	bf00      	nop

08006b1c <__math_uflowf>:
 8006b1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b24 <__math_uflowf+0x8>
 8006b20:	f7ff bfec 	b.w	8006afc <xflowf>
 8006b24:	10000000 	.word	0x10000000

08006b28 <__math_may_uflowf>:
 8006b28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b30 <__math_may_uflowf+0x8>
 8006b2c:	f7ff bfe6 	b.w	8006afc <xflowf>
 8006b30:	1a200000 	.word	0x1a200000

08006b34 <__math_oflowf>:
 8006b34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b3c <__math_oflowf+0x8>
 8006b38:	f7ff bfe0 	b.w	8006afc <xflowf>
 8006b3c:	70000000 	.word	0x70000000

08006b40 <__math_divzerof>:
 8006b40:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006b60 <__math_divzerof+0x20>
 8006b44:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8006b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	f04f 0022 	mov.w	r0, #34	; 0x22
 8006b52:	fe47 7a27 	vseleq.f32	s15, s14, s15
 8006b56:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006b5a:	f7ff bfc3 	b.w	8006ae4 <with_errnof>
 8006b5e:	bf00      	nop
 8006b60:	00000000 	.word	0x00000000

08006b64 <__math_invalidf>:
 8006b64:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006b68:	eeb4 0a40 	vcmp.f32	s0, s0
 8006b6c:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 8006b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b74:	eeb0 0a47 	vmov.f32	s0, s14
 8006b78:	d602      	bvs.n	8006b80 <__math_invalidf+0x1c>
 8006b7a:	2021      	movs	r0, #33	; 0x21
 8006b7c:	f7ff bfb2 	b.w	8006ae4 <with_errnof>
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop

08006b84 <expf>:
 8006b84:	ee10 3a10 	vmov	r3, s0
 8006b88:	f240 412a 	movw	r1, #1066	; 0x42a
 8006b8c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006b90:	428a      	cmp	r2, r1
 8006b92:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
 8006b96:	d832      	bhi.n	8006bfe <expf+0x7a>
 8006b98:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <expf+0xd0>)
 8006b9e:	ed93 2b4a 	vldr	d2, [r3, #296]	; 0x128
 8006ba2:	ed93 1b48 	vldr	d1, [r3, #288]	; 0x120
 8006ba6:	eeb0 7b41 	vmov.f64	d7, d1
 8006baa:	eea2 7b03 	vfma.f64	d7, d2, d3
 8006bae:	ee17 0a10 	vmov	r0, s14
 8006bb2:	ee37 7b41 	vsub.f64	d7, d7, d1
 8006bb6:	f000 021f 	and.w	r2, r0, #31
 8006bba:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8006bbe:	b430      	push	{r4, r5}
 8006bc0:	ee92 7b03 	vfnms.f64	d7, d2, d3
 8006bc4:	ed93 4b4c 	vldr	d4, [r3, #304]	; 0x130
 8006bc8:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8006bcc:	684d      	ldr	r5, [r1, #4]
 8006bce:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8006bd2:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8006bd6:	eea4 6b07 	vfma.f64	d6, d4, d7
 8006bda:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006bde:	2100      	movs	r1, #0
 8006be0:	190a      	adds	r2, r1, r4
 8006be2:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8006be6:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006bea:	ec43 2b17 	vmov	d7, r2, r3
 8006bee:	eea6 0b04 	vfma.f64	d0, d6, d4
 8006bf2:	bc30      	pop	{r4, r5}
 8006bf4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006bf8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006bfc:	4770      	bx	lr
 8006bfe:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8006c02:	d020      	beq.n	8006c46 <expf+0xc2>
 8006c04:	f5b2 6fff 	cmp.w	r2, #2040	; 0x7f8
 8006c08:	d21a      	bcs.n	8006c40 <expf+0xbc>
 8006c0a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006c58 <expf+0xd4>
 8006c0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	dc10      	bgt.n	8006c3a <expf+0xb6>
 8006c18:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006c5c <expf+0xd8>
 8006c1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c24:	d412      	bmi.n	8006c4c <expf+0xc8>
 8006c26:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006c60 <expf+0xdc>
 8006c2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c32:	d5b1      	bpl.n	8006b98 <expf+0x14>
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7ff bf77 	b.w	8006b28 <__math_may_uflowf>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f7ff bf7a 	b.w	8006b34 <__math_oflowf>
 8006c40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c44:	4770      	bx	lr
 8006c46:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006c64 <expf+0xe0>
 8006c4a:	4770      	bx	lr
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f7ff bf65 	b.w	8006b1c <__math_uflowf>
 8006c52:	bf00      	nop
 8006c54:	08008df8 	.word	0x08008df8
 8006c58:	42b17217 	.word	0x42b17217
 8006c5c:	c2cff1b4 	.word	0xc2cff1b4
 8006c60:	c2ce8ecf 	.word	0xc2ce8ecf
 8006c64:	00000000 	.word	0x00000000

08006c68 <sinf>:
 8006c68:	b530      	push	{r4, r5, lr}
 8006c6a:	ee10 4a10 	vmov	r4, s0
 8006c6e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006c72:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006c76:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	d21b      	bcs.n	8006cb6 <sinf+0x4e>
 8006c7e:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006c82:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006c86:	d370      	bcc.n	8006d6a <sinf+0x102>
 8006c88:	ee26 2b05 	vmul.f64	d2, d6, d5
 8006c8c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8006c90:	4b75      	ldr	r3, [pc, #468]	; (8006e68 <sinf+0x200>)
 8006c92:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
 8006c96:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006c9a:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
 8006c9e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006ca2:	eea2 6b04 	vfma.f64	d6, d2, d4
 8006ca6:	eeb0 0b46 	vmov.f64	d0, d6
 8006caa:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006cae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006cb2:	b003      	add	sp, #12
 8006cb4:	bd30      	pop	{r4, r5, pc}
 8006cb6:	f240 422e 	movw	r2, #1070	; 0x42e
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d860      	bhi.n	8006d80 <sinf+0x118>
 8006cbe:	496a      	ldr	r1, [pc, #424]	; (8006e68 <sinf+0x200>)
 8006cc0:	ed91 7b08 	vldr	d7, [r1, #32]
 8006cc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006cc8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ccc:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
 8006cd0:	ee17 3a90 	vmov	r3, s15
 8006cd4:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8006cd8:	161b      	asrs	r3, r3, #24
 8006cda:	f013 0f02 	tst.w	r3, #2
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8006ce6:	bf08      	it	eq
 8006ce8:	460a      	moveq	r2, r1
 8006cea:	07d8      	lsls	r0, r3, #31
 8006cec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cf0:	eea7 6b45 	vfms.f64	d6, d7, d5
 8006cf4:	eeb0 0b46 	vmov.f64	d0, d6
 8006cf8:	ee26 7b06 	vmul.f64	d7, d6, d6
 8006cfc:	d41b      	bmi.n	8006d36 <sinf+0xce>
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8006d06:	ed92 5b1a 	vldr	d5, [r2, #104]	; 0x68
 8006d0a:	ed93 3b00 	vldr	d3, [r3]
 8006d0e:	ed92 6b18 	vldr	d6, [r2, #96]	; 0x60
 8006d12:	ee20 0b03 	vmul.f64	d0, d0, d3
 8006d16:	ed92 4b16 	vldr	d4, [r2, #88]	; 0x58
 8006d1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006d1e:	ee20 5b07 	vmul.f64	d5, d0, d7
 8006d22:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d26:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006d2a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006d2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006d32:	b003      	add	sp, #12
 8006d34:	bd30      	pop	{r4, r5, pc}
 8006d36:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
 8006d3a:	ee27 5b07 	vmul.f64	d5, d7, d7
 8006d3e:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
 8006d42:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
 8006d46:	eea7 6b02 	vfma.f64	d6, d7, d2
 8006d4a:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
 8006d4e:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
 8006d52:	eea7 0b03 	vfma.f64	d0, d7, d3
 8006d56:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d5a:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006d5e:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006d62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006d66:	b003      	add	sp, #12
 8006d68:	bd30      	pop	{r4, r5, pc}
 8006d6a:	0d22      	lsrs	r2, r4, #20
 8006d6c:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8006d70:	d1df      	bne.n	8006d32 <sinf+0xca>
 8006d72:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8006d76:	ee00 4a10 	vmov	s0, r4
 8006d7a:	ed8d 5a01 	vstr	s10, [sp, #4]
 8006d7e:	e7d8      	b.n	8006d32 <sinf+0xca>
 8006d80:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006d84:	d24b      	bcs.n	8006e1e <sinf+0x1b6>
 8006d86:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <sinf+0x204>)
 8006d88:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006d8c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006d90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d94:	690d      	ldr	r5, [r1, #16]
 8006d96:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006d9a:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006d9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006da2:	4083      	lsls	r3, r0
 8006da4:	6a08      	ldr	r0, [r1, #32]
 8006da6:	fb03 f202 	mul.w	r2, r3, r2
 8006daa:	fba3 1000 	umull	r1, r0, r3, r0
 8006dae:	fbe3 0205 	umlal	r0, r2, r3, r5
 8006db2:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8006db6:	0f8d      	lsrs	r5, r1, #30
 8006db8:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8006dbc:	1a51      	subs	r1, r2, r1
 8006dbe:	f7f9 fc75 	bl	80006ac <__aeabi_l2d>
 8006dc2:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <sinf+0x208>)
 8006dc4:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8006e60 <sinf+0x1f8>
 8006dc8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006dcc:	ec41 0b16 	vmov	d6, r0, r1
 8006dd0:	f014 0f02 	tst.w	r4, #2
 8006dd4:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8006dd8:	bf08      	it	eq
 8006dda:	4613      	moveq	r3, r2
 8006ddc:	07e9      	lsls	r1, r5, #31
 8006dde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006de2:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006de6:	d41f      	bmi.n	8006e28 <sinf+0x1c0>
 8006de8:	f004 0403 	and.w	r4, r4, #3
 8006dec:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8006df0:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8006df4:	ed94 2b00 	vldr	d2, [r4]
 8006df8:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006dfc:	ee27 7b02 	vmul.f64	d7, d7, d2
 8006e00:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
 8006e04:	eea6 5b04 	vfma.f64	d5, d6, d4
 8006e08:	ee27 4b06 	vmul.f64	d4, d7, d6
 8006e0c:	ee26 6b04 	vmul.f64	d6, d6, d4
 8006e10:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006e14:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006e18:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8006e1c:	e789      	b.n	8006d32 <sinf+0xca>
 8006e1e:	b003      	add	sp, #12
 8006e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e24:	f7ff be9e 	b.w	8006b64 <__math_invalidf>
 8006e28:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
 8006e2c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8006e30:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006e34:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006e38:	eea6 7b02 	vfma.f64	d7, d6, d2
 8006e3c:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006e40:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8006e44:	eea6 0b03 	vfma.f64	d0, d6, d3
 8006e48:	ee26 6b05 	vmul.f64	d6, d6, d5
 8006e4c:	eea5 0b04 	vfma.f64	d0, d5, d4
 8006e50:	eea7 0b06 	vfma.f64	d0, d7, d6
 8006e54:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e58:	e76b      	b.n	8006d32 <sinf+0xca>
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w
 8006e60:	54442d18 	.word	0x54442d18
 8006e64:	3c1921fb 	.word	0x3c1921fb
 8006e68:	08008fa0 	.word	0x08008fa0
 8006e6c:	08008f40 	.word	0x08008f40
 8006e70:	08009010 	.word	0x08009010

08006e74 <fmodf>:
 8006e74:	b508      	push	{r3, lr}
 8006e76:	ed2d 8b02 	vpush	{d8}
 8006e7a:	eef0 8a40 	vmov.f32	s17, s0
 8006e7e:	eeb0 8a60 	vmov.f32	s16, s1
 8006e82:	f000 f84b 	bl	8006f1c <__ieee754_fmodf>
 8006e86:	eef4 8a48 	vcmp.f32	s17, s16
 8006e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8e:	d606      	bvs.n	8006e9e <fmodf+0x2a>
 8006e90:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006eb8 <fmodf+0x44>
 8006e94:	eeb4 8a68 	vcmp.f32	s16, s17
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d002      	beq.n	8006ea4 <fmodf+0x30>
 8006e9e:	ecbd 8b02 	vpop	{d8}
 8006ea2:	bd08      	pop	{r3, pc}
 8006ea4:	f000 f9ec 	bl	8007280 <__errno>
 8006ea8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006eac:	ecbd 8b02 	vpop	{d8}
 8006eb0:	2321      	movs	r3, #33	; 0x21
 8006eb2:	6003      	str	r3, [r0, #0]
 8006eb4:	bd08      	pop	{r3, pc}
 8006eb6:	bf00      	nop
 8006eb8:	00000000 	.word	0x00000000

08006ebc <log10f>:
 8006ebc:	b508      	push	{r3, lr}
 8006ebe:	ed2d 8b02 	vpush	{d8}
 8006ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8006ec6:	f000 f8b9 	bl	800703c <__ieee754_log10f>
 8006eca:	eeb4 8a48 	vcmp.f32	s16, s16
 8006ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed2:	d60f      	bvs.n	8006ef4 <log10f+0x38>
 8006ed4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006edc:	d80a      	bhi.n	8006ef4 <log10f+0x38>
 8006ede:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	d108      	bne.n	8006efa <log10f+0x3e>
 8006ee8:	f000 f9ca 	bl	8007280 <__errno>
 8006eec:	2322      	movs	r3, #34	; 0x22
 8006eee:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006f14 <log10f+0x58>
 8006ef2:	6003      	str	r3, [r0, #0]
 8006ef4:	ecbd 8b02 	vpop	{d8}
 8006ef8:	bd08      	pop	{r3, pc}
 8006efa:	f000 f9c1 	bl	8007280 <__errno>
 8006efe:	ecbd 8b02 	vpop	{d8}
 8006f02:	4603      	mov	r3, r0
 8006f04:	2221      	movs	r2, #33	; 0x21
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	4803      	ldr	r0, [pc, #12]	; (8006f18 <log10f+0x5c>)
 8006f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f0e:	f000 b959 	b.w	80071c4 <nanf>
 8006f12:	bf00      	nop
 8006f14:	ff800000 	.word	0xff800000
 8006f18:	080089b8 	.word	0x080089b8

08006f1c <__ieee754_fmodf>:
 8006f1c:	b530      	push	{r4, r5, lr}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	edcd 0a01 	vstr	s1, [sp, #4]
 8006f24:	9d01      	ldr	r5, [sp, #4]
 8006f26:	f035 4000 	bics.w	r0, r5, #2147483648	; 0x80000000
 8006f2a:	d041      	beq.n	8006fb0 <__ieee754_fmodf+0x94>
 8006f2c:	ee10 ea10 	vmov	lr, s0
 8006f30:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
 8006f34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f38:	da3a      	bge.n	8006fb0 <__ieee754_fmodf+0x94>
 8006f3a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006f3e:	dc37      	bgt.n	8006fb0 <__ieee754_fmodf+0x94>
 8006f40:	4283      	cmp	r3, r0
 8006f42:	db3b      	blt.n	8006fbc <__ieee754_fmodf+0xa0>
 8006f44:	f00e 4400 	and.w	r4, lr, #2147483648	; 0x80000000
 8006f48:	d03a      	beq.n	8006fc0 <__ieee754_fmodf+0xa4>
 8006f4a:	f01e 4fff 	tst.w	lr, #2139095040	; 0x7f800000
 8006f4e:	d156      	bne.n	8006ffe <__ieee754_fmodf+0xe2>
 8006f50:	0219      	lsls	r1, r3, #8
 8006f52:	2900      	cmp	r1, #0
 8006f54:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006f58:	dd04      	ble.n	8006f64 <__ieee754_fmodf+0x48>
 8006f5a:	0049      	lsls	r1, r1, #1
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006f62:	dcfa      	bgt.n	8006f5a <__ieee754_fmodf+0x3e>
 8006f64:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006f68:	d157      	bne.n	800701a <__ieee754_fmodf+0xfe>
 8006f6a:	0201      	lsls	r1, r0, #8
 8006f6c:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 8006f70:	d403      	bmi.n	8006f7a <__ieee754_fmodf+0x5e>
 8006f72:	0049      	lsls	r1, r1, #1
 8006f74:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006f78:	d5fb      	bpl.n	8006f72 <__ieee754_fmodf+0x56>
 8006f7a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006f7e:	db47      	blt.n	8007010 <__ieee754_fmodf+0xf4>
 8006f80:	f3ce 0316 	ubfx	r3, lr, #0, #23
 8006f84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f88:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8006f8c:	db3a      	blt.n	8007004 <__ieee754_fmodf+0xe8>
 8006f8e:	f3c5 0016 	ubfx	r0, r5, #0, #23
 8006f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006f96:	ebb2 020c 	subs.w	r2, r2, ip
 8006f9a:	d104      	bne.n	8006fa6 <__ieee754_fmodf+0x8a>
 8006f9c:	e017      	b.n	8006fce <__ieee754_fmodf+0xb2>
 8006f9e:	d00f      	beq.n	8006fc0 <__ieee754_fmodf+0xa4>
 8006fa0:	004b      	lsls	r3, r1, #1
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	d013      	beq.n	8006fce <__ieee754_fmodf+0xb2>
 8006fa6:	1a19      	subs	r1, r3, r0
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	daf8      	bge.n	8006f9e <__ieee754_fmodf+0x82>
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	e7f8      	b.n	8006fa2 <__ieee754_fmodf+0x86>
 8006fb0:	eddd 7a01 	vldr	s15, [sp, #4]
 8006fb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006fb8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006fbc:	b003      	add	sp, #12
 8006fbe:	bd30      	pop	{r4, r5, pc}
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <__ieee754_fmodf+0x11c>)
 8006fc2:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 8006fc6:	ed93 0a00 	vldr	s0, [r3]
 8006fca:	b003      	add	sp, #12
 8006fcc:	bd30      	pop	{r4, r5, pc}
 8006fce:	1a18      	subs	r0, r3, r0
 8006fd0:	bf58      	it	pl
 8006fd2:	4603      	movpl	r3, r0
 8006fd4:	b91b      	cbnz	r3, 8006fde <__ieee754_fmodf+0xc2>
 8006fd6:	e7f3      	b.n	8006fc0 <__ieee754_fmodf+0xa4>
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fe2:	dbf9      	blt.n	8006fd8 <__ieee754_fmodf+0xbc>
 8006fe4:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8006fe8:	db1c      	blt.n	8007024 <__ieee754_fmodf+0x108>
 8006fea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006fee:	f10c 0c7f 	add.w	ip, ip, #127	; 0x7f
 8006ff2:	4323      	orrs	r3, r4
 8006ff4:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
 8006ff8:	ee00 3a10 	vmov	s0, r3
 8006ffc:	e7de      	b.n	8006fbc <__ieee754_fmodf+0xa0>
 8006ffe:	15da      	asrs	r2, r3, #23
 8007000:	3a7f      	subs	r2, #127	; 0x7f
 8007002:	e7af      	b.n	8006f64 <__ieee754_fmodf+0x48>
 8007004:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007008:	eba1 010c 	sub.w	r1, r1, ip
 800700c:	4088      	lsls	r0, r1
 800700e:	e7c2      	b.n	8006f96 <__ieee754_fmodf+0x7a>
 8007010:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007014:	1a89      	subs	r1, r1, r2
 8007016:	408b      	lsls	r3, r1
 8007018:	e7b6      	b.n	8006f88 <__ieee754_fmodf+0x6c>
 800701a:	ea4f 5ce0 	mov.w	ip, r0, asr #23
 800701e:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
 8007022:	e7aa      	b.n	8006f7a <__ieee754_fmodf+0x5e>
 8007024:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007028:	eba2 0c0c 	sub.w	ip, r2, ip
 800702c:	fa43 f30c 	asr.w	r3, r3, ip
 8007030:	4323      	orrs	r3, r4
 8007032:	ee00 3a10 	vmov	s0, r3
 8007036:	e7c1      	b.n	8006fbc <__ieee754_fmodf+0xa0>
 8007038:	08009080 	.word	0x08009080

0800703c <__ieee754_log10f>:
 800703c:	b508      	push	{r3, lr}
 800703e:	ee10 3a10 	vmov	r3, s0
 8007042:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007046:	ed2d 8b02 	vpush	{d8}
 800704a:	d02b      	beq.n	80070a4 <__ieee754_log10f+0x68>
 800704c:	2b00      	cmp	r3, #0
 800704e:	db32      	blt.n	80070b6 <__ieee754_log10f+0x7a>
 8007050:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007054:	da41      	bge.n	80070da <__ieee754_log10f+0x9e>
 8007056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800705a:	db35      	blt.n	80070c8 <__ieee754_log10f+0x8c>
 800705c:	2100      	movs	r1, #0
 800705e:	15da      	asrs	r2, r3, #23
 8007060:	3a7f      	subs	r2, #127	; 0x7f
 8007062:	440a      	add	r2, r1
 8007064:	0fd1      	lsrs	r1, r2, #31
 8007066:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800706a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800706e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007072:	ee07 2a90 	vmov	s15, r2
 8007076:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800707a:	ee00 3a10 	vmov	s0, r3
 800707e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007082:	f000 f83b 	bl	80070fc <logf>
 8007086:	eddf 7a17 	vldr	s15, [pc, #92]	; 80070e4 <__ieee754_log10f+0xa8>
 800708a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80070e8 <__ieee754_log10f+0xac>
 800708e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007092:	eddf 7a16 	vldr	s15, [pc, #88]	; 80070ec <__ieee754_log10f+0xb0>
 8007096:	eea8 0a07 	vfma.f32	s0, s16, s14
 800709a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800709e:	ecbd 8b02 	vpop	{d8}
 80070a2:	bd08      	pop	{r3, pc}
 80070a4:	ecbd 8b02 	vpop	{d8}
 80070a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80070f0 <__ieee754_log10f+0xb4>
 80070ac:	eddf 7a11 	vldr	s15, [pc, #68]	; 80070f4 <__ieee754_log10f+0xb8>
 80070b0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80070b4:	bd08      	pop	{r3, pc}
 80070b6:	ecbd 8b02 	vpop	{d8}
 80070ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 80070be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80070f4 <__ieee754_log10f+0xb8>
 80070c2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80070c6:	bd08      	pop	{r3, pc}
 80070c8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80070f8 <__ieee754_log10f+0xbc>
 80070cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80070d0:	f06f 0118 	mvn.w	r1, #24
 80070d4:	ee17 3a90 	vmov	r3, s15
 80070d8:	e7c1      	b.n	800705e <__ieee754_log10f+0x22>
 80070da:	ecbd 8b02 	vpop	{d8}
 80070de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070e2:	bd08      	pop	{r3, pc}
 80070e4:	3ede5bd9 	.word	0x3ede5bd9
 80070e8:	355427db 	.word	0x355427db
 80070ec:	3e9a2080 	.word	0x3e9a2080
 80070f0:	cc000000 	.word	0xcc000000
 80070f4:	00000000 	.word	0x00000000
 80070f8:	4c000000 	.word	0x4c000000

080070fc <logf>:
 80070fc:	ee10 3a10 	vmov	r3, s0
 8007100:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007104:	ee10 1a10 	vmov	r1, s0
 8007108:	d038      	beq.n	800717c <logf+0x80>
 800710a:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800710e:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007112:	d236      	bcs.n	8007182 <logf+0x86>
 8007114:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8007118:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <logf+0xbc>)
 800711e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8007122:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8007126:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800712a:	ed93 4b40 	vldr	d4, [r3, #256]	; 0x100
 800712e:	ed93 5b44 	vldr	d5, [r3, #272]	; 0x110
 8007132:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8007136:	ed93 6b42 	vldr	d6, [r3, #264]	; 0x108
 800713a:	0dd3      	lsrs	r3, r2, #23
 800713c:	05db      	lsls	r3, r3, #23
 800713e:	ed90 2b00 	vldr	d2, [r0]
 8007142:	1acb      	subs	r3, r1, r3
 8007144:	ee03 3a90 	vmov	s7, r3
 8007148:	ed90 1b02 	vldr	d1, [r0, #8]
 800714c:	15d2      	asrs	r2, r2, #23
 800714e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8007152:	eea2 0b03 	vfma.f64	d0, d2, d3
 8007156:	ee03 2a90 	vmov	s7, r2
 800715a:	ee20 2b00 	vmul.f64	d2, d0, d0
 800715e:	eea5 7b00 	vfma.f64	d7, d5, d0
 8007162:	eeb8 3be3 	vcvt.f64.s32	d3, s7
 8007166:	eea6 7b02 	vfma.f64	d7, d6, d2
 800716a:	eea3 1b04 	vfma.f64	d1, d3, d4
 800716e:	ee30 0b01 	vadd.f64	d0, d0, d1
 8007172:	eea2 0b07 	vfma.f64	d0, d2, d7
 8007176:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800717a:	4770      	bx	lr
 800717c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80071bc <logf+0xc0>
 8007180:	4770      	bx	lr
 8007182:	005a      	lsls	r2, r3, #1
 8007184:	d014      	beq.n	80071b0 <logf+0xb4>
 8007186:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800718a:	d014      	beq.n	80071b6 <logf+0xba>
 800718c:	2b00      	cmp	r3, #0
 800718e:	db0b      	blt.n	80071a8 <logf+0xac>
 8007190:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8007194:	d208      	bcs.n	80071a8 <logf+0xac>
 8007196:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80071c0 <logf+0xc4>
 800719a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800719e:	ee17 3a90 	vmov	r3, s15
 80071a2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80071a6:	e7b5      	b.n	8007114 <logf+0x18>
 80071a8:	ee00 3a10 	vmov	s0, r3
 80071ac:	f7ff bcda 	b.w	8006b64 <__math_invalidf>
 80071b0:	2001      	movs	r0, #1
 80071b2:	f7ff bcc5 	b.w	8006b40 <__math_divzerof>
 80071b6:	4770      	bx	lr
 80071b8:	08009088 	.word	0x08009088
 80071bc:	00000000 	.word	0x00000000
 80071c0:	4b000000 	.word	0x4b000000

080071c4 <nanf>:
 80071c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071cc <nanf+0x8>
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	7fc00000 	.word	0x7fc00000

080071d0 <__assert_func>:
 80071d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071d2:	4614      	mov	r4, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <__assert_func+0x2c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4605      	mov	r5, r0
 80071dc:	68d8      	ldr	r0, [r3, #12]
 80071de:	b14c      	cbz	r4, 80071f4 <__assert_func+0x24>
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <__assert_func+0x30>)
 80071e2:	9100      	str	r1, [sp, #0]
 80071e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071e8:	4906      	ldr	r1, [pc, #24]	; (8007204 <__assert_func+0x34>)
 80071ea:	462b      	mov	r3, r5
 80071ec:	f000 f990 	bl	8007510 <fiprintf>
 80071f0:	f001 f858 	bl	80082a4 <abort>
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <__assert_func+0x38>)
 80071f6:	461c      	mov	r4, r3
 80071f8:	e7f3      	b.n	80071e2 <__assert_func+0x12>
 80071fa:	bf00      	nop
 80071fc:	20000008 	.word	0x20000008
 8007200:	080091a8 	.word	0x080091a8
 8007204:	080091b5 	.word	0x080091b5
 8007208:	080091e3 	.word	0x080091e3

0800720c <clearerr>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4b18      	ldr	r3, [pc, #96]	; (8007270 <clearerr+0x64>)
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	4604      	mov	r4, r0
 8007214:	b125      	cbz	r5, 8007220 <clearerr+0x14>
 8007216:	69ab      	ldr	r3, [r5, #24]
 8007218:	b913      	cbnz	r3, 8007220 <clearerr+0x14>
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f8fa 	bl	8007414 <__sinit>
 8007220:	4b14      	ldr	r3, [pc, #80]	; (8007274 <clearerr+0x68>)
 8007222:	429c      	cmp	r4, r3
 8007224:	d118      	bne.n	8007258 <clearerr+0x4c>
 8007226:	686c      	ldr	r4, [r5, #4]
 8007228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722a:	07d8      	lsls	r0, r3, #31
 800722c:	d405      	bmi.n	800723a <clearerr+0x2e>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	0599      	lsls	r1, r3, #22
 8007232:	d402      	bmi.n	800723a <clearerr+0x2e>
 8007234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007236:	f000 fa22 	bl	800767e <__retarget_lock_acquire_recursive>
 800723a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007240:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007244:	07d2      	lsls	r2, r2, #31
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	d410      	bmi.n	800726c <clearerr+0x60>
 800724a:	059b      	lsls	r3, r3, #22
 800724c:	d40e      	bmi.n	800726c <clearerr+0x60>
 800724e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007254:	f000 ba14 	b.w	8007680 <__retarget_lock_release_recursive>
 8007258:	4b07      	ldr	r3, [pc, #28]	; (8007278 <clearerr+0x6c>)
 800725a:	429c      	cmp	r4, r3
 800725c:	d101      	bne.n	8007262 <clearerr+0x56>
 800725e:	68ac      	ldr	r4, [r5, #8]
 8007260:	e7e2      	b.n	8007228 <clearerr+0x1c>
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <clearerr+0x70>)
 8007264:	429c      	cmp	r4, r3
 8007266:	bf08      	it	eq
 8007268:	68ec      	ldreq	r4, [r5, #12]
 800726a:	e7dd      	b.n	8007228 <clearerr+0x1c>
 800726c:	bd38      	pop	{r3, r4, r5, pc}
 800726e:	bf00      	nop
 8007270:	20000008 	.word	0x20000008
 8007274:	08009204 	.word	0x08009204
 8007278:	08009224 	.word	0x08009224
 800727c:	080091e4 	.word	0x080091e4

08007280 <__errno>:
 8007280:	4b01      	ldr	r3, [pc, #4]	; (8007288 <__errno+0x8>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20000008 	.word	0x20000008

0800728c <feof>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <feof+0x5c>)
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	4604      	mov	r4, r0
 8007294:	b125      	cbz	r5, 80072a0 <feof+0x14>
 8007296:	69ab      	ldr	r3, [r5, #24]
 8007298:	b913      	cbnz	r3, 80072a0 <feof+0x14>
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f8ba 	bl	8007414 <__sinit>
 80072a0:	4b12      	ldr	r3, [pc, #72]	; (80072ec <feof+0x60>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d116      	bne.n	80072d4 <feof+0x48>
 80072a6:	686c      	ldr	r4, [r5, #4]
 80072a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072aa:	07d8      	lsls	r0, r3, #31
 80072ac:	d405      	bmi.n	80072ba <feof+0x2e>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	0599      	lsls	r1, r3, #22
 80072b2:	d402      	bmi.n	80072ba <feof+0x2e>
 80072b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072b6:	f000 f9e2 	bl	800767e <__retarget_lock_acquire_recursive>
 80072ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	07d2      	lsls	r2, r2, #31
 80072c0:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80072c4:	d404      	bmi.n	80072d0 <feof+0x44>
 80072c6:	059b      	lsls	r3, r3, #22
 80072c8:	d402      	bmi.n	80072d0 <feof+0x44>
 80072ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072cc:	f000 f9d8 	bl	8007680 <__retarget_lock_release_recursive>
 80072d0:	4628      	mov	r0, r5
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <feof+0x64>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d101      	bne.n	80072de <feof+0x52>
 80072da:	68ac      	ldr	r4, [r5, #8]
 80072dc:	e7e4      	b.n	80072a8 <feof+0x1c>
 80072de:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <feof+0x68>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	bf08      	it	eq
 80072e4:	68ec      	ldreq	r4, [r5, #12]
 80072e6:	e7df      	b.n	80072a8 <feof+0x1c>
 80072e8:	20000008 	.word	0x20000008
 80072ec:	08009204 	.word	0x08009204
 80072f0:	08009224 	.word	0x08009224
 80072f4:	080091e4 	.word	0x080091e4

080072f8 <ferror>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4b16      	ldr	r3, [pc, #88]	; (8007354 <ferror+0x5c>)
 80072fc:	681d      	ldr	r5, [r3, #0]
 80072fe:	4604      	mov	r4, r0
 8007300:	b125      	cbz	r5, 800730c <ferror+0x14>
 8007302:	69ab      	ldr	r3, [r5, #24]
 8007304:	b913      	cbnz	r3, 800730c <ferror+0x14>
 8007306:	4628      	mov	r0, r5
 8007308:	f000 f884 	bl	8007414 <__sinit>
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <ferror+0x60>)
 800730e:	429c      	cmp	r4, r3
 8007310:	d116      	bne.n	8007340 <ferror+0x48>
 8007312:	686c      	ldr	r4, [r5, #4]
 8007314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007316:	07d8      	lsls	r0, r3, #31
 8007318:	d405      	bmi.n	8007326 <ferror+0x2e>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	0599      	lsls	r1, r3, #22
 800731e:	d402      	bmi.n	8007326 <ferror+0x2e>
 8007320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007322:	f000 f9ac 	bl	800767e <__retarget_lock_acquire_recursive>
 8007326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	07d2      	lsls	r2, r2, #31
 800732c:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8007330:	d404      	bmi.n	800733c <ferror+0x44>
 8007332:	059b      	lsls	r3, r3, #22
 8007334:	d402      	bmi.n	800733c <ferror+0x44>
 8007336:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007338:	f000 f9a2 	bl	8007680 <__retarget_lock_release_recursive>
 800733c:	4628      	mov	r0, r5
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <ferror+0x64>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d101      	bne.n	800734a <ferror+0x52>
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	e7e4      	b.n	8007314 <ferror+0x1c>
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <ferror+0x68>)
 800734c:	429c      	cmp	r4, r3
 800734e:	bf08      	it	eq
 8007350:	68ec      	ldreq	r4, [r5, #12]
 8007352:	e7df      	b.n	8007314 <ferror+0x1c>
 8007354:	20000008 	.word	0x20000008
 8007358:	08009204 	.word	0x08009204
 800735c:	08009224 	.word	0x08009224
 8007360:	080091e4 	.word	0x080091e4

08007364 <std>:
 8007364:	2300      	movs	r3, #0
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	e9c0 3300 	strd	r3, r3, [r0]
 800736e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007372:	6083      	str	r3, [r0, #8]
 8007374:	8181      	strh	r1, [r0, #12]
 8007376:	6643      	str	r3, [r0, #100]	; 0x64
 8007378:	81c2      	strh	r2, [r0, #14]
 800737a:	6183      	str	r3, [r0, #24]
 800737c:	4619      	mov	r1, r3
 800737e:	2208      	movs	r2, #8
 8007380:	305c      	adds	r0, #92	; 0x5c
 8007382:	f000 f98c 	bl	800769e <memset>
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <std+0x38>)
 8007388:	6263      	str	r3, [r4, #36]	; 0x24
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x3c>)
 800738c:	62a3      	str	r3, [r4, #40]	; 0x28
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x40>)
 8007390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <std+0x44>)
 8007394:	6224      	str	r4, [r4, #32]
 8007396:	6323      	str	r3, [r4, #48]	; 0x30
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	08008021 	.word	0x08008021
 80073a0:	08008043 	.word	0x08008043
 80073a4:	0800807b 	.word	0x0800807b
 80073a8:	0800809f 	.word	0x0800809f

080073ac <_cleanup_r>:
 80073ac:	4901      	ldr	r1, [pc, #4]	; (80073b4 <_cleanup_r+0x8>)
 80073ae:	f000 b8de 	b.w	800756e <_fwalk_reent>
 80073b2:	bf00      	nop
 80073b4:	080083e1 	.word	0x080083e1

080073b8 <__sfmoreglue>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	2268      	movs	r2, #104	; 0x68
 80073bc:	1e4d      	subs	r5, r1, #1
 80073be:	4355      	muls	r5, r2
 80073c0:	460e      	mov	r6, r1
 80073c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073c6:	f000 f993 	bl	80076f0 <_malloc_r>
 80073ca:	4604      	mov	r4, r0
 80073cc:	b140      	cbz	r0, 80073e0 <__sfmoreglue+0x28>
 80073ce:	2100      	movs	r1, #0
 80073d0:	e9c0 1600 	strd	r1, r6, [r0]
 80073d4:	300c      	adds	r0, #12
 80073d6:	60a0      	str	r0, [r4, #8]
 80073d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073dc:	f000 f95f 	bl	800769e <memset>
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}

080073e4 <__sfp_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sfp_lock_acquire+0x8>)
 80073e6:	f000 b94a 	b.w	800767e <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20010ffd 	.word	0x20010ffd

080073f0 <__sfp_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sfp_lock_release+0x8>)
 80073f2:	f000 b945 	b.w	8007680 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20010ffd 	.word	0x20010ffd

080073fc <__sinit_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sinit_lock_acquire+0x8>)
 80073fe:	f000 b93e 	b.w	800767e <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20010ffe 	.word	0x20010ffe

08007408 <__sinit_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sinit_lock_release+0x8>)
 800740a:	f000 b939 	b.w	8007680 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20010ffe 	.word	0x20010ffe

08007414 <__sinit>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	f7ff fff0 	bl	80073fc <__sinit_lock_acquire>
 800741c:	69a3      	ldr	r3, [r4, #24]
 800741e:	b11b      	cbz	r3, 8007428 <__sinit+0x14>
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007424:	f7ff bff0 	b.w	8007408 <__sinit_lock_release>
 8007428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800742c:	6523      	str	r3, [r4, #80]	; 0x50
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <__sinit+0x68>)
 8007430:	4a13      	ldr	r2, [pc, #76]	; (8007480 <__sinit+0x6c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	62a2      	str	r2, [r4, #40]	; 0x28
 8007436:	42a3      	cmp	r3, r4
 8007438:	bf04      	itt	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	61a3      	streq	r3, [r4, #24]
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f820 	bl	8007484 <__sfp>
 8007444:	6060      	str	r0, [r4, #4]
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f81c 	bl	8007484 <__sfp>
 800744c:	60a0      	str	r0, [r4, #8]
 800744e:	4620      	mov	r0, r4
 8007450:	f000 f818 	bl	8007484 <__sfp>
 8007454:	2200      	movs	r2, #0
 8007456:	60e0      	str	r0, [r4, #12]
 8007458:	2104      	movs	r1, #4
 800745a:	6860      	ldr	r0, [r4, #4]
 800745c:	f7ff ff82 	bl	8007364 <std>
 8007460:	68a0      	ldr	r0, [r4, #8]
 8007462:	2201      	movs	r2, #1
 8007464:	2109      	movs	r1, #9
 8007466:	f7ff ff7d 	bl	8007364 <std>
 800746a:	68e0      	ldr	r0, [r4, #12]
 800746c:	2202      	movs	r2, #2
 800746e:	2112      	movs	r1, #18
 8007470:	f7ff ff78 	bl	8007364 <std>
 8007474:	2301      	movs	r3, #1
 8007476:	61a3      	str	r3, [r4, #24]
 8007478:	e7d2      	b.n	8007420 <__sinit+0xc>
 800747a:	bf00      	nop
 800747c:	08009244 	.word	0x08009244
 8007480:	080073ad 	.word	0x080073ad

08007484 <__sfp>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	4607      	mov	r7, r0
 8007488:	f7ff ffac 	bl	80073e4 <__sfp_lock_acquire>
 800748c:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <__sfp+0x84>)
 800748e:	681e      	ldr	r6, [r3, #0]
 8007490:	69b3      	ldr	r3, [r6, #24]
 8007492:	b913      	cbnz	r3, 800749a <__sfp+0x16>
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff ffbd 	bl	8007414 <__sinit>
 800749a:	3648      	adds	r6, #72	; 0x48
 800749c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	d503      	bpl.n	80074ac <__sfp+0x28>
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	b30b      	cbz	r3, 80074ec <__sfp+0x68>
 80074a8:	6836      	ldr	r6, [r6, #0]
 80074aa:	e7f7      	b.n	800749c <__sfp+0x18>
 80074ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074b0:	b9d5      	cbnz	r5, 80074e8 <__sfp+0x64>
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <__sfp+0x88>)
 80074b4:	60e3      	str	r3, [r4, #12]
 80074b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ba:	6665      	str	r5, [r4, #100]	; 0x64
 80074bc:	f000 f8de 	bl	800767c <__retarget_lock_init_recursive>
 80074c0:	f7ff ff96 	bl	80073f0 <__sfp_lock_release>
 80074c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074cc:	6025      	str	r5, [r4, #0]
 80074ce:	61a5      	str	r5, [r4, #24]
 80074d0:	2208      	movs	r2, #8
 80074d2:	4629      	mov	r1, r5
 80074d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074d8:	f000 f8e1 	bl	800769e <memset>
 80074dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074e4:	4620      	mov	r0, r4
 80074e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e8:	3468      	adds	r4, #104	; 0x68
 80074ea:	e7d9      	b.n	80074a0 <__sfp+0x1c>
 80074ec:	2104      	movs	r1, #4
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7ff ff62 	bl	80073b8 <__sfmoreglue>
 80074f4:	4604      	mov	r4, r0
 80074f6:	6030      	str	r0, [r6, #0]
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1d5      	bne.n	80074a8 <__sfp+0x24>
 80074fc:	f7ff ff78 	bl	80073f0 <__sfp_lock_release>
 8007500:	230c      	movs	r3, #12
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	e7ee      	b.n	80074e4 <__sfp+0x60>
 8007506:	bf00      	nop
 8007508:	08009244 	.word	0x08009244
 800750c:	ffff0001 	.word	0xffff0001

08007510 <fiprintf>:
 8007510:	b40e      	push	{r1, r2, r3}
 8007512:	b503      	push	{r0, r1, lr}
 8007514:	4601      	mov	r1, r0
 8007516:	ab03      	add	r3, sp, #12
 8007518:	4805      	ldr	r0, [pc, #20]	; (8007530 <fiprintf+0x20>)
 800751a:	f853 2b04 	ldr.w	r2, [r3], #4
 800751e:	6800      	ldr	r0, [r0, #0]
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	f000 f983 	bl	800782c <_vfiprintf_r>
 8007526:	b002      	add	sp, #8
 8007528:	f85d eb04 	ldr.w	lr, [sp], #4
 800752c:	b003      	add	sp, #12
 800752e:	4770      	bx	lr
 8007530:	20000008 	.word	0x20000008

08007534 <_fwalk>:
 8007534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007538:	460f      	mov	r7, r1
 800753a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800753e:	2600      	movs	r6, #0
 8007540:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8007544:	f1b8 0801 	subs.w	r8, r8, #1
 8007548:	d505      	bpl.n	8007556 <_fwalk+0x22>
 800754a:	6824      	ldr	r4, [r4, #0]
 800754c:	2c00      	cmp	r4, #0
 800754e:	d1f7      	bne.n	8007540 <_fwalk+0xc>
 8007550:	4630      	mov	r0, r6
 8007552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d906      	bls.n	800756a <_fwalk+0x36>
 800755c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007560:	3301      	adds	r3, #1
 8007562:	d002      	beq.n	800756a <_fwalk+0x36>
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	4306      	orrs	r6, r0
 800756a:	3568      	adds	r5, #104	; 0x68
 800756c:	e7ea      	b.n	8007544 <_fwalk+0x10>

0800756e <_fwalk_reent>:
 800756e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007572:	4606      	mov	r6, r0
 8007574:	4688      	mov	r8, r1
 8007576:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800757a:	2700      	movs	r7, #0
 800757c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007580:	f1b9 0901 	subs.w	r9, r9, #1
 8007584:	d505      	bpl.n	8007592 <_fwalk_reent+0x24>
 8007586:	6824      	ldr	r4, [r4, #0]
 8007588:	2c00      	cmp	r4, #0
 800758a:	d1f7      	bne.n	800757c <_fwalk_reent+0xe>
 800758c:	4638      	mov	r0, r7
 800758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d907      	bls.n	80075a8 <_fwalk_reent+0x3a>
 8007598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800759c:	3301      	adds	r3, #1
 800759e:	d003      	beq.n	80075a8 <_fwalk_reent+0x3a>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	47c0      	blx	r8
 80075a6:	4307      	orrs	r7, r0
 80075a8:	3568      	adds	r5, #104	; 0x68
 80075aa:	e7e9      	b.n	8007580 <_fwalk_reent+0x12>

080075ac <getc>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <getc+0x78>)
 80075b0:	681d      	ldr	r5, [r3, #0]
 80075b2:	4604      	mov	r4, r0
 80075b4:	b125      	cbz	r5, 80075c0 <getc+0x14>
 80075b6:	69ab      	ldr	r3, [r5, #24]
 80075b8:	b913      	cbnz	r3, 80075c0 <getc+0x14>
 80075ba:	4628      	mov	r0, r5
 80075bc:	f7ff ff2a 	bl	8007414 <__sinit>
 80075c0:	4b19      	ldr	r3, [pc, #100]	; (8007628 <getc+0x7c>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d11e      	bne.n	8007604 <getc+0x58>
 80075c6:	686c      	ldr	r4, [r5, #4]
 80075c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ca:	07d8      	lsls	r0, r3, #31
 80075cc:	d405      	bmi.n	80075da <getc+0x2e>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	0599      	lsls	r1, r3, #22
 80075d2:	d402      	bmi.n	80075da <getc+0x2e>
 80075d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075d6:	f000 f852 	bl	800767e <__retarget_lock_acquire_recursive>
 80075da:	6863      	ldr	r3, [r4, #4]
 80075dc:	3b01      	subs	r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	da19      	bge.n	8007618 <getc+0x6c>
 80075e4:	4628      	mov	r0, r5
 80075e6:	4621      	mov	r1, r4
 80075e8:	f000 fcde 	bl	8007fa8 <__srget_r>
 80075ec:	4605      	mov	r5, r0
 80075ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f0:	07da      	lsls	r2, r3, #31
 80075f2:	d405      	bmi.n	8007600 <getc+0x54>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	059b      	lsls	r3, r3, #22
 80075f8:	d402      	bmi.n	8007600 <getc+0x54>
 80075fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fc:	f000 f840 	bl	8007680 <__retarget_lock_release_recursive>
 8007600:	4628      	mov	r0, r5
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	4b09      	ldr	r3, [pc, #36]	; (800762c <getc+0x80>)
 8007606:	429c      	cmp	r4, r3
 8007608:	d101      	bne.n	800760e <getc+0x62>
 800760a:	68ac      	ldr	r4, [r5, #8]
 800760c:	e7dc      	b.n	80075c8 <getc+0x1c>
 800760e:	4b08      	ldr	r3, [pc, #32]	; (8007630 <getc+0x84>)
 8007610:	429c      	cmp	r4, r3
 8007612:	bf08      	it	eq
 8007614:	68ec      	ldreq	r4, [r5, #12]
 8007616:	e7d7      	b.n	80075c8 <getc+0x1c>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	6022      	str	r2, [r4, #0]
 800761e:	781d      	ldrb	r5, [r3, #0]
 8007620:	e7e5      	b.n	80075ee <getc+0x42>
 8007622:	bf00      	nop
 8007624:	20000008 	.word	0x20000008
 8007628:	08009204 	.word	0x08009204
 800762c:	08009224 	.word	0x08009224
 8007630:	080091e4 	.word	0x080091e4

08007634 <__libc_init_array>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4d0d      	ldr	r5, [pc, #52]	; (800766c <__libc_init_array+0x38>)
 8007638:	4c0d      	ldr	r4, [pc, #52]	; (8007670 <__libc_init_array+0x3c>)
 800763a:	1b64      	subs	r4, r4, r5
 800763c:	10a4      	asrs	r4, r4, #2
 800763e:	2600      	movs	r6, #0
 8007640:	42a6      	cmp	r6, r4
 8007642:	d109      	bne.n	8007658 <__libc_init_array+0x24>
 8007644:	4d0b      	ldr	r5, [pc, #44]	; (8007674 <__libc_init_array+0x40>)
 8007646:	4c0c      	ldr	r4, [pc, #48]	; (8007678 <__libc_init_array+0x44>)
 8007648:	f001 fe50 	bl	80092ec <_init>
 800764c:	1b64      	subs	r4, r4, r5
 800764e:	10a4      	asrs	r4, r4, #2
 8007650:	2600      	movs	r6, #0
 8007652:	42a6      	cmp	r6, r4
 8007654:	d105      	bne.n	8007662 <__libc_init_array+0x2e>
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	f855 3b04 	ldr.w	r3, [r5], #4
 800765c:	4798      	blx	r3
 800765e:	3601      	adds	r6, #1
 8007660:	e7ee      	b.n	8007640 <__libc_init_array+0xc>
 8007662:	f855 3b04 	ldr.w	r3, [r5], #4
 8007666:	4798      	blx	r3
 8007668:	3601      	adds	r6, #1
 800766a:	e7f2      	b.n	8007652 <__libc_init_array+0x1e>
 800766c:	08009304 	.word	0x08009304
 8007670:	08009304 	.word	0x08009304
 8007674:	08009304 	.word	0x08009304
 8007678:	08009310 	.word	0x08009310

0800767c <__retarget_lock_init_recursive>:
 800767c:	4770      	bx	lr

0800767e <__retarget_lock_acquire_recursive>:
 800767e:	4770      	bx	lr

08007680 <__retarget_lock_release_recursive>:
 8007680:	4770      	bx	lr

08007682 <memcpy>:
 8007682:	440a      	add	r2, r1
 8007684:	4291      	cmp	r1, r2
 8007686:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800768a:	d100      	bne.n	800768e <memcpy+0xc>
 800768c:	4770      	bx	lr
 800768e:	b510      	push	{r4, lr}
 8007690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007698:	4291      	cmp	r1, r2
 800769a:	d1f9      	bne.n	8007690 <memcpy+0xe>
 800769c:	bd10      	pop	{r4, pc}

0800769e <memset>:
 800769e:	4402      	add	r2, r0
 80076a0:	4603      	mov	r3, r0
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d100      	bne.n	80076a8 <memset+0xa>
 80076a6:	4770      	bx	lr
 80076a8:	f803 1b01 	strb.w	r1, [r3], #1
 80076ac:	e7f9      	b.n	80076a2 <memset+0x4>
	...

080076b0 <sbrk_aligned>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4e0e      	ldr	r6, [pc, #56]	; (80076ec <sbrk_aligned+0x3c>)
 80076b4:	460c      	mov	r4, r1
 80076b6:	6831      	ldr	r1, [r6, #0]
 80076b8:	4605      	mov	r5, r0
 80076ba:	b911      	cbnz	r1, 80076c2 <sbrk_aligned+0x12>
 80076bc:	f000 fca0 	bl	8008000 <_sbrk_r>
 80076c0:	6030      	str	r0, [r6, #0]
 80076c2:	4621      	mov	r1, r4
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 fc9b 	bl	8008000 <_sbrk_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d00a      	beq.n	80076e4 <sbrk_aligned+0x34>
 80076ce:	1cc4      	adds	r4, r0, #3
 80076d0:	f024 0403 	bic.w	r4, r4, #3
 80076d4:	42a0      	cmp	r0, r4
 80076d6:	d007      	beq.n	80076e8 <sbrk_aligned+0x38>
 80076d8:	1a21      	subs	r1, r4, r0
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 fc90 	bl	8008000 <_sbrk_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d101      	bne.n	80076e8 <sbrk_aligned+0x38>
 80076e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076e8:	4620      	mov	r0, r4
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	20011004 	.word	0x20011004

080076f0 <_malloc_r>:
 80076f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f4:	1ccd      	adds	r5, r1, #3
 80076f6:	f025 0503 	bic.w	r5, r5, #3
 80076fa:	3508      	adds	r5, #8
 80076fc:	2d0c      	cmp	r5, #12
 80076fe:	bf38      	it	cc
 8007700:	250c      	movcc	r5, #12
 8007702:	2d00      	cmp	r5, #0
 8007704:	4607      	mov	r7, r0
 8007706:	db01      	blt.n	800770c <_malloc_r+0x1c>
 8007708:	42a9      	cmp	r1, r5
 800770a:	d905      	bls.n	8007718 <_malloc_r+0x28>
 800770c:	230c      	movs	r3, #12
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	2600      	movs	r6, #0
 8007712:	4630      	mov	r0, r6
 8007714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007718:	4e2e      	ldr	r6, [pc, #184]	; (80077d4 <_malloc_r+0xe4>)
 800771a:	f000 ff41 	bl	80085a0 <__malloc_lock>
 800771e:	6833      	ldr	r3, [r6, #0]
 8007720:	461c      	mov	r4, r3
 8007722:	bb34      	cbnz	r4, 8007772 <_malloc_r+0x82>
 8007724:	4629      	mov	r1, r5
 8007726:	4638      	mov	r0, r7
 8007728:	f7ff ffc2 	bl	80076b0 <sbrk_aligned>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	4604      	mov	r4, r0
 8007730:	d14d      	bne.n	80077ce <_malloc_r+0xde>
 8007732:	6834      	ldr	r4, [r6, #0]
 8007734:	4626      	mov	r6, r4
 8007736:	2e00      	cmp	r6, #0
 8007738:	d140      	bne.n	80077bc <_malloc_r+0xcc>
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	4631      	mov	r1, r6
 800773e:	4638      	mov	r0, r7
 8007740:	eb04 0803 	add.w	r8, r4, r3
 8007744:	f000 fc5c 	bl	8008000 <_sbrk_r>
 8007748:	4580      	cmp	r8, r0
 800774a:	d13a      	bne.n	80077c2 <_malloc_r+0xd2>
 800774c:	6821      	ldr	r1, [r4, #0]
 800774e:	3503      	adds	r5, #3
 8007750:	1a6d      	subs	r5, r5, r1
 8007752:	f025 0503 	bic.w	r5, r5, #3
 8007756:	3508      	adds	r5, #8
 8007758:	2d0c      	cmp	r5, #12
 800775a:	bf38      	it	cc
 800775c:	250c      	movcc	r5, #12
 800775e:	4629      	mov	r1, r5
 8007760:	4638      	mov	r0, r7
 8007762:	f7ff ffa5 	bl	80076b0 <sbrk_aligned>
 8007766:	3001      	adds	r0, #1
 8007768:	d02b      	beq.n	80077c2 <_malloc_r+0xd2>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	442b      	add	r3, r5
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	e00e      	b.n	8007790 <_malloc_r+0xa0>
 8007772:	6822      	ldr	r2, [r4, #0]
 8007774:	1b52      	subs	r2, r2, r5
 8007776:	d41e      	bmi.n	80077b6 <_malloc_r+0xc6>
 8007778:	2a0b      	cmp	r2, #11
 800777a:	d916      	bls.n	80077aa <_malloc_r+0xba>
 800777c:	1961      	adds	r1, r4, r5
 800777e:	42a3      	cmp	r3, r4
 8007780:	6025      	str	r5, [r4, #0]
 8007782:	bf18      	it	ne
 8007784:	6059      	strne	r1, [r3, #4]
 8007786:	6863      	ldr	r3, [r4, #4]
 8007788:	bf08      	it	eq
 800778a:	6031      	streq	r1, [r6, #0]
 800778c:	5162      	str	r2, [r4, r5]
 800778e:	604b      	str	r3, [r1, #4]
 8007790:	4638      	mov	r0, r7
 8007792:	f104 060b 	add.w	r6, r4, #11
 8007796:	f000 ff09 	bl	80085ac <__malloc_unlock>
 800779a:	f026 0607 	bic.w	r6, r6, #7
 800779e:	1d23      	adds	r3, r4, #4
 80077a0:	1af2      	subs	r2, r6, r3
 80077a2:	d0b6      	beq.n	8007712 <_malloc_r+0x22>
 80077a4:	1b9b      	subs	r3, r3, r6
 80077a6:	50a3      	str	r3, [r4, r2]
 80077a8:	e7b3      	b.n	8007712 <_malloc_r+0x22>
 80077aa:	6862      	ldr	r2, [r4, #4]
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	bf0c      	ite	eq
 80077b0:	6032      	streq	r2, [r6, #0]
 80077b2:	605a      	strne	r2, [r3, #4]
 80077b4:	e7ec      	b.n	8007790 <_malloc_r+0xa0>
 80077b6:	4623      	mov	r3, r4
 80077b8:	6864      	ldr	r4, [r4, #4]
 80077ba:	e7b2      	b.n	8007722 <_malloc_r+0x32>
 80077bc:	4634      	mov	r4, r6
 80077be:	6876      	ldr	r6, [r6, #4]
 80077c0:	e7b9      	b.n	8007736 <_malloc_r+0x46>
 80077c2:	230c      	movs	r3, #12
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	4638      	mov	r0, r7
 80077c8:	f000 fef0 	bl	80085ac <__malloc_unlock>
 80077cc:	e7a1      	b.n	8007712 <_malloc_r+0x22>
 80077ce:	6025      	str	r5, [r4, #0]
 80077d0:	e7de      	b.n	8007790 <_malloc_r+0xa0>
 80077d2:	bf00      	nop
 80077d4:	20011000 	.word	0x20011000

080077d8 <__sfputc_r>:
 80077d8:	6893      	ldr	r3, [r2, #8]
 80077da:	3b01      	subs	r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	b410      	push	{r4}
 80077e0:	6093      	str	r3, [r2, #8]
 80077e2:	da08      	bge.n	80077f6 <__sfputc_r+0x1e>
 80077e4:	6994      	ldr	r4, [r2, #24]
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	db01      	blt.n	80077ee <__sfputc_r+0x16>
 80077ea:	290a      	cmp	r1, #10
 80077ec:	d103      	bne.n	80077f6 <__sfputc_r+0x1e>
 80077ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077f2:	f000 bc85 	b.w	8008100 <__swbuf_r>
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	1c58      	adds	r0, r3, #1
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	7019      	strb	r1, [r3, #0]
 80077fe:	4608      	mov	r0, r1
 8007800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007804:	4770      	bx	lr

08007806 <__sfputs_r>:
 8007806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007808:	4606      	mov	r6, r0
 800780a:	460f      	mov	r7, r1
 800780c:	4614      	mov	r4, r2
 800780e:	18d5      	adds	r5, r2, r3
 8007810:	42ac      	cmp	r4, r5
 8007812:	d101      	bne.n	8007818 <__sfputs_r+0x12>
 8007814:	2000      	movs	r0, #0
 8007816:	e007      	b.n	8007828 <__sfputs_r+0x22>
 8007818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781c:	463a      	mov	r2, r7
 800781e:	4630      	mov	r0, r6
 8007820:	f7ff ffda 	bl	80077d8 <__sfputc_r>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d1f3      	bne.n	8007810 <__sfputs_r+0xa>
 8007828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800782c <_vfiprintf_r>:
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	460d      	mov	r5, r1
 8007832:	b09d      	sub	sp, #116	; 0x74
 8007834:	4614      	mov	r4, r2
 8007836:	4698      	mov	r8, r3
 8007838:	4606      	mov	r6, r0
 800783a:	b118      	cbz	r0, 8007844 <_vfiprintf_r+0x18>
 800783c:	6983      	ldr	r3, [r0, #24]
 800783e:	b90b      	cbnz	r3, 8007844 <_vfiprintf_r+0x18>
 8007840:	f7ff fde8 	bl	8007414 <__sinit>
 8007844:	4b89      	ldr	r3, [pc, #548]	; (8007a6c <_vfiprintf_r+0x240>)
 8007846:	429d      	cmp	r5, r3
 8007848:	d11b      	bne.n	8007882 <_vfiprintf_r+0x56>
 800784a:	6875      	ldr	r5, [r6, #4]
 800784c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800784e:	07d9      	lsls	r1, r3, #31
 8007850:	d405      	bmi.n	800785e <_vfiprintf_r+0x32>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	059a      	lsls	r2, r3, #22
 8007856:	d402      	bmi.n	800785e <_vfiprintf_r+0x32>
 8007858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785a:	f7ff ff10 	bl	800767e <__retarget_lock_acquire_recursive>
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	071b      	lsls	r3, r3, #28
 8007862:	d501      	bpl.n	8007868 <_vfiprintf_r+0x3c>
 8007864:	692b      	ldr	r3, [r5, #16]
 8007866:	b9eb      	cbnz	r3, 80078a4 <_vfiprintf_r+0x78>
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f000 fcac 	bl	80081c8 <__swsetup_r>
 8007870:	b1c0      	cbz	r0, 80078a4 <_vfiprintf_r+0x78>
 8007872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007874:	07dc      	lsls	r4, r3, #31
 8007876:	d50e      	bpl.n	8007896 <_vfiprintf_r+0x6a>
 8007878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800787c:	b01d      	add	sp, #116	; 0x74
 800787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007882:	4b7b      	ldr	r3, [pc, #492]	; (8007a70 <_vfiprintf_r+0x244>)
 8007884:	429d      	cmp	r5, r3
 8007886:	d101      	bne.n	800788c <_vfiprintf_r+0x60>
 8007888:	68b5      	ldr	r5, [r6, #8]
 800788a:	e7df      	b.n	800784c <_vfiprintf_r+0x20>
 800788c:	4b79      	ldr	r3, [pc, #484]	; (8007a74 <_vfiprintf_r+0x248>)
 800788e:	429d      	cmp	r5, r3
 8007890:	bf08      	it	eq
 8007892:	68f5      	ldreq	r5, [r6, #12]
 8007894:	e7da      	b.n	800784c <_vfiprintf_r+0x20>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	0598      	lsls	r0, r3, #22
 800789a:	d4ed      	bmi.n	8007878 <_vfiprintf_r+0x4c>
 800789c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789e:	f7ff feef 	bl	8007680 <__retarget_lock_release_recursive>
 80078a2:	e7e9      	b.n	8007878 <_vfiprintf_r+0x4c>
 80078a4:	2300      	movs	r3, #0
 80078a6:	9309      	str	r3, [sp, #36]	; 0x24
 80078a8:	2320      	movs	r3, #32
 80078aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80078b2:	2330      	movs	r3, #48	; 0x30
 80078b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a78 <_vfiprintf_r+0x24c>
 80078b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078bc:	f04f 0901 	mov.w	r9, #1
 80078c0:	4623      	mov	r3, r4
 80078c2:	469a      	mov	sl, r3
 80078c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c8:	b10a      	cbz	r2, 80078ce <_vfiprintf_r+0xa2>
 80078ca:	2a25      	cmp	r2, #37	; 0x25
 80078cc:	d1f9      	bne.n	80078c2 <_vfiprintf_r+0x96>
 80078ce:	ebba 0b04 	subs.w	fp, sl, r4
 80078d2:	d00b      	beq.n	80078ec <_vfiprintf_r+0xc0>
 80078d4:	465b      	mov	r3, fp
 80078d6:	4622      	mov	r2, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ff93 	bl	8007806 <__sfputs_r>
 80078e0:	3001      	adds	r0, #1
 80078e2:	f000 80aa 	beq.w	8007a3a <_vfiprintf_r+0x20e>
 80078e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e8:	445a      	add	r2, fp
 80078ea:	9209      	str	r2, [sp, #36]	; 0x24
 80078ec:	f89a 3000 	ldrb.w	r3, [sl]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80a2 	beq.w	8007a3a <_vfiprintf_r+0x20e>
 80078f6:	2300      	movs	r3, #0
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007900:	f10a 0a01 	add.w	sl, sl, #1
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800790c:	931a      	str	r3, [sp, #104]	; 0x68
 800790e:	4654      	mov	r4, sl
 8007910:	2205      	movs	r2, #5
 8007912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007916:	4858      	ldr	r0, [pc, #352]	; (8007a78 <_vfiprintf_r+0x24c>)
 8007918:	f7f8 fcea 	bl	80002f0 <memchr>
 800791c:	9a04      	ldr	r2, [sp, #16]
 800791e:	b9d8      	cbnz	r0, 8007958 <_vfiprintf_r+0x12c>
 8007920:	06d1      	lsls	r1, r2, #27
 8007922:	bf44      	itt	mi
 8007924:	2320      	movmi	r3, #32
 8007926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800792a:	0713      	lsls	r3, r2, #28
 800792c:	bf44      	itt	mi
 800792e:	232b      	movmi	r3, #43	; 0x2b
 8007930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007934:	f89a 3000 	ldrb.w	r3, [sl]
 8007938:	2b2a      	cmp	r3, #42	; 0x2a
 800793a:	d015      	beq.n	8007968 <_vfiprintf_r+0x13c>
 800793c:	9a07      	ldr	r2, [sp, #28]
 800793e:	4654      	mov	r4, sl
 8007940:	2000      	movs	r0, #0
 8007942:	f04f 0c0a 	mov.w	ip, #10
 8007946:	4621      	mov	r1, r4
 8007948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800794c:	3b30      	subs	r3, #48	; 0x30
 800794e:	2b09      	cmp	r3, #9
 8007950:	d94e      	bls.n	80079f0 <_vfiprintf_r+0x1c4>
 8007952:	b1b0      	cbz	r0, 8007982 <_vfiprintf_r+0x156>
 8007954:	9207      	str	r2, [sp, #28]
 8007956:	e014      	b.n	8007982 <_vfiprintf_r+0x156>
 8007958:	eba0 0308 	sub.w	r3, r0, r8
 800795c:	fa09 f303 	lsl.w	r3, r9, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	46a2      	mov	sl, r4
 8007966:	e7d2      	b.n	800790e <_vfiprintf_r+0xe2>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	1d19      	adds	r1, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	9103      	str	r1, [sp, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bfbb      	ittet	lt
 8007974:	425b      	neglt	r3, r3
 8007976:	f042 0202 	orrlt.w	r2, r2, #2
 800797a:	9307      	strge	r3, [sp, #28]
 800797c:	9307      	strlt	r3, [sp, #28]
 800797e:	bfb8      	it	lt
 8007980:	9204      	strlt	r2, [sp, #16]
 8007982:	7823      	ldrb	r3, [r4, #0]
 8007984:	2b2e      	cmp	r3, #46	; 0x2e
 8007986:	d10c      	bne.n	80079a2 <_vfiprintf_r+0x176>
 8007988:	7863      	ldrb	r3, [r4, #1]
 800798a:	2b2a      	cmp	r3, #42	; 0x2a
 800798c:	d135      	bne.n	80079fa <_vfiprintf_r+0x1ce>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	9203      	str	r2, [sp, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfb8      	it	lt
 800799a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800799e:	3402      	adds	r4, #2
 80079a0:	9305      	str	r3, [sp, #20]
 80079a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a88 <_vfiprintf_r+0x25c>
 80079a6:	7821      	ldrb	r1, [r4, #0]
 80079a8:	2203      	movs	r2, #3
 80079aa:	4650      	mov	r0, sl
 80079ac:	f7f8 fca0 	bl	80002f0 <memchr>
 80079b0:	b140      	cbz	r0, 80079c4 <_vfiprintf_r+0x198>
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	eba0 000a 	sub.w	r0, r0, sl
 80079b8:	fa03 f000 	lsl.w	r0, r3, r0
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	4303      	orrs	r3, r0
 80079c0:	3401      	adds	r4, #1
 80079c2:	9304      	str	r3, [sp, #16]
 80079c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c8:	482c      	ldr	r0, [pc, #176]	; (8007a7c <_vfiprintf_r+0x250>)
 80079ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ce:	2206      	movs	r2, #6
 80079d0:	f7f8 fc8e 	bl	80002f0 <memchr>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d03f      	beq.n	8007a58 <_vfiprintf_r+0x22c>
 80079d8:	4b29      	ldr	r3, [pc, #164]	; (8007a80 <_vfiprintf_r+0x254>)
 80079da:	bb1b      	cbnz	r3, 8007a24 <_vfiprintf_r+0x1f8>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	3307      	adds	r3, #7
 80079e0:	f023 0307 	bic.w	r3, r3, #7
 80079e4:	3308      	adds	r3, #8
 80079e6:	9303      	str	r3, [sp, #12]
 80079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ea:	443b      	add	r3, r7
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24
 80079ee:	e767      	b.n	80078c0 <_vfiprintf_r+0x94>
 80079f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079f4:	460c      	mov	r4, r1
 80079f6:	2001      	movs	r0, #1
 80079f8:	e7a5      	b.n	8007946 <_vfiprintf_r+0x11a>
 80079fa:	2300      	movs	r3, #0
 80079fc:	3401      	adds	r4, #1
 80079fe:	9305      	str	r3, [sp, #20]
 8007a00:	4619      	mov	r1, r3
 8007a02:	f04f 0c0a 	mov.w	ip, #10
 8007a06:	4620      	mov	r0, r4
 8007a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a0c:	3a30      	subs	r2, #48	; 0x30
 8007a0e:	2a09      	cmp	r2, #9
 8007a10:	d903      	bls.n	8007a1a <_vfiprintf_r+0x1ee>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0c5      	beq.n	80079a2 <_vfiprintf_r+0x176>
 8007a16:	9105      	str	r1, [sp, #20]
 8007a18:	e7c3      	b.n	80079a2 <_vfiprintf_r+0x176>
 8007a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a1e:	4604      	mov	r4, r0
 8007a20:	2301      	movs	r3, #1
 8007a22:	e7f0      	b.n	8007a06 <_vfiprintf_r+0x1da>
 8007a24:	ab03      	add	r3, sp, #12
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <_vfiprintf_r+0x258>)
 8007a2c:	a904      	add	r1, sp, #16
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f3af 8000 	nop.w
 8007a34:	4607      	mov	r7, r0
 8007a36:	1c78      	adds	r0, r7, #1
 8007a38:	d1d6      	bne.n	80079e8 <_vfiprintf_r+0x1bc>
 8007a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a3c:	07d9      	lsls	r1, r3, #31
 8007a3e:	d405      	bmi.n	8007a4c <_vfiprintf_r+0x220>
 8007a40:	89ab      	ldrh	r3, [r5, #12]
 8007a42:	059a      	lsls	r2, r3, #22
 8007a44:	d402      	bmi.n	8007a4c <_vfiprintf_r+0x220>
 8007a46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a48:	f7ff fe1a 	bl	8007680 <__retarget_lock_release_recursive>
 8007a4c:	89ab      	ldrh	r3, [r5, #12]
 8007a4e:	065b      	lsls	r3, r3, #25
 8007a50:	f53f af12 	bmi.w	8007878 <_vfiprintf_r+0x4c>
 8007a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a56:	e711      	b.n	800787c <_vfiprintf_r+0x50>
 8007a58:	ab03      	add	r3, sp, #12
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <_vfiprintf_r+0x258>)
 8007a60:	a904      	add	r1, sp, #16
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f880 	bl	8007b68 <_printf_i>
 8007a68:	e7e4      	b.n	8007a34 <_vfiprintf_r+0x208>
 8007a6a:	bf00      	nop
 8007a6c:	08009204 	.word	0x08009204
 8007a70:	08009224 	.word	0x08009224
 8007a74:	080091e4 	.word	0x080091e4
 8007a78:	08009248 	.word	0x08009248
 8007a7c:	08009252 	.word	0x08009252
 8007a80:	00000000 	.word	0x00000000
 8007a84:	08007807 	.word	0x08007807
 8007a88:	0800924e 	.word	0x0800924e

08007a8c <_printf_common>:
 8007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	4616      	mov	r6, r2
 8007a92:	4699      	mov	r9, r3
 8007a94:	688a      	ldr	r2, [r1, #8]
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bfb8      	it	lt
 8007aa0:	4613      	movlt	r3, r2
 8007aa2:	6033      	str	r3, [r6, #0]
 8007aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b10a      	cbz	r2, 8007ab2 <_printf_common+0x26>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	6033      	str	r3, [r6, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0699      	lsls	r1, r3, #26
 8007ab6:	bf42      	ittt	mi
 8007ab8:	6833      	ldrmi	r3, [r6, #0]
 8007aba:	3302      	addmi	r3, #2
 8007abc:	6033      	strmi	r3, [r6, #0]
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	f015 0506 	ands.w	r5, r5, #6
 8007ac4:	d106      	bne.n	8007ad4 <_printf_common+0x48>
 8007ac6:	f104 0a19 	add.w	sl, r4, #25
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	6832      	ldr	r2, [r6, #0]
 8007ace:	1a9b      	subs	r3, r3, r2
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc26      	bgt.n	8007b22 <_printf_common+0x96>
 8007ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ad8:	1e13      	subs	r3, r2, #0
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	bf18      	it	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	0692      	lsls	r2, r2, #26
 8007ae2:	d42b      	bmi.n	8007b3c <_printf_common+0xb0>
 8007ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ae8:	4649      	mov	r1, r9
 8007aea:	4638      	mov	r0, r7
 8007aec:	47c0      	blx	r8
 8007aee:	3001      	adds	r0, #1
 8007af0:	d01e      	beq.n	8007b30 <_printf_common+0xa4>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	68e5      	ldr	r5, [r4, #12]
 8007af6:	6832      	ldr	r2, [r6, #0]
 8007af8:	f003 0306 	and.w	r3, r3, #6
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	bf08      	it	eq
 8007b00:	1aad      	subeq	r5, r5, r2
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	6922      	ldr	r2, [r4, #16]
 8007b06:	bf0c      	ite	eq
 8007b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b0c:	2500      	movne	r5, #0
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	bfc4      	itt	gt
 8007b12:	1a9b      	subgt	r3, r3, r2
 8007b14:	18ed      	addgt	r5, r5, r3
 8007b16:	2600      	movs	r6, #0
 8007b18:	341a      	adds	r4, #26
 8007b1a:	42b5      	cmp	r5, r6
 8007b1c:	d11a      	bne.n	8007b54 <_printf_common+0xc8>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e008      	b.n	8007b34 <_printf_common+0xa8>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4652      	mov	r2, sl
 8007b26:	4649      	mov	r1, r9
 8007b28:	4638      	mov	r0, r7
 8007b2a:	47c0      	blx	r8
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d103      	bne.n	8007b38 <_printf_common+0xac>
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b38:	3501      	adds	r5, #1
 8007b3a:	e7c6      	b.n	8007aca <_printf_common+0x3e>
 8007b3c:	18e1      	adds	r1, r4, r3
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	2030      	movs	r0, #48	; 0x30
 8007b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b46:	4422      	add	r2, r4
 8007b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b50:	3302      	adds	r3, #2
 8007b52:	e7c7      	b.n	8007ae4 <_printf_common+0x58>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4622      	mov	r2, r4
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d0e6      	beq.n	8007b30 <_printf_common+0xa4>
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7d9      	b.n	8007b1a <_printf_common+0x8e>
	...

08007b68 <_printf_i>:
 8007b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	7e0f      	ldrb	r7, [r1, #24]
 8007b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b70:	2f78      	cmp	r7, #120	; 0x78
 8007b72:	4691      	mov	r9, r2
 8007b74:	4680      	mov	r8, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b7e:	d807      	bhi.n	8007b90 <_printf_i+0x28>
 8007b80:	2f62      	cmp	r7, #98	; 0x62
 8007b82:	d80a      	bhi.n	8007b9a <_printf_i+0x32>
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	f000 80d8 	beq.w	8007d3a <_printf_i+0x1d2>
 8007b8a:	2f58      	cmp	r7, #88	; 0x58
 8007b8c:	f000 80a3 	beq.w	8007cd6 <_printf_i+0x16e>
 8007b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b98:	e03a      	b.n	8007c10 <_printf_i+0xa8>
 8007b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d8f6      	bhi.n	8007b90 <_printf_i+0x28>
 8007ba2:	a101      	add	r1, pc, #4	; (adr r1, 8007ba8 <_printf_i+0x40>)
 8007ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c15 	.word	0x08007c15
 8007bb0:	08007b91 	.word	0x08007b91
 8007bb4:	08007b91 	.word	0x08007b91
 8007bb8:	08007b91 	.word	0x08007b91
 8007bbc:	08007b91 	.word	0x08007b91
 8007bc0:	08007c15 	.word	0x08007c15
 8007bc4:	08007b91 	.word	0x08007b91
 8007bc8:	08007b91 	.word	0x08007b91
 8007bcc:	08007b91 	.word	0x08007b91
 8007bd0:	08007b91 	.word	0x08007b91
 8007bd4:	08007d21 	.word	0x08007d21
 8007bd8:	08007c45 	.word	0x08007c45
 8007bdc:	08007d03 	.word	0x08007d03
 8007be0:	08007b91 	.word	0x08007b91
 8007be4:	08007b91 	.word	0x08007b91
 8007be8:	08007d43 	.word	0x08007d43
 8007bec:	08007b91 	.word	0x08007b91
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007b91 	.word	0x08007b91
 8007bf8:	08007b91 	.word	0x08007b91
 8007bfc:	08007d0b 	.word	0x08007d0b
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	602a      	str	r2, [r5, #0]
 8007c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0a3      	b.n	8007d5c <_printf_i+0x1f4>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	6829      	ldr	r1, [r5, #0]
 8007c18:	0606      	lsls	r6, r0, #24
 8007c1a:	f101 0304 	add.w	r3, r1, #4
 8007c1e:	d50a      	bpl.n	8007c36 <_printf_i+0xce>
 8007c20:	680e      	ldr	r6, [r1, #0]
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	da03      	bge.n	8007c30 <_printf_i+0xc8>
 8007c28:	232d      	movs	r3, #45	; 0x2d
 8007c2a:	4276      	negs	r6, r6
 8007c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c30:	485e      	ldr	r0, [pc, #376]	; (8007dac <_printf_i+0x244>)
 8007c32:	230a      	movs	r3, #10
 8007c34:	e019      	b.n	8007c6a <_printf_i+0x102>
 8007c36:	680e      	ldr	r6, [r1, #0]
 8007c38:	602b      	str	r3, [r5, #0]
 8007c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c3e:	bf18      	it	ne
 8007c40:	b236      	sxthne	r6, r6
 8007c42:	e7ef      	b.n	8007c24 <_printf_i+0xbc>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	1d19      	adds	r1, r3, #4
 8007c4a:	6029      	str	r1, [r5, #0]
 8007c4c:	0601      	lsls	r1, r0, #24
 8007c4e:	d501      	bpl.n	8007c54 <_printf_i+0xec>
 8007c50:	681e      	ldr	r6, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <_printf_i+0xf2>
 8007c54:	0646      	lsls	r6, r0, #25
 8007c56:	d5fb      	bpl.n	8007c50 <_printf_i+0xe8>
 8007c58:	881e      	ldrh	r6, [r3, #0]
 8007c5a:	4854      	ldr	r0, [pc, #336]	; (8007dac <_printf_i+0x244>)
 8007c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c5e:	bf0c      	ite	eq
 8007c60:	2308      	moveq	r3, #8
 8007c62:	230a      	movne	r3, #10
 8007c64:	2100      	movs	r1, #0
 8007c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c6a:	6865      	ldr	r5, [r4, #4]
 8007c6c:	60a5      	str	r5, [r4, #8]
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	bfa2      	ittt	ge
 8007c72:	6821      	ldrge	r1, [r4, #0]
 8007c74:	f021 0104 	bicge.w	r1, r1, #4
 8007c78:	6021      	strge	r1, [r4, #0]
 8007c7a:	b90e      	cbnz	r6, 8007c80 <_printf_i+0x118>
 8007c7c:	2d00      	cmp	r5, #0
 8007c7e:	d04d      	beq.n	8007d1c <_printf_i+0x1b4>
 8007c80:	4615      	mov	r5, r2
 8007c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c86:	fb03 6711 	mls	r7, r3, r1, r6
 8007c8a:	5dc7      	ldrb	r7, [r0, r7]
 8007c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c90:	4637      	mov	r7, r6
 8007c92:	42bb      	cmp	r3, r7
 8007c94:	460e      	mov	r6, r1
 8007c96:	d9f4      	bls.n	8007c82 <_printf_i+0x11a>
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d10b      	bne.n	8007cb4 <_printf_i+0x14c>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	07de      	lsls	r6, r3, #31
 8007ca0:	d508      	bpl.n	8007cb4 <_printf_i+0x14c>
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	6861      	ldr	r1, [r4, #4]
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	bfde      	ittt	le
 8007caa:	2330      	movle	r3, #48	; 0x30
 8007cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007cb4:	1b52      	subs	r2, r2, r5
 8007cb6:	6122      	str	r2, [r4, #16]
 8007cb8:	f8cd a000 	str.w	sl, [sp]
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	aa03      	add	r2, sp, #12
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	f7ff fee2 	bl	8007a8c <_printf_common>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d14c      	bne.n	8007d66 <_printf_i+0x1fe>
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cd0:	b004      	add	sp, #16
 8007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd6:	4835      	ldr	r0, [pc, #212]	; (8007dac <_printf_i+0x244>)
 8007cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cdc:	6829      	ldr	r1, [r5, #0]
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ce4:	6029      	str	r1, [r5, #0]
 8007ce6:	061d      	lsls	r5, r3, #24
 8007ce8:	d514      	bpl.n	8007d14 <_printf_i+0x1ac>
 8007cea:	07df      	lsls	r7, r3, #31
 8007cec:	bf44      	itt	mi
 8007cee:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf2:	6023      	strmi	r3, [r4, #0]
 8007cf4:	b91e      	cbnz	r6, 8007cfe <_printf_i+0x196>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f023 0320 	bic.w	r3, r3, #32
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	2310      	movs	r3, #16
 8007d00:	e7b0      	b.n	8007c64 <_printf_i+0xfc>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f043 0320 	orr.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	2378      	movs	r3, #120	; 0x78
 8007d0c:	4828      	ldr	r0, [pc, #160]	; (8007db0 <_printf_i+0x248>)
 8007d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d12:	e7e3      	b.n	8007cdc <_printf_i+0x174>
 8007d14:	0659      	lsls	r1, r3, #25
 8007d16:	bf48      	it	mi
 8007d18:	b2b6      	uxthmi	r6, r6
 8007d1a:	e7e6      	b.n	8007cea <_printf_i+0x182>
 8007d1c:	4615      	mov	r5, r2
 8007d1e:	e7bb      	b.n	8007c98 <_printf_i+0x130>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	6826      	ldr	r6, [r4, #0]
 8007d24:	6961      	ldr	r1, [r4, #20]
 8007d26:	1d18      	adds	r0, r3, #4
 8007d28:	6028      	str	r0, [r5, #0]
 8007d2a:	0635      	lsls	r5, r6, #24
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	d501      	bpl.n	8007d34 <_printf_i+0x1cc>
 8007d30:	6019      	str	r1, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <_printf_i+0x1d2>
 8007d34:	0670      	lsls	r0, r6, #25
 8007d36:	d5fb      	bpl.n	8007d30 <_printf_i+0x1c8>
 8007d38:	8019      	strh	r1, [r3, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	4615      	mov	r5, r2
 8007d40:	e7ba      	b.n	8007cb8 <_printf_i+0x150>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	1d1a      	adds	r2, r3, #4
 8007d46:	602a      	str	r2, [r5, #0]
 8007d48:	681d      	ldr	r5, [r3, #0]
 8007d4a:	6862      	ldr	r2, [r4, #4]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f7f8 face 	bl	80002f0 <memchr>
 8007d54:	b108      	cbz	r0, 8007d5a <_printf_i+0x1f2>
 8007d56:	1b40      	subs	r0, r0, r5
 8007d58:	6060      	str	r0, [r4, #4]
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d64:	e7a8      	b.n	8007cb8 <_printf_i+0x150>
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	462a      	mov	r2, r5
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d0ab      	beq.n	8007ccc <_printf_i+0x164>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	079b      	lsls	r3, r3, #30
 8007d78:	d413      	bmi.n	8007da2 <_printf_i+0x23a>
 8007d7a:	68e0      	ldr	r0, [r4, #12]
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	4298      	cmp	r0, r3
 8007d80:	bfb8      	it	lt
 8007d82:	4618      	movlt	r0, r3
 8007d84:	e7a4      	b.n	8007cd0 <_printf_i+0x168>
 8007d86:	2301      	movs	r3, #1
 8007d88:	4632      	mov	r2, r6
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	47d0      	blx	sl
 8007d90:	3001      	adds	r0, #1
 8007d92:	d09b      	beq.n	8007ccc <_printf_i+0x164>
 8007d94:	3501      	adds	r5, #1
 8007d96:	68e3      	ldr	r3, [r4, #12]
 8007d98:	9903      	ldr	r1, [sp, #12]
 8007d9a:	1a5b      	subs	r3, r3, r1
 8007d9c:	42ab      	cmp	r3, r5
 8007d9e:	dcf2      	bgt.n	8007d86 <_printf_i+0x21e>
 8007da0:	e7eb      	b.n	8007d7a <_printf_i+0x212>
 8007da2:	2500      	movs	r5, #0
 8007da4:	f104 0619 	add.w	r6, r4, #25
 8007da8:	e7f5      	b.n	8007d96 <_printf_i+0x22e>
 8007daa:	bf00      	nop
 8007dac:	08009259 	.word	0x08009259
 8007db0:	0800926a 	.word	0x0800926a

08007db4 <iprintf>:
 8007db4:	b40f      	push	{r0, r1, r2, r3}
 8007db6:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <iprintf+0x2c>)
 8007db8:	b513      	push	{r0, r1, r4, lr}
 8007dba:	681c      	ldr	r4, [r3, #0]
 8007dbc:	b124      	cbz	r4, 8007dc8 <iprintf+0x14>
 8007dbe:	69a3      	ldr	r3, [r4, #24]
 8007dc0:	b913      	cbnz	r3, 8007dc8 <iprintf+0x14>
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f7ff fb26 	bl	8007414 <__sinit>
 8007dc8:	ab05      	add	r3, sp, #20
 8007dca:	9a04      	ldr	r2, [sp, #16]
 8007dcc:	68a1      	ldr	r1, [r4, #8]
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7ff fd2b 	bl	800782c <_vfiprintf_r>
 8007dd6:	b002      	add	sp, #8
 8007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ddc:	b004      	add	sp, #16
 8007dde:	4770      	bx	lr
 8007de0:	20000008 	.word	0x20000008

08007de4 <_puts_r>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	460e      	mov	r6, r1
 8007de8:	4605      	mov	r5, r0
 8007dea:	b118      	cbz	r0, 8007df4 <_puts_r+0x10>
 8007dec:	6983      	ldr	r3, [r0, #24]
 8007dee:	b90b      	cbnz	r3, 8007df4 <_puts_r+0x10>
 8007df0:	f7ff fb10 	bl	8007414 <__sinit>
 8007df4:	69ab      	ldr	r3, [r5, #24]
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	b913      	cbnz	r3, 8007e00 <_puts_r+0x1c>
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f7ff fb0a 	bl	8007414 <__sinit>
 8007e00:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <_puts_r+0xd0>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d120      	bne.n	8007e48 <_puts_r+0x64>
 8007e06:	686c      	ldr	r4, [r5, #4]
 8007e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e0a:	07db      	lsls	r3, r3, #31
 8007e0c:	d405      	bmi.n	8007e1a <_puts_r+0x36>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	0598      	lsls	r0, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_puts_r+0x36>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f7ff fc32 	bl	800767e <__retarget_lock_acquire_recursive>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	0719      	lsls	r1, r3, #28
 8007e1e:	d51d      	bpl.n	8007e5c <_puts_r+0x78>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b1db      	cbz	r3, 8007e5c <_puts_r+0x78>
 8007e24:	3e01      	subs	r6, #1
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	60a3      	str	r3, [r4, #8]
 8007e30:	bb39      	cbnz	r1, 8007e82 <_puts_r+0x9e>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da38      	bge.n	8007ea8 <_puts_r+0xc4>
 8007e36:	4622      	mov	r2, r4
 8007e38:	210a      	movs	r1, #10
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f960 	bl	8008100 <__swbuf_r>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d011      	beq.n	8007e68 <_puts_r+0x84>
 8007e44:	250a      	movs	r5, #10
 8007e46:	e011      	b.n	8007e6c <_puts_r+0x88>
 8007e48:	4b1b      	ldr	r3, [pc, #108]	; (8007eb8 <_puts_r+0xd4>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d101      	bne.n	8007e52 <_puts_r+0x6e>
 8007e4e:	68ac      	ldr	r4, [r5, #8]
 8007e50:	e7da      	b.n	8007e08 <_puts_r+0x24>
 8007e52:	4b1a      	ldr	r3, [pc, #104]	; (8007ebc <_puts_r+0xd8>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	bf08      	it	eq
 8007e58:	68ec      	ldreq	r4, [r5, #12]
 8007e5a:	e7d5      	b.n	8007e08 <_puts_r+0x24>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 f9b2 	bl	80081c8 <__swsetup_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d0dd      	beq.n	8007e24 <_puts_r+0x40>
 8007e68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e6e:	07da      	lsls	r2, r3, #31
 8007e70:	d405      	bmi.n	8007e7e <_puts_r+0x9a>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	059b      	lsls	r3, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_puts_r+0x9a>
 8007e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7a:	f7ff fc01 	bl	8007680 <__retarget_lock_release_recursive>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da04      	bge.n	8007e90 <_puts_r+0xac>
 8007e86:	69a2      	ldr	r2, [r4, #24]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	dc06      	bgt.n	8007e9a <_puts_r+0xb6>
 8007e8c:	290a      	cmp	r1, #10
 8007e8e:	d004      	beq.n	8007e9a <_puts_r+0xb6>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	6022      	str	r2, [r4, #0]
 8007e96:	7019      	strb	r1, [r3, #0]
 8007e98:	e7c5      	b.n	8007e26 <_puts_r+0x42>
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 f92f 	bl	8008100 <__swbuf_r>
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d1bf      	bne.n	8007e26 <_puts_r+0x42>
 8007ea6:	e7df      	b.n	8007e68 <_puts_r+0x84>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	250a      	movs	r5, #10
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	6022      	str	r2, [r4, #0]
 8007eb0:	701d      	strb	r5, [r3, #0]
 8007eb2:	e7db      	b.n	8007e6c <_puts_r+0x88>
 8007eb4:	08009204 	.word	0x08009204
 8007eb8:	08009224 	.word	0x08009224
 8007ebc:	080091e4 	.word	0x080091e4

08007ec0 <puts>:
 8007ec0:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <puts+0xc>)
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f7ff bf8d 	b.w	8007de4 <_puts_r>
 8007eca:	bf00      	nop
 8007ecc:	20000008 	.word	0x20000008

08007ed0 <srand>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <srand+0x44>)
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ed8:	4604      	mov	r4, r0
 8007eda:	b9b3      	cbnz	r3, 8007f0a <srand+0x3a>
 8007edc:	2018      	movs	r0, #24
 8007ede:	f000 fb57 	bl	8008590 <malloc>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	63a8      	str	r0, [r5, #56]	; 0x38
 8007ee6:	b920      	cbnz	r0, 8007ef2 <srand+0x22>
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <srand+0x48>)
 8007eea:	480c      	ldr	r0, [pc, #48]	; (8007f1c <srand+0x4c>)
 8007eec:	2142      	movs	r1, #66	; 0x42
 8007eee:	f7ff f96f 	bl	80071d0 <__assert_func>
 8007ef2:	490b      	ldr	r1, [pc, #44]	; (8007f20 <srand+0x50>)
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <srand+0x54>)
 8007ef6:	e9c0 1300 	strd	r1, r3, [r0]
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <srand+0x58>)
 8007efc:	6083      	str	r3, [r0, #8]
 8007efe:	230b      	movs	r3, #11
 8007f00:	8183      	strh	r3, [r0, #12]
 8007f02:	2100      	movs	r1, #0
 8007f04:	2001      	movs	r0, #1
 8007f06:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007f0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	611c      	str	r4, [r3, #16]
 8007f10:	615a      	str	r2, [r3, #20]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20000008 	.word	0x20000008
 8007f18:	0800927b 	.word	0x0800927b
 8007f1c:	08009292 	.word	0x08009292
 8007f20:	abcd330e 	.word	0xabcd330e
 8007f24:	e66d1234 	.word	0xe66d1234
 8007f28:	0005deec 	.word	0x0005deec

08007f2c <rand>:
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <rand+0x5c>)
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	681c      	ldr	r4, [r3, #0]
 8007f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f34:	b9b3      	cbnz	r3, 8007f64 <rand+0x38>
 8007f36:	2018      	movs	r0, #24
 8007f38:	f000 fb2a 	bl	8008590 <malloc>
 8007f3c:	63a0      	str	r0, [r4, #56]	; 0x38
 8007f3e:	b928      	cbnz	r0, 8007f4c <rand+0x20>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <rand+0x60>)
 8007f44:	4812      	ldr	r0, [pc, #72]	; (8007f90 <rand+0x64>)
 8007f46:	214e      	movs	r1, #78	; 0x4e
 8007f48:	f7ff f942 	bl	80071d0 <__assert_func>
 8007f4c:	4a11      	ldr	r2, [pc, #68]	; (8007f94 <rand+0x68>)
 8007f4e:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <rand+0x6c>)
 8007f50:	e9c0 2300 	strd	r2, r3, [r0]
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <rand+0x70>)
 8007f56:	6083      	str	r3, [r0, #8]
 8007f58:	230b      	movs	r3, #11
 8007f5a:	8183      	strh	r3, [r0, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007f64:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007f66:	4a0e      	ldr	r2, [pc, #56]	; (8007fa0 <rand+0x74>)
 8007f68:	6920      	ldr	r0, [r4, #16]
 8007f6a:	6963      	ldr	r3, [r4, #20]
 8007f6c:	490d      	ldr	r1, [pc, #52]	; (8007fa4 <rand+0x78>)
 8007f6e:	4342      	muls	r2, r0
 8007f70:	fb01 2203 	mla	r2, r1, r3, r2
 8007f74:	fba0 0101 	umull	r0, r1, r0, r1
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	eb42 0001 	adc.w	r0, r2, r1
 8007f7e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007f82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007f86:	bd10      	pop	{r4, pc}
 8007f88:	20000008 	.word	0x20000008
 8007f8c:	0800927b 	.word	0x0800927b
 8007f90:	08009292 	.word	0x08009292
 8007f94:	abcd330e 	.word	0xabcd330e
 8007f98:	e66d1234 	.word	0xe66d1234
 8007f9c:	0005deec 	.word	0x0005deec
 8007fa0:	5851f42d 	.word	0x5851f42d
 8007fa4:	4c957f2d 	.word	0x4c957f2d

08007fa8 <__srget_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	460c      	mov	r4, r1
 8007fac:	4605      	mov	r5, r0
 8007fae:	b118      	cbz	r0, 8007fb8 <__srget_r+0x10>
 8007fb0:	6983      	ldr	r3, [r0, #24]
 8007fb2:	b90b      	cbnz	r3, 8007fb8 <__srget_r+0x10>
 8007fb4:	f7ff fa2e 	bl	8007414 <__sinit>
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <__srget_r+0x4c>)
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d10d      	bne.n	8007fda <__srget_r+0x32>
 8007fbe:	686c      	ldr	r4, [r5, #4]
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f000 fb60 	bl	8008688 <__srefill_r>
 8007fc8:	b988      	cbnz	r0, 8007fee <__srget_r+0x46>
 8007fca:	6863      	ldr	r3, [r4, #4]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	6063      	str	r3, [r4, #4]
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	7818      	ldrb	r0, [r3, #0]
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <__srget_r+0x50>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	d101      	bne.n	8007fe4 <__srget_r+0x3c>
 8007fe0:	68ac      	ldr	r4, [r5, #8]
 8007fe2:	e7ed      	b.n	8007fc0 <__srget_r+0x18>
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <__srget_r+0x54>)
 8007fe6:	429c      	cmp	r4, r3
 8007fe8:	bf08      	it	eq
 8007fea:	68ec      	ldreq	r4, [r5, #12]
 8007fec:	e7e8      	b.n	8007fc0 <__srget_r+0x18>
 8007fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff2:	e7f1      	b.n	8007fd8 <__srget_r+0x30>
 8007ff4:	08009204 	.word	0x08009204
 8007ff8:	08009224 	.word	0x08009224
 8007ffc:	080091e4 	.word	0x080091e4

08008000 <_sbrk_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d06      	ldr	r5, [pc, #24]	; (800801c <_sbrk_r+0x1c>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f000 fc64 	bl	80088d8 <_sbrk>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_sbrk_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_sbrk_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20011008 	.word	0x20011008

08008020 <__sread>:
 8008020:	b510      	push	{r4, lr}
 8008022:	460c      	mov	r4, r1
 8008024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008028:	f000 fb12 	bl	8008650 <_read_r>
 800802c:	2800      	cmp	r0, #0
 800802e:	bfab      	itete	ge
 8008030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008032:	89a3      	ldrhlt	r3, [r4, #12]
 8008034:	181b      	addge	r3, r3, r0
 8008036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800803a:	bfac      	ite	ge
 800803c:	6563      	strge	r3, [r4, #84]	; 0x54
 800803e:	81a3      	strhlt	r3, [r4, #12]
 8008040:	bd10      	pop	{r4, pc}

08008042 <__swrite>:
 8008042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008046:	461f      	mov	r7, r3
 8008048:	898b      	ldrh	r3, [r1, #12]
 800804a:	05db      	lsls	r3, r3, #23
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4616      	mov	r6, r2
 8008052:	d505      	bpl.n	8008060 <__swrite+0x1e>
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	2302      	movs	r3, #2
 800805a:	2200      	movs	r2, #0
 800805c:	f000 fa20 	bl	80084a0 <_lseek_r>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	4628      	mov	r0, r5
 8008072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	f000 b895 	b.w	80081a4 <_write_r>

0800807a <__sseek>:
 800807a:	b510      	push	{r4, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f000 fa0d 	bl	80084a0 <_lseek_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	bf15      	itete	ne
 800808c:	6560      	strne	r0, [r4, #84]	; 0x54
 800808e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008096:	81a3      	strheq	r3, [r4, #12]
 8008098:	bf18      	it	ne
 800809a:	81a3      	strhne	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__sclose>:
 800809e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a2:	f000 b907 	b.w	80082b4 <_close_r>

080080a6 <strncpy>:
 80080a6:	b510      	push	{r4, lr}
 80080a8:	3901      	subs	r1, #1
 80080aa:	4603      	mov	r3, r0
 80080ac:	b132      	cbz	r2, 80080bc <strncpy+0x16>
 80080ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080b2:	f803 4b01 	strb.w	r4, [r3], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	2c00      	cmp	r4, #0
 80080ba:	d1f7      	bne.n	80080ac <strncpy+0x6>
 80080bc:	441a      	add	r2, r3
 80080be:	2100      	movs	r1, #0
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d100      	bne.n	80080c6 <strncpy+0x20>
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ca:	e7f9      	b.n	80080c0 <strncpy+0x1a>

080080cc <time>:
 80080cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <time+0x30>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	4669      	mov	r1, sp
 80080d4:	4604      	mov	r4, r0
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	f000 f9d0 	bl	800847c <_gettimeofday_r>
 80080dc:	2800      	cmp	r0, #0
 80080de:	bfbe      	ittt	lt
 80080e0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80080e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080e8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80080ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f0:	b10c      	cbz	r4, 80080f6 <time+0x2a>
 80080f2:	e9c4 0100 	strd	r0, r1, [r4]
 80080f6:	b004      	add	sp, #16
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	bf00      	nop
 80080fc:	20000008 	.word	0x20000008

08008100 <__swbuf_r>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	460e      	mov	r6, r1
 8008104:	4614      	mov	r4, r2
 8008106:	4605      	mov	r5, r0
 8008108:	b118      	cbz	r0, 8008112 <__swbuf_r+0x12>
 800810a:	6983      	ldr	r3, [r0, #24]
 800810c:	b90b      	cbnz	r3, 8008112 <__swbuf_r+0x12>
 800810e:	f7ff f981 	bl	8007414 <__sinit>
 8008112:	4b21      	ldr	r3, [pc, #132]	; (8008198 <__swbuf_r+0x98>)
 8008114:	429c      	cmp	r4, r3
 8008116:	d12b      	bne.n	8008170 <__swbuf_r+0x70>
 8008118:	686c      	ldr	r4, [r5, #4]
 800811a:	69a3      	ldr	r3, [r4, #24]
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	071a      	lsls	r2, r3, #28
 8008122:	d52f      	bpl.n	8008184 <__swbuf_r+0x84>
 8008124:	6923      	ldr	r3, [r4, #16]
 8008126:	b36b      	cbz	r3, 8008184 <__swbuf_r+0x84>
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	6820      	ldr	r0, [r4, #0]
 800812c:	1ac0      	subs	r0, r0, r3
 800812e:	6963      	ldr	r3, [r4, #20]
 8008130:	b2f6      	uxtb	r6, r6
 8008132:	4283      	cmp	r3, r0
 8008134:	4637      	mov	r7, r6
 8008136:	dc04      	bgt.n	8008142 <__swbuf_r+0x42>
 8008138:	4621      	mov	r1, r4
 800813a:	4628      	mov	r0, r5
 800813c:	f000 f950 	bl	80083e0 <_fflush_r>
 8008140:	bb30      	cbnz	r0, 8008190 <__swbuf_r+0x90>
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	3b01      	subs	r3, #1
 8008146:	60a3      	str	r3, [r4, #8]
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	6022      	str	r2, [r4, #0]
 800814e:	701e      	strb	r6, [r3, #0]
 8008150:	6963      	ldr	r3, [r4, #20]
 8008152:	3001      	adds	r0, #1
 8008154:	4283      	cmp	r3, r0
 8008156:	d004      	beq.n	8008162 <__swbuf_r+0x62>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	07db      	lsls	r3, r3, #31
 800815c:	d506      	bpl.n	800816c <__swbuf_r+0x6c>
 800815e:	2e0a      	cmp	r6, #10
 8008160:	d104      	bne.n	800816c <__swbuf_r+0x6c>
 8008162:	4621      	mov	r1, r4
 8008164:	4628      	mov	r0, r5
 8008166:	f000 f93b 	bl	80083e0 <_fflush_r>
 800816a:	b988      	cbnz	r0, 8008190 <__swbuf_r+0x90>
 800816c:	4638      	mov	r0, r7
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <__swbuf_r+0x9c>)
 8008172:	429c      	cmp	r4, r3
 8008174:	d101      	bne.n	800817a <__swbuf_r+0x7a>
 8008176:	68ac      	ldr	r4, [r5, #8]
 8008178:	e7cf      	b.n	800811a <__swbuf_r+0x1a>
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <__swbuf_r+0xa0>)
 800817c:	429c      	cmp	r4, r3
 800817e:	bf08      	it	eq
 8008180:	68ec      	ldreq	r4, [r5, #12]
 8008182:	e7ca      	b.n	800811a <__swbuf_r+0x1a>
 8008184:	4621      	mov	r1, r4
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f81e 	bl	80081c8 <__swsetup_r>
 800818c:	2800      	cmp	r0, #0
 800818e:	d0cb      	beq.n	8008128 <__swbuf_r+0x28>
 8008190:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008194:	e7ea      	b.n	800816c <__swbuf_r+0x6c>
 8008196:	bf00      	nop
 8008198:	08009204 	.word	0x08009204
 800819c:	08009224 	.word	0x08009224
 80081a0:	080091e4 	.word	0x080091e4

080081a4 <_write_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4d07      	ldr	r5, [pc, #28]	; (80081c4 <_write_r+0x20>)
 80081a8:	4604      	mov	r4, r0
 80081aa:	4608      	mov	r0, r1
 80081ac:	4611      	mov	r1, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	602a      	str	r2, [r5, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	f7fc fa7a 	bl	80046ac <_write>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_write_r+0x1e>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_write_r+0x1e>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	20011008 	.word	0x20011008

080081c8 <__swsetup_r>:
 80081c8:	4b32      	ldr	r3, [pc, #200]	; (8008294 <__swsetup_r+0xcc>)
 80081ca:	b570      	push	{r4, r5, r6, lr}
 80081cc:	681d      	ldr	r5, [r3, #0]
 80081ce:	4606      	mov	r6, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	b125      	cbz	r5, 80081de <__swsetup_r+0x16>
 80081d4:	69ab      	ldr	r3, [r5, #24]
 80081d6:	b913      	cbnz	r3, 80081de <__swsetup_r+0x16>
 80081d8:	4628      	mov	r0, r5
 80081da:	f7ff f91b 	bl	8007414 <__sinit>
 80081de:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <__swsetup_r+0xd0>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d10f      	bne.n	8008204 <__swsetup_r+0x3c>
 80081e4:	686c      	ldr	r4, [r5, #4]
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081ec:	0719      	lsls	r1, r3, #28
 80081ee:	d42c      	bmi.n	800824a <__swsetup_r+0x82>
 80081f0:	06dd      	lsls	r5, r3, #27
 80081f2:	d411      	bmi.n	8008218 <__swsetup_r+0x50>
 80081f4:	2309      	movs	r3, #9
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008202:	e03e      	b.n	8008282 <__swsetup_r+0xba>
 8008204:	4b25      	ldr	r3, [pc, #148]	; (800829c <__swsetup_r+0xd4>)
 8008206:	429c      	cmp	r4, r3
 8008208:	d101      	bne.n	800820e <__swsetup_r+0x46>
 800820a:	68ac      	ldr	r4, [r5, #8]
 800820c:	e7eb      	b.n	80081e6 <__swsetup_r+0x1e>
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <__swsetup_r+0xd8>)
 8008210:	429c      	cmp	r4, r3
 8008212:	bf08      	it	eq
 8008214:	68ec      	ldreq	r4, [r5, #12]
 8008216:	e7e6      	b.n	80081e6 <__swsetup_r+0x1e>
 8008218:	0758      	lsls	r0, r3, #29
 800821a:	d512      	bpl.n	8008242 <__swsetup_r+0x7a>
 800821c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800821e:	b141      	cbz	r1, 8008232 <__swsetup_r+0x6a>
 8008220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008224:	4299      	cmp	r1, r3
 8008226:	d002      	beq.n	800822e <__swsetup_r+0x66>
 8008228:	4630      	mov	r0, r6
 800822a:	f000 f9c5 	bl	80085b8 <_free_r>
 800822e:	2300      	movs	r3, #0
 8008230:	6363      	str	r3, [r4, #52]	; 0x34
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	2300      	movs	r3, #0
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f043 0308 	orr.w	r3, r3, #8
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	b94b      	cbnz	r3, 8008262 <__swsetup_r+0x9a>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008258:	d003      	beq.n	8008262 <__swsetup_r+0x9a>
 800825a:	4621      	mov	r1, r4
 800825c:	4630      	mov	r0, r6
 800825e:	f000 f957 	bl	8008510 <__smakebuf_r>
 8008262:	89a0      	ldrh	r0, [r4, #12]
 8008264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008268:	f010 0301 	ands.w	r3, r0, #1
 800826c:	d00a      	beq.n	8008284 <__swsetup_r+0xbc>
 800826e:	2300      	movs	r3, #0
 8008270:	60a3      	str	r3, [r4, #8]
 8008272:	6963      	ldr	r3, [r4, #20]
 8008274:	425b      	negs	r3, r3
 8008276:	61a3      	str	r3, [r4, #24]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	b943      	cbnz	r3, 800828e <__swsetup_r+0xc6>
 800827c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008280:	d1ba      	bne.n	80081f8 <__swsetup_r+0x30>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	0781      	lsls	r1, r0, #30
 8008286:	bf58      	it	pl
 8008288:	6963      	ldrpl	r3, [r4, #20]
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	e7f4      	b.n	8008278 <__swsetup_r+0xb0>
 800828e:	2000      	movs	r0, #0
 8008290:	e7f7      	b.n	8008282 <__swsetup_r+0xba>
 8008292:	bf00      	nop
 8008294:	20000008 	.word	0x20000008
 8008298:	08009204 	.word	0x08009204
 800829c:	08009224 	.word	0x08009224
 80082a0:	080091e4 	.word	0x080091e4

080082a4 <abort>:
 80082a4:	b508      	push	{r3, lr}
 80082a6:	2006      	movs	r0, #6
 80082a8:	f000 faa0 	bl	80087ec <raise>
 80082ac:	2001      	movs	r0, #1
 80082ae:	f000 fb21 	bl	80088f4 <_exit>
	...

080082b4 <_close_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_close_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f000 fad2 	bl	8008868 <_close>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_close_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_close_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20011008 	.word	0x20011008

080082d4 <__sflush_r>:
 80082d4:	898a      	ldrh	r2, [r1, #12]
 80082d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	4605      	mov	r5, r0
 80082dc:	0710      	lsls	r0, r2, #28
 80082de:	460c      	mov	r4, r1
 80082e0:	d458      	bmi.n	8008394 <__sflush_r+0xc0>
 80082e2:	684b      	ldr	r3, [r1, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dc05      	bgt.n	80082f4 <__sflush_r+0x20>
 80082e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dc02      	bgt.n	80082f4 <__sflush_r+0x20>
 80082ee:	2000      	movs	r0, #0
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d0f9      	beq.n	80082ee <__sflush_r+0x1a>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008300:	682f      	ldr	r7, [r5, #0]
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	d032      	beq.n	800836c <__sflush_r+0x98>
 8008306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	075a      	lsls	r2, r3, #29
 800830c:	d505      	bpl.n	800831a <__sflush_r+0x46>
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	1ac0      	subs	r0, r0, r3
 8008312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008314:	b10b      	cbz	r3, 800831a <__sflush_r+0x46>
 8008316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008318:	1ac0      	subs	r0, r0, r3
 800831a:	2300      	movs	r3, #0
 800831c:	4602      	mov	r2, r0
 800831e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008320:	6a21      	ldr	r1, [r4, #32]
 8008322:	4628      	mov	r0, r5
 8008324:	47b0      	blx	r6
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	d106      	bne.n	800833a <__sflush_r+0x66>
 800832c:	6829      	ldr	r1, [r5, #0]
 800832e:	291d      	cmp	r1, #29
 8008330:	d82c      	bhi.n	800838c <__sflush_r+0xb8>
 8008332:	4a2a      	ldr	r2, [pc, #168]	; (80083dc <__sflush_r+0x108>)
 8008334:	40ca      	lsrs	r2, r1
 8008336:	07d6      	lsls	r6, r2, #31
 8008338:	d528      	bpl.n	800838c <__sflush_r+0xb8>
 800833a:	2200      	movs	r2, #0
 800833c:	6062      	str	r2, [r4, #4]
 800833e:	04d9      	lsls	r1, r3, #19
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	d504      	bpl.n	8008350 <__sflush_r+0x7c>
 8008346:	1c42      	adds	r2, r0, #1
 8008348:	d101      	bne.n	800834e <__sflush_r+0x7a>
 800834a:	682b      	ldr	r3, [r5, #0]
 800834c:	b903      	cbnz	r3, 8008350 <__sflush_r+0x7c>
 800834e:	6560      	str	r0, [r4, #84]	; 0x54
 8008350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008352:	602f      	str	r7, [r5, #0]
 8008354:	2900      	cmp	r1, #0
 8008356:	d0ca      	beq.n	80082ee <__sflush_r+0x1a>
 8008358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <__sflush_r+0x92>
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f929 	bl	80085b8 <_free_r>
 8008366:	2000      	movs	r0, #0
 8008368:	6360      	str	r0, [r4, #52]	; 0x34
 800836a:	e7c1      	b.n	80082f0 <__sflush_r+0x1c>
 800836c:	6a21      	ldr	r1, [r4, #32]
 800836e:	2301      	movs	r3, #1
 8008370:	4628      	mov	r0, r5
 8008372:	47b0      	blx	r6
 8008374:	1c41      	adds	r1, r0, #1
 8008376:	d1c7      	bne.n	8008308 <__sflush_r+0x34>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c4      	beq.n	8008308 <__sflush_r+0x34>
 800837e:	2b1d      	cmp	r3, #29
 8008380:	d001      	beq.n	8008386 <__sflush_r+0xb2>
 8008382:	2b16      	cmp	r3, #22
 8008384:	d101      	bne.n	800838a <__sflush_r+0xb6>
 8008386:	602f      	str	r7, [r5, #0]
 8008388:	e7b1      	b.n	80082ee <__sflush_r+0x1a>
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	e7ad      	b.n	80082f0 <__sflush_r+0x1c>
 8008394:	690f      	ldr	r7, [r1, #16]
 8008396:	2f00      	cmp	r7, #0
 8008398:	d0a9      	beq.n	80082ee <__sflush_r+0x1a>
 800839a:	0793      	lsls	r3, r2, #30
 800839c:	680e      	ldr	r6, [r1, #0]
 800839e:	bf08      	it	eq
 80083a0:	694b      	ldreq	r3, [r1, #20]
 80083a2:	600f      	str	r7, [r1, #0]
 80083a4:	bf18      	it	ne
 80083a6:	2300      	movne	r3, #0
 80083a8:	eba6 0807 	sub.w	r8, r6, r7
 80083ac:	608b      	str	r3, [r1, #8]
 80083ae:	f1b8 0f00 	cmp.w	r8, #0
 80083b2:	dd9c      	ble.n	80082ee <__sflush_r+0x1a>
 80083b4:	6a21      	ldr	r1, [r4, #32]
 80083b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083b8:	4643      	mov	r3, r8
 80083ba:	463a      	mov	r2, r7
 80083bc:	4628      	mov	r0, r5
 80083be:	47b0      	blx	r6
 80083c0:	2800      	cmp	r0, #0
 80083c2:	dc06      	bgt.n	80083d2 <__sflush_r+0xfe>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d0:	e78e      	b.n	80082f0 <__sflush_r+0x1c>
 80083d2:	4407      	add	r7, r0
 80083d4:	eba8 0800 	sub.w	r8, r8, r0
 80083d8:	e7e9      	b.n	80083ae <__sflush_r+0xda>
 80083da:	bf00      	nop
 80083dc:	20400001 	.word	0x20400001

080083e0 <_fflush_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	690b      	ldr	r3, [r1, #16]
 80083e4:	4605      	mov	r5, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	b913      	cbnz	r3, 80083f0 <_fflush_r+0x10>
 80083ea:	2500      	movs	r5, #0
 80083ec:	4628      	mov	r0, r5
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	b118      	cbz	r0, 80083fa <_fflush_r+0x1a>
 80083f2:	6983      	ldr	r3, [r0, #24]
 80083f4:	b90b      	cbnz	r3, 80083fa <_fflush_r+0x1a>
 80083f6:	f7ff f80d 	bl	8007414 <__sinit>
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <_fflush_r+0x6c>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d11b      	bne.n	8008438 <_fflush_r+0x58>
 8008400:	686c      	ldr	r4, [r5, #4]
 8008402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0ef      	beq.n	80083ea <_fflush_r+0xa>
 800840a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800840c:	07d0      	lsls	r0, r2, #31
 800840e:	d404      	bmi.n	800841a <_fflush_r+0x3a>
 8008410:	0599      	lsls	r1, r3, #22
 8008412:	d402      	bmi.n	800841a <_fflush_r+0x3a>
 8008414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008416:	f7ff f932 	bl	800767e <__retarget_lock_acquire_recursive>
 800841a:	4628      	mov	r0, r5
 800841c:	4621      	mov	r1, r4
 800841e:	f7ff ff59 	bl	80082d4 <__sflush_r>
 8008422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008424:	07da      	lsls	r2, r3, #31
 8008426:	4605      	mov	r5, r0
 8008428:	d4e0      	bmi.n	80083ec <_fflush_r+0xc>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	059b      	lsls	r3, r3, #22
 800842e:	d4dd      	bmi.n	80083ec <_fflush_r+0xc>
 8008430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008432:	f7ff f925 	bl	8007680 <__retarget_lock_release_recursive>
 8008436:	e7d9      	b.n	80083ec <_fflush_r+0xc>
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <_fflush_r+0x70>)
 800843a:	429c      	cmp	r4, r3
 800843c:	d101      	bne.n	8008442 <_fflush_r+0x62>
 800843e:	68ac      	ldr	r4, [r5, #8]
 8008440:	e7df      	b.n	8008402 <_fflush_r+0x22>
 8008442:	4b04      	ldr	r3, [pc, #16]	; (8008454 <_fflush_r+0x74>)
 8008444:	429c      	cmp	r4, r3
 8008446:	bf08      	it	eq
 8008448:	68ec      	ldreq	r4, [r5, #12]
 800844a:	e7da      	b.n	8008402 <_fflush_r+0x22>
 800844c:	08009204 	.word	0x08009204
 8008450:	08009224 	.word	0x08009224
 8008454:	080091e4 	.word	0x080091e4

08008458 <fflush>:
 8008458:	4601      	mov	r1, r0
 800845a:	b920      	cbnz	r0, 8008466 <fflush+0xe>
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <fflush+0x18>)
 800845e:	4905      	ldr	r1, [pc, #20]	; (8008474 <fflush+0x1c>)
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	f7ff b884 	b.w	800756e <_fwalk_reent>
 8008466:	4b04      	ldr	r3, [pc, #16]	; (8008478 <fflush+0x20>)
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f7ff bfb9 	b.w	80083e0 <_fflush_r>
 800846e:	bf00      	nop
 8008470:	08009244 	.word	0x08009244
 8008474:	080083e1 	.word	0x080083e1
 8008478:	20000008 	.word	0x20000008

0800847c <_gettimeofday_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d07      	ldr	r5, [pc, #28]	; (800849c <_gettimeofday_r+0x20>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	f000 fa05 	bl	8008898 <_gettimeofday>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d102      	bne.n	8008498 <_gettimeofday_r+0x1c>
 8008492:	682b      	ldr	r3, [r5, #0]
 8008494:	b103      	cbz	r3, 8008498 <_gettimeofday_r+0x1c>
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	bd38      	pop	{r3, r4, r5, pc}
 800849a:	bf00      	nop
 800849c:	20011008 	.word	0x20011008

080084a0 <_lseek_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	; (80084c0 <_lseek_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f000 fa0a 	bl	80088c8 <_lseek>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_lseek_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_lseek_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20011008 	.word	0x20011008

080084c4 <__swhatbuf_r>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	460e      	mov	r6, r1
 80084c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084cc:	2900      	cmp	r1, #0
 80084ce:	b096      	sub	sp, #88	; 0x58
 80084d0:	4614      	mov	r4, r2
 80084d2:	461d      	mov	r5, r3
 80084d4:	da08      	bge.n	80084e8 <__swhatbuf_r+0x24>
 80084d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	061a      	lsls	r2, r3, #24
 80084e0:	d410      	bmi.n	8008504 <__swhatbuf_r+0x40>
 80084e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e6:	e00e      	b.n	8008506 <__swhatbuf_r+0x42>
 80084e8:	466a      	mov	r2, sp
 80084ea:	f000 f99b 	bl	8008824 <_fstat_r>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	dbf1      	blt.n	80084d6 <__swhatbuf_r+0x12>
 80084f2:	9a01      	ldr	r2, [sp, #4]
 80084f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084fc:	425a      	negs	r2, r3
 80084fe:	415a      	adcs	r2, r3
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	e7ee      	b.n	80084e2 <__swhatbuf_r+0x1e>
 8008504:	2340      	movs	r3, #64	; 0x40
 8008506:	2000      	movs	r0, #0
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	b016      	add	sp, #88	; 0x58
 800850c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008510 <__smakebuf_r>:
 8008510:	898b      	ldrh	r3, [r1, #12]
 8008512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008514:	079d      	lsls	r5, r3, #30
 8008516:	4606      	mov	r6, r0
 8008518:	460c      	mov	r4, r1
 800851a:	d507      	bpl.n	800852c <__smakebuf_r+0x1c>
 800851c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	2301      	movs	r3, #1
 8008526:	6163      	str	r3, [r4, #20]
 8008528:	b002      	add	sp, #8
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	ab01      	add	r3, sp, #4
 800852e:	466a      	mov	r2, sp
 8008530:	f7ff ffc8 	bl	80084c4 <__swhatbuf_r>
 8008534:	9900      	ldr	r1, [sp, #0]
 8008536:	4605      	mov	r5, r0
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff f8d9 	bl	80076f0 <_malloc_r>
 800853e:	b948      	cbnz	r0, 8008554 <__smakebuf_r+0x44>
 8008540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008544:	059a      	lsls	r2, r3, #22
 8008546:	d4ef      	bmi.n	8008528 <__smakebuf_r+0x18>
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	e7e3      	b.n	800851c <__smakebuf_r+0xc>
 8008554:	4b0d      	ldr	r3, [pc, #52]	; (800858c <__smakebuf_r+0x7c>)
 8008556:	62b3      	str	r3, [r6, #40]	; 0x28
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	6020      	str	r0, [r4, #0]
 800855c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	9b00      	ldr	r3, [sp, #0]
 8008564:	6163      	str	r3, [r4, #20]
 8008566:	9b01      	ldr	r3, [sp, #4]
 8008568:	6120      	str	r0, [r4, #16]
 800856a:	b15b      	cbz	r3, 8008584 <__smakebuf_r+0x74>
 800856c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008570:	4630      	mov	r0, r6
 8008572:	f000 f969 	bl	8008848 <_isatty_r>
 8008576:	b128      	cbz	r0, 8008584 <__smakebuf_r+0x74>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	89a0      	ldrh	r0, [r4, #12]
 8008586:	4305      	orrs	r5, r0
 8008588:	81a5      	strh	r5, [r4, #12]
 800858a:	e7cd      	b.n	8008528 <__smakebuf_r+0x18>
 800858c:	080073ad 	.word	0x080073ad

08008590 <malloc>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <malloc+0xc>)
 8008592:	4601      	mov	r1, r0
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f7ff b8ab 	b.w	80076f0 <_malloc_r>
 800859a:	bf00      	nop
 800859c:	20000008 	.word	0x20000008

080085a0 <__malloc_lock>:
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <__malloc_lock+0x8>)
 80085a2:	f7ff b86c 	b.w	800767e <__retarget_lock_acquire_recursive>
 80085a6:	bf00      	nop
 80085a8:	20010ffc 	.word	0x20010ffc

080085ac <__malloc_unlock>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__malloc_unlock+0x8>)
 80085ae:	f7ff b867 	b.w	8007680 <__retarget_lock_release_recursive>
 80085b2:	bf00      	nop
 80085b4:	20010ffc 	.word	0x20010ffc

080085b8 <_free_r>:
 80085b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d044      	beq.n	8008648 <_free_r+0x90>
 80085be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085c2:	9001      	str	r0, [sp, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f1a1 0404 	sub.w	r4, r1, #4
 80085ca:	bfb8      	it	lt
 80085cc:	18e4      	addlt	r4, r4, r3
 80085ce:	f7ff ffe7 	bl	80085a0 <__malloc_lock>
 80085d2:	4a1e      	ldr	r2, [pc, #120]	; (800864c <_free_r+0x94>)
 80085d4:	9801      	ldr	r0, [sp, #4]
 80085d6:	6813      	ldr	r3, [r2, #0]
 80085d8:	b933      	cbnz	r3, 80085e8 <_free_r+0x30>
 80085da:	6063      	str	r3, [r4, #4]
 80085dc:	6014      	str	r4, [r2, #0]
 80085de:	b003      	add	sp, #12
 80085e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085e4:	f7ff bfe2 	b.w	80085ac <__malloc_unlock>
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d908      	bls.n	80085fe <_free_r+0x46>
 80085ec:	6825      	ldr	r5, [r4, #0]
 80085ee:	1961      	adds	r1, r4, r5
 80085f0:	428b      	cmp	r3, r1
 80085f2:	bf01      	itttt	eq
 80085f4:	6819      	ldreq	r1, [r3, #0]
 80085f6:	685b      	ldreq	r3, [r3, #4]
 80085f8:	1949      	addeq	r1, r1, r5
 80085fa:	6021      	streq	r1, [r4, #0]
 80085fc:	e7ed      	b.n	80085da <_free_r+0x22>
 80085fe:	461a      	mov	r2, r3
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	b10b      	cbz	r3, 8008608 <_free_r+0x50>
 8008604:	42a3      	cmp	r3, r4
 8008606:	d9fa      	bls.n	80085fe <_free_r+0x46>
 8008608:	6811      	ldr	r1, [r2, #0]
 800860a:	1855      	adds	r5, r2, r1
 800860c:	42a5      	cmp	r5, r4
 800860e:	d10b      	bne.n	8008628 <_free_r+0x70>
 8008610:	6824      	ldr	r4, [r4, #0]
 8008612:	4421      	add	r1, r4
 8008614:	1854      	adds	r4, r2, r1
 8008616:	42a3      	cmp	r3, r4
 8008618:	6011      	str	r1, [r2, #0]
 800861a:	d1e0      	bne.n	80085de <_free_r+0x26>
 800861c:	681c      	ldr	r4, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	6053      	str	r3, [r2, #4]
 8008622:	4421      	add	r1, r4
 8008624:	6011      	str	r1, [r2, #0]
 8008626:	e7da      	b.n	80085de <_free_r+0x26>
 8008628:	d902      	bls.n	8008630 <_free_r+0x78>
 800862a:	230c      	movs	r3, #12
 800862c:	6003      	str	r3, [r0, #0]
 800862e:	e7d6      	b.n	80085de <_free_r+0x26>
 8008630:	6825      	ldr	r5, [r4, #0]
 8008632:	1961      	adds	r1, r4, r5
 8008634:	428b      	cmp	r3, r1
 8008636:	bf04      	itt	eq
 8008638:	6819      	ldreq	r1, [r3, #0]
 800863a:	685b      	ldreq	r3, [r3, #4]
 800863c:	6063      	str	r3, [r4, #4]
 800863e:	bf04      	itt	eq
 8008640:	1949      	addeq	r1, r1, r5
 8008642:	6021      	streq	r1, [r4, #0]
 8008644:	6054      	str	r4, [r2, #4]
 8008646:	e7ca      	b.n	80085de <_free_r+0x26>
 8008648:	b003      	add	sp, #12
 800864a:	bd30      	pop	{r4, r5, pc}
 800864c:	20011000 	.word	0x20011000

08008650 <_read_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_read_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7fb fff0 	bl	8004644 <_read>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_read_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_read_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20011008 	.word	0x20011008

08008674 <lflush>:
 8008674:	8983      	ldrh	r3, [r0, #12]
 8008676:	f003 0309 	and.w	r3, r3, #9
 800867a:	2b09      	cmp	r3, #9
 800867c:	d101      	bne.n	8008682 <lflush+0xe>
 800867e:	f7ff beeb 	b.w	8008458 <fflush>
 8008682:	2000      	movs	r0, #0
 8008684:	4770      	bx	lr
	...

08008688 <__srefill_r>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	460c      	mov	r4, r1
 800868c:	4605      	mov	r5, r0
 800868e:	b118      	cbz	r0, 8008698 <__srefill_r+0x10>
 8008690:	6983      	ldr	r3, [r0, #24]
 8008692:	b90b      	cbnz	r3, 8008698 <__srefill_r+0x10>
 8008694:	f7fe febe 	bl	8007414 <__sinit>
 8008698:	4b3b      	ldr	r3, [pc, #236]	; (8008788 <__srefill_r+0x100>)
 800869a:	429c      	cmp	r4, r3
 800869c:	d10a      	bne.n	80086b4 <__srefill_r+0x2c>
 800869e:	686c      	ldr	r4, [r5, #4]
 80086a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086a4:	2300      	movs	r3, #0
 80086a6:	6063      	str	r3, [r4, #4]
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	069e      	lsls	r6, r3, #26
 80086ac:	d50c      	bpl.n	80086c8 <__srefill_r+0x40>
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b2:	e066      	b.n	8008782 <__srefill_r+0xfa>
 80086b4:	4b35      	ldr	r3, [pc, #212]	; (800878c <__srefill_r+0x104>)
 80086b6:	429c      	cmp	r4, r3
 80086b8:	d101      	bne.n	80086be <__srefill_r+0x36>
 80086ba:	68ac      	ldr	r4, [r5, #8]
 80086bc:	e7f0      	b.n	80086a0 <__srefill_r+0x18>
 80086be:	4b34      	ldr	r3, [pc, #208]	; (8008790 <__srefill_r+0x108>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	bf08      	it	eq
 80086c4:	68ec      	ldreq	r4, [r5, #12]
 80086c6:	e7eb      	b.n	80086a0 <__srefill_r+0x18>
 80086c8:	0758      	lsls	r0, r3, #29
 80086ca:	d448      	bmi.n	800875e <__srefill_r+0xd6>
 80086cc:	06d9      	lsls	r1, r3, #27
 80086ce:	d405      	bmi.n	80086dc <__srefill_r+0x54>
 80086d0:	2309      	movs	r3, #9
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	e7e8      	b.n	80086ae <__srefill_r+0x26>
 80086dc:	071a      	lsls	r2, r3, #28
 80086de:	d50b      	bpl.n	80086f8 <__srefill_r+0x70>
 80086e0:	4621      	mov	r1, r4
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7ff fe7c 	bl	80083e0 <_fflush_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1e0      	bne.n	80086ae <__srefill_r+0x26>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	60a0      	str	r0, [r4, #8]
 80086f0:	f023 0308 	bic.w	r3, r3, #8
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	61a0      	str	r0, [r4, #24]
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f043 0304 	orr.w	r3, r3, #4
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	b91b      	cbnz	r3, 800870c <__srefill_r+0x84>
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f7ff ff02 	bl	8008510 <__smakebuf_r>
 800870c:	89a6      	ldrh	r6, [r4, #12]
 800870e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008712:	07b3      	lsls	r3, r6, #30
 8008714:	d00f      	beq.n	8008736 <__srefill_r+0xae>
 8008716:	2301      	movs	r3, #1
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <__srefill_r+0x10c>)
 800871c:	491e      	ldr	r1, [pc, #120]	; (8008798 <__srefill_r+0x110>)
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	f006 0609 	and.w	r6, r6, #9
 8008724:	f7fe ff06 	bl	8007534 <_fwalk>
 8008728:	2e09      	cmp	r6, #9
 800872a:	81a7      	strh	r7, [r4, #12]
 800872c:	d103      	bne.n	8008736 <__srefill_r+0xae>
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f7ff fdcf 	bl	80082d4 <__sflush_r>
 8008736:	6922      	ldr	r2, [r4, #16]
 8008738:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800873a:	6963      	ldr	r3, [r4, #20]
 800873c:	6a21      	ldr	r1, [r4, #32]
 800873e:	6022      	str	r2, [r4, #0]
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	2800      	cmp	r0, #0
 8008746:	6060      	str	r0, [r4, #4]
 8008748:	dc1c      	bgt.n	8008784 <__srefill_r+0xfc>
 800874a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874e:	bf17      	itett	ne
 8008750:	2200      	movne	r2, #0
 8008752:	f043 0320 	orreq.w	r3, r3, #32
 8008756:	6062      	strne	r2, [r4, #4]
 8008758:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800875c:	e7bc      	b.n	80086d8 <__srefill_r+0x50>
 800875e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008760:	2900      	cmp	r1, #0
 8008762:	d0cd      	beq.n	8008700 <__srefill_r+0x78>
 8008764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008768:	4299      	cmp	r1, r3
 800876a:	d002      	beq.n	8008772 <__srefill_r+0xea>
 800876c:	4628      	mov	r0, r5
 800876e:	f7ff ff23 	bl	80085b8 <_free_r>
 8008772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008774:	6063      	str	r3, [r4, #4]
 8008776:	2000      	movs	r0, #0
 8008778:	6360      	str	r0, [r4, #52]	; 0x34
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0c0      	beq.n	8008700 <__srefill_r+0x78>
 800877e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008784:	2000      	movs	r0, #0
 8008786:	e7fc      	b.n	8008782 <__srefill_r+0xfa>
 8008788:	08009204 	.word	0x08009204
 800878c:	08009224 	.word	0x08009224
 8008790:	080091e4 	.word	0x080091e4
 8008794:	08009244 	.word	0x08009244
 8008798:	08008675 	.word	0x08008675

0800879c <_raise_r>:
 800879c:	291f      	cmp	r1, #31
 800879e:	b538      	push	{r3, r4, r5, lr}
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	d904      	bls.n	80087b0 <_raise_r+0x14>
 80087a6:	2316      	movs	r3, #22
 80087a8:	6003      	str	r3, [r0, #0]
 80087aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087b2:	b112      	cbz	r2, 80087ba <_raise_r+0x1e>
 80087b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087b8:	b94b      	cbnz	r3, 80087ce <_raise_r+0x32>
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 f830 	bl	8008820 <_getpid_r>
 80087c0:	462a      	mov	r2, r5
 80087c2:	4601      	mov	r1, r0
 80087c4:	4620      	mov	r0, r4
 80087c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ca:	f000 b817 	b.w	80087fc <_kill_r>
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d00a      	beq.n	80087e8 <_raise_r+0x4c>
 80087d2:	1c59      	adds	r1, r3, #1
 80087d4:	d103      	bne.n	80087de <_raise_r+0x42>
 80087d6:	2316      	movs	r3, #22
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	2001      	movs	r0, #1
 80087dc:	e7e7      	b.n	80087ae <_raise_r+0x12>
 80087de:	2400      	movs	r4, #0
 80087e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087e4:	4628      	mov	r0, r5
 80087e6:	4798      	blx	r3
 80087e8:	2000      	movs	r0, #0
 80087ea:	e7e0      	b.n	80087ae <_raise_r+0x12>

080087ec <raise>:
 80087ec:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <raise+0xc>)
 80087ee:	4601      	mov	r1, r0
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	f7ff bfd3 	b.w	800879c <_raise_r>
 80087f6:	bf00      	nop
 80087f8:	20000008 	.word	0x20000008

080087fc <_kill_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d07      	ldr	r5, [pc, #28]	; (800881c <_kill_r+0x20>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	f000 f855 	bl	80088b8 <_kill>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d102      	bne.n	8008818 <_kill_r+0x1c>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	b103      	cbz	r3, 8008818 <_kill_r+0x1c>
 8008816:	6023      	str	r3, [r4, #0]
 8008818:	bd38      	pop	{r3, r4, r5, pc}
 800881a:	bf00      	nop
 800881c:	20011008 	.word	0x20011008

08008820 <_getpid_r>:
 8008820:	f000 b832 	b.w	8008888 <_getpid>

08008824 <_fstat_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d07      	ldr	r5, [pc, #28]	; (8008844 <_fstat_r+0x20>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	4611      	mov	r1, r2
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	f000 f821 	bl	8008878 <_fstat>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d102      	bne.n	8008840 <_fstat_r+0x1c>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	b103      	cbz	r3, 8008840 <_fstat_r+0x1c>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	20011008 	.word	0x20011008

08008848 <_isatty_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_isatty_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f000 f828 	bl	80088a8 <_isatty>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_isatty_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_isatty_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20011008 	.word	0x20011008

08008868 <_close>:
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <_close+0xc>)
 800886a:	2258      	movs	r2, #88	; 0x58
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008872:	4770      	bx	lr
 8008874:	20011008 	.word	0x20011008

08008878 <_fstat>:
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <_fstat+0xc>)
 800887a:	2258      	movs	r2, #88	; 0x58
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008882:	4770      	bx	lr
 8008884:	20011008 	.word	0x20011008

08008888 <_getpid>:
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <_getpid+0xc>)
 800888a:	2258      	movs	r2, #88	; 0x58
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008892:	4770      	bx	lr
 8008894:	20011008 	.word	0x20011008

08008898 <_gettimeofday>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <_gettimeofday+0xc>)
 800889a:	2258      	movs	r2, #88	; 0x58
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a2:	4770      	bx	lr
 80088a4:	20011008 	.word	0x20011008

080088a8 <_isatty>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <_isatty+0xc>)
 80088aa:	2258      	movs	r2, #88	; 0x58
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	2000      	movs	r0, #0
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20011008 	.word	0x20011008

080088b8 <_kill>:
 80088b8:	4b02      	ldr	r3, [pc, #8]	; (80088c4 <_kill+0xc>)
 80088ba:	2258      	movs	r2, #88	; 0x58
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c2:	4770      	bx	lr
 80088c4:	20011008 	.word	0x20011008

080088c8 <_lseek>:
 80088c8:	4b02      	ldr	r3, [pc, #8]	; (80088d4 <_lseek+0xc>)
 80088ca:	2258      	movs	r2, #88	; 0x58
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088d2:	4770      	bx	lr
 80088d4:	20011008 	.word	0x20011008

080088d8 <_sbrk>:
 80088d8:	4a04      	ldr	r2, [pc, #16]	; (80088ec <_sbrk+0x14>)
 80088da:	4905      	ldr	r1, [pc, #20]	; (80088f0 <_sbrk+0x18>)
 80088dc:	6813      	ldr	r3, [r2, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf08      	it	eq
 80088e2:	460b      	moveq	r3, r1
 80088e4:	4418      	add	r0, r3
 80088e6:	6010      	str	r0, [r2, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	4770      	bx	lr
 80088ec:	2001100c 	.word	0x2001100c
 80088f0:	20011010 	.word	0x20011010

080088f4 <_exit>:
 80088f4:	e7fe      	b.n	80088f4 <_exit>
 80088f6:	bf00      	nop
 80088f8:	00000020 	.word	0x00000020
	...
 8008904:	00000002 	.word	0x00000002
	...
 8008910:	00000020 	.word	0x00000020
 8008914:	00000064 	.word	0x00000064
 8008918:	00000020 	.word	0x00000020
 800891c:	00000020 	.word	0x00000020
 8008920:	00000020 	.word	0x00000020
 8008924:	00000000 	.word	0x00000000
 8008928:	00000200 	.word	0x00000200
 800892c:	00000000 	.word	0x00000000
 8008930:	74617453 	.word	0x74617453
 8008934:	00203a65 	.word	0x00203a65
 8008938:	454c4449 	.word	0x454c4449
 800893c:	00000000 	.word	0x00000000
 8008940:	4f434552 	.word	0x4f434552
 8008944:	00004452 	.word	0x00004452
 8008948:	59414c50 	.word	0x59414c50
 800894c:	00000000 	.word	0x00000000
 8008950:	504f5453 	.word	0x504f5453
 8008954:	00000000 	.word	0x00000000
 8008958:	45564153 	.word	0x45564153
 800895c:	00000000 	.word	0x00000000
 8008960:	53415245 	.word	0x53415245
 8008964:	00000045 	.word	0x00000045
 8008968:	49474542 	.word	0x49474542
 800896c:	52575f4e 	.word	0x52575f4e
 8008970:	00455449 	.word	0x00455449
 8008974:	54495257 	.word	0x54495257
 8008978:	00000045 	.word	0x00000045
 800897c:	4d4d4f43 	.word	0x4d4d4f43
 8008980:	00005449 	.word	0x00005449
 8008984:	4e415453 	.word	0x4e415453
 8008988:	00594244 	.word	0x00594244
 800898c:	656c6449 	.word	0x656c6449
 8008990:	6d697420 	.word	0x6d697420
 8008994:	74756f65 	.word	0x74756f65
 8008998:	70786520 	.word	0x70786520
 800899c:	64657269 	.word	0x64657269
 80089a0:	00000000 	.word	0x00000000
 80089a4:	74736574 	.word	0x74736574
 80089a8:	00000000 	.word	0x00000000
 80089ac:	6b6361ff 	.word	0x6b6361ff
 80089b0:	00000000 	.word	0x00000000
 80089b4:	0a7325ff 	.word	0x0a7325ff
 80089b8:	00000000 	.word	0x00000000
 80089bc:	73617245 	.word	0x73617245
 80089c0:	20676e69 	.word	0x20676e69
 80089c4:	65766173 	.word	0x65766173
 80089c8:	74616420 	.word	0x74616420
 80089cc:	2e2e2e61 	.word	0x2e2e2e61
 80089d0:	00000020 	.word	0x00000020
 80089d4:	656e6f64 	.word	0x656e6f64
 80089d8:	00000000 	.word	0x00000000

080089dc <recorder::SynthEngine::kDiatonicRatios>:
 80089dc:	3f800000 3f8facc5 3fa1450f 3faadc0a     ...?...?.E.?...?
 80089ec:	3fbfc89f 3fd744e5 3ff1a1cb 40000000     ...?.D.?...?...@

080089fc <recorder::FormantFilter::vowelData>:
 80089fc:	43870000 450f2000 453c2000 40900000     ...C. .E. <E...@
 8008a0c:	41cb851f 41a08f5c 44048000 44e74000     ...A\..A...D.@.D
 8008a1c:	451c4000 410d47ae 41a47ae1 41855c29     .@.E.G.A.z.A)\.A
 8008a2c:	44368000 44884000 45188000 4142b852     ..6D.@.D...ER.BA
 8008a3c:	4141c28f 418228f6 440e8000 44520000     ..AA.(.A...D..RD
 8008a4c:	4516a000 41180000 411547ae 41808f5c     ...E...A.G.A\..A
 8008a5c:	43960000 44598000 450c0000 40a00000     ...C..YD...E...@
 8008a6c:	411ab852 416ee148 43e10000 44820000     R..AH.nA...C...D
 8008a7c:	450c0000 40f00000 4138f5c3 416ee148     ...E...@..8AH.nA
	...
 8008a98:	3f800000 3f800000 3f800000 00000000     ...?...?...?....
	...
 8008ab0:	3f800000 3f800000 3f800000 00000000     ...?...?...?....
	...
 8008ac8:	3f800000 3f800000 3f800000 00000000     ...?...?...?....
	...
 8008ae0:	3f800000 3f800000 3f800000              ...?...?...?

08008aec <recorder::Adc::PotFilter::kPotCorrection>:
 8008aec:	00000000 3c805439 3d00a626 3d41709b     ....9T.<&..=.pA=
 8008afc:	3d8142f1 3da1f120 3dc2c0f0 3de3b06c     .B.= ..=...=l..=
 8008b0c:	3e025ec9 3e12f32c 3e239452 3e34412e     .^.>,..>R.#>.A4>
 8008b1c:	3e44f8aa 3e55b9af 3e668323 3e7753e8     ..D>..U>#.f>.Sw>
 8008b2c:	3e84156f 3e8c8371 3e94f36b 3e9d64c9     o..>q..>k..>.d.>
 8008b3c:	3ea5d6fa 3eae496d 3eb6bb8f 3ebf2cd1     ...>mI.>...>.,.>
 8008b4c:	3ec79ca3 3ed00a76 3ed875bd 3ee0dded     ...>v..>.u.>...>
 8008b5c:	3ee9427b 3ef1a2e0 3ef9fe97 3f012a8f     {B.>...>...>.*.?
 8008b6c:	3f0552f9 3f09784b 3f0d9a49 3f11b8b5     .R.?Kx.?I..?...?
 8008b7c:	3f15d358 3f19e9f6 3f1dfc5b 3f220a51     X..?...?[..?Q."?
 8008b8c:	3f2613a4 3f2a1825 3f2e17a2 3f3211ef     ..&?%.*?...?..2?
 8008b9c:	3f3606e0 3f39f64c 3f3de00a 3f41c3f6     ..6?L.9?..=?..A?
 8008bac:	3f45a1ea 3f4979c6 3f4d4b69 3f5116b5     ..E?.yI?iKM?..Q?
 8008bbc:	3f54db8e 3f5899da 3f5c5180 3f600268     ..T?..X?.Q\?h.`?
 8008bcc:	3f63ac7f 3f674fb1 3f6aebed 3f6e8121     ..c?.Og?..j?!.n?
 8008bdc:	3f720f41 3f75963e 3f79160e 3f7c8ea7     A.r?>.u?..y?..|?
 8008bec:	3f800000                                ...?

08008bf0 <recorder::kADCRegRank>:
 8008bf0:	00000006 0000000c 00000012 00000018     ................
 8008c00:	00000100 00000106 0000010c 00000112     ................
 8008c10:	00000118 00000200 00000206 0000020c     ................
 8008c20:	00000212 00000218 00000300 00000306     ................

08008c30 <recorder::kPotChannels>:
 8008c30:	0c900008 2a000400 1d500080 10c00010     .......*..P.....
 8008c40:	32601000 36902000 4b840000 47520000     ..`2. .6...K..RG
 8008c50:	6e717269 203d3e20 4d6e6f4e 616b7361     irqn >= NonMaska
 8008c60:	49656c62 495f746e 006e5152 64696f76     bleInt_IRQn.void
 8008c70:	63657220 6564726f 693a3a72 3a3a7172      recorder::irq::
 8008c80:	69676552 72657473 646e6148 2872656c     RegisterHandler(
 8008c90:	6e515249 7079545f 72202c65 726f6365     IRQn_Type, recor
 8008ca0:	3a726564 7172693a 65563a3a 726f7463     der::irq::Vector
 8008cb0:	00000029 76697264 2f737265 2e717269     )...drivers/irq.
 8008cc0:	00707063 65637865 6f697470 756e5f6e     cpp.exception_nu
 8008cd0:	203c206d 6d754e6b 74636556 0073726f     m < kNumVectors.
 8008ce0:	6e717269 203d3e20 00000030 64696f76     irqn >= 0...void
 8008cf0:	63657220 6564726f 693a3a72 3a3a7172      recorder::irq::
 8008d00:	62616e45 4928656c 5f6e5152 65707954     Enable(IRQn_Type
 8008d10:	00000029 65736552 6f732074 65637275     )...Reset source
 8008d20:	73617720 00000020 00524f50 5453524e      was ...POR.NRST
 8008d30:	00000000 00524f42 00544653 00555043     ....BOR.SFT.CPU.
 8008d40:	47445757 00000031 47445749 00000031     WWDG1...IWDG1...
 8008d50:	454b4157 00000000 5257504c 00000000     WAKE....LPWR....
 8008d60:	6e6b6e75 3a6e776f 25783020 586c3830     unknown: 0x%08lX
 8008d70:	0000000a 656b6157 65207075 746e6576     ....Wakeup event
 8008d80:	73617720 63657220 2064726f 74747562      was record butt
 8008d90:	00006e6f 656b6157 65207075 746e6576     on..Wakeup event
 8008da0:	73617720 616c7020 75622079 6e6f7474      was play button
 8008db0:	00000000                                ....

08008db4 <D1CorePrescTable>:
 8008db4:	00000000 04030201 04030201 09080706     ................

08008dc4 <LL_DMA_STR_OFFSET_TAB>:
 8008dc4:	58402810 b8a08870                       .(@Xp...

08008dcc <LL_RCC_PrescTable>:
 8008dcc:	00000000 04030201 04030201 09080706     ................

08008ddc <USART_PRESCALER_TAB>:
 8008ddc:	00020001 00060004 000a0008 0010000c     ................
 8008dec:	00400020 01000080 00000000               .@.........

08008df8 <__exp2f_data>:
 8008df8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 8008e08:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 8008e18:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 8008e28:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 8008e38:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 8008e48:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 8008e58:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 8008e68:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 8008e78:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 8008e88:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 8008e98:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 8008ea8:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 8008eb8:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 8008ec8:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 8008ed8:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 8008ee8:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 8008ef8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 8008f08:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 8008f18:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 8008f28:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 8008f38:	ff0c52d6 3f962e42                       .R..B..?

08008f40 <__inv_pio4>:
 8008f40:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 8008f50:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 8008f60:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 8008f70:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 8008f80:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 8008f90:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

08008fa0 <__sincosf_table>:
 8008fa0:	00000000 3ff00000 00000000 bff00000     .......?........
 8008fb0:	00000000 bff00000 00000000 3ff00000     ...............?
 8008fc0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 8008fd0:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 8008fe0:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 8008ff0:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 8009000:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 8009010:	00000000 3ff00000 00000000 bff00000     .......?........
 8009020:	00000000 bff00000 00000000 3ff00000     ...............?
 8009030:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 8009040:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 8009050:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 8009060:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 8009070:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

08009080 <Zero>:
 8009080:	00000000 80000000                       ........

08009088 <__logf_data>:
 8009088:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 8009098:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 80090a8:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 80090b8:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 80090c8:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 80090d8:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 80090e8:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 80090f8:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 8009108:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 8009118:	00000000 3ff00000 00000000 00000000     .......?........
 8009128:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 8009138:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 8009148:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 8009158:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 8009168:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 8009178:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 8009188:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 8009198:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......
 80091a8:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
 80091b8:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
 80091c8:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
 80091d8:	20656e69 73256425 000a7325              ine %d%s%s..

080091e4 <__sf_fake_stderr>:
	...

08009204 <__sf_fake_stdin>:
	...

08009224 <__sf_fake_stdout>:
	...

08009244 <_global_impure_ptr>:
 8009244:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
 8009254:	47464567 32313000 36353433 41393837     gEFG.0123456789A
 8009264:	45444342 31300046 35343332 39383736     BCDEF.0123456789
 8009274:	64636261 52006665 544e4545 6c616d20     abcdef.REENT mal
 8009284:	20636f6c 63637573 65646565 742f0064     loc succeeded./t
 8009294:	6a2f706d 696b6e65 472d736e 312d4343     mp/jenkins-GCC-1
 80092a4:	69702d30 696c6570 332d656e 325f3833     0-pipeline-338_2
 80092b4:	31313230 5f383130 34333631 31363135     0211018_16345161
 80092c4:	732f3539 6e2f6372 696c7765 656e2f62     95/src/newlib/ne
 80092d4:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
 80092e4:	6e61722f 00632e64                       /rand.c.

080092ec <_init>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr

080092f8 <_fini>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr
